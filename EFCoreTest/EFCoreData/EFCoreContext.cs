using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace EFCoreData
{
    public partial class EFCoreContext : DbContext
    {
        public virtual DbSet<AccumConfig> AccumConfig { get; set; }
        public virtual DbSet<AchHistory> AchHistory { get; set; }
        public virtual DbSet<AchHistoryCashedCheck> AchHistoryCashedCheck { get; set; }
        public virtual DbSet<AchRecv> AchRecv { get; set; }
        public virtual DbSet<AchReturnCode> AchReturnCode { get; set; }
        public virtual DbSet<AchSent> AchSent { get; set; }
        public virtual DbSet<Achack> Achack { get; set; }
        public virtual DbSet<Achbank> Achbank { get; set; }
        public virtual DbSet<AchbankConfig> AchbankConfig { get; set; }
        public virtual DbSet<AchbankConfigException> AchbankConfigException { get; set; }
        public virtual DbSet<AchbatchHeader> AchbatchHeader { get; set; }
        public virtual DbSet<Achdetail> Achdetail { get; set; }
        public virtual DbSet<AchdetailAddendum> AchdetailAddendum { get; set; }
        public virtual DbSet<Achpending> Achpending { get; set; }
        public virtual DbSet<Achpresentment> Achpresentment { get; set; }
        public virtual DbSet<AchpresentmentType> AchpresentmentType { get; set; }
        public virtual DbSet<AchprocessingQueue> AchprocessingQueue { get; set; }
        public virtual DbSet<AchprocessingType> AchprocessingType { get; set; }
        public virtual DbSet<Achqueue> Achqueue { get; set; }
        public virtual DbSet<Achreason> Achreason { get; set; }
        public virtual DbSet<AchsentParent> AchsentParent { get; set; }
        public virtual DbSet<AdAstraWebInventory> AdAstraWebInventory { get; set; }
        public virtual DbSet<AgentAction> AgentAction { get; set; }
        public virtual DbSet<AgentResult> AgentResult { get; set; }
        public virtual DbSet<AlternateLender> AlternateLender { get; set; }
        public virtual DbSet<AmladditionalParty> AmladditionalParty { get; set; }
        public virtual DbSet<AmlfileLog> AmlfileLog { get; set; }
        public virtual DbSet<AmlforeignAddress> AmlforeignAddress { get; set; }
        public virtual DbSet<Amloccupation> Amloccupation { get; set; }
        public virtual DbSet<AmlthresholdRule> AmlthresholdRule { get; set; }
        public virtual DbSet<AmlthresholdRuleTransXref> AmlthresholdRuleTransXref { get; set; }
        public virtual DbSet<ApiApplication> ApiApplication { get; set; }
        public virtual DbSet<AppConfig> AppConfig { get; set; }
        public virtual DbSet<AppSetting> AppSetting { get; set; }
        public virtual DbSet<AppValue> AppValue { get; set; }
        public virtual DbSet<AreaCode> AreaCode { get; set; }
        public virtual DbSet<Attorney> Attorney { get; set; }
        public virtual DbSet<AttorneyLoan> AttorneyLoan { get; set; }
        public virtual DbSet<AttorneyPayment> AttorneyPayment { get; set; }
        public virtual DbSet<AuddisadviceReport> AuddisadviceReport { get; set; }
        public virtual DbSet<AuddisreasonCodeMapping> AuddisreasonCodeMapping { get; set; }
        public virtual DbSet<AutoBankingReport> AutoBankingReport { get; set; }
        public virtual DbSet<AutoReport> AutoReport { get; set; }
        public virtual DbSet<AutoReportEmail> AutoReportEmail { get; set; }
        public virtual DbSet<AutoReportRunSchedule> AutoReportRunSchedule { get; set; }
        public virtual DbSet<AutoReportSchedule> AutoReportSchedule { get; set; }
        public virtual DbSet<AutoReportTab> AutoReportTab { get; set; }
        public virtual DbSet<BalSheet2> BalSheet2 { get; set; }
        public virtual DbSet<BalSheetColumns2> BalSheetColumns2 { get; set; }
        public virtual DbSet<BalSheetTransDetail> BalSheetTransDetail { get; set; }
        public virtual DbSet<BankClassification> BankClassification { get; set; }
        public virtual DbSet<BankClassificationType> BankClassificationType { get; set; }
        public virtual DbSet<BankStatus> BankStatus { get; set; }
        public virtual DbSet<Banks> Banks { get; set; }
        public virtual DbSet<BanksParent> BanksParent { get; set; }
        public virtual DbSet<BillPayBiller> BillPayBiller { get; set; }
        public virtual DbSet<BillPayVendor> BillPayVendor { get; set; }
        public virtual DbSet<BillerOcrregion> BillerOcrregion { get; set; }
        public virtual DbSet<BlockMailing> BlockMailing { get; set; }
        public virtual DbSet<BlockReason> BlockReason { get; set; }
        public virtual DbSet<BlockedAddress> BlockedAddress { get; set; }
        public virtual DbSet<BusinessLoan> BusinessLoan { get; set; }
        public virtual DbSet<Cablender> Cablender { get; set; }
        public virtual DbSet<CapsCctxref> CapsCctxref { get; set; }
        public virtual DbSet<CapsHold> CapsHold { get; set; }
        public virtual DbSet<CapsRun> CapsRun { get; set; }
        public virtual DbSet<CapsRunStatus> CapsRunStatus { get; set; }
        public virtual DbSet<CapsSkipReason> CapsSkipReason { get; set; }
        public virtual DbSet<CapsUpdates> CapsUpdates { get; set; }
        public virtual DbSet<CardBatchSettle> CardBatchSettle { get; set; }
        public virtual DbSet<CashMoneyToCuroXref> CashMoneyToCuroXref { get; set; }
        public virtual DbSet<CashedCheck> CashedCheck { get; set; }
        public virtual DbSet<CashedCheckImage> CashedCheckImage { get; set; }
        public virtual DbSet<CashedCheckMicr> CashedCheckMicr { get; set; }
        public virtual DbSet<CashedCheckPayment> CashedCheckPayment { get; set; }
        public virtual DbSet<CashedCheckPaymentRefund> CashedCheckPaymentRefund { get; set; }
        public virtual DbSet<CashedCheckPaymentRefundXref> CashedCheckPaymentRefundXref { get; set; }
        public virtual DbSet<CcStatus> CcStatus { get; set; }
        public virtual DbSet<CcardResponse> CcardResponse { get; set; }
        public virtual DbSet<CcardResponses> CcardResponses { get; set; }
        public virtual DbSet<Certificate> Certificate { get; set; }
        public virtual DbSet<CheckAgain> CheckAgain { get; set; }
        public virtual DbSet<CheckAgainHistory> CheckAgainHistory { get; set; }
        public virtual DbSet<CheckPaymentType> CheckPaymentType { get; set; }
        public virtual DbSet<CheckReturn> CheckReturn { get; set; }
        public virtual DbSet<CheckType> CheckType { get; set; }
        public virtual DbSet<ChkType> ChkType { get; set; }
        public virtual DbSet<CollBonusDetail> CollBonusDetail { get; set; }
        public virtual DbSet<CollBonusPtp> CollBonusPtp { get; set; }
        public virtual DbSet<CollBonusTasks> CollBonusTasks { get; set; }
        public virtual DbSet<CollectionAction> CollectionAction { get; set; }
        public virtual DbSet<CollectionAgency> CollectionAgency { get; set; }
        public virtual DbSet<CollectionAgencyPct> CollectionAgencyPct { get; set; }
        public virtual DbSet<CollectionMovement> CollectionMovement { get; set; }
        public virtual DbSet<CollectionNote> CollectionNote { get; set; }
        public virtual DbSet<Company> Company { get; set; }
        public virtual DbSet<CompanyAchbank> CompanyAchbank { get; set; }
        public virtual DbSet<CompanyDetail> CompanyDetail { get; set; }
        public virtual DbSet<CompanyDocumentResource> CompanyDocumentResource { get; set; }
        public virtual DbSet<CompanyExpenseType> CompanyExpenseType { get; set; }
        public virtual DbSet<Country> Country { get; set; }
        public virtual DbSet<CourtesyPayout> CourtesyPayout { get; set; }
        public virtual DbSet<CpiuDetail> CpiuDetail { get; set; }
        public virtual DbSet<CpiuExceptionReport> CpiuExceptionReport { get; set; }
        public virtual DbSet<CpiuMaster> CpiuMaster { get; set; }
        public virtual DbSet<CreditCardAttempts> CreditCardAttempts { get; set; }
        public virtual DbSet<CreditCardBlock> CreditCardBlock { get; set; }
        public virtual DbSet<CreditCardBrand> CreditCardBrand { get; set; }
        public virtual DbSet<CreditCardResultCode> CreditCardResultCode { get; set; }
        public virtual DbSet<CreditCardResultCodeType> CreditCardResultCodeType { get; set; }
        public virtual DbSet<CreditCardTrans> CreditCardTrans { get; set; }
        public virtual DbSet<CreditCardVendor> CreditCardVendor { get; set; }
        public virtual DbSet<CreditCardXref> CreditCardXref { get; set; }
        public virtual DbSet<CreditCards> CreditCards { get; set; }
        public virtual DbSet<CreditCardsEdit> CreditCardsEdit { get; set; }
        public virtual DbSet<CreditRptPrint> CreditRptPrint { get; set; }
        public virtual DbSet<CreditVendor> CreditVendor { get; set; }
        public virtual DbSet<CreditVendorData> CreditVendorData { get; set; }
        public virtual DbSet<CuroHelp> CuroHelp { get; set; }
        public virtual DbSet<Currency> Currency { get; set; }
        public virtual DbSet<CurrencyExchangeConfig> CurrencyExchangeConfig { get; set; }
        public virtual DbSet<CurrencyExchangeTrans> CurrencyExchangeTrans { get; set; }
        public virtual DbSet<Customer> Customer { get; set; }
        public virtual DbSet<CustomerActivity> CustomerActivity { get; set; }
        public virtual DbSet<CustomerAddress> CustomerAddress { get; set; }
        public virtual DbSet<CustomerAddressEdit> CustomerAddressEdit { get; set; }
        public virtual DbSet<CustomerAppDate> CustomerAppDate { get; set; }
        public virtual DbSet<CustomerBusiness> CustomerBusiness { get; set; }
        public virtual DbSet<CustomerCreditRpt> CustomerCreditRpt { get; set; }
        public virtual DbSet<CustomerCreditRptDetail> CustomerCreditRptDetail { get; set; }
        public virtual DbSet<CustomerDocument> CustomerDocument { get; set; }
        public virtual DbSet<CustomerEarnedCredit> CustomerEarnedCredit { get; set; }
        public virtual DbSet<CustomerEdit> CustomerEdit { get; set; }
        public virtual DbSet<CustomerEmployer> CustomerEmployer { get; set; }
        public virtual DbSet<CustomerEmployerEdit> CustomerEmployerEdit { get; set; }
        public virtual DbSet<CustomerExpense> CustomerExpense { get; set; }
        public virtual DbSet<CustomerExpenseDetail> CustomerExpenseDetail { get; set; }
        public virtual DbSet<CustomerFeedback> CustomerFeedback { get; set; }
        public virtual DbSet<CustomerFeedbackCategory> CustomerFeedbackCategory { get; set; }
        public virtual DbSet<CustomerFeedbackResolution> CustomerFeedbackResolution { get; set; }
        public virtual DbSet<CustomerFeedbackType> CustomerFeedbackType { get; set; }
        public virtual DbSet<CustomerFeedbackTypeCategoryXref> CustomerFeedbackTypeCategoryXref { get; set; }
        public virtual DbSet<CustomerFlash> CustomerFlash { get; set; }
        public virtual DbSet<CustomerFlashOrrebates> CustomerFlashOrrebates { get; set; }
        public virtual DbSet<CustomerFlashQuestions> CustomerFlashQuestions { get; set; }
        public virtual DbSet<CustomerFlashResponse> CustomerFlashResponse { get; set; }
        public virtual DbSet<CustomerIdentification> CustomerIdentification { get; set; }
        public virtual DbSet<CustomerIdentificationEdit> CustomerIdentificationEdit { get; set; }
        public virtual DbSet<CustomerIncome> CustomerIncome { get; set; }
        public virtual DbSet<CustomerLastCreditReport> CustomerLastCreditReport { get; set; }
        public virtual DbSet<CustomerLead> CustomerLead { get; set; }
        public virtual DbSet<CustomerLeadAction> CustomerLeadAction { get; set; }
        public virtual DbSet<CustomerLeadActivity> CustomerLeadActivity { get; set; }
        public virtual DbSet<CustomerLeadLocation> CustomerLeadLocation { get; set; }
        public virtual DbSet<CustomerLeadNote> CustomerLeadNote { get; set; }
        public virtual DbSet<CustomerLeadReason> CustomerLeadReason { get; set; }
        public virtual DbSet<CustomerLeadStatus> CustomerLeadStatus { get; set; }
        public virtual DbSet<CustomerLeadStatusReason> CustomerLeadStatusReason { get; set; }
        public virtual DbSet<CustomerMergeHistory> CustomerMergeHistory { get; set; }
        public virtual DbSet<CustomerNote> CustomerNote { get; set; }
        public virtual DbSet<CustomerPhoneNumber> CustomerPhoneNumber { get; set; }
        public virtual DbSet<CustomerPhoneNumberEdit> CustomerPhoneNumberEdit { get; set; }
        public virtual DbSet<CustomerResponse> CustomerResponse { get; set; }
        public virtual DbSet<CustomerSdncert> CustomerSdncert { get; set; }
        public virtual DbSet<CustomerSurvey> CustomerSurvey { get; set; }
        public virtual DbSet<DbaIndexDefragLog> DbaIndexDefragLog { get; set; }
        public virtual DbSet<DcardChargeBackXref> DcardChargeBackXref { get; set; }
        public virtual DbSet<Ddi> Ddi { get; set; }
        public virtual DbSet<Ddiachhistory> Ddiachhistory { get; set; }
        public virtual DbSet<DdieditHistory> DdieditHistory { get; set; }
        public virtual DbSet<Ddisend> Ddisend { get; set; }
        public virtual DbSet<DdisendDetail> DdisendDetail { get; set; }
        public virtual DbSet<DdisendQueue> DdisendQueue { get; set; }
        public virtual DbSet<Ddistatus> Ddistatus { get; set; }
        public virtual DbSet<Denomination> Denomination { get; set; }
        public virtual DbSet<DepositBag> DepositBag { get; set; }
        public virtual DbSet<DepositBagDetail> DepositBagDetail { get; set; }
        public virtual DbSet<DepositChk> DepositChk { get; set; }
        public virtual DbSet<DepositChkDetail> DepositChkDetail { get; set; }
        public virtual DbSet<DepositDebitCard> DepositDebitCard { get; set; }
        public virtual DbSet<DepositDebitCardDetail> DepositDebitCardDetail { get; set; }
        public virtual DbSet<DialerJob> DialerJob { get; set; }
        public virtual DbSet<DialerKeys> DialerKeys { get; set; }
        public virtual DbSet<DialerResultCodes> DialerResultCodes { get; set; }
        public virtual DbSet<DirtyDataGroup> DirtyDataGroup { get; set; }
        public virtual DbSet<DirtyDataJob> DirtyDataJob { get; set; }
        public virtual DbSet<DirtyDataJobRun> DirtyDataJobRun { get; set; }
        public virtual DbSet<DiscountLocations> DiscountLocations { get; set; }
        public virtual DbSet<DiscountMaster> DiscountMaster { get; set; }
        public virtual DbSet<DiscountMasterLoanProduct> DiscountMasterLoanProduct { get; set; }
        public virtual DbSet<DiscountSecurity> DiscountSecurity { get; set; }
        public virtual DbSet<DiscountType> DiscountType { get; set; }
        public virtual DbSet<DiscountUsed> DiscountUsed { get; set; }
        public virtual DbSet<District> District { get; set; }
        public virtual DbSet<Dma> Dma { get; set; }
        public virtual DbSet<Doc10000Trans> Doc10000Trans { get; set; }
        public virtual DbSet<Doc10000TransDetail> Doc10000TransDetail { get; set; }
        public virtual DbSet<DocImage> DocImage { get; set; }
        public virtual DbSet<DocPrint> DocPrint { get; set; }
        public virtual DbSet<DocTemplate> DocTemplate { get; set; }
        public virtual DbSet<DocumentPrinting> DocumentPrinting { get; set; }
        public virtual DbSet<DocumentResource> DocumentResource { get; set; }
        public virtual DbSet<DocumentSigningStatus> DocumentSigningStatus { get; set; }
        public virtual DbSet<DocuwareCabinet> DocuwareCabinet { get; set; }
        public virtual DbSet<DocuwareLoanLkup> DocuwareLoanLkup { get; set; }
        public virtual DbSet<DocuwareStatus> DocuwareStatus { get; set; }
        public virtual DbSet<DrawerMaster> DrawerMaster { get; set; }
        public virtual DbSet<DrawerMasterParsedCash> DrawerMasterParsedCash { get; set; }
        public virtual DbSet<DrawerService> DrawerService { get; set; }
        public virtual DbSet<DrawerX> DrawerX { get; set; }
        public virtual DbSet<DrawerXservice> DrawerXservice { get; set; }
        public virtual DbSet<DrawerZ> DrawerZ { get; set; }
        public virtual DbSet<DrawerZcash> DrawerZcash { get; set; }
        public virtual DbSet<DrawerZservice> DrawerZservice { get; set; }
        public virtual DbSet<DualApprovalMessage> DualApprovalMessage { get; set; }
        public virtual DbSet<EarnedCreditTrans> EarnedCreditTrans { get; set; }
        public virtual DbSet<EarnedCreditType> EarnedCreditType { get; set; }
        public virtual DbSet<EmailDisposition> EmailDisposition { get; set; }
        public virtual DbSet<EmailTemplate> EmailTemplate { get; set; }
        public virtual DbSet<EndOfDayInventoryDetail> EndOfDayInventoryDetail { get; set; }
        public virtual DbSet<EndOfDayRpt> EndOfDayRpt { get; set; }
        public virtual DbSet<EndOfDayRptDetail> EndOfDayRptDetail { get; set; }
        public virtual DbSet<EoscarBatch> EoscarBatch { get; set; }
        public virtual DbSet<EoscarBatchDetail> EoscarBatchDetail { get; set; }
        public virtual DbSet<EoscarDetailDisputeCode> EoscarDetailDisputeCode { get; set; }
        public virtual DbSet<EoscarDisputeCode> EoscarDisputeCode { get; set; }
        public virtual DbSet<ErrorLog> ErrorLog { get; set; }
        public virtual DbSet<ErrorLogBase> ErrorLogBase { get; set; }
        public virtual DbSet<EsignLoan> EsignLoan { get; set; }
        public virtual DbSet<EsignLoanStatus> EsignLoanStatus { get; set; }
        public virtual DbSet<EsignOptIn> EsignOptIn { get; set; }
        public virtual DbSet<EsignOptInDoc> EsignOptInDoc { get; set; }
        public virtual DbSet<ExchangeRate> ExchangeRate { get; set; }
        public virtual DbSet<ExchangeRateDaily> ExchangeRateDaily { get; set; }
        public virtual DbSet<ExcludeFromCapsHistory> ExcludeFromCapsHistory { get; set; }
        public virtual DbSet<ExpenseType> ExpenseType { get; set; }
        public virtual DbSet<ExperianCardValidation> ExperianCardValidation { get; set; }
        public virtual DbSet<ExternalAppConfig> ExternalAppConfig { get; set; }
        public virtual DbSet<ExternalAppMaster> ExternalAppMaster { get; set; }
        public virtual DbSet<ExternalAppRunDates> ExternalAppRunDates { get; set; }
        public virtual DbSet<ExternalApps> ExternalApps { get; set; }
        public virtual DbSet<FcrmAmlCheckTypeXref> FcrmAmlCheckTypeXref { get; set; }
        public virtual DbSet<FcrmAmlServiceXref> FcrmAmlServiceXref { get; set; }
        public virtual DbSet<FcrmAmlTransCode> FcrmAmlTransCode { get; set; }
        public virtual DbSet<FcrmAmlTransCodeXref> FcrmAmlTransCodeXref { get; set; }
        public virtual DbSet<ForceApprovalQuestion> ForceApprovalQuestion { get; set; }
        public virtual DbSet<ForceApprovalValue> ForceApprovalValue { get; set; }
        public virtual DbSet<FormLetter> FormLetter { get; set; }
        public virtual DbSet<FormLetterAfterLetterXref> FormLetterAfterLetterXref { get; set; }
        public virtual DbSet<FormLetterAuditCode> FormLetterAuditCode { get; set; }
        public virtual DbSet<FormLetterBatch> FormLetterBatch { get; set; }
        public virtual DbSet<FormLetterBatchBuildLetterProgress> FormLetterBatchBuildLetterProgress { get; set; }
        public virtual DbSet<FormLetterBatchStatus> FormLetterBatchStatus { get; set; }
        public virtual DbSet<FormLetterBatchValidation> FormLetterBatchValidation { get; set; }
        public virtual DbSet<FormLetterBatchVendorFile> FormLetterBatchVendorFile { get; set; }
        public virtual DbSet<FormLetterConfig> FormLetterConfig { get; set; }
        public virtual DbSet<FormLetterEmail> FormLetterEmail { get; set; }
        public virtual DbSet<FormLetterLoanHistoryFile> FormLetterLoanHistoryFile { get; set; }
        public virtual DbSet<FormLetterLoanHistoryState> FormLetterLoanHistoryState { get; set; }
        public virtual DbSet<FormLetterLocation> FormLetterLocation { get; set; }
        public virtual DbSet<FormLetterOnDemand> FormLetterOnDemand { get; set; }
        public virtual DbSet<FormLetterPrinted> FormLetterPrinted { get; set; }
        public virtual DbSet<FormLetterProduct> FormLetterProduct { get; set; }
        public virtual DbSet<FormLetterReplacesXref> FormLetterReplacesXref { get; set; }
        public virtual DbSet<FormLetterResult> FormLetterResult { get; set; }
        public virtual DbSet<FurtherFinanceExecutionLog> FurtherFinanceExecutionLog { get; set; }
        public virtual DbSet<FurtherFinanceExecutionLogDetail> FurtherFinanceExecutionLogDetail { get; set; }
        public virtual DbSet<FurtherFinanceJobType> FurtherFinanceJobType { get; set; }
        public virtual DbSet<FurtherFinanceOutcome> FurtherFinanceOutcome { get; set; }
        public virtual DbSet<FurtherFinanceQuery> FurtherFinanceQuery { get; set; }
        public virtual DbSet<FurtherFinanceResult> FurtherFinanceResult { get; set; }
        public virtual DbSet<FurtherFinanceResultDetail> FurtherFinanceResultDetail { get; set; }
        public virtual DbSet<GalileoResponseCode> GalileoResponseCode { get; set; }
        public virtual DbSet<GiftCard> GiftCard { get; set; }
        public virtual DbSet<Glacct> Glacct { get; set; }
        public virtual DbSet<GlacctGlobal> GlacctGlobal { get; set; }
        public virtual DbSet<GlacctGroup> GlacctGroup { get; set; }
        public virtual DbSet<Global> Global { get; set; }
        public virtual DbSet<GlobalStates> GlobalStates { get; set; }
        public virtual DbSet<GoldConfig> GoldConfig { get; set; }
        public virtual DbSet<GoldConfigItem> GoldConfigItem { get; set; }
        public virtual DbSet<GoldDailyBag> GoldDailyBag { get; set; }
        public virtual DbSet<GoldDailyBagDetail> GoldDailyBagDetail { get; set; }
        public virtual DbSet<GoldItem> GoldItem { get; set; }
        public virtual DbSet<GoldTrans> GoldTrans { get; set; }
        public virtual DbSet<GoldTransCustomer> GoldTransCustomer { get; set; }
        public virtual DbSet<GoldTransDetail> GoldTransDetail { get; set; }
        public virtual DbSet<GoldTransStoneDetail> GoldTransStoneDetail { get; set; }
        public virtual DbSet<GoldTransfer> GoldTransfer { get; set; }
        public virtual DbSet<GoldTransferDetail> GoldTransferDetail { get; set; }
        public virtual DbSet<GoodCustomerStudy> GoodCustomerStudy { get; set; }
        public virtual DbSet<IatDialerResults> IatDialerResults { get; set; }
        public virtual DbSet<IdentificationType> IdentificationType { get; set; }
        public virtual DbSet<IdentificationTypeAml> IdentificationTypeAml { get; set; }
        public virtual DbSet<IdentificationTypeRule> IdentificationTypeRule { get; set; }
        public virtual DbSet<IdentificationTypeRuleXref> IdentificationTypeRuleXref { get; set; }
        public virtual DbSet<IdentificationTypeState> IdentificationTypeState { get; set; }
        public virtual DbSet<IdentificationTypeVerify> IdentificationTypeVerify { get; set; }
        public virtual DbSet<Iinrange> Iinrange { get; set; }
        public virtual DbSet<ImageCashLetter> ImageCashLetter { get; set; }
        public virtual DbSet<ImageCashLetterBundle> ImageCashLetterBundle { get; set; }
        public virtual DbSet<ImageCashLetterDetail> ImageCashLetterDetail { get; set; }
        public virtual DbSet<IncomeJobType> IncomeJobType { get; set; }
        public virtual DbSet<IncomeSource> IncomeSource { get; set; }
        public virtual DbSet<IncomeType> IncomeType { get; set; }
        public virtual DbSet<IncomeTypeLocation> IncomeTypeLocation { get; set; }
        public virtual DbSet<IncomeVerificationMessage> IncomeVerificationMessage { get; set; }
        public virtual DbSet<IncomeVerifyMethod> IncomeVerifyMethod { get; set; }
        public virtual DbSet<IncomeVerifyMethodLocation> IncomeVerifyMethodLocation { get; set; }
        public virtual DbSet<InitGllist> InitGllist { get; set; }
        public virtual DbSet<InsuranceClaim> InsuranceClaim { get; set; }
        public virtual DbSet<InsuranceClaimEdit> InsuranceClaimEdit { get; set; }
        public virtual DbSet<InsuranceClaimStatus> InsuranceClaimStatus { get; set; }
        public virtual DbSet<InsurancePayment> InsurancePayment { get; set; }
        public virtual DbSet<InsurancePaymentBatch> InsurancePaymentBatch { get; set; }
        public virtual DbSet<InsuranceStatus> InsuranceStatus { get; set; }
        public virtual DbSet<InternalProcessEmail> InternalProcessEmail { get; set; }
        public virtual DbSet<InvalidCustomerAddress> InvalidCustomerAddress { get; set; }
        public virtual DbSet<IpToCountry> IpToCountry { get; set; }
        public virtual DbSet<Ipblock> Ipblock { get; set; }
        public virtual DbSet<Issuer> Issuer { get; set; }
        public virtual DbSet<IssuerEdit> IssuerEdit { get; set; }
        public virtual DbSet<LegalVerification> LegalVerification { get; set; }
        public virtual DbSet<Lender> Lender { get; set; }
        public virtual DbSet<LienHolder> LienHolder { get; set; }
        public virtual DbSet<Loan> Loan { get; set; }
        public virtual DbSet<LoanApplication> LoanApplication { get; set; }
        public virtual DbSet<LoanApplicationAddress> LoanApplicationAddress { get; set; }
        public virtual DbSet<LoanApplicationAffordSurveyToBeDeleted> LoanApplicationAffordSurveyToBeDeleted { get; set; }
        public virtual DbSet<LoanApplicationEmployer> LoanApplicationEmployer { get; set; }
        public virtual DbSet<LoanApplicationExpense> LoanApplicationExpense { get; set; }
        public virtual DbSet<LoanApplicationExpenseDetail> LoanApplicationExpenseDetail { get; set; }
        public virtual DbSet<LoanApplicationIncome> LoanApplicationIncome { get; set; }
        public virtual DbSet<LoanApplicationProduct> LoanApplicationProduct { get; set; }
        public virtual DbSet<LoanApplicationVehicleInformation> LoanApplicationVehicleInformation { get; set; }
        public virtual DbSet<LoanCcallChange> LoanCcallChange { get; set; }
        public virtual DbSet<LoanCheck> LoanCheck { get; set; }
        public virtual DbSet<LoanChkAcctChange> LoanChkAcctChange { get; set; }
        public virtual DbSet<LoanCoPledger> LoanCoPledger { get; set; }
        public virtual DbSet<LoanConfigApplyPaymentOrder> LoanConfigApplyPaymentOrder { get; set; }
        public virtual DbSet<LoanCreditLimit> LoanCreditLimit { get; set; }
        public virtual DbSet<LoanDepositOrderHistory> LoanDepositOrderHistory { get; set; }
        public virtual DbSet<LoanDepositOrderResetReason> LoanDepositOrderResetReason { get; set; }
        public virtual DbSet<LoanDoc> LoanDoc { get; set; }
        public virtual DbSet<LoanDocPrinted> LoanDocPrinted { get; set; }
        public virtual DbSet<LoanDocType> LoanDocType { get; set; }
        public virtual DbSet<LoanDocUpload> LoanDocUpload { get; set; }
        public virtual DbSet<LoanDocUsed> LoanDocUsed { get; set; }
        public virtual DbSet<LoanDueDateChange> LoanDueDateChange { get; set; }
        public virtual DbSet<LoanFunding> LoanFunding { get; set; }
        public virtual DbSet<LoanFundingMethodHistory> LoanFundingMethodHistory { get; set; }
        public virtual DbSet<LoanImport> LoanImport { get; set; }
        public virtual DbSet<LoanImportXref> LoanImportXref { get; set; }
        public virtual DbSet<LoanIncome> LoanIncome { get; set; }
        public virtual DbSet<LoanNote> LoanNote { get; set; }
        public virtual DbSet<LoanOverride> LoanOverride { get; set; }
        public virtual DbSet<LoanPayment> LoanPayment { get; set; }
        public virtual DbSet<LoanPaymentAddToQueue> LoanPaymentAddToQueue { get; set; }
        public virtual DbSet<LoanPaymentCheckPaymentTypeXref> LoanPaymentCheckPaymentTypeXref { get; set; }
        public virtual DbSet<LoanPaymentDecreaseAmountOwed> LoanPaymentDecreaseAmountOwed { get; set; }
        public virtual DbSet<LoanPaymentDueDate> LoanPaymentDueDate { get; set; }
        public virtual DbSet<LoanPaymentInsuranceClaimXref> LoanPaymentInsuranceClaimXref { get; set; }
        public virtual DbSet<LoanPaymentLoanCheckXref> LoanPaymentLoanCheckXref { get; set; }
        public virtual DbSet<LoanPaymentMpay> LoanPaymentMpay { get; set; }
        public virtual DbSet<LoanPaymentMpayRefund> LoanPaymentMpayRefund { get; set; }
        public virtual DbSet<LoanPaymentOpenEnd> LoanPaymentOpenEnd { get; set; }
        public virtual DbSet<LoanPaymentOpenEndRefund> LoanPaymentOpenEndRefund { get; set; }
        public virtual DbSet<LoanPaymentRefund> LoanPaymentRefund { get; set; }
        public virtual DbSet<LoanPaymentRefundXref> LoanPaymentRefundXref { get; set; }
        public virtual DbSet<LoanPaymentRescind> LoanPaymentRescind { get; set; }
        public virtual DbSet<LoanPaymentSpay> LoanPaymentSpay { get; set; }
        public virtual DbSet<LoanPaymentSpayRefund> LoanPaymentSpayRefund { get; set; }
        public virtual DbSet<LoanPaymentSuspendInterest> LoanPaymentSuspendInterest { get; set; }
        public virtual DbSet<LoanPaymentWaiveRifee> LoanPaymentWaiveRifee { get; set; }
        public virtual DbSet<LoanProduct> LoanProduct { get; set; }
        public virtual DbSet<LoanProductBlocked> LoanProductBlocked { get; set; }
        public virtual DbSet<LoanProductConfig> LoanProductConfig { get; set; }
        public virtual DbSet<LoanProductConfigApprovalRate> LoanProductConfigApprovalRate { get; set; }
        public virtual DbSet<LoanProductConfigEdit> LoanProductConfigEdit { get; set; }
        public virtual DbSet<LoanProductConfigInsuranceRate> LoanProductConfigInsuranceRate { get; set; }
        public virtual DbSet<LoanProductConfigInterestRate> LoanProductConfigInterestRate { get; set; }
        public virtual DbSet<LoanProductConfigLoanFeeRate> LoanProductConfigLoanFeeRate { get; set; }
        public virtual DbSet<LoanProductConfigLoanStats> LoanProductConfigLoanStats { get; set; }
        public virtual DbSet<LoanProductConfigMaxLoanAmtRate> LoanProductConfigMaxLoanAmtRate { get; set; }
        public virtual DbSet<LoanProductConfigOpenEnd> LoanProductConfigOpenEnd { get; set; }
        public virtual DbSet<LoanProductConfigRirate> LoanProductConfigRirate { get; set; }
        public virtual DbSet<LoanProductConfigTitle> LoanProductConfigTitle { get; set; }
        public virtual DbSet<LoanProductEnableNewLoan> LoanProductEnableNewLoan { get; set; }
        public virtual DbSet<LoanProductFeature> LoanProductFeature { get; set; }
        public virtual DbSet<LoanProductFeatureType> LoanProductFeatureType { get; set; }
        public virtual DbSet<LoanProductRollover> LoanProductRollover { get; set; }
        public virtual DbSet<LoanProductTila> LoanProductTila { get; set; }
        public virtual DbSet<LoanService> LoanService { get; set; }
        public virtual DbSet<LoanStatusChange> LoanStatusChange { get; set; }
        public virtual DbSet<LoanWebReviewTemplateXref> LoanWebReviewTemplateXref { get; set; }
        public virtual DbSet<LocaleSetting> LocaleSetting { get; set; }
        public virtual DbSet<LocaleTranslator> LocaleTranslator { get; set; }
        public virtual DbSet<LocationConverted> LocationConverted { get; set; }
        public virtual DbSet<LocationUsZipcodesXref> LocationUsZipcodesXref { get; set; }
        public virtual DbSet<MarketingInvitation> MarketingInvitation { get; set; }
        public virtual DbSet<MarketingInvitationHistory> MarketingInvitationHistory { get; set; }
        public virtual DbSet<Markets> Markets { get; set; }
        public virtual DbSet<Message> Message { get; set; }
        public virtual DbSet<MessageClass> MessageClass { get; set; }
        public virtual DbSet<MessageClient> MessageClient { get; set; }
        public virtual DbSet<MessageScenario> MessageScenario { get; set; }
        public virtual DbSet<MetroIibaseSegment> MetroIibaseSegment { get; set; }
        public virtual DbSet<MimeType> MimeType { get; set; }
        public virtual DbSet<Mostatus> Mostatus { get; set; }
        public virtual DbSet<MostatusHistory> MostatusHistory { get; set; }
        public virtual DbSet<MpayAmort> MpayAmort { get; set; }
        public virtual DbSet<MpayAmortDueDateChange> MpayAmortDueDateChange { get; set; }
        public virtual DbSet<MpayInterest> MpayInterest { get; set; }
        public virtual DbSet<MpayLoan> MpayLoan { get; set; }
        public virtual DbSet<MpayLoanInSyncAdj> MpayLoanInSyncAdj { get; set; }
        public virtual DbSet<MpayLoanInSyncAdjRows> MpayLoanInSyncAdjRows { get; set; }
        public virtual DbSet<MpayPayInFull> MpayPayInFull { get; set; }
        public virtual DbSet<MpayRecalcInterestAdj> MpayRecalcInterestAdj { get; set; }
        public virtual DbSet<MpayRecalcLoanPaymentAdj> MpayRecalcLoanPaymentAdj { get; set; }
        public virtual DbSet<Msa> Msa { get; set; }
        public virtual DbSet<NetSpendTrans> NetSpendTrans { get; set; }
        public virtual DbSet<NobleConfiguration> NobleConfiguration { get; set; }
        public virtual DbSet<NoteType> NoteType { get; set; }
        public virtual DbSet<Ocrregion> Ocrregion { get; set; }
        public virtual DbSet<Oowsession> Oowsession { get; set; }
        public virtual DbSet<OowsessionAlert> OowsessionAlert { get; set; }
        public virtual DbSet<OowsessionError> OowsessionError { get; set; }
        public virtual DbSet<OowsessionQuestion> OowsessionQuestion { get; set; }
        public virtual DbSet<OpenEndInterest> OpenEndInterest { get; set; }
        public virtual DbSet<OpenEndInterestRate> OpenEndInterestRate { get; set; }
        public virtual DbSet<OpenEndLoan> OpenEndLoan { get; set; }
        public virtual DbSet<OpenEndLoanStatement> OpenEndLoanStatement { get; set; }
        public virtual DbSet<OpenEndLoanStatementSnapshot> OpenEndLoanStatementSnapshot { get; set; }
        public virtual DbSet<OpenEndRecalcInterestAdj> OpenEndRecalcInterestAdj { get; set; }
        public virtual DbSet<OpenEndRecalcLoanPaymentAdj> OpenEndRecalcLoanPaymentAdj { get; set; }
        public virtual DbSet<OpenEndRecalcStatementAdj> OpenEndRecalcStatementAdj { get; set; }
        public virtual DbSet<OpenEndRecalcStatementSnapshot> OpenEndRecalcStatementSnapshot { get; set; }
        public virtual DbSet<OptInOut> OptInOut { get; set; }
        public virtual DbSet<OptInOutEdit> OptInOutEdit { get; set; }
        public virtual DbSet<OptPlusBinProduct> OptPlusBinProduct { get; set; }
        public virtual DbSet<OptPlusBinService> OptPlusBinService { get; set; }
        public virtual DbSet<OptPlusCardDetail> OptPlusCardDetail { get; set; }
        public virtual DbSet<OptPlusCardRipayment> OptPlusCardRipayment { get; set; }
        public virtual DbSet<OptPlusCarrier> OptPlusCarrier { get; set; }
        public virtual DbSet<OptPlusDirectDeposit> OptPlusDirectDeposit { get; set; }
        public virtual DbSet<OptPlusEdit> OptPlusEdit { get; set; }
        public virtual DbSet<OptPlusEmail> OptPlusEmail { get; set; }
        public virtual DbSet<OptPlusEmailLocation> OptPlusEmailLocation { get; set; }
        public virtual DbSet<OptPlusEmployment> OptPlusEmployment { get; set; }
        public virtual DbSet<OptPlusExportInitGl> OptPlusExportInitGl { get; set; }
        public virtual DbSet<OptPlusGlobal> OptPlusGlobal { get; set; }
        public virtual DbSet<OptPlusMerchant> OptPlusMerchant { get; set; }
        public virtual DbSet<OptPlusProduct> OptPlusProduct { get; set; }
        public virtual DbSet<OptPlusRdfaccountCard> OptPlusRdfaccountCard { get; set; }
        public virtual DbSet<OptPlusRdfauthorizedTransactions> OptPlusRdfauthorizedTransactions { get; set; }
        public virtual DbSet<OptPlusRdfcustomerMaster> OptPlusRdfcustomerMaster { get; set; }
        public virtual DbSet<OptPlusRdflookUp> OptPlusRdflookUp { get; set; }
        public virtual DbSet<OptPlusRdfodtransition> OptPlusRdfodtransition { get; set; }
        public virtual DbSet<OptPlusRdfpostedTrans> OptPlusRdfpostedTrans { get; set; }
        public virtual DbSet<OverShort> OverShort { get; set; }
        public virtual DbSet<ParseCash> ParseCash { get; set; }
        public virtual DbSet<PayStub> PayStub { get; set; }
        public virtual DbSet<PaydayLoan> PaydayLoan { get; set; }
        public virtual DbSet<PaydayLoanApproval> PaydayLoanApproval { get; set; }
        public virtual DbSet<PaydayLoanQualification> PaydayLoanQualification { get; set; }
        public virtual DbSet<PaymentPlan> PaymentPlan { get; set; }
        public virtual DbSet<Payroll1> Payroll1 { get; set; }
        public virtual DbSet<PersonTitle> PersonTitle { get; set; }
        public virtual DbSet<PhoneSkillsCall> PhoneSkillsCall { get; set; }
        public virtual DbSet<PhoneSkillsGrade> PhoneSkillsGrade { get; set; }
        public virtual DbSet<PhoneSkillsGrader> PhoneSkillsGrader { get; set; }
        public virtual DbSet<PhoneSkillsReason> PhoneSkillsReason { get; set; }
        public virtual DbSet<PhoneSkillsSequence> PhoneSkillsSequence { get; set; }
        public virtual DbSet<PrepaidCardBin> PrepaidCardBin { get; set; }
        public virtual DbSet<PrepaidCardBinCompany> PrepaidCardBinCompany { get; set; }
        public virtual DbSet<PrepaidCardGroup> PrepaidCardGroup { get; set; }
        public virtual DbSet<PrepaidCardStopPayment> PrepaidCardStopPayment { get; set; }
        public virtual DbSet<PrepaidCardStopPaymentEdit> PrepaidCardStopPaymentEdit { get; set; }
        public virtual DbSet<PrepaidCardStopPaymentReason> PrepaidCardStopPaymentReason { get; set; }
        public virtual DbSet<PrepaidCardTrans> PrepaidCardTrans { get; set; }
        public virtual DbSet<PrepaidCardTransAction> PrepaidCardTransAction { get; set; }
        public virtual DbSet<PrepaidFisaccountBalance> PrepaidFisaccountBalance { get; set; }
        public virtual DbSet<PrepaidFisauthTrans> PrepaidFisauthTrans { get; set; }
        public virtual DbSet<PrepaidFiscustomerMaster> PrepaidFiscustomerMaster { get; set; }
        public virtual DbSet<PrepaidFispostedTrans> PrepaidFispostedTrans { get; set; }
        public virtual DbSet<PrescreenQuestion> PrescreenQuestion { get; set; }
        public virtual DbSet<PrescreenQuestionState> PrescreenQuestionState { get; set; }
        public virtual DbSet<PrescreenQuestionType> PrescreenQuestionType { get; set; }
        public virtual DbSet<Prices> Prices { get; set; }
        public virtual DbSet<ProcessConfig> ProcessConfig { get; set; }
        public virtual DbSet<ProcessConfigDetail> ProcessConfigDetail { get; set; }
        public virtual DbSet<ProcessConfigDetailHistory> ProcessConfigDetailHistory { get; set; }
        public virtual DbSet<ProcessConfigInstance> ProcessConfigInstance { get; set; }
        public virtual DbSet<ProcessConfigInstanceGroup> ProcessConfigInstanceGroup { get; set; }
        public virtual DbSet<ProcessConfigInstanceTeller> ProcessConfigInstanceTeller { get; set; }
        public virtual DbSet<ProcessSchedule> ProcessSchedule { get; set; }
        public virtual DbSet<ProductOpenLoanMatrix> ProductOpenLoanMatrix { get; set; }
        public virtual DbSet<PromiseToPay> PromiseToPay { get; set; }
        public virtual DbSet<PromiseToPayDetail> PromiseToPayDetail { get; set; }
        public virtual DbSet<PromiseToPayDetailEdit> PromiseToPayDetailEdit { get; set; }
        public virtual DbSet<PromiseToPayDetailTrans> PromiseToPayDetailTrans { get; set; }
        public virtual DbSet<PromiseToPayTimeSlotConfig> PromiseToPayTimeSlotConfig { get; set; }
        public virtual DbSet<PurchaseService> PurchaseService { get; set; }
        public virtual DbSet<PushNotification> PushNotification { get; set; }
        public virtual DbSet<RbcEfundBatch> RbcEfundBatch { get; set; }
        public virtual DbSet<RbcEfundBatchDetail> RbcEfundBatchDetail { get; set; }
        public virtual DbSet<RbcEfundBatchSummary> RbcEfundBatchSummary { get; set; }
        public virtual DbSet<RbcEfundResponseCode> RbcEfundResponseCode { get; set; }
        public virtual DbSet<RbcEfundSecurity> RbcEfundSecurity { get; set; }
        public virtual DbSet<ReasonForArrears> ReasonForArrears { get; set; }
        public virtual DbSet<Receipt> Receipt { get; set; }
        public virtual DbSet<RedactedWords> RedactedWords { get; set; }
        public virtual DbSet<ReferralMethod> ReferralMethod { get; set; }
        public virtual DbSet<Region> Region { get; set; }
        public virtual DbSet<Rels> Rels { get; set; }
        public virtual DbSet<RemovedReason> RemovedReason { get; set; }
        public virtual DbSet<RepoCaseHistory> RepoCaseHistory { get; set; }
        public virtual DbSet<ReturnCheckDetail> ReturnCheckDetail { get; set; }
        public virtual DbSet<ReturnCheckFile> ReturnCheckFile { get; set; }
        public virtual DbSet<ReturnCheckMatch> ReturnCheckMatch { get; set; }
        public virtual DbSet<RiBalanceHistory> RiBalanceHistory { get; set; }
        public virtual DbSet<RiUrgentNote> RiUrgentNote { get; set; }
        public virtual DbSet<RiagingHistory> RiagingHistory { get; set; }
        public virtual DbSet<RiccAutoRoll> RiccAutoRoll { get; set; }
        public virtual DbSet<RiccHold> RiccHold { get; set; }
        public virtual DbSet<RiccPayments> RiccPayments { get; set; }
        public virtual DbSet<RiccUpdates> RiccUpdates { get; set; }
        public virtual DbSet<Riccconfig> Riccconfig { get; set; }
        public virtual DbSet<RiptppaymentPlanConfig> RiptppaymentPlanConfig { get; set; }
        public virtual DbSet<Ris> Ris { get; set; }
        public virtual DbSet<RisTask> RisTask { get; set; }
        public virtual DbSet<Risaudit> Risaudit { get; set; }
        public virtual DbSet<Risrept> Risrept { get; set; }
        public virtual DbSet<Ristype> Ristype { get; set; }
        public virtual DbSet<RolloverRequest> RolloverRequest { get; set; }
        public virtual DbSet<RolloverRequestDeclineReason> RolloverRequestDeclineReason { get; set; }
        public virtual DbSet<RolloverRequestStatus> RolloverRequestStatus { get; set; }
        public virtual DbSet<RuleDef> RuleDef { get; set; }
        public virtual DbSet<RuleDefEdit> RuleDefEdit { get; set; }
        public virtual DbSet<RuleDefSet> RuleDefSet { get; set; }
        public virtual DbSet<RuleDefSetDetail> RuleDefSetDetail { get; set; }
        public virtual DbSet<RuleDefSetDetailEdit> RuleDefSetDetailEdit { get; set; }
        public virtual DbSet<RuleDefType> RuleDefType { get; set; }
        public virtual DbSet<ScannedDocument> ScannedDocument { get; set; }
        public virtual DbSet<ScannedDocumentOverride> ScannedDocumentOverride { get; set; }
        public virtual DbSet<SdnMatch> SdnMatch { get; set; }
        public virtual DbSet<Sdnadd> Sdnadd { get; set; }
        public virtual DbSet<Sdnalt> Sdnalt { get; set; }
        public virtual DbSet<Sdnlist> Sdnlist { get; set; }
        public virtual DbSet<Sdnmain> Sdnmain { get; set; }
        public virtual DbSet<SecurityAnswer> SecurityAnswer { get; set; }
        public virtual DbSet<SecurityGroup> SecurityGroup { get; set; }
        public virtual DbSet<SecurityQuestion> SecurityQuestion { get; set; }
        public virtual DbSet<ServiceDetail> ServiceDetail { get; set; }
        public virtual DbSet<ServiceMaster> ServiceMaster { get; set; }
        public virtual DbSet<ServiceSubItem> ServiceSubItem { get; set; }
        public virtual DbSet<ServiceTrans> ServiceTrans { get; set; }
        public virtual DbSet<ServiceTransDetail> ServiceTransDetail { get; set; }
        public virtual DbSet<SgRights> SgRights { get; set; }
        public virtual DbSet<SignatureLoanApproval> SignatureLoanApproval { get; set; }
        public virtual DbSet<SkipTraceConfig> SkipTraceConfig { get; set; }
        public virtual DbSet<SkipTraceEventsNotUsed> SkipTraceEventsNotUsed { get; set; }
        public virtual DbSet<SkipTraceStep> SkipTraceStep { get; set; }
        public virtual DbSet<SkipTraceStepAuditCategory> SkipTraceStepAuditCategory { get; set; }
        public virtual DbSet<SkipTraceStepLocation> SkipTraceStepLocation { get; set; }
        public virtual DbSet<SkipTraceStepProductCode> SkipTraceStepProductCode { get; set; }
        public virtual DbSet<SkipTraceThread> SkipTraceThread { get; set; }
        public virtual DbSet<SkipTraceVendor> SkipTraceVendor { get; set; }
        public virtual DbSet<SmscommandMapping> SmscommandMapping { get; set; }
        public virtual DbSet<SmsfailedSend> SmsfailedSend { get; set; }
        public virtual DbSet<Smsinbound> Smsinbound { get; set; }
        public virtual DbSet<Smsoutbound> Smsoutbound { get; set; }
        public virtual DbSet<SmsoxygenErrorCodes> SmsoxygenErrorCodes { get; set; }
        public virtual DbSet<Smsresponse> Smsresponse { get; set; }
        public virtual DbSet<Smssender> Smssender { get; set; }
        public virtual DbSet<Smstemplate> Smstemplate { get; set; }
        public virtual DbSet<SpayInterest> SpayInterest { get; set; }
        public virtual DbSet<SpayLoan> SpayLoan { get; set; }
        public virtual DbSet<SpayLoanInSyncAdj> SpayLoanInSyncAdj { get; set; }
        public virtual DbSet<SpaySchedRollover> SpaySchedRollover { get; set; }
        public virtual DbSet<SpaySchedRolloverDetail> SpaySchedRolloverDetail { get; set; }
        public virtual DbSet<SpecialMessage> SpecialMessage { get; set; }
        public virtual DbSet<SpecialMessageAzCusts> SpecialMessageAzCusts { get; set; }
        public virtual DbSet<SpecialMessageLoanProduct> SpecialMessageLoanProduct { get; set; }
        public virtual DbSet<SpecialMessageLocation> SpecialMessageLocation { get; set; }
        public virtual DbSet<StoreClosed> StoreClosed { get; set; }
        public virtual DbSet<StoreClosedDetail> StoreClosedDetail { get; set; }
        public virtual DbSet<StoreWindows> StoreWindows { get; set; }
        public virtual DbSet<TaskActionResult> TaskActionResult { get; set; }
        public virtual DbSet<TaskActionResultXref> TaskActionResultXref { get; set; }
        public virtual DbSet<TellerComputer> TellerComputer { get; set; }
        public virtual DbSet<TellerIdedit> TellerIdedit { get; set; }
        public virtual DbSet<TellerLogin> TellerLogin { get; set; }
        public virtual DbSet<TellerParsedCashException> TellerParsedCashException { get; set; }
        public virtual DbSet<TellerPwdHistory> TellerPwdHistory { get; set; }
        public virtual DbSet<TellerSecurity> TellerSecurity { get; set; }
        public virtual DbSet<TellerTitle> TellerTitle { get; set; }
        public virtual DbSet<TellerTitleEdit> TellerTitleEdit { get; set; }
        public virtual DbSet<TellerType> TellerType { get; set; }
        public virtual DbSet<Tellerid> Tellerid { get; set; }
        public virtual DbSet<TempLoanProductSplit> TempLoanProductSplit { get; set; }
        public virtual DbSet<TestCreditCard> TestCreditCard { get; set; }
        public virtual DbSet<TitleLoan> TitleLoan { get; set; }
        public virtual DbSet<TitleLoanApproval> TitleLoanApproval { get; set; }
        public virtual DbSet<TotalDailyFees> TotalDailyFees { get; set; }
        public virtual DbSet<TransDetail> TransDetail { get; set; }
        public virtual DbSet<TransDetailAcct> TransDetailAcct { get; set; }
        public virtual DbSet<TransDetailCash> TransDetailCash { get; set; }
        public virtual DbSet<TransDetailCashParsedCash> TransDetailCashParsedCash { get; set; }
        public virtual DbSet<TransDetailCheck> TransDetailCheck { get; set; }
        public virtual DbSet<TransDetailIntShort> TransDetailIntShort { get; set; }
        public virtual DbSet<TransDetailLoan> TransDetailLoan { get; set; }
        public virtual DbSet<TransDetailService> TransDetailService { get; set; }
        public virtual DbSet<TransPos> TransPos { get; set; }
        public virtual DbSet<TransUnionCodes> TransUnionCodes { get; set; }
        public virtual DbSet<TransferFunds> TransferFunds { get; set; }
        public virtual DbSet<Uddreport> Uddreport { get; set; }
        public virtual DbSet<UddreportDetail> UddreportDetail { get; set; }
        public virtual DbSet<UsStates> UsStates { get; set; }
        public virtual DbSet<UsZipcodes> UsZipcodes { get; set; }
        public virtual DbSet<UtilRecalcLog> UtilRecalcLog { get; set; }
        public virtual DbSet<UtilRecalcLogDetail> UtilRecalcLogDetail { get; set; }
        public virtual DbSet<VaultCount> VaultCount { get; set; }
        public virtual DbSet<VaultCountCalcParsedCash> VaultCountCalcParsedCash { get; set; }
        public virtual DbSet<VaultCountEnteredParsedCash> VaultCountEnteredParsedCash { get; set; }
        public virtual DbSet<VaultCountService> VaultCountService { get; set; }
        public virtual DbSet<VaultMaster> VaultMaster { get; set; }
        public virtual DbSet<VaultMasterParsedCash> VaultMasterParsedCash { get; set; }
        public virtual DbSet<VaultMgrAssignment> VaultMgrAssignment { get; set; }
        public virtual DbSet<VaultMgrAuthorization> VaultMgrAuthorization { get; set; }
        public virtual DbSet<VaultMgrAuthorizationDetail> VaultMgrAuthorizationDetail { get; set; }
        public virtual DbSet<VaultMgrAuthorizationNote> VaultMgrAuthorizationNote { get; set; }
        public virtual DbSet<VaultRecalcAdj> VaultRecalcAdj { get; set; }
        public virtual DbSet<VaultService> VaultService { get; set; }
        public virtual DbSet<Vehicle> Vehicle { get; set; }
        public virtual DbSet<VehicleHistory> VehicleHistory { get; set; }
        public virtual DbSet<VehicleQuote> VehicleQuote { get; set; }
        public virtual DbSet<VeritecLoanId> VeritecLoanId { get; set; }
        public virtual DbSet<Visitor> Visitor { get; set; }
        public virtual DbSet<VisitorApiAuthorization> VisitorApiAuthorization { get; set; }
        public virtual DbSet<VisitorDevice> VisitorDevice { get; set; }
        public virtual DbSet<VisitorEdit> VisitorEdit { get; set; }
        public virtual DbSet<VisitorEmail> VisitorEmail { get; set; }
        public virtual DbSet<VisitorEmailDisposition> VisitorEmailDisposition { get; set; }
        public virtual DbSet<VisitorEmailExcludedSenders> VisitorEmailExcludedSenders { get; set; }
        public virtual DbSet<VisitorHistory> VisitorHistory { get; set; }
        public virtual DbSet<VisitorSecurityQuestion> VisitorSecurityQuestion { get; set; }
        public virtual DbSet<VmatransType> VmatransType { get; set; }
        public virtual DbSet<WebArchive> WebArchive { get; set; }
        public virtual DbSet<WebBlob> WebBlob { get; set; }
        public virtual DbSet<WebBlobLoanApplicationXref> WebBlobLoanApplicationXref { get; set; }
        public virtual DbSet<WebBlobLoanXref> WebBlobLoanXref { get; set; }
        public virtual DbSet<WebBlobType> WebBlobType { get; set; }
        public virtual DbSet<WebBlobVisitorEmailXref> WebBlobVisitorEmailXref { get; set; }
        public virtual DbSet<WebCallApplicationModeAudit> WebCallApplicationModeAudit { get; set; }
        public virtual DbSet<WebCallApplicationModes> WebCallApplicationModes { get; set; }
        public virtual DbSet<WebCallApplicationStatusHistory> WebCallApplicationStatusHistory { get; set; }
        public virtual DbSet<WebCallAuthorizedVisitorContact> WebCallAuthorizedVisitorContact { get; set; }
        public virtual DbSet<WebCallBatchAction> WebCallBatchAction { get; set; }
        public virtual DbSet<WebCallBatchCriteria> WebCallBatchCriteria { get; set; }
        public virtual DbSet<WebCallBatchTask> WebCallBatchTask { get; set; }
        public virtual DbSet<WebCallBatchTaskExecutionHistory> WebCallBatchTaskExecutionHistory { get; set; }
        public virtual DbSet<WebCallCampaign> WebCallCampaign { get; set; }
        public virtual DbSet<WebCallCampaignCategory> WebCallCampaignCategory { get; set; }
        public virtual DbSet<WebCallCatRarrAlias> WebCallCatRarrAlias { get; set; }
        public virtual DbSet<WebCallCategory> WebCallCategory { get; set; }
        public virtual DbSet<WebCallCctimerLog> WebCallCctimerLog { get; set; }
        public virtual DbSet<WebCallCenterLogin> WebCallCenterLogin { get; set; }
        public virtual DbSet<WebCallChatCannedResponses> WebCallChatCannedResponses { get; set; }
        public virtual DbSet<WebCallChatMessage> WebCallChatMessage { get; set; }
        public virtual DbSet<WebCallChatSession> WebCallChatSession { get; set; }
        public virtual DbSet<WebCallChatStatus> WebCallChatStatus { get; set; }
        public virtual DbSet<WebCallChatTopics> WebCallChatTopics { get; set; }
        public virtual DbSet<WebCallChatUser> WebCallChatUser { get; set; }
        public virtual DbSet<WebCallCsrreportColumn> WebCallCsrreportColumn { get; set; }
        public virtual DbSet<WebCallCsrreportColumnRarr> WebCallCsrreportColumnRarr { get; set; }
        public virtual DbSet<WebCallDualAuth> WebCallDualAuth { get; set; }
        public virtual DbSet<WebCallEmailTemplates> WebCallEmailTemplates { get; set; }
        public virtual DbSet<WebCallFaq> WebCallFaq { get; set; }
        public virtual DbSet<WebCallFaqattachment> WebCallFaqattachment { get; set; }
        public virtual DbSet<WebCallFaqcategory> WebCallFaqcategory { get; set; }
        public virtual DbSet<WebCallFeatures> WebCallFeatures { get; set; }
        public virtual DbSet<WebCallIntraChatMessage> WebCallIntraChatMessage { get; set; }
        public virtual DbSet<WebCallIntraChatSession> WebCallIntraChatSession { get; set; }
        public virtual DbSet<WebCallInvalidPhoneNumber> WebCallInvalidPhoneNumber { get; set; }
        public virtual DbSet<WebCallLoanAppSourceApp> WebCallLoanAppSourceApp { get; set; }
        public virtual DbSet<WebCallLoanProductConfig> WebCallLoanProductConfig { get; set; }
        public virtual DbSet<WebCallLoggingCategory> WebCallLoggingCategory { get; set; }
        public virtual DbSet<WebCallLoggingCategoryLog> WebCallLoggingCategoryLog { get; set; }
        public virtual DbSet<WebCallLoggingLog> WebCallLoggingLog { get; set; }
        public virtual DbSet<WebCallOnlineStatusDisplayLookup> WebCallOnlineStatusDisplayLookup { get; set; }
        public virtual DbSet<WebCallQueue> WebCallQueue { get; set; }
        public virtual DbSet<WebCallQueueAudit> WebCallQueueAudit { get; set; }
        public virtual DbSet<WebCallQueueConfiguration> WebCallQueueConfiguration { get; set; }
        public virtual DbSet<WebCallQueueLoanAppAudit> WebCallQueueLoanAppAudit { get; set; }
        public virtual DbSet<WebCallQueueStatus> WebCallQueueStatus { get; set; }
        public virtual DbSet<WebCallQueueType> WebCallQueueType { get; set; }
        public virtual DbSet<WebCallQuickNote> WebCallQuickNote { get; set; }
        public virtual DbSet<WebCallRarr> WebCallRarr { get; set; }
        public virtual DbSet<WebCallRarrGroup> WebCallRarrGroup { get; set; }
        public virtual DbSet<WebCallRarraction> WebCallRarraction { get; set; }
        public virtual DbSet<WebCallRarrcategoryReason> WebCallRarrcategoryReason { get; set; }
        public virtual DbSet<WebCallRarreason> WebCallRarreason { get; set; }
        public virtual DbSet<WebCallRarresult1> WebCallRarresult1 { get; set; }
        public virtual DbSet<WebCallRarresult2> WebCallRarresult2 { get; set; }
        public virtual DbSet<WebCallRarrfeatures> WebCallRarrfeatures { get; set; }
        public virtual DbSet<WebCallRarrhistory> WebCallRarrhistory { get; set; }
        public virtual DbSet<WebCallRecordingArchive> WebCallRecordingArchive { get; set; }
        public virtual DbSet<WebCallTeamUsers> WebCallTeamUsers { get; set; }
        public virtual DbSet<WebCallTeams> WebCallTeams { get; set; }
        public virtual DbSet<WebCallUserSetting> WebCallUserSetting { get; set; }
        public virtual DbSet<WebCallVisitorAlerts> WebCallVisitorAlerts { get; set; }
        public virtual DbSet<WebCallVisitorAlertsAudit> WebCallVisitorAlertsAudit { get; set; }
        public virtual DbSet<WebCallWebEmergencyAlertTemplate> WebCallWebEmergencyAlertTemplate { get; set; }
        public virtual DbSet<WebCallWorkItemCategoryHistory> WebCallWorkItemCategoryHistory { get; set; }
        public virtual DbSet<WebCallWorkQueue> WebCallWorkQueue { get; set; }
        public virtual DbSet<WebDailyReport> WebDailyReport { get; set; }
        public virtual DbSet<WebDailyReportFields> WebDailyReportFields { get; set; }
        public virtual DbSet<WebDailyReportStates> WebDailyReportStates { get; set; }
        public virtual DbSet<WebDialerCallResult> WebDialerCallResult { get; set; }
        public virtual DbSet<WebDialerPhoneLine> WebDialerPhoneLine { get; set; }
        public virtual DbSet<WebDialerResult> WebDialerResult { get; set; }
        public virtual DbSet<WebDialerResultType> WebDialerResultType { get; set; }
        public virtual DbSet<WebDialerStatus> WebDialerStatus { get; set; }
        public virtual DbSet<WebDialerUploadHistory> WebDialerUploadHistory { get; set; }
        public virtual DbSet<WebDialerUser> WebDialerUser { get; set; }
        public virtual DbSet<WebEmailNotes> WebEmailNotes { get; set; }
        public virtual DbSet<WebErrorLog> WebErrorLog { get; set; }
        public virtual DbSet<WebImage> WebImage { get; set; }
        public virtual DbSet<WebLead> WebLead { get; set; }
        public virtual DbSet<WebLeadBuyers> WebLeadBuyers { get; set; }
        public virtual DbSet<WebLeadGen> WebLeadGen { get; set; }
        public virtual DbSet<WebLeadGenAddress> WebLeadGenAddress { get; set; }
        public virtual DbSet<WebLeadGenFields> WebLeadGenFields { get; set; }
        public virtual DbSet<WebLeadGenStatistics> WebLeadGenStatistics { get; set; }
        public virtual DbSet<WebLeadGenTiers> WebLeadGenTiers { get; set; }
        public virtual DbSet<WebLeadGenTranslations> WebLeadGenTranslations { get; set; }
        public virtual DbSet<WebLeadPostData> WebLeadPostData { get; set; }
        public virtual DbSet<WebLeadSale> WebLeadSale { get; set; }
        public virtual DbSet<WebLoanCreditFraud> WebLoanCreditFraud { get; set; }
        public virtual DbSet<WebPixelVendor> WebPixelVendor { get; set; }
        public virtual DbSet<WebPixelVendorData> WebPixelVendorData { get; set; }
        public virtual DbSet<WebPixelVendorDetail> WebPixelVendorDetail { get; set; }
        public virtual DbSet<WebReferralMethod> WebReferralMethod { get; set; }
        public virtual DbSet<WebRemoteControl> WebRemoteControl { get; set; }
        public virtual DbSet<WebReportByApp> WebReportByApp { get; set; }
        public virtual DbSet<WebReportByLoan> WebReportByLoan { get; set; }
        public virtual DbSet<WebReviewTemplate> WebReviewTemplate { get; set; }
        public virtual DbSet<WebSiteEvent> WebSiteEvent { get; set; }
        public virtual DbSet<WebVisit> WebVisit { get; set; }
        public virtual DbSet<WebVisitSource> WebVisitSource { get; set; }
        public virtual DbSet<WebVisitSrcXref> WebVisitSrcXref { get; set; }
        public virtual DbSet<WireTransferFileImport> WireTransferFileImport { get; set; }
        public virtual DbSet<WireTransferMatch> WireTransferMatch { get; set; }
        public virtual DbSet<WireTransferMatchEdit> WireTransferMatchEdit { get; set; }
        public virtual DbSet<Wsconfig> Wsconfig { get; set; }
        public virtual DbSet<Wsoperation> Wsoperation { get; set; }
        public virtual DbSet<Wsresponse> Wsresponse { get; set; }
        public virtual DbSet<ZeroDollarAuth> ZeroDollarAuth { get; set; }
        public virtual DbSet<ZipArea> ZipArea { get; set; }

        // Unable to generate entity type for table 'dbo.tecodes'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CashFlowReport'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CustomerFlashMPayRebates'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.WebAlert'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.RitaPwd'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.WebCallRARRType'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.OEndLoanInSyncAdj'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.OEndVaultTroubleshooting'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CustomerIncomeBackup'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.ACHGroup'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.wucodes'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.wuprstat'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.EmploymentRegions'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.EmploymentRequest'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.LoanProductEnableNewLoanBackup'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.SkipTraceConfig_RisAudit'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.OptPlusExportTransCodes'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.AUDDISAdviceReportDetail'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.TransferFundsInterStore'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.CreditCardResultCodeEdit'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.InternalProcessEmailBody'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.SkipTraceThreadBackUp'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.InternalProcessEmailType'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo._ErrorLogTest'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.PaywareTsysTimezone'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.KBB_Log_Config'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.AACbExportDataArchive'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.MPayIntDupNeg'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.LoanApplicationBU'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.MPayIntDupPos'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.LoanApplicationDiscounts'. Please see the warning messages.

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            #warning To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.
            optionsBuilder.UseSqlServer(@"data source=canlddev23;initial catalog=WinchkCANLDDEV;integrated security=True");
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AccumConfig>(entity =>
            {
                entity.HasKey(e => e.AccumConfigKey)
                    .HasName("PK_AccumMaster");

                entity.Property(e => e.AccumConfigKey).HasColumnName("ACCUM_CONFIG_KEY");

                entity.Property(e => e.AccumCost)
                    .HasColumnName("ACCUM_COST")
                    .HasColumnType("smallmoney")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.AgentActionKeys)
                    .HasColumnName("AGENT_ACTION_KEYS")
                    .HasColumnType("varchar(300)");

                entity.Property(e => e.ExcludeResults)
                    .HasColumnName("EXCLUDE_RESULTS")
                    .HasColumnType("varchar(300)");

                entity.Property(e => e.LongDescr)
                    .HasColumnName("LONG_DESCR")
                    .HasColumnType("varchar(300)");

                entity.Property(e => e.Result1Keys)
                    .HasColumnName("RESULT1_KEYS")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.Result2Keys)
                    .HasColumnName("RESULT2_KEYS")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.ShortDescr)
                    .IsRequired()
                    .HasColumnName("SHORT_DESCR")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.ShowInRi)
                    .HasColumnName("SHOW_IN_RI")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.TaskActionResultKeys)
                    .HasColumnName("TASK_ACTION_RESULT_KEYS")
                    .HasColumnType("varchar(500)");
            });

            modelBuilder.Entity<AchHistory>(entity =>
            {
                entity.HasKey(e => e.AchHistoryKey)
                    .HasName("PK_ACH_History");

                entity.ToTable("ACH_History");

                entity.HasIndex(e => e.AchSentKey)
                    .HasName("IX_ACH_History_ACH_SENT_KEY");

                entity.HasIndex(e => e.RecvLoanPaymentKey)
                    .HasName("IX_ACH_History_RECV_LOAN_PAYMENT_KEY");

                entity.HasIndex(e => e.SendLoanPaymentKey)
                    .HasName("IX_ACH_History_SEND_LOAN_PAYMENT_KEY");

                entity.HasIndex(e => e.StatementId)
                    .HasName("IX_ACH_History_STATEMENT_ID");

                entity.HasIndex(e => new { e.CustomerKey, e.AchResultCode })
                    .HasName("IX_ACH_History_CUSTOMER_KEY_ACH_RESULT_CODE");

                entity.HasIndex(e => new { e.AchHistoryKey, e.AchResultCode, e.AchPresentmentKey })
                    .HasName("IX_ACH_History_ACH_PRESENTMENT_KEY");

                entity.HasIndex(e => new { e.AchHistoryKey, e.LoanKey, e.TransDetailKey })
                    .HasName("IX_ACH_History_TransDetailKey");

                entity.HasIndex(e => new { e.LoanKey, e.AchResultCode, e.IsCredit })
                    .HasName("IX_ACH_History_ACH_RESULT_CODE_IS_CREDIT");

                entity.HasIndex(e => new { e.AchResultCode, e.AchHistoryKey, e.LoanKey, e.AchAmount, e.AchSentKey, e.AchRecvKey })
                    .HasName("IX_ACH_History_ACH_RECV_KEY");

                entity.HasIndex(e => new { e.AchRecvKey, e.DateEntered, e.TransDetailKey, e.AchHistoryKey, e.LoanKey, e.AchAmount, e.AchSentKey, e.AchResultCode })
                    .HasName("IX_ACH_History_ACH_RESULT_CODE");

                entity.HasIndex(e => new { e.ManualTeller, e.LoanKey, e.TransDetailKey, e.AchResultCode, e.AchHistoryKey, e.AchSentKey, e.AchRecvKey, e.DateEntered, e.Location })
                    .HasName("IX_ACH_History_LOAN_KEY_TRANS_DETAIL_KEY");

                entity.Property(e => e.AchHistoryKey).HasColumnName("ACH_HISTORY_KEY");

                entity.Property(e => e.AbaNo)
                    .HasColumnName("ABA_NO")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.AchAmount)
                    .HasColumnName("ACH_AMOUNT")
                    .HasColumnType("money");

                entity.Property(e => e.AchAttempt).HasColumnName("ACH_ATTEMPT");

                entity.Property(e => e.AchPresentmentKey).HasColumnName("ACH_PRESENTMENT_KEY");

                entity.Property(e => e.AchReasonCode).HasColumnName("ACH_REASON_CODE");

                entity.Property(e => e.AchRecvKey).HasColumnName("ACH_RECV_KEY");

                entity.Property(e => e.AchResultCode)
                    .HasColumnName("ACH_RESULT_CODE")
                    .HasColumnType("char(3)");

                entity.Property(e => e.AchSentKey).HasColumnName("ACH_SENT_KEY");

                entity.Property(e => e.BankNo)
                    .HasColumnName("BANK_NO")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.CabInterestDueCap)
                    .HasColumnName("CAB_INTEREST_DUE_CAP")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.FeesAmtForInterestCredit)
                    .HasColumnName("FEES_AMT_FOR_INTEREST_CREDIT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.InterestDueCap)
                    .HasColumnName("INTEREST_DUE_CAP")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.IsAchPaid).HasColumnName("IS_ACH_PAID");

                entity.Property(e => e.IsAdAstra).HasColumnName("IS_AD_ASTRA");

                entity.Property(e => e.IsCredit)
                    .HasColumnName("IS_CREDIT")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Jobid)
                    .HasColumnName("jobid")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.ManualSendDate)
                    .HasColumnName("MANUAL_SEND_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ManualTeller)
                    .HasColumnName("MANUAL_TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.OptplusCardDetailKey).HasColumnName("OPTPLUS_CARD_DETAIL_KEY");

                entity.Property(e => e.PrincAmtForInterestCredit)
                    .HasColumnName("PRINC_AMT_FOR_INTEREST_CREDIT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.ProjSendDate)
                    .HasColumnName("PROJ_SEND_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RecvLoanPaymentKey).HasColumnName("RECV_LOAN_PAYMENT_KEY");

                entity.Property(e => e.RefundLoanPaymentKey).HasColumnName("REFUND_LOAN_PAYMENT_KEY");

                entity.Property(e => e.SchedPayment)
                    .HasColumnName("SCHED_PAYMENT")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.SendLoanPaymentKey).HasColumnName("SEND_LOAN_PAYMENT_KEY");

                entity.Property(e => e.StatementId)
                    .HasColumnName("STATEMENT_ID")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");

                entity.HasOne(d => d.AchReasonCodeNavigation)
                    .WithMany(p => p.AchHistory)
                    .HasForeignKey(d => d.AchReasonCode)
                    .HasConstraintName("FK_ACHHistory_ACH_REASON");

                entity.HasOne(d => d.AchRecvKeyNavigation)
                    .WithMany(p => p.AchHistory)
                    .HasForeignKey(d => d.AchRecvKey)
                    .HasConstraintName("FK_ACHHistory_ACHRecv");

                entity.HasOne(d => d.AchResultCodeNavigation)
                    .WithMany(p => p.AchHistory)
                    .HasPrincipalKey(p => p.AchRetcode)
                    .HasForeignKey(d => d.AchResultCode)
                    .HasConstraintName("FK_ACH_History_ACH_RESULT_CODE");

                entity.HasOne(d => d.AchSentKeyNavigation)
                    .WithMany(p => p.AchHistory)
                    .HasForeignKey(d => d.AchSentKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_ACHHistory_ACHSent");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.AchHistory)
                    .HasForeignKey(d => d.CustomerKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_AchHistory_Customer");

                entity.HasOne(d => d.LocationNavigation)
                    .WithMany(p => p.AchHistory)
                    .HasForeignKey(d => d.Location)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_ACH_History_Company");

                entity.HasOne(d => d.RecvLoanPaymentKeyNavigation)
                    .WithMany(p => p.AchHistoryRecvLoanPaymentKeyNavigation)
                    .HasForeignKey(d => d.RecvLoanPaymentKey)
                    .HasConstraintName("FK_ACH_History_LoanPayment2");

                entity.HasOne(d => d.RefundLoanPaymentKeyNavigation)
                    .WithMany(p => p.AchHistoryRefundLoanPaymentKeyNavigation)
                    .HasForeignKey(d => d.RefundLoanPaymentKey)
                    .HasConstraintName("FK_ACH_History_LoanPayment3");

                entity.HasOne(d => d.SendLoanPaymentKeyNavigation)
                    .WithMany(p => p.AchHistorySendLoanPaymentKeyNavigation)
                    .HasForeignKey(d => d.SendLoanPaymentKey)
                    .HasConstraintName("FK_ACH_History_LoanPayment1");
            });

            modelBuilder.Entity<AchHistoryCashedCheck>(entity =>
            {
                entity.HasKey(e => e.AchHistoryKey)
                    .HasName("PK_ACHHistoryCashedCheck");

                entity.ToTable("ACH_HistoryCashedCheck");

                entity.HasIndex(e => e.CashedCheckKey)
                    .HasName("IX_ACHHistoryCashedCheck_CASHED_CHECK_KEY");

                entity.Property(e => e.AchHistoryKey).HasColumnName("ACH_HISTORY_KEY");

                entity.Property(e => e.AbaNo)
                    .HasColumnName("ABA_NO")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.AchAmount)
                    .HasColumnName("ACH_AMOUNT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.AchAttempt).HasColumnName("ACH_ATTEMPT");

                entity.Property(e => e.AchAttempt2Hist).HasColumnName("ACH_ATTEMPT2_HIST");

                entity.Property(e => e.AchRecvKey).HasColumnName("ACH_RECV_KEY");

                entity.Property(e => e.AchResultCode)
                    .HasColumnName("ACH_RESULT_CODE")
                    .HasColumnType("char(3)");

                entity.Property(e => e.AchSentKey).HasColumnName("ACH_SENT_KEY");

                entity.Property(e => e.BankNo)
                    .HasColumnName("BANK_NO")
                    .HasColumnType("varchar(9)");

                entity.Property(e => e.CashedCheckKey).HasColumnName("CASHED_CHECK_KEY");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.Jobid).HasColumnName("JOBID");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.ManualSendDate)
                    .HasColumnName("MANUAL_SEND_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ManualTeller)
                    .HasColumnName("MANUAL_TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.ProjSendDate)
                    .HasColumnName("PROJ_SEND_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");

                entity.HasOne(d => d.AchRecvKeyNavigation)
                    .WithMany(p => p.AchHistoryCashedCheck)
                    .HasForeignKey(d => d.AchRecvKey)
                    .HasConstraintName("FK_ACHHistoryCashedCheck_ACHRecv");

                entity.HasOne(d => d.AchSentKeyNavigation)
                    .WithMany(p => p.AchHistoryCashedCheck)
                    .HasForeignKey(d => d.AchSentKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_ACHHistoryCashedCheck_ACHSent");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.AchHistoryCashedCheck)
                    .HasForeignKey(d => d.CustomerKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_ACHHistoryCashedCheck_Customer");

                entity.HasOne(d => d.LocationNavigation)
                    .WithMany(p => p.AchHistoryCashedCheck)
                    .HasForeignKey(d => d.Location)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_ACHHistoryCashedCheck_Company");
            });

            modelBuilder.Entity<AchRecv>(entity =>
            {
                entity.HasKey(e => e.AchRecvKey)
                    .HasName("PK_ACHRecv");

                entity.ToTable("ACH_Recv");

                entity.HasIndex(e => new { e.DateRecv, e.AchRecvKey })
                    .HasName("IX_ACH_Recv_ACH_RECV_KEY");

                entity.Property(e => e.AchRecvKey).HasColumnName("ACH_RECV_KEY");

                entity.Property(e => e.Btime)
                    .HasColumnName("BTIME")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DateRecv)
                    .HasColumnName("DATE_RECV")
                    .HasColumnType("datetime");

                entity.Property(e => e.FileNameRecv)
                    .IsRequired()
                    .HasColumnName("FILE_NAME_RECV")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.PaidCount).HasColumnName("PAID_COUNT");

                entity.Property(e => e.PaidTotal)
                    .HasColumnName("PAID_TOTAL")
                    .HasColumnType("money");

                entity.Property(e => e.UnpaidCount).HasColumnName("UNPAID_COUNT");

                entity.Property(e => e.UnpaidTotal)
                    .HasColumnName("UNPAID_TOTAL")
                    .HasColumnType("money");
            });

            modelBuilder.Entity<AchReturnCode>(entity =>
            {
                entity.HasKey(e => e.AchRetcodeKey)
                    .HasName("PK_AchReturnCode");

                entity.ToTable("ACH_ReturnCode");

                entity.HasIndex(e => e.AchRetcode)
                    .HasName("IX_ACH_ReturnCode_ACH_RETCODE")
                    .IsUnique();

                entity.Property(e => e.AchRetcodeKey).HasColumnName("ACH_RETCODE_KEY");

                entity.Property(e => e.AchRetcode)
                    .IsRequired()
                    .HasColumnName("ACH_RETCODE")
                    .HasColumnType("char(3)");

                entity.Property(e => e.RetcodeLong)
                    .HasColumnName("RETCODE_LONG")
                    .HasColumnType("varchar(255)");

                entity.Property(e => e.RetcodeShort)
                    .HasColumnName("RETCODE_SHORT")
                    .HasColumnType("varchar(60)");

                entity.Property(e => e.RisTypeId).HasColumnName("RIS_Type_Id");
            });

            modelBuilder.Entity<AchSent>(entity =>
            {
                entity.HasKey(e => e.AchSentKey)
                    .HasName("PK_ACH_Sent");

                entity.ToTable("ACH_Sent");

                entity.HasIndex(e => e.DateSent)
                    .HasName("IX_AchSent_DATE_SENT");

                entity.HasIndex(e => new { e.FileType, e.AchSentKey })
                    .HasName("IX_ACH_Sent_ACH_SENT_KEY");

                entity.Property(e => e.AchSentKey).HasColumnName("ACH_SENT_KEY");

                entity.Property(e => e.AchRecvKey).HasColumnName("ACH_RECV_KEY");

                entity.Property(e => e.AchSentParentKey).HasColumnName("ACH_SENT_PARENT_KEY");

                entity.Property(e => e.DateSent)
                    .HasColumnName("DATE_SENT")
                    .HasColumnType("datetime");

                entity.Property(e => e.ExpectedResults)
                    .HasColumnName("EXPECTED_RESULTS")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.FileNameSent)
                    .IsRequired()
                    .HasColumnName("FILE_NAME_SENT")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.FileNameUpdated)
                    .IsRequired()
                    .HasColumnName("FILE_NAME_UPDATED")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.FileType)
                    .IsRequired()
                    .HasColumnName("FILE_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.IsAdAstra).HasColumnName("IS_AD_ASTRA");

                entity.Property(e => e.IsDayAfterDueSent).HasColumnName("IS_DAY_AFTER_DUE_SENT");

                entity.Property(e => e.ItemCount).HasColumnName("ITEM_COUNT");

                entity.Property(e => e.ItemTotal)
                    .HasColumnName("ITEM_TOTAL")
                    .HasColumnType("money");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.ScheduledPayments).HasColumnName("SCHEDULED_PAYMENTS");

                entity.HasOne(d => d.AchRecvKeyNavigation)
                    .WithMany(p => p.AchSent)
                    .HasForeignKey(d => d.AchRecvKey)
                    .HasConstraintName("FK_ACHSent_ACHRecv");

                entity.HasOne(d => d.AchSentParentKeyNavigation)
                    .WithMany(p => p.AchSent)
                    .HasForeignKey(d => d.AchSentParentKey)
                    .HasConstraintName("FK_ACHSent_ACHSentParent");

                entity.HasOne(d => d.LocationNavigation)
                    .WithMany(p => p.AchSent)
                    .HasForeignKey(d => d.Location)
                    .HasConstraintName("FK_ACH_Sent_Company");
            });

            modelBuilder.Entity<Achack>(entity =>
            {
                entity.HasKey(e => e.AchAckKey)
                    .HasName("PK_ACHAck");

                entity.ToTable("ACHAck");

                entity.Property(e => e.AchAckKey).HasColumnName("ACH_ACK_KEY");

                entity.Property(e => e.AchSentKey).HasColumnName("ACH_SENT_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasColumnName("FILE_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.FileRejected).HasColumnName("FILE_REJECTED");

                entity.Property(e => e.RejectCreditAmt)
                    .HasColumnName("REJECT_CREDIT_AMT")
                    .HasColumnType("money");

                entity.Property(e => e.RejectItemCount).HasColumnName("REJECT_ITEM_COUNT");

                entity.Property(e => e.TotalCreditAmt)
                    .HasColumnName("TOTAL_CREDIT_AMT")
                    .HasColumnType("money");

                entity.Property(e => e.TotalItemCount).HasColumnName("TOTAL_ITEM_COUNT");
            });

            modelBuilder.Entity<Achbank>(entity =>
            {
                entity.HasKey(e => e.AchBankKey)
                    .HasName("PK_ACHBank_ACH_BANK_KEY");

                entity.ToTable("ACHBank");

                entity.HasIndex(e => e.DebitOrCredit)
                    .HasName("IX_ACHBank_DEBIT_OR_CREDIT");

                entity.Property(e => e.AchBankKey).HasColumnName("ACH_BANK_KEY");

                entity.Property(e => e.DebitOrCredit)
                    .IsRequired()
                    .HasColumnName("DEBIT_OR_CREDIT")
                    .HasColumnType("varchar(6)");

                entity.Property(e => e.IsActive).HasColumnName("IS_ACTIVE");

                entity.Property(e => e.IsAdastra).HasColumnName("IS_ADASTRA");

                entity.Property(e => e.IsInternet).HasColumnName("IS_INTERNET");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasColumnType("varchar(255)");
            });

            modelBuilder.Entity<AchbankConfig>(entity =>
            {
                entity.HasKey(e => e.AchBankConfigKey)
                    .HasName("PK_ACHBankConfig");

                entity.ToTable("ACHBankConfig");

                entity.Property(e => e.AchBankConfigKey).HasColumnName("ACH_BANK_CONFIG_KEY");

                entity.Property(e => e.AchBankKey).HasColumnName("ACH_BANK_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DefaultValue)
                    .HasColumnName("DEFAULT_VALUE")
                    .HasColumnType("varchar(512)");

                entity.Property(e => e.Key)
                    .IsRequired()
                    .HasColumnName("KEY")
                    .HasColumnType("varchar(50)");
            });

            modelBuilder.Entity<AchbankConfigException>(entity =>
            {
                entity.HasKey(e => e.AchBankConfigExceptionKey)
                    .HasName("PK_ACHBankConfigException");

                entity.ToTable("ACHBankConfigException");

                entity.Property(e => e.AchBankConfigExceptionKey).HasColumnName("ACH_BANK_CONFIG_EXCEPTION_KEY");

                entity.Property(e => e.AchBankConfigKey).HasColumnName("ACH_BANK_CONFIG_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.Loc).HasColumnName("LOC");

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasColumnName("VALUE")
                    .HasColumnType("varchar(512)");

                entity.HasOne(d => d.AchBankConfigKeyNavigation)
                    .WithMany(p => p.AchbankConfigException)
                    .HasForeignKey(d => d.AchBankConfigKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_ACHBankConfigException_ACHBankConfig");

                entity.HasOne(d => d.LocNavigation)
                    .WithMany(p => p.AchbankConfigException)
                    .HasForeignKey(d => d.Loc)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_ACHBankConfigException_Company");
            });

            modelBuilder.Entity<AchbatchHeader>(entity =>
            {
                entity.HasKey(e => e.AchBatchHeaderKey)
                    .HasName("PK__ACHBatch__6AB0F34B70A4ECD5");

                entity.ToTable("ACHBatchHeader");

                entity.Property(e => e.AchBatchHeaderKey).HasColumnName("ACH_BATCH_HEADER_KEY");

                entity.Property(e => e.BatchNumber)
                    .IsRequired()
                    .HasColumnName("BATCH_NUMBER")
                    .HasColumnType("varchar(7)");

                entity.Property(e => e.CompanyDescriptiveData)
                    .IsRequired()
                    .HasColumnName("COMPANY_DESCRIPTIVE_DATA")
                    .HasColumnType("varchar(6)");

                entity.Property(e => e.CompanyDiscretionaryData)
                    .IsRequired()
                    .HasColumnName("COMPANY_DISCRETIONARY_DATA")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.CompanyEntryDescription)
                    .IsRequired()
                    .HasColumnName("COMPANY_ENTRY_DESCRIPTION")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.CompanyId)
                    .IsRequired()
                    .HasColumnName("COMPANY_ID")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.CompanyName)
                    .IsRequired()
                    .HasColumnName("COMPANY_NAME")
                    .HasColumnType("varchar(16)");

                entity.Property(e => e.EffectiveEntryDate)
                    .IsRequired()
                    .HasColumnName("EFFECTIVE_ENTRY_DATE")
                    .HasColumnType("varchar(6)");

                entity.Property(e => e.JulianSettlementDate)
                    .HasColumnName("JULIAN_SETTLEMENT_DATE")
                    .HasColumnType("varchar(3)");

                entity.Property(e => e.OriginatingDfiRoutingNumber)
                    .IsRequired()
                    .HasColumnName("ORIGINATING_DFI_ROUTING_NUMBER")
                    .HasColumnType("varchar(8)");

                entity.Property(e => e.ProcessedReturns).HasColumnName("PROCESSED_RETURNS");

                entity.Property(e => e.RecordType)
                    .IsRequired()
                    .HasColumnName("RECORD_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.SecCode)
                    .IsRequired()
                    .HasColumnName("SEC_CODE")
                    .HasColumnType("varchar(3)");

                entity.Property(e => e.ServiceClassCode)
                    .IsRequired()
                    .HasColumnName("SERVICE_CLASS_CODE")
                    .HasColumnType("varchar(3)");

                entity.Property(e => e.StatusCode)
                    .IsRequired()
                    .HasColumnName("STATUS_CODE")
                    .HasColumnType("char(1)");
            });

            modelBuilder.Entity<Achdetail>(entity =>
            {
                entity.HasKey(e => e.AchDetailKey)
                    .HasName("PK__ACHDetai__273C175C2F44B1C9");

                entity.ToTable("ACHDetail");

                entity.Property(e => e.AchDetailKey).HasColumnName("ACH_DETAIL_KEY");

                entity.Property(e => e.AchBatchHeaderKey).HasColumnName("ACH_BATCH_HEADER_KEY");

                entity.Property(e => e.AchReturnCodeKey).HasColumnName("ACH_RETURN_CODE_KEY");

                entity.Property(e => e.AddendaRecord)
                    .HasColumnName("ADDENDA_RECORD")
                    .HasColumnType("char(1)");

                entity.Property(e => e.DiscretionaryData)
                    .HasColumnName("DISCRETIONARY_DATA")
                    .HasColumnType("varchar(2)");

                entity.Property(e => e.EffectiveDate)
                    .HasColumnName("EFFECTIVE_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.IdenitificationNumber)
                    .HasColumnName("IDENITIFICATION_NUMBER")
                    .HasColumnType("varchar(15)");

                entity.Property(e => e.ParticipantAccountNumber)
                    .HasColumnName("PARTICIPANT_ACCOUNT_NUMBER")
                    .HasColumnType("varchar(17)");

                entity.Property(e => e.ParticipantRoutingNumber)
                    .HasColumnName("PARTICIPANT_ROUTING_NUMBER")
                    .HasColumnType("varchar(8)");

                entity.Property(e => e.ParticipantRoutingNumberCheckDigit).HasColumnName("PARTICIPANT_ROUTING_NUMBER_CHECK_DIGIT");

                entity.Property(e => e.ProcessDate)
                    .HasColumnName("PROCESS_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.Processed)
                    .HasColumnName("PROCESSED")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.ReceiverName)
                    .HasColumnName("RECEIVER_NAME")
                    .HasColumnType("varchar(22)");

                entity.Property(e => e.RecordType)
                    .HasColumnName("RECORD_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.Selected)
                    .HasColumnName("SELECTED")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.TraceNumber)
                    .HasColumnName("TRACE_NUMBER")
                    .HasColumnType("varchar(15)");

                entity.Property(e => e.TransCode)
                    .HasColumnName("TRANS_CODE")
                    .HasColumnType("varchar(2)");

                entity.Property(e => e.TransactionAmount)
                    .HasColumnName("TRANSACTION_AMOUNT")
                    .HasColumnType("varchar(10)");

                entity.HasOne(d => d.AchBatchHeaderKeyNavigation)
                    .WithMany(p => p.Achdetail)
                    .HasForeignKey(d => d.AchBatchHeaderKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_ACHDetail_ACHBatchHeader");
            });

            modelBuilder.Entity<AchdetailAddendum>(entity =>
            {
                entity.HasKey(e => e.AchDetailKey)
                    .HasName("PK__ACHDetai__273C175C7F458E24");

                entity.ToTable("ACHDetailAddendum");

                entity.Property(e => e.AchDetailKey)
                    .HasColumnName("ACH_DETAIL_KEY")
                    .ValueGeneratedNever();

                entity.Property(e => e.AchDetailAddendumKey)
                    .HasColumnName("ACH_DETAIL_ADDENDUM_KEY")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.AddendaInformation)
                    .HasColumnName("ADDENDA_INFORMATION")
                    .HasColumnType("varchar(44)");

                entity.Property(e => e.AddendaTypeCode)
                    .IsRequired()
                    .HasColumnName("ADDENDA_TYPE_CODE")
                    .HasColumnType("varchar(2)")
                    .HasDefaultValueSql("'99'");

                entity.Property(e => e.DateOfDeath)
                    .HasColumnName("DATE_OF_DEATH")
                    .HasColumnType("varchar(6)");

                entity.Property(e => e.OriginalRfdiRtNumber)
                    .IsRequired()
                    .HasColumnName("ORIGINAL_RFDI_RT_NUMBER")
                    .HasColumnType("varchar(8)");

                entity.Property(e => e.OriginalTraceNumber)
                    .IsRequired()
                    .HasColumnName("ORIGINAL_TRACE_NUMBER")
                    .HasColumnType("varchar(15)");

                entity.Property(e => e.RecordType)
                    .IsRequired()
                    .HasColumnName("RECORD_TYPE")
                    .HasColumnType("char(1)")
                    .HasDefaultValueSql("'7'");

                entity.Property(e => e.ReturnNocCode)
                    .HasColumnName("RETURN_NOC_CODE")
                    .HasColumnType("varchar(3)");

                entity.Property(e => e.TraceNumber)
                    .HasColumnName("TRACE_NUMBER")
                    .HasColumnType("varchar(15)");

                entity.HasOne(d => d.AchDetailKeyNavigation)
                    .WithOne(p => p.AchdetailAddendum)
                    .HasForeignKey<AchdetailAddendum>(d => d.AchDetailKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_ACHDetailAddendum_ACHDetail");
            });

            modelBuilder.Entity<Achpending>(entity =>
            {
                entity.HasKey(e => e.AchPendingKey)
                    .HasName("PK_ACHPending");

                entity.ToTable("ACHPending");

                entity.HasIndex(e => new { e.LoanKey, e.AchPresentmentKey })
                    .HasName("IX_ACHPending_ACH_PRESENTMENT_KEY");

                entity.HasIndex(e => new { e.AchPendingKey, e.IsAdAstra, e.Location })
                    .HasName("IX_ACHPending_IS_AD_ASTRA_LOCATION");

                entity.HasIndex(e => new { e.AchAmount, e.LoanKey, e.RisreptKey, e.IsManualAch })
                    .HasName("IX_ACHPending_RISREPT_KEY_IS_MANUAL_ACH");

                entity.Property(e => e.AchPendingKey).HasColumnName("ACH_PENDING_KEY");

                entity.Property(e => e.AcctNo)
                    .HasColumnName("ACCT_NO")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.AchAmount)
                    .HasColumnName("ACH_AMOUNT")
                    .HasColumnType("money");

                entity.Property(e => e.AchPresentmentKey).HasColumnName("ACH_PRESENTMENT_KEY");

                entity.Property(e => e.AuditCode)
                    .HasColumnName("AUDIT_CODE")
                    .HasColumnType("varchar(2)");

                entity.Property(e => e.BankAba)
                    .HasColumnName("BANK_ABA")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.BpStepDataKey).HasColumnName("BP_STEP_DATA_KEY");

                entity.Property(e => e.CalcPayDate)
                    .HasColumnName("CALC_PAY_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.CashedCheckKey).HasColumnName("CASHED_CHECK_KEY");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.HasCc).HasColumnName("HAS_CC");

                entity.Property(e => e.IsAdAstra).HasColumnName("IS_AD_ASTRA");

                entity.Property(e => e.IsDirectDeposit).HasColumnName("IS_DIRECT_DEPOSIT");

                entity.Property(e => e.IsManualAch).HasColumnName("IS_MANUAL_ACH");

                entity.Property(e => e.IsMarkedAchBlock).HasColumnName("IS_MARKED_ACH_BLOCK");

                entity.Property(e => e.IsMarkedStopPayment).HasColumnName("IS_MARKED_STOP_PAYMENT");

                entity.Property(e => e.IsPayInfoComplete).HasColumnName("IS_PAY_INFO_COMPLETE");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.ProcessConfigInstanceKey).HasColumnName("PROCESS_CONFIG_INSTANCE_KEY");

                entity.Property(e => e.ProjSendDate)
                    .HasColumnName("PROJ_SEND_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.PtpDetailKey).HasColumnName("PTP_DETAIL_KEY");

                entity.Property(e => e.RiAge).HasColumnName("RI_AGE");

                entity.Property(e => e.RiBalance)
                    .HasColumnName("RI_BALANCE")
                    .HasColumnType("money");

                entity.Property(e => e.RisreptKey).HasColumnName("RISREPT_KEY");

                entity.Property(e => e.StatementId)
                    .IsRequired()
                    .HasColumnName("STATEMENT_ID")
                    .HasColumnType("varchar(20)");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.Achpending)
                    .HasForeignKey(d => d.CustomerKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_AchPending_Customer_EXITS");
            });

            modelBuilder.Entity<Achpresentment>(entity =>
            {
                entity.HasKey(e => e.AchPresentmentKey)
                    .HasName("PK_ACHPresentment");

                entity.ToTable("ACHPresentment");

                entity.HasIndex(e => new { e.LoanKey, e.RisreptKey, e.AchPresentmentTypeKey, e.ScheduledPaymentNumber, e.CollectionPaymentNumber, e.FeePaymentNumber, e.StatementId })
                    .HasName("UX_ACHPresentment")
                    .IsUnique();

                entity.HasIndex(e => new { e.ScheduledPaymentNumber, e.ReferenceKey, e.CollectionPaymentNumber, e.FeePaymentNumber, e.StatementId, e.AchPresentmentTypeKey, e.LoanKey, e.DateEntered })
                    .HasName("IX_ACHPresentment_ACH_PRESENTMENT_TYPE_KEY_LOAN_KEY_DATE_ENTERED");

                entity.HasIndex(e => new { e.EnteredBy, e.IsDone, e.ScheduledPaymentNumber, e.CollectionPaymentNumber, e.FeePaymentNumber, e.StatementId, e.DateEntered, e.AchPresentmentKey, e.AchParentPresentmentIdKey, e.LoanKey, e.Amt, e.RisreptKey, e.ReferenceKey, e.AchPresentmentTypeKey })
                    .HasName("IX_ACHPresentment_RISREPT_KEY_REFERENCE_KEY_ACH_PRESENTMENT_TYPE_KEY");

                entity.Property(e => e.AchPresentmentKey).HasColumnName("ACH_PRESENTMENT_KEY");

                entity.Property(e => e.AchParentPresentmentIdKey).HasColumnName("ACH_PARENT_PRESENTMENT_ID_KEY");

                entity.Property(e => e.AchPresentmentTypeKey).HasColumnName("ACH_PRESENTMENT_TYPE_KEY");

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("money");

                entity.Property(e => e.CollectionPaymentNumber).HasColumnName("COLLECTION_PAYMENT_NUMBER");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.FeePaymentNumber).HasColumnName("FEE_PAYMENT_NUMBER");

                entity.Property(e => e.IsDone).HasColumnName("IS_DONE");

                entity.Property(e => e.LoanKey)
                    .IsRequired()
                    .HasColumnName("LOAN_KEY");

                entity.Property(e => e.ReferenceKey).HasColumnName("REFERENCE_KEY");

                entity.Property(e => e.RisreptKey)
                    .IsRequired()
                    .HasColumnName("RISREPT_KEY");

                entity.Property(e => e.ScheduledPaymentNumber).HasColumnName("SCHEDULED_PAYMENT_NUMBER");

                entity.Property(e => e.StatementId)
                    .IsRequired()
                    .HasColumnName("STATEMENT_ID")
                    .HasColumnType("varchar(20)");

                entity.HasOne(d => d.AchPresentmentTypeKeyNavigation)
                    .WithMany(p => p.Achpresentment)
                    .HasForeignKey(d => d.AchPresentmentTypeKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_ACHPresentment_ACH_PRESENTMENT_TYPE_KEY");
            });

            modelBuilder.Entity<AchpresentmentType>(entity =>
            {
                entity.HasKey(e => e.AchPresentmentTypeKey)
                    .HasName("PK_ACHPresentmentType");

                entity.ToTable("ACHPresentmentType");

                entity.Property(e => e.AchPresentmentTypeKey)
                    .HasColumnName("ACH_PRESENTMENT_TYPE_KEY")
                    .ValueGeneratedNever();

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasColumnType("varchar(3)");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(20)");
            });

            modelBuilder.Entity<AchprocessingQueue>(entity =>
            {
                entity.HasKey(e => e.AchProcessingQueueKey)
                    .HasName("PK__ACHProce__1F4386CEA00877EF");

                entity.ToTable("ACHProcessingQueue");

                entity.HasIndex(e => new { e.LoanKey, e.AchPresentmentKey })
                    .HasName("IX_ACHProcessingQueue_ACH_PRESENTMENT_KEY");

                entity.HasIndex(e => new { e.AchProcessingQueueKey, e.Location, e.RunMasterKey, e.SchedRolloverKey, e.OptplusCardDetailKey, e.PrincAmtForInterestCredit, e.FeesAmtForInterestCredit, e.InterestDueCap, e.CabInterestDueCap, e.AbaNo, e.GradNumber, e.IsScheduledPayment, e.IsAdAstra, e.IsAchPaid, e.AchReasonCode, e.LoanKey, e.StatementId, e.AchAmount, e.DueDate, e.AchAttempt, e.ManualSendDate, e.ManualTeller, e.BankNo, e.AchBankKey, e.AchSentParentKey, e.AchProcessingTypeKey })
                    .HasName("IX_ACHProcessingQueue_ACH_BANK_KEY");

                entity.Property(e => e.AchProcessingQueueKey).HasColumnName("ACH_PROCESSING_QUEUE_KEY");

                entity.Property(e => e.AbaNo)
                    .IsRequired()
                    .HasColumnName("ABA_NO")
                    .HasColumnType("varchar(9)");

                entity.Property(e => e.AchAmount)
                    .HasColumnName("ACH_AMOUNT")
                    .HasColumnType("money");

                entity.Property(e => e.AchAttempt).HasColumnName("ACH_ATTEMPT");

                entity.Property(e => e.AchBankKey).HasColumnName("ACH_BANK_KEY");

                entity.Property(e => e.AchPresentmentKey).HasColumnName("ACH_PRESENTMENT_KEY");

                entity.Property(e => e.AchProcessingTypeKey).HasColumnName("ACH_PROCESSING_TYPE_KEY");

                entity.Property(e => e.AchReasonCode).HasColumnName("ACH_REASON_CODE");

                entity.Property(e => e.AchSentParentKey).HasColumnName("ACH_SENT_PARENT_KEY");

                entity.Property(e => e.BankNo)
                    .IsRequired()
                    .HasColumnName("BANK_NO")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.CabInterestDueCap)
                    .HasColumnName("CAB_INTEREST_DUE_CAP")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.DueDate)
                    .HasColumnName("DUE_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.FeesAmtForInterestCredit)
                    .HasColumnName("FEES_AMT_FOR_INTEREST_CREDIT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.GradNumber)
                    .HasColumnName("GRAD_NUMBER")
                    .HasColumnType("varchar(15)");

                entity.Property(e => e.InterestDueCap)
                    .HasColumnName("INTEREST_DUE_CAP")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.IsAchPaid).HasColumnName("IS_ACH_PAID");

                entity.Property(e => e.IsAdAstra).HasColumnName("IS_AD_ASTRA");

                entity.Property(e => e.IsScheduledPayment).HasColumnName("IS_SCHEDULED_PAYMENT");

                entity.Property(e => e.JobId).HasColumnName("JOB_ID");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.ManualSendDate)
                    .HasColumnName("MANUAL_SEND_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ManualTeller)
                    .HasColumnName("MANUAL_TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.OptplusCardDetailKey).HasColumnName("OPTPLUS_CARD_DETAIL_KEY");

                entity.Property(e => e.PrincAmtForInterestCredit)
                    .HasColumnName("PRINC_AMT_FOR_INTEREST_CREDIT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.RunMasterKey).HasColumnName("RUN_MASTER_KEY");

                entity.Property(e => e.SchedRolloverKey).HasColumnName("SCHED_ROLLOVER_KEY");

                entity.Property(e => e.StatementId)
                    .HasColumnName("STATEMENT_ID")
                    .HasColumnType("varchar(20)");

                entity.HasOne(d => d.AchProcessingTypeKeyNavigation)
                    .WithMany(p => p.AchprocessingQueue)
                    .HasForeignKey(d => d.AchProcessingTypeKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_ACHProcessingQueue_ACHProcessingType");

                entity.HasOne(d => d.AchReasonCodeNavigation)
                    .WithMany(p => p.AchprocessingQueue)
                    .HasForeignKey(d => d.AchReasonCode)
                    .HasConstraintName("FK_ACHProcessingQueue_ACHReasonCode");

                entity.HasOne(d => d.LoanKeyNavigation)
                    .WithMany(p => p.AchprocessingQueue)
                    .HasForeignKey(d => d.LoanKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_ACHProcessingQueue_Loan");
            });

            modelBuilder.Entity<AchprocessingType>(entity =>
            {
                entity.HasKey(e => e.AchProcessingTypeKey)
                    .HasName("PK__ACHProce__F70755CECCC7BE0B");

                entity.ToTable("ACHProcessingType");

                entity.Property(e => e.AchProcessingTypeKey).HasColumnName("ACH_PROCESSING_TYPE_KEY");

                entity.Property(e => e.AchProcessingTypeDesc)
                    .IsRequired()
                    .HasColumnName("ACH_PROCESSING_TYPE_DESC")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.FileType)
                    .IsRequired()
                    .HasColumnName("FILE_TYPE")
                    .HasColumnType("char(1)");
            });

            modelBuilder.Entity<Achqueue>(entity =>
            {
                entity.HasKey(e => e.AchQueueKey)
                    .HasName("PK_ACHQueue");

                entity.ToTable("ACHQueue");

                entity.HasIndex(e => e.LoanKey)
                    .HasName("IX_ACHQueue_LOAN_KEY");

                entity.Property(e => e.AchQueueKey).HasColumnName("ACH_QUEUE_KEY");

                entity.Property(e => e.Aba)
                    .IsRequired()
                    .HasColumnName("ABA")
                    .HasColumnType("varchar(9)");

                entity.Property(e => e.Account)
                    .IsRequired()
                    .HasColumnName("ACCOUNT")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.AchReasonCode).HasColumnName("ACH_REASON_CODE");

                entity.Property(e => e.Amount)
                    .HasColumnName("AMOUNT")
                    .HasColumnType("money");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DateToSend)
                    .HasColumnName("DATE_TO_SEND")
                    .HasColumnType("date");

                entity.Property(e => e.IsCredit).HasColumnName("IS_CREDIT");

                entity.Property(e => e.LoanBalance)
                    .HasColumnName("LOAN_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.AbaNavigation)
                    .WithMany(p => p.Achqueue)
                    .HasForeignKey(d => d.Aba)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_ACHQueue_ABA");

                entity.HasOne(d => d.AchReasonCodeNavigation)
                    .WithMany(p => p.Achqueue)
                    .HasForeignKey(d => d.AchReasonCode)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_ACHQueue_ACH_REASON_CODE");

                entity.HasOne(d => d.LoanKeyNavigation)
                    .WithMany(p => p.Achqueue)
                    .HasForeignKey(d => d.LoanKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_ACHQueue_LOAN_KEY");

                entity.HasOne(d => d.TellerNavigation)
                    .WithMany(p => p.Achqueue)
                    .HasPrincipalKey(p => p.Teller)
                    .HasForeignKey(d => d.Teller)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_ACHQueue_TELLER");
            });

            modelBuilder.Entity<Achreason>(entity =>
            {
                entity.HasKey(e => e.Code)
                    .HasName("PK_ACHReason");

                entity.ToTable("ACHReason");

                entity.Property(e => e.Code)
                    .HasColumnName("CODE")
                    .ValueGeneratedNever();

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(255)");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasColumnName("TYPE")
                    .HasColumnType("varchar(10)");
            });

            modelBuilder.Entity<AchsentParent>(entity =>
            {
                entity.HasKey(e => e.AchSentParentKey)
                    .HasName("PK__ACHSentP__21C0D4A56486EC6E");

                entity.ToTable("ACHSentParent");

                entity.Property(e => e.AchSentParentKey).HasColumnName("ACH_SENT_PARENT_KEY");

                entity.Property(e => e.AchFileNameAck)
                    .IsRequired()
                    .HasColumnName("ACH_FILE_NAME_ACK")
                    .HasColumnType("varchar(50)")
                    .HasDefaultValueSql("'MISSING'");

                entity.Property(e => e.AchFileNameSent)
                    .IsRequired()
                    .HasColumnName("ACH_FILE_NAME_SENT")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.AchFileRecCnt)
                    .HasColumnName("ACH_FILE_REC_CNT")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.AchFileTotalAmt)
                    .HasColumnName("ACH_FILE_TOTAL_AMT")
                    .HasColumnType("money")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.AchSentDate)
                    .HasColumnName("ACH_SENT_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.ExpectedResults)
                    .HasColumnName("EXPECTED_RESULTS")
                    .HasColumnType("datetime");

                entity.Property(e => e.FileType)
                    .IsRequired()
                    .HasColumnName("FILE_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.IsAdAstra).HasColumnName("IS_AD_ASTRA");

                entity.Property(e => e.IsDayAfterDueSent).HasColumnName("IS_DAY_AFTER_DUE_SENT");

                entity.Property(e => e.ScheduledPayments).HasColumnName("SCHEDULED_PAYMENTS");
            });

            modelBuilder.Entity<AdAstraWebInventory>(entity =>
            {
                entity.HasKey(e => e.RisreptKey)
                    .HasName("PK_AdAstraWebInventory");

                entity.Property(e => e.RisreptKey)
                    .HasColumnName("RISREPT_KEY")
                    .ValueGeneratedNever();

                entity.Property(e => e.Dob)
                    .HasColumnName("DOB")
                    .HasColumnType("date");

                entity.Property(e => e.Firstname)
                    .HasColumnName("FIRSTNAME")
                    .HasColumnType("varchar(24)");

                entity.Property(e => e.IsEligible).HasColumnName("IS_ELIGIBLE");

                entity.Property(e => e.Lastname)
                    .HasColumnName("LASTNAME")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.Reference)
                    .HasColumnName("REFERENCE")
                    .HasColumnType("varchar(43)");

                entity.Property(e => e.RiBalance)
                    .HasColumnName("RI_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.RisAuditId).HasColumnName("RIS_AUDIT_ID");

                entity.Property(e => e.Ssn)
                    .HasColumnName("SSN")
                    .HasColumnType("char(9)");
            });

            modelBuilder.Entity<AgentAction>(entity =>
            {
                entity.HasKey(e => e.AgentActionKey)
                    .HasName("PK_AgentAction");

                entity.Property(e => e.AgentActionKey).HasColumnName("AGENT_ACTION_KEY");

                entity.Property(e => e.AddressTypeCode).HasColumnName("ADDRESS_TYPE_CODE");

                entity.Property(e => e.CollectorOnly)
                    .HasColumnName("COLLECTOR_ONLY")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.LegalOnly)
                    .HasColumnName("LEGAL_ONLY")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.LongDescr)
                    .IsRequired()
                    .HasColumnName("LONG_DESCR")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.PhoneTypeCode).HasColumnName("PHONE_TYPE_CODE");

                entity.Property(e => e.Security)
                    .IsRequired()
                    .HasColumnName("SECURITY")
                    .HasColumnType("char(128)");

                entity.Property(e => e.ShortDescr)
                    .IsRequired()
                    .HasColumnName("SHORT_DESCR")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.UseOnAdastraRi).HasColumnName("USE_ON_ADASTRA_RI");
            });

            modelBuilder.Entity<AgentResult>(entity =>
            {
                entity.HasKey(e => e.AgentResultKey)
                    .HasName("PK_AgentResult");

                entity.Property(e => e.AgentResultKey).HasColumnName("AGENT_RESULT_KEY");

                entity.Property(e => e.LongDescr)
                    .IsRequired()
                    .HasColumnName("LONG_DESCR")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.ResultLevel).HasColumnName("RESULT_LEVEL");

                entity.Property(e => e.ScreenPop)
                    .HasColumnName("SCREEN_POP")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.ShortDescr)
                    .IsRequired()
                    .HasColumnName("SHORT_DESCR")
                    .HasColumnType("varchar(20)");
            });

            modelBuilder.Entity<AlternateLender>(entity =>
            {
                entity.HasKey(e => e.AlternateLenderKey)
                    .HasName("PK_AlternateLender");

                entity.Property(e => e.AlternateLenderKey).HasColumnName("ALTERNATE_LENDER_KEY");

                entity.Property(e => e.AddrNum)
                    .IsRequired()
                    .HasColumnName("ADDR_NUM")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.AddrPostDir)
                    .IsRequired()
                    .HasColumnName("ADDR_POST_DIR")
                    .HasColumnType("varchar(2)");

                entity.Property(e => e.AddrPreDir)
                    .IsRequired()
                    .HasColumnName("ADDR_PRE_DIR")
                    .HasColumnType("varchar(2)");

                entity.Property(e => e.AddrStreet)
                    .IsRequired()
                    .HasColumnName("ADDR_STREET")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.AddrSuffix)
                    .IsRequired()
                    .HasColumnName("ADDR_SUFFIX")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.AddrSuite)
                    .IsRequired()
                    .HasColumnName("ADDR_SUITE")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.AddrSuiteNum)
                    .IsRequired()
                    .HasColumnName("ADDR_SUITE_NUM")
                    .HasColumnType("varchar(15)");

                entity.Property(e => e.AddressCsz)
                    .HasColumnName("ADDRESS_CSZ")
                    .HasColumnType("varchar(100)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_CSZ]([ADDRESS_FORMAT],[CITY],[STATE],[ZIPCODE])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressFormat)
                    .IsRequired()
                    .HasColumnName("ADDRESS_FORMAT")
                    .HasColumnType("char(3)");

                entity.Property(e => e.AddressLine)
                    .HasColumnName("ADDRESS_LINE")
                    .HasColumnType("varchar(100)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE]([ADDRESS_FORMAT],'',[ADDR_NUM],[ADDR_PRE_DIR],[ADDR_STREET],[ADDR_SUFFIX],[ADDR_POST_DIR],[ADDR_SUITE],[ADDR_SUITE_NUM],[FLAT_NUM],[BUILDING_NAME],[BUILDING_NUM])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressLine1)
                    .HasColumnName("ADDRESS_LINE_1")
                    .HasColumnType("varchar(100)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE_1]([ADDRESS_FORMAT],'',[ADDR_NUM],[ADDR_PRE_DIR],[ADDR_STREET],[ADDR_SUFFIX],[ADDR_POST_DIR],[FLAT_NUM],[BUILDING_NAME],[ADDR_SUITE],[ADDR_SUITE_NUM])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressLine2)
                    .HasColumnName("ADDRESS_LINE_2")
                    .HasColumnType("varchar(150)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE_2]([ADDRESS_FORMAT],[ADDR_SUITE],[ADDR_SUITE_NUM],[CITY],[STATE],[ZIPCODE],[BUILDING_NUM],[ADDR_STREET],'',[ADDR_NUM],[ADDR_PRE_DIR],[ADDR_SUFFIX],[ADDR_POST_DIR])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressLine3)
                    .HasColumnName("ADDRESS_LINE_3")
                    .HasColumnType("varchar(150)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE_3]([ADDRESS_FORMAT],[ADDR_SUITE],[ADDR_SUITE_NUM],[CITY],[STATE],[ZIPCODE])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.BuildingName)
                    .IsRequired()
                    .HasColumnName("BUILDING_NAME")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.BuildingNum)
                    .IsRequired()
                    .HasColumnName("BUILDING_NUM")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.Certificateid)
                    .IsRequired()
                    .HasColumnName("CERTIFICATEID")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasColumnName("CITY")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.ContactFirstName)
                    .IsRequired()
                    .HasColumnName("CONTACT_FIRST_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.ContactLastName)
                    .IsRequired()
                    .HasColumnName("CONTACT_LAST_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasColumnName("COUNTRY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.County)
                    .IsRequired()
                    .HasColumnName("COUNTY")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.FlatNum)
                    .IsRequired()
                    .HasColumnName("FLAT_NUM")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.IsDeleted).HasColumnName("IS_DELETED");

                entity.Property(e => e.LastUpdated)
                    .HasColumnName("LAST_UPDATED")
                    .HasColumnType("datetime");

                entity.Property(e => e.LastUpdatedBy)
                    .IsRequired()
                    .HasColumnName("LAST_UPDATED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.NameOfLender)
                    .IsRequired()
                    .HasColumnName("NAME_OF_LENDER")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.PhoneNumber)
                    .IsRequired()
                    .HasColumnName("PHONE_NUMBER")
                    .HasColumnType("varchar(12)");

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasColumnName("STATE")
                    .HasColumnType("char(2)");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.Zipcode)
                    .IsRequired()
                    .HasColumnName("ZIPCODE")
                    .HasColumnType("varchar(10)");
            });

            modelBuilder.Entity<AmladditionalParty>(entity =>
            {
                entity.HasKey(e => e.AmlAdditionalPartyKey)
                    .HasName("PK_AMLAdditionalParty");

                entity.ToTable("AMLAdditionalParty");

                entity.HasIndex(e => e.AmlOccupationKey)
                    .HasName("IX_AMLAdditionalParty_AML_OCCUPATION_KEY");

                entity.HasIndex(e => e.CountryKey)
                    .HasName("IX_AMLAdditionalParty_COUNTRY_KEY");

                entity.HasIndex(e => e.TransDetailKey)
                    .HasName("IX_AMLAdditionalParty_TRANS_DETAIL_KEY");

                entity.Property(e => e.AmlAdditionalPartyKey).HasColumnName("AML_ADDITIONAL_PARTY_KEY");

                entity.Property(e => e.AddrNum)
                    .HasColumnName("ADDR_NUM")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.AddrPostDir)
                    .HasColumnName("ADDR_POST_DIR")
                    .HasColumnType("varchar(2)");

                entity.Property(e => e.AddrPreDir)
                    .HasColumnName("ADDR_PRE_DIR")
                    .HasColumnType("varchar(2)");

                entity.Property(e => e.AddrStreet)
                    .HasColumnName("ADDR_STREET")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.AddrSuffix)
                    .HasColumnName("ADDR_SUFFIX")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.AddrSuite)
                    .HasColumnName("ADDR_SUITE")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.AddrSuiteNum)
                    .HasColumnName("ADDR_SUITE_NUM")
                    .HasColumnType("varchar(15)");

                entity.Property(e => e.AddressCsz)
                    .HasColumnName("ADDRESS_CSZ")
                    .HasColumnType("varchar(100)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_CSZ]([ADDRESS_FORMAT],[CITY],[STATE],[ZIPCODE])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressFormat)
                    .HasColumnName("ADDRESS_FORMAT")
                    .HasColumnType("char(3)");

                entity.Property(e => e.AddressLine)
                    .HasColumnName("ADDRESS_LINE")
                    .HasColumnType("varchar(100)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE]([ADDRESS_FORMAT],'',[ADDR_NUM],[ADDR_PRE_DIR],[ADDR_STREET],[ADDR_SUFFIX],[ADDR_POST_DIR],[ADDR_SUITE],[ADDR_SUITE_NUM],[FLAT_NUM],[BUILDING_NAME],[BUILDING_NUM])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressLine1)
                    .HasColumnName("ADDRESS_LINE_1")
                    .HasColumnType("varchar(100)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE_1]([ADDRESS_FORMAT],'',[ADDR_NUM],[ADDR_PRE_DIR],[ADDR_STREET],[ADDR_SUFFIX],[ADDR_POST_DIR],[FLAT_NUM],[BUILDING_NAME],[ADDR_SUITE],[ADDR_SUITE_NUM])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressLine2)
                    .HasColumnName("ADDRESS_LINE_2")
                    .HasColumnType("varchar(150)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE_2]([ADDRESS_FORMAT],[ADDR_SUITE],[ADDR_SUITE_NUM],[CITY],[STATE],[ZIPCODE],[BUILDING_NUM],[ADDR_STREET],'',[ADDR_NUM],[ADDR_PRE_DIR],[ADDR_SUFFIX],[ADDR_POST_DIR])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressLine3)
                    .HasColumnName("ADDRESS_LINE_3")
                    .HasColumnType("varchar(150)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE_3]([ADDRESS_FORMAT],[ADDR_SUITE],[ADDR_SUITE_NUM],[CITY],[STATE],[ZIPCODE])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AmlOccupationKey).HasColumnName("AML_OCCUPATION_KEY");

                entity.Property(e => e.BuildingName)
                    .HasColumnName("BUILDING_NAME")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.BuildingNum)
                    .HasColumnName("BUILDING_NUM")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.BusinessType)
                    .HasColumnName("BUSINESS_TYPE")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.City)
                    .HasColumnName("CITY")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Country)
                    .HasColumnName("COUNTRY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.CountryKey).HasColumnName("COUNTRY_KEY");

                entity.Property(e => e.County)
                    .HasColumnName("COUNTY")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Dob)
                    .HasColumnName("DOB")
                    .HasColumnType("date");

                entity.Property(e => e.EntityName)
                    .HasColumnName("ENTITY_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.FirstName)
                    .HasColumnName("FIRST_NAME")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.FlatNum)
                    .HasColumnName("FLAT_NUM")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.IdNumber)
                    .HasColumnName("ID_NUMBER")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.IdState)
                    .HasColumnName("ID_STATE")
                    .HasColumnType("char(2)");

                entity.Property(e => e.IdType)
                    .HasColumnName("ID_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.IncorporationNumber)
                    .HasColumnName("INCORPORATION_NUMBER")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.IncorporationPlace)
                    .HasColumnName("INCORPORATION_PLACE")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.IsEntity).HasColumnName("IS_ENTITY");

                entity.Property(e => e.IsRegisteredCharity).HasColumnName("IS_REGISTERED_CHARITY");

                entity.Property(e => e.LastName)
                    .HasColumnName("LAST_NAME")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.MidInitial)
                    .HasColumnName("MID_INITIAL")
                    .HasColumnType("char(1)");

                entity.Property(e => e.PhoneNumber)
                    .HasColumnName("PHONE_NUMBER")
                    .HasColumnType("varchar(12)");

                entity.Property(e => e.Purpose)
                    .HasColumnName("PURPOSE")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.Relationship)
                    .HasColumnName("RELATIONSHIP")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.State)
                    .HasColumnName("STATE")
                    .HasColumnType("char(2)");

                entity.Property(e => e.TaxId)
                    .HasColumnName("TAX_ID")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.Teller)
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");

                entity.Property(e => e.Zipcode)
                    .HasColumnName("ZIPCODE")
                    .HasColumnType("varchar(10)");

                entity.HasOne(d => d.AmlOccupationKeyNavigation)
                    .WithMany(p => p.AmladditionalParty)
                    .HasForeignKey(d => d.AmlOccupationKey)
                    .HasConstraintName("FK_AMLAdditionalParty_AMLOccupation");

                entity.HasOne(d => d.CountryKeyNavigation)
                    .WithMany(p => p.AmladditionalParty)
                    .HasForeignKey(d => d.CountryKey)
                    .HasConstraintName("FK_AMLAdditionalParty_Country");

                entity.HasOne(d => d.TransDetailKeyNavigation)
                    .WithMany(p => p.AmladditionalParty)
                    .HasForeignKey(d => d.TransDetailKey)
                    .HasConstraintName("FK_AMLAdditionalParty_TransDetail");
            });

            modelBuilder.Entity<AmlfileLog>(entity =>
            {
                entity.HasKey(e => e.AmlLogId)
                    .HasName("PK_AML_LOG_ID");

                entity.ToTable("AMLFileLog");

                entity.Property(e => e.AmlLogId).HasColumnName("AML_LOG_ID");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasColumnName("FILE_NAME")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.NumberOfRecords).HasColumnName("NUMBER_OF_RECORDS");

                entity.Property(e => e.SequenceNumber).HasColumnName("SEQUENCE_NUMBER");

                entity.Property(e => e.Step)
                    .IsRequired()
                    .HasColumnName("STEP")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.Stream)
                    .IsRequired()
                    .HasColumnName("STREAM")
                    .HasColumnType("varchar(15)");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.TellerNavigation)
                    .WithMany(p => p.AmlfileLog)
                    .HasPrincipalKey(p => p.Teller)
                    .HasForeignKey(d => d.Teller)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_TELLER");
            });

            modelBuilder.Entity<AmlforeignAddress>(entity =>
            {
                entity.HasKey(e => e.AmlForeignAddressKey)
                    .HasName("PK_AMLForeignAddress");

                entity.ToTable("AMLForeignAddress");

                entity.HasIndex(e => e.CountryKey)
                    .HasName("IX_AMLForeignAddress_COUNTRY_KEY");

                entity.HasIndex(e => e.CustomerKey)
                    .HasName("IX_AMLForeignAddress_CUSTOMER_KEY");

                entity.Property(e => e.AmlForeignAddressKey).HasColumnName("AML_FOREIGN_ADDRESS_KEY");

                entity.Property(e => e.Address1)
                    .IsRequired()
                    .HasColumnName("ADDRESS1")
                    .HasColumnType("varchar(75)");

                entity.Property(e => e.Address2)
                    .IsRequired()
                    .HasColumnName("ADDRESS2")
                    .HasColumnType("varchar(75)");

                entity.Property(e => e.Address3)
                    .IsRequired()
                    .HasColumnName("ADDRESS3")
                    .HasColumnType("varchar(75)");

                entity.Property(e => e.CountryKey).HasColumnName("COUNTRY_KEY");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.PhoneNumber)
                    .IsRequired()
                    .HasColumnName("PHONE_NUMBER")
                    .HasColumnType("varchar(12)");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.CountryKeyNavigation)
                    .WithMany(p => p.AmlforeignAddress)
                    .HasForeignKey(d => d.CountryKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_AMLForeignAddress_Country");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.AmlforeignAddress)
                    .HasForeignKey(d => d.CustomerKey)
                    .HasConstraintName("FK_AMLForeignAddress_Customer");
            });

            modelBuilder.Entity<Amloccupation>(entity =>
            {
                entity.HasKey(e => e.AmlOccupationKey)
                    .HasName("PK_AMLOccupation");

                entity.ToTable("AMLOccupation");

                entity.HasIndex(e => e.TransDetailKey)
                    .HasName("IX_AMLOccupation_TRANS_DETAIL_KEY");

                entity.HasIndex(e => e.VisitorKey)
                    .HasName("IX_AMLOccupation_VISITOR_KEY");

                entity.Property(e => e.AmlOccupationKey).HasColumnName("AML_OCCUPATION_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Occupation)
                    .HasColumnName("OCCUPATION")
                    .HasColumnType("varchar(75)");

                entity.Property(e => e.OccupationReason).HasColumnName("OCCUPATION_REASON");

                entity.Property(e => e.Teller)
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");

                entity.Property(e => e.VisitorKey).HasColumnName("VISITOR_KEY");

                entity.HasOne(d => d.TransDetailKeyNavigation)
                    .WithMany(p => p.Amloccupation)
                    .HasForeignKey(d => d.TransDetailKey)
                    .HasConstraintName("FK_AMLOccupation_TransDetail");

                entity.HasOne(d => d.VisitorKeyNavigation)
                    .WithMany(p => p.Amloccupation)
                    .HasForeignKey(d => d.VisitorKey)
                    .HasConstraintName("FK_AMLOccupation_Visitor");
            });

            modelBuilder.Entity<AmlthresholdRule>(entity =>
            {
                entity.HasKey(e => e.AmlThresholdRuleKey)
                    .HasName("PK_AMLThresholdRule");

                entity.ToTable("AMLThresholdRule");

                entity.Property(e => e.AmlThresholdRuleKey).HasColumnName("AML_THRESHOLD_RULE_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DateUpdated)
                    .HasColumnName("DATE_UPDATED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Description)
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.ExpiredAccepted).HasColumnName("EXPIRED_ACCEPTED");

                entity.Property(e => e.IncludeFees).HasColumnName("INCLUDE_FEES");

                entity.Property(e => e.InquireOccupation).HasColumnName("INQUIRE_OCCUPATION");

                entity.Property(e => e.IsAggregated).HasColumnName("IS_AGGREGATED");

                entity.Property(e => e.IsEnabled).HasColumnName("IS_ENABLED");

                entity.Property(e => e.MaxDollarAmt)
                    .HasColumnName("MAX_DOLLAR_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.MinDollarAmt)
                    .HasColumnName("MIN_DOLLAR_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PromptOccupationEveryday).HasColumnName("PROMPT_OCCUPATION_EVERYDAY");

                entity.Property(e => e.PromptOccupationEverytrans).HasColumnName("PROMPT_OCCUPATION_EVERYTRANS");

                entity.Property(e => e.PromptOtherParty).HasColumnName("PROMPT_OTHER_PARTY");

                entity.Property(e => e.PromptPurpose).HasColumnName("PROMPT_PURPOSE");

                entity.Property(e => e.ReqAmlCtr).HasColumnName("REQ_AML_CTR");

                entity.Property(e => e.ReqAmlPrimary).HasColumnName("REQ_AML_PRIMARY");

                entity.Property(e => e.ReqAmlSecondary).HasColumnName("REQ_AML_SECONDARY");

                entity.Property(e => e.RequireCustomer).HasColumnName("REQUIRE_CUSTOMER");

                entity.Property(e => e.ThresholdType).HasColumnName("THRESHOLD_TYPE");

                entity.Property(e => e.UpdatedBy)
                    .HasColumnName("UPDATED_BY")
                    .HasColumnType("char(3)");
            });

            modelBuilder.Entity<AmlthresholdRuleTransXref>(entity =>
            {
                entity.HasKey(e => e.AmlThresholdRuleTransXrefKey)
                    .HasName("PK_AMLThresholdRuleTransXref");

                entity.ToTable("AMLThresholdRuleTransXref");

                entity.HasIndex(e => new { e.AmlThresholdRuleKey, e.FcrmAmlTransCodeKey })
                    .HasName("UX_AMLThresholdRuleTransXref_AML_THRESHOLD_RULE_KEY_FCRM_AML_TRANS_CODE_KEY")
                    .IsUnique();

                entity.Property(e => e.AmlThresholdRuleTransXrefKey).HasColumnName("AML_THRESHOLD_RULE_TRANS_XREF_KEY");

                entity.Property(e => e.AmlThresholdRuleKey).HasColumnName("AML_THRESHOLD_RULE_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.FcrmAmlTransCodeKey).HasColumnName("FCRM_AML_TRANS_CODE_KEY");

                entity.HasOne(d => d.AmlThresholdRuleKeyNavigation)
                    .WithMany(p => p.AmlthresholdRuleTransXref)
                    .HasForeignKey(d => d.AmlThresholdRuleKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_AMLThresholdRuleTransXref_AMLThresholdRule");

                entity.HasOne(d => d.FcrmAmlTransCodeKeyNavigation)
                    .WithMany(p => p.AmlthresholdRuleTransXref)
                    .HasForeignKey(d => d.FcrmAmlTransCodeKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_AMLThresholdRuleTransXref_FcrmAmlTransCode");
            });

            modelBuilder.Entity<ApiApplication>(entity =>
            {
                entity.HasKey(e => e.ApiApplicationKey)
                    .HasName("PK_ApiApplication");

                entity.HasIndex(e => e.Token)
                    .HasName("UC_ApiApplication_Token")
                    .IsUnique();

                entity.Property(e => e.ApiApplicationKey).HasColumnName("API_APPLICATION_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Secret)
                    .IsRequired()
                    .HasColumnName("SECRET")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.Token).HasColumnName("TOKEN");
            });

            modelBuilder.Entity<AppConfig>(entity =>
            {
                entity.HasKey(e => e.AppConfigKey)
                    .HasName("PK_AppConfig");

                entity.Property(e => e.AppConfigKey).HasColumnName("APP_CONFIG_KEY");

                entity.Property(e => e.AppConfigName)
                    .IsRequired()
                    .HasColumnName("APP_CONFIG_NAME")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(300)");
            });

            modelBuilder.Entity<AppSetting>(entity =>
            {
                entity.HasKey(e => e.AppSettingKey)
                    .HasName("PK_AppSetting");

                entity.Property(e => e.AppSettingKey).HasColumnName("APP_SETTING_KEY");

                entity.Property(e => e.AppSettingName)
                    .IsRequired()
                    .HasColumnName("APP_SETTING_NAME")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(300)");
            });

            modelBuilder.Entity<AppValue>(entity =>
            {
                entity.HasKey(e => e.AppValueKey)
                    .HasName("PK_AppValue");

                entity.Property(e => e.AppValueKey).HasColumnName("APP_VALUE_KEY");

                entity.Property(e => e.AppConfigKey).HasColumnName("APP_CONFIG_KEY");

                entity.Property(e => e.AppSettingKey).HasColumnName("APP_SETTING_KEY");

                entity.Property(e => e.AppValue1)
                    .HasColumnName("APP_VALUE")
                    .HasColumnType("varchar(1000)");

                entity.Property(e => e.LastUpdated)
                    .HasColumnName("LAST_UPDATED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasColumnName("UPDATED_BY")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.AppConfigKeyNavigation)
                    .WithMany(p => p.AppValue)
                    .HasForeignKey(d => d.AppConfigKey)
                    .HasConstraintName("FK_AppValue_AppConfig");

                entity.HasOne(d => d.AppSettingKeyNavigation)
                    .WithMany(p => p.AppValue)
                    .HasForeignKey(d => d.AppSettingKey)
                    .HasConstraintName("FK_AppValue_AppSetting");
            });

            modelBuilder.Entity<AreaCode>(entity =>
            {
                entity.HasKey(e => e.AreaCode1)
                    .HasName("PK_AreaCode");

                entity.Property(e => e.AreaCode1)
                    .HasColumnName("AREA_CODE")
                    .ValueGeneratedNever();

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasColumnName("STATE")
                    .HasColumnType("char(2)");
            });

            modelBuilder.Entity<Attorney>(entity =>
            {
                entity.HasKey(e => e.AttorneyKey)
                    .HasName("PK_Attorney");

                entity.Property(e => e.AttorneyKey).HasColumnName("ATTORNEY_KEY");

                entity.Property(e => e.AddrStreet)
                    .IsRequired()
                    .HasColumnName("ADDR_STREET")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.Address1)
                    .IsRequired()
                    .HasColumnName("ADDRESS1")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.AddressCsz)
                    .HasColumnName("ADDRESS_CSZ")
                    .HasColumnType("varchar(100)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_CSZ]([ADDRESS_FORMAT],[CITY],[STATE],[ZIPCODE])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressFormat)
                    .IsRequired()
                    .HasColumnName("ADDRESS_FORMAT")
                    .HasColumnType("char(3)");

                entity.Property(e => e.AddressLine)
                    .HasColumnName("ADDRESS_LINE")
                    .HasColumnType("varchar(100)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE]([ADDRESS_FORMAT],[ADDRESS1],'','',[ADDR_STREET],'','','','',[FLAT_NUM],[BUILDING_NAME],[BUILDING_NUM])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressLine1)
                    .HasColumnName("ADDRESS_LINE_1")
                    .HasColumnType("varchar(100)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE_1]([ADDRESS_FORMAT],[ADDRESS1],'','',[ADDR_STREET],'','',[FLAT_NUM],[BUILDING_NAME],'','')")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressLine2)
                    .HasColumnName("ADDRESS_LINE_2")
                    .HasColumnType("varchar(150)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE_2]([ADDRESS_FORMAT],'','',[CITY],[STATE],[ZIPCODE],[BUILDING_NUM],[ADDR_STREET],[ADDRESS1],'','','','')")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressLine3)
                    .HasColumnName("ADDRESS_LINE_3")
                    .HasColumnType("varchar(150)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE_3]([ADDRESS_FORMAT],'','',[CITY],[STATE],[ZIPCODE])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AttorneyName)
                    .IsRequired()
                    .HasColumnName("ATTORNEY_NAME")
                    .HasColumnType("varchar(80)");

                entity.Property(e => e.BuildingName)
                    .IsRequired()
                    .HasColumnName("BUILDING_NAME")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.BuildingNum)
                    .IsRequired()
                    .HasColumnName("BUILDING_NUM")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasColumnName("CITY")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.CommissionPct).HasColumnName("COMMISSION_PCT");

                entity.Property(e => e.ContactEmail)
                    .IsRequired()
                    .HasColumnName("CONTACT_EMAIL")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.ContactName)
                    .IsRequired()
                    .HasColumnName("CONTACT_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasColumnName("COUNTRY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.County)
                    .IsRequired()
                    .HasColumnName("COUNTY")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.FlatNum)
                    .IsRequired()
                    .HasColumnName("FLAT_NUM")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.FtpAddress)
                    .IsRequired()
                    .HasColumnName("FTP_ADDRESS")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.IsActive).HasColumnName("IS_ACTIVE");

                entity.Property(e => e.PhoneNumber)
                    .IsRequired()
                    .HasColumnName("PHONE_NUMBER")
                    .HasColumnType("varchar(15)");

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasColumnName("STATE")
                    .HasColumnType("char(2)");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.Zipcode)
                    .IsRequired()
                    .HasColumnName("ZIPCODE")
                    .HasColumnType("varchar(10)");
            });

            modelBuilder.Entity<AttorneyLoan>(entity =>
            {
                entity.HasKey(e => e.AttorneyLoanKey)
                    .HasName("PK_AttorneyLoan");

                entity.Property(e => e.AttorneyLoanKey).HasColumnName("ATTORNEY_LOAN_KEY");

                entity.Property(e => e.AttorneyKey).HasColumnName("ATTORNEY_KEY");

                entity.Property(e => e.CashedCheckKey).HasColumnName("CASHED_CHECK_KEY");

                entity.Property(e => e.CommissionPct).HasColumnName("COMMISSION_PCT");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsActive).HasColumnName("IS_ACTIVE");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.AttorneyKeyNavigation)
                    .WithMany(p => p.AttorneyLoan)
                    .HasForeignKey(d => d.AttorneyKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_AttorneyLoan_Attorney");

                entity.HasOne(d => d.CashedCheckKeyNavigation)
                    .WithMany(p => p.AttorneyLoan)
                    .HasForeignKey(d => d.CashedCheckKey)
                    .HasConstraintName("FK_AttorneyLoan_CashedCheck");

                entity.HasOne(d => d.LoanKeyNavigation)
                    .WithMany(p => p.AttorneyLoan)
                    .HasForeignKey(d => d.LoanKey)
                    .HasConstraintName("FK_AttorneyLoan_Loan");
            });

            modelBuilder.Entity<AttorneyPayment>(entity =>
            {
                entity.HasKey(e => e.AttorneyPaymentKey)
                    .HasName("PK_AttorneyPayment");

                entity.HasIndex(e => e.LoanPaymentKey)
                    .HasName("IX_AttorneyPayment_LOAN_PAYMENT_KEY");

                entity.Property(e => e.AttorneyPaymentKey).HasColumnName("ATTORNEY_PAYMENT_KEY");

                entity.Property(e => e.AmtDueAttorney)
                    .HasColumnName("AMT_DUE_ATTORNEY")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.AttorneyKey).HasColumnName("ATTORNEY_KEY");

                entity.Property(e => e.AttorneyLoanKey).HasColumnName("ATTORNEY_LOAN_KEY");

                entity.Property(e => e.CashedCheckPaymentKey).HasColumnName("CASHED_CHECK_PAYMENT_KEY");

                entity.Property(e => e.LoanPaymentKey).HasColumnName("LOAN_PAYMENT_KEY");

                entity.Property(e => e.Reversed).HasColumnName("REVERSED");

                entity.Property(e => e.ReversedDate)
                    .HasColumnName("REVERSED_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.SentToAttorney)
                    .HasColumnName("SENT_TO_ATTORNEY")
                    .HasColumnType("smalldatetime");

                entity.HasOne(d => d.AttorneyKeyNavigation)
                    .WithMany(p => p.AttorneyPayment)
                    .HasForeignKey(d => d.AttorneyKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_AttorneyPayment_Attorney");

                entity.HasOne(d => d.AttorneyLoanKeyNavigation)
                    .WithMany(p => p.AttorneyPayment)
                    .HasForeignKey(d => d.AttorneyLoanKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_AttorneyPayment_AttorneyLoan");

                entity.HasOne(d => d.CashedCheckPaymentKeyNavigation)
                    .WithMany(p => p.AttorneyPayment)
                    .HasForeignKey(d => d.CashedCheckPaymentKey)
                    .HasConstraintName("FK_AttorneyPayment_CashedCheckPayment");

                entity.HasOne(d => d.LoanPaymentKeyNavigation)
                    .WithMany(p => p.AttorneyPayment)
                    .HasForeignKey(d => d.LoanPaymentKey)
                    .HasConstraintName("FK_AttorneyPayment_LoanPayment");
            });

            modelBuilder.Entity<AuddisadviceReport>(entity =>
            {
                entity.HasKey(e => e.AuddisAdviceReportKey)
                    .HasName("pk_AUDDISAdviceReport");

                entity.ToTable("AUDDISAdviceReport");

                entity.Property(e => e.AuddisAdviceReportKey).HasColumnName("AUDDIS_ADVICE_REPORT_KEY");

                entity.Property(e => e.AdviceType)
                    .IsRequired()
                    .HasColumnName("ADVICE_TYPE")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasColumnName("FILE_NAME")
                    .HasColumnType("varchar(200)");

                entity.Property(e => e.ReportGenerationDate)
                    .HasColumnName("REPORT_GENERATION_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.ReportType)
                    .IsRequired()
                    .HasColumnName("REPORT_TYPE")
                    .HasColumnType("varchar(20)");
            });

            modelBuilder.Entity<AuddisreasonCodeMapping>(entity =>
            {
                entity.HasKey(e => e.AuddisReasonCode)
                    .HasName("pk_AUDDISReasonCodeMapping");

                entity.ToTable("AUDDISReasonCodeMapping");

                entity.Property(e => e.AuddisReasonCode)
                    .HasColumnName("AUDDIS_REASON_CODE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.DdiStatusCode).HasColumnName("DDI_STATUS_CODE");

                entity.HasOne(d => d.DdiStatusCodeNavigation)
                    .WithMany(p => p.AuddisreasonCodeMapping)
                    .HasPrincipalKey(p => p.StatusCode)
                    .HasForeignKey(d => d.DdiStatusCode)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_AUDDISReasonCodeMapping_DDIStatus");
            });

            modelBuilder.Entity<AutoBankingReport>(entity =>
            {
                entity.HasKey(e => e.AutobankingreportKey)
                    .HasName("PK_AUTOBANKINGREPORT_KEY");

                entity.Property(e => e.AutobankingreportKey).HasColumnName("AUTOBANKINGREPORT_KEY");

                entity.Property(e => e.Acct)
                    .HasColumnName("ACCT")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.Amount)
                    .HasColumnName("AMOUNT")
                    .HasColumnType("money");

                entity.Property(e => e.AuditCat)
                    .HasColumnName("AUDIT_CAT")
                    .HasColumnType("varchar(1)");

                entity.Property(e => e.Balance)
                    .HasColumnName("BALANCE")
                    .HasColumnType("money");

                entity.Property(e => e.BankAba)
                    .HasColumnName("BANK_ABA")
                    .HasColumnType("varchar(9)");

                entity.Property(e => e.CheckNo)
                    .HasColumnName("CHECK_NO")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.ExternalAppsKey).HasColumnName("EXTERNAL_APPS_KEY");

                entity.Property(e => e.Issuer)
                    .HasColumnName("ISSUER")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.Reference)
                    .HasColumnName("REFERENCE")
                    .HasColumnType("varchar(43)");

                entity.Property(e => e.Results)
                    .IsRequired()
                    .HasColumnName("RESULTS")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.RiDate)
                    .HasColumnName("RI_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartDate)
                    .HasColumnName("START_DATE")
                    .HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<AutoReport>(entity =>
            {
                entity.HasKey(e => e.AutoReportKey)
                    .HasName("PK_AutoReport");

                entity.Property(e => e.AutoReportKey).HasColumnName("AUTO_REPORT_KEY");

                entity.Property(e => e.AttachFileToEmail).HasColumnName("ATTACH_FILE_TO_EMAIL");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("date");

                entity.Property(e => e.Deleted).HasColumnName("DELETED");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(2000)");

                entity.Property(e => e.EmailSubject)
                    .IsRequired()
                    .HasColumnName("EMAIL_SUBJECT")
                    .HasColumnType("varchar(200)");

                entity.Property(e => e.EnteredBy)
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.LastUpdated)
                    .HasColumnName("LAST_UPDATED")
                    .HasColumnType("date");

                entity.Property(e => e.LastUpdatedBy)
                    .HasColumnName("LAST_UPDATED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.Outfile)
                    .IsRequired()
                    .HasColumnName("OUTFILE")
                    .HasColumnType("varchar(300)");

                entity.Property(e => e.OutputCsv).HasColumnName("OUTPUT_CSV");

                entity.Property(e => e.OutputPdf).HasColumnName("OUTPUT_PDF");

                entity.Property(e => e.OutputXls).HasColumnName("OUTPUT_XLS");

                entity.Property(e => e.ReportName)
                    .IsRequired()
                    .HasColumnName("REPORT_NAME")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.ReportSql)
                    .IsRequired()
                    .HasColumnName("REPORT_SQL")
                    .HasColumnType("text");

                entity.Property(e => e.RunDom).HasColumnName("RUN_DOM");

                entity.Property(e => e.RunEom).HasColumnName("RUN_EOM");

                entity.Property(e => e.RunEoq).HasColumnName("RUN_EOQ");

                entity.Property(e => e.RunEoy).HasColumnName("RUN_EOY");

                entity.Property(e => e.RunFri).HasColumnName("RUN_FRI");

                entity.Property(e => e.RunMon).HasColumnName("RUN_MON");

                entity.Property(e => e.RunSat).HasColumnName("RUN_SAT");

                entity.Property(e => e.RunSun).HasColumnName("RUN_SUN");

                entity.Property(e => e.RunThu).HasColumnName("RUN_THU");

                entity.Property(e => e.RunTue).HasColumnName("RUN_TUE");

                entity.Property(e => e.RunWed).HasColumnName("RUN_WED");

                entity.Property(e => e.SqlFileLocation)
                    .IsRequired()
                    .HasColumnName("SQL_FILE_LOCATION")
                    .HasColumnType("varchar(400)");
            });

            modelBuilder.Entity<AutoReportEmail>(entity =>
            {
                entity.HasKey(e => e.AutoReportEmailKey)
                    .HasName("PK_AutoReportEmail");

                entity.Property(e => e.AutoReportEmailKey).HasColumnName("AUTO_REPORT_EMAIL_KEY");

                entity.Property(e => e.AutoReportKey).HasColumnName("AUTO_REPORT_KEY");

                entity.Property(e => e.EmailAddress)
                    .IsRequired()
                    .HasColumnName("EMAIL_ADDRESS")
                    .HasColumnType("varchar(100)");

                entity.HasOne(d => d.AutoReportKeyNavigation)
                    .WithMany(p => p.AutoReportEmail)
                    .HasForeignKey(d => d.AutoReportKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_AutoReportEmail_AutoReport");
            });

            modelBuilder.Entity<AutoReportRunSchedule>(entity =>
            {
                entity.HasKey(e => e.AutoReportRunScheduleKey)
                    .HasName("PK_AutoReportRunScheduleKey");

                entity.Property(e => e.AutoReportRunScheduleKey).HasColumnName("AUTO_REPORT_RUN_SCHEDULE_KEY");

                entity.Property(e => e.EndDate)
                    .HasColumnName("END_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EndTime)
                    .HasColumnName("END_TIME")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EveryXMinutes).HasColumnName("EVERY_X_MINUTES");

                entity.Property(e => e.Fri).HasColumnName("FRI");

                entity.Property(e => e.Hourly).HasColumnName("HOURLY");

                entity.Property(e => e.JobName)
                    .HasColumnName("JOB_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Mon).HasColumnName("MON");

                entity.Property(e => e.MonthlyDay).HasColumnName("MONTHLY_DAY");

                entity.Property(e => e.RunTime).HasColumnName("RUN_TIME");

                entity.Property(e => e.Sat).HasColumnName("SAT");

                entity.Property(e => e.StartDate)
                    .HasColumnName("START_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartTime)
                    .HasColumnName("START_TIME")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Sun).HasColumnName("SUN");

                entity.Property(e => e.Thurs).HasColumnName("THURS");

                entity.Property(e => e.TimeZone)
                    .HasColumnName("TIME_ZONE")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Tues).HasColumnName("TUES");

                entity.Property(e => e.Wed).HasColumnName("WED");
            });

            modelBuilder.Entity<AutoReportSchedule>(entity =>
            {
                entity.HasKey(e => e.AutoReportScheduleKey)
                    .HasName("PK_AutoReportSchedule");

                entity.Property(e => e.AutoReportScheduleKey).HasColumnName("AUTO_REPORT_SCHEDULE_KEY");

                entity.Property(e => e.AutoReportKey).HasColumnName("AUTO_REPORT_KEY");

                entity.Property(e => e.AutoReportRunScheduleKey).HasColumnName("AUTO_REPORT_RUN_SCHEDULE_KEY");

                entity.HasOne(d => d.AutoReportKeyNavigation)
                    .WithMany(p => p.AutoReportSchedule)
                    .HasForeignKey(d => d.AutoReportKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_AutoReportSchedule_AutoReport");

                entity.HasOne(d => d.AutoReportRunScheduleKeyNavigation)
                    .WithMany(p => p.AutoReportSchedule)
                    .HasForeignKey(d => d.AutoReportRunScheduleKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_AutoReportSchedule_AutoReportRunSchedule");
            });

            modelBuilder.Entity<AutoReportTab>(entity =>
            {
                entity.HasKey(e => e.AutoReportTabKey)
                    .HasName("PK_AutoTabReportKey");

                entity.Property(e => e.AutoReportTabKey).HasColumnName("AUTO_REPORT_TAB_KEY");

                entity.Property(e => e.AutoReportKey).HasColumnName("AUTO_REPORT_KEY");

                entity.Property(e => e.ResultNum).HasColumnName("RESULT_NUM");

                entity.Property(e => e.TabName)
                    .IsRequired()
                    .HasColumnName("TAB_NAME")
                    .HasColumnType("varchar(30)");

                entity.HasOne(d => d.AutoReportKeyNavigation)
                    .WithMany(p => p.AutoReportTab)
                    .HasForeignKey(d => d.AutoReportKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_AutoReportTab_AutoReport");
            });

            modelBuilder.Entity<BalSheet2>(entity =>
            {
                entity.HasKey(e => e.BalsheetKey)
                    .HasName("PK_BalSheet2");

                entity.HasIndex(e => new { e.BalsheetKey, e.BusinessDate })
                    .HasName("IX_BalSheet2_BUSINESS_DATE");

                entity.HasIndex(e => new { e.Location, e.BusinessDate, e.BalsheetKey })
                    .HasName("IX_BalSheet2_BALSHEET_KEY");

                entity.Property(e => e.BalsheetKey).HasColumnName("BALSHEET_KEY");

                entity.Property(e => e.AdastraExported).HasColumnName("ADASTRA_EXPORTED");

                entity.Property(e => e.BusinessDate)
                    .HasColumnName("BUSINESS_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Exported)
                    .HasColumnName("EXPORTED")
                    .HasColumnType("LOGICAL");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.TrecsExport)
                    .HasColumnName("TRECS_EXPORT")
                    .HasColumnType("LOGICAL");

                entity.HasOne(d => d.TellerNavigation)
                    .WithMany(p => p.BalSheet2)
                    .HasPrincipalKey(p => p.Teller)
                    .HasForeignKey(d => d.Teller)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_BalSheet2_TellerID");
            });

            modelBuilder.Entity<BalSheetColumns2>(entity =>
            {
                entity.HasKey(e => e.BscKey)
                    .HasName("PK_BalSheetColumns2");

                entity.HasIndex(e => e.BalsheetKey)
                    .HasName("IX_BalSheetColumns2_BALSHEET_KEY");

                entity.Property(e => e.BscKey).HasColumnName("BSC_KEY");

                entity.Property(e => e.AcctType).HasColumnName("ACCT_TYPE");

                entity.Property(e => e.AcctTypeDesc)
                    .HasColumnName("ACCT_TYPE_DESC")
                    .HasColumnType("varchar(60)");

                entity.Property(e => e.BalsheetKey).HasColumnName("BALSHEET_KEY");

                entity.Property(e => e.CrAmount)
                    .HasColumnName("CR_AMOUNT")
                    .HasColumnType("money");

                entity.Property(e => e.DbAmount)
                    .HasColumnName("DB_AMOUNT")
                    .HasColumnType("money");

                entity.Property(e => e.GlAcct).HasColumnName("GL_ACCT");

                entity.HasOne(d => d.BalsheetKeyNavigation)
                    .WithMany(p => p.BalSheetColumns2)
                    .HasForeignKey(d => d.BalsheetKey)
                    .HasConstraintName("FK_BalSheetColumns_BalSheet");

                entity.HasOne(d => d.GlAcctNavigation)
                    .WithMany(p => p.BalSheetColumns2)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.GlAcct)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_BalSheetColumns2_GL_ACCT");
            });

            modelBuilder.Entity<BalSheetTransDetail>(entity =>
            {
                entity.HasKey(e => new { e.BalsheetKey, e.TransDetailKey, e.Location })
                    .HasName("PK_BalSheet_TransDetail");

                entity.ToTable("BalSheet_TransDetail");

                entity.HasIndex(e => e.BalsheetKey)
                    .HasName("IX_BalSheet_TransDetail_BALSHEET_KEY");

                entity.HasIndex(e => e.TransDetailKey)
                    .HasName("IX_BalSheet_TransDetail_TRANS_DETAIL_KEY");

                entity.HasIndex(e => new { e.Location, e.TransDetailKey, e.BalsheetKey })
                    .HasName("IX_BalSheet_TransDetail_LOCATION_TRANS_DETAIL_KAY");

                entity.Property(e => e.BalsheetKey).HasColumnName("BALSHEET_KEY");

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.HasOne(d => d.BalsheetKeyNavigation)
                    .WithMany(p => p.BalSheetTransDetail)
                    .HasForeignKey(d => d.BalsheetKey)
                    .HasConstraintName("FK_BalSheet_TransDetail_BalSheet");
            });

            modelBuilder.Entity<BankClassification>(entity =>
            {
                entity.HasKey(e => e.BankClassificationKey)
                    .HasName("PK_BankClassification");

                entity.Property(e => e.BankClassificationKey).HasColumnName("BANK_CLASSIFICATION_KEY");

                entity.Property(e => e.BankClassificationTypeKey).HasColumnName("BANK_CLASSIFICATION_TYPE_KEY");

                entity.Property(e => e.Bankaba)
                    .IsRequired()
                    .HasColumnName("BANKABA")
                    .HasColumnType("varchar(9)");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.BankClassificationTypeKeyNavigation)
                    .WithMany(p => p.BankClassification)
                    .HasForeignKey(d => d.BankClassificationTypeKey)
                    .HasConstraintName("FK_BankClassification_BankClassificationType");

                entity.HasOne(d => d.BankabaNavigation)
                    .WithMany(p => p.BankClassification)
                    .HasForeignKey(d => d.Bankaba)
                    .HasConstraintName("FK_BankClassification_Banks");
            });

            modelBuilder.Entity<BankClassificationType>(entity =>
            {
                entity.HasKey(e => e.BankClassificationTypeKey)
                    .HasName("PK_BankClassificationType");

                entity.Property(e => e.BankClassificationTypeKey).HasColumnName("BANK_CLASSIFICATION_TYPE_KEY");

                entity.Property(e => e.BankClassificationDesc)
                    .IsRequired()
                    .HasColumnName("BANK_CLASSIFICATION_DESC")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.BankClassificationType1).HasColumnName("BANK_CLASSIFICATION_TYPE");
            });

            modelBuilder.Entity<BankStatus>(entity =>
            {
                entity.ToTable("Bank_Status");

                entity.Property(e => e.BankStatusId).HasColumnName("Bank_Status_Id");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasColumnType("varchar(50)");
            });

            modelBuilder.Entity<Banks>(entity =>
            {
                entity.HasKey(e => e.Bankaba)
                    .HasName("BankAbandx");

                entity.ToTable("BANKS");

                entity.HasIndex(e => e.Name)
                    .HasName("IX_Banks_NAME");

                entity.Property(e => e.Bankaba)
                    .HasColumnName("BANKABA")
                    .HasColumnType("varchar(9)");

                entity.Property(e => e.AddrStreet)
                    .IsRequired()
                    .HasColumnName("ADDR_STREET")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.Address1)
                    .IsRequired()
                    .HasColumnName("ADDRESS1")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.AddressCsz)
                    .HasColumnName("ADDRESS_CSZ")
                    .HasColumnType("varchar(100)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_CSZ]([ADDRESS_FORMAT],[CITY],[STATE],[ZIPCODE])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressFormat)
                    .IsRequired()
                    .HasColumnName("ADDRESS_FORMAT")
                    .HasColumnType("char(3)");

                entity.Property(e => e.AddressLine)
                    .HasColumnName("ADDRESS_LINE")
                    .HasColumnType("varchar(100)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE]([ADDRESS_FORMAT],[ADDRESS1],'','',[ADDR_STREET],'','','','',[FLAT_NUM],[BUILDING_NAME],[BUILDING_NUM])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressLine1)
                    .HasColumnName("ADDRESS_LINE_1")
                    .HasColumnType("varchar(100)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE_1]([ADDRESS_FORMAT],[ADDRESS1],'','',[ADDR_STREET],'','',[FLAT_NUM],[BUILDING_NAME],'','')")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressLine2)
                    .HasColumnName("ADDRESS_LINE_2")
                    .HasColumnType("varchar(150)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE_2]([ADDRESS_FORMAT],'','',[CITY],[STATE],[ZIPCODE],[BUILDING_NUM],[ADDR_STREET],[ADDRESS1],'','','','')")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressLine3)
                    .HasColumnName("ADDRESS_LINE_3")
                    .HasColumnType("varchar(150)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE_3]([ADDRESS_FORMAT],'','',[CITY],[STATE],[ZIPCODE])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.Areacode)
                    .HasColumnName("AREACODE")
                    .HasColumnType("varchar(3)");

                entity.Property(e => e.AutomatedMerchantLine).HasColumnName("AUTOMATED_MERCHANT_LINE");

                entity.Property(e => e.BankFundingMethod).HasColumnName("BANK_FUNDING_METHOD");

                entity.Property(e => e.BankGroup).HasColumnName("BANK_GROUP");

                entity.Property(e => e.BankReportNote)
                    .HasColumnName("BANK_REPORT_NOTE")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Bankcity)
                    .IsRequired()
                    .HasColumnName("BANKCITY")
                    .HasColumnType("varchar(30)")
                    .HasComputedColumnSql("[CITY]")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.Bankphone)
                    .HasColumnName("bankphone")
                    .HasColumnType("varchar(12)");

                entity.Property(e => e.BanksParentKey).HasColumnName("BANKS_PARENT_KEY");

                entity.Property(e => e.Bankstate)
                    .IsRequired()
                    .HasColumnName("BANKSTATE")
                    .HasColumnType("char(2)")
                    .HasComputedColumnSql("[STATE]")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.Bankzip)
                    .IsRequired()
                    .HasColumnName("BANKZIP")
                    .HasColumnType("varchar(10)")
                    .HasComputedColumnSql("[ZIPCODE]")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.Branch)
                    .HasColumnName("BRANCH")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.BuildingName)
                    .IsRequired()
                    .HasColumnName("BUILDING_NAME")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.BuildingNum)
                    .IsRequired()
                    .HasColumnName("BUILDING_NUM")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.BusinessOpensAt)
                    .IsRequired()
                    .HasColumnName("BUSINESS_OPENS_AT")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasColumnName("CITY")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasColumnName("COUNTRY")
                    .HasColumnType("char(3)")
                    .HasDefaultValueSql("''");

                entity.Property(e => e.County)
                    .IsRequired()
                    .HasColumnName("COUNTY")
                    .HasColumnType("varchar(25)")
                    .HasDefaultValueSql("''");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.EnteredBy)
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.FedUpdateDate)
                    .HasColumnName("FED_UPDATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.FlatNum)
                    .IsRequired()
                    .HasColumnName("FLAT_NUM")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.IsGovt).HasColumnName("IS_GOVT");

                entity.Property(e => e.MainBank).HasDefaultValueSql("0");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Phone)
                    .HasColumnName("PHONE")
                    .HasColumnType("varchar(15)");

                entity.Property(e => e.Riphone)
                    .HasColumnName("RIPHONE")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasColumnName("STATE")
                    .HasColumnType("char(2)");

                entity.Property(e => e.VerifyPhone)
                    .HasColumnName("Verify_Phone")
                    .HasColumnType("varchar(12)");

                entity.Property(e => e.Zipcode)
                    .IsRequired()
                    .HasColumnName("ZIPCODE")
                    .HasColumnType("varchar(10)");

                entity.HasOne(d => d.BanksParentKeyNavigation)
                    .WithMany(p => p.Banks)
                    .HasForeignKey(d => d.BanksParentKey)
                    .HasConstraintName("FK_Banks_BanksParent");
            });

            modelBuilder.Entity<BanksParent>(entity =>
            {
                entity.HasKey(e => e.BanksParentKey)
                    .HasName("PK_BanksParent");

                entity.Property(e => e.BanksParentKey).HasColumnName("BANKS_PARENT_KEY");

                entity.Property(e => e.AchBankKey).HasColumnName("ACH_BANK_KEY");

                entity.Property(e => e.AllowsMiddayProcessing).HasColumnName("ALLOWS_MIDDAY_PROCESSING");

                entity.Property(e => e.BanksParentName)
                    .IsRequired()
                    .HasColumnName("BANKS_PARENT_NAME")
                    .HasColumnType("varchar(128)");

                entity.Property(e => e.CreditAchBankKey)
                    .HasColumnName("CREDIT_ACH_BANK_KEY")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.DebitAchBankKey)
                    .HasColumnName("DEBIT_ACH_BANK_KEY")
                    .HasDefaultValueSql("1");

                entity.HasOne(d => d.AchBankKeyNavigation)
                    .WithMany(p => p.BanksParent)
                    .HasForeignKey(d => d.AchBankKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_BanksParent_ACHBank");
            });

            modelBuilder.Entity<BillPayBiller>(entity =>
            {
                entity.HasKey(e => e.BillpayBillerKey)
                    .HasName("PK_BILLPAY_BILLER_KEY");

                entity.Property(e => e.BillpayBillerKey).HasColumnName("BILLPAY_BILLER_KEY");

                entity.Property(e => e.BillerCode)
                    .IsRequired()
                    .HasColumnName("BILLER_CODE")
                    .HasColumnType("varchar(6)");

                entity.Property(e => e.BillerFee)
                    .HasColumnName("BILLER_FEE")
                    .HasColumnType("decimal");

                entity.Property(e => e.BillerName)
                    .IsRequired()
                    .HasColumnName("BILLER_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.BillerPhone)
                    .IsRequired()
                    .HasColumnName("BILLER_PHONE")
                    .HasColumnType("varchar(12)");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DisplayedName)
                    .IsRequired()
                    .HasColumnName("DISPLAYED_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.MaxAllowedPayment)
                    .HasColumnName("MAX_ALLOWED_PAYMENT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.RawImportedData)
                    .IsRequired()
                    .HasColumnName("RAW_IMPORTED_DATA")
                    .HasColumnType("varchar(1000)");

                entity.Property(e => e.Status).HasColumnName("STATUS");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.UseBillerFee).HasColumnName("USE_BILLER_FEE");

                entity.Property(e => e.VendorId).HasColumnName("VENDOR_ID");

                entity.HasOne(d => d.Vendor)
                    .WithMany(p => p.BillPayBiller)
                    .HasPrincipalKey(p => p.VendorId)
                    .HasForeignKey(d => d.VendorId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_BillPayBiller_BillPayVendor");
            });

            modelBuilder.Entity<BillPayVendor>(entity =>
            {
                entity.HasKey(e => e.BillpayVendorKey)
                    .HasName("PK_BILLPAY_VENDOR_KEY");

                entity.HasIndex(e => e.VendorId)
                    .HasName("UX_BillPayVendor_VENDOR_ID")
                    .IsUnique();

                entity.Property(e => e.BillpayVendorKey).HasColumnName("BILLPAY_VENDOR_KEY");

                entity.Property(e => e.DateDeleted)
                    .HasColumnName("DATE_DELETED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy)
                    .HasColumnName("DELETED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasColumnName("PHONE")
                    .HasColumnType("varchar(12)");

                entity.Property(e => e.VendorId).HasColumnName("VENDOR_ID");

                entity.Property(e => e.VendorName)
                    .IsRequired()
                    .HasColumnName("VENDOR_NAME")
                    .HasColumnType("varchar(50)");
            });

            modelBuilder.Entity<BillerOcrregion>(entity =>
            {
                entity.HasKey(e => e.BillerOcrregionKey)
                    .HasName("PK_BILLER_OCRREGION_KEY");

                entity.ToTable("BillerOCRRegion");

                entity.Property(e => e.BillerOcrregionKey).HasColumnName("BILLER_OCRREGION_KEY");

                entity.Property(e => e.AccountNumLength).HasColumnName("ACCOUNT_NUM_LENGTH");

                entity.Property(e => e.AccountNumStart).HasColumnName("ACCOUNT_NUM_START");

                entity.Property(e => e.AmountLength).HasColumnName("AMOUNT_LENGTH");

                entity.Property(e => e.AmountStart).HasColumnName("AMOUNT_START");

                entity.Property(e => e.BillpayBillerKey).HasColumnName("BILLPAY_BILLER_KEY");

                entity.Property(e => e.OcrregionKey).HasColumnName("OCRREGION_KEY");

                entity.Property(e => e.Scanlinelength).HasColumnName("SCANLINELENGTH");

                entity.Property(e => e.TrimAccountNumLeadingZeros).HasColumnName("TRIM_ACCOUNT_NUM_LEADING_ZEROS");

                entity.HasOne(d => d.BillpayBillerKeyNavigation)
                    .WithMany(p => p.BillerOcrregion)
                    .HasForeignKey(d => d.BillpayBillerKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_BillerOCRRegion_BillPayBiller");

                entity.HasOne(d => d.OcrregionKeyNavigation)
                    .WithMany(p => p.BillerOcrregion)
                    .HasForeignKey(d => d.OcrregionKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_BillerOCRRegion_OCRRegion");
            });

            modelBuilder.Entity<BlockMailing>(entity =>
            {
                entity.HasKey(e => e.BlockMailingKey)
                    .HasName("PK_BlockMailing");

                entity.Property(e => e.BlockMailingKey).HasColumnName("BLOCK_MAILING_KEY");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.BlockMailing)
                    .HasForeignKey(d => d.CustomerKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_BlockMailing_Customer");
            });

            modelBuilder.Entity<BlockReason>(entity =>
            {
                entity.HasKey(e => e.BlockReasonKey)
                    .HasName("PK_BlockReason");

                entity.Property(e => e.BlockReasonKey).HasColumnName("BLOCK_REASON_KEY");

                entity.Property(e => e.IsActive).HasColumnName("IS_ACTIVE");

                entity.Property(e => e.ReasonDescription)
                    .IsRequired()
                    .HasColumnName("REASON_DESCRIPTION")
                    .HasColumnType("varchar(40)");
            });

            modelBuilder.Entity<BlockedAddress>(entity =>
            {
                entity.HasKey(e => e.BlockedAddressKey)
                    .HasName("PK_BLOCKED_ADDRESS");

                entity.Property(e => e.BlockedAddressKey).HasColumnName("BLOCKED_ADDRESS_KEY");

                entity.Property(e => e.Active).HasColumnName("ACTIVE");

                entity.Property(e => e.BuildingName)
                    .IsRequired()
                    .HasColumnName("BUILDING_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasColumnName("CITY")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.CompareBuildingName).HasColumnName("COMPARE_BUILDING_NAME");

                entity.Property(e => e.CompareCity).HasColumnName("COMPARE_CITY");

                entity.Property(e => e.CompareStreetName).HasColumnName("COMPARE_STREET_NAME");

                entity.Property(e => e.CompareZipcode).HasColumnName("COMPARE_ZIPCODE");

                entity.Property(e => e.DateDeleted)
                    .HasColumnName("DATE_DELETED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy)
                    .HasColumnName("DELETED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.StreetName)
                    .IsRequired()
                    .HasColumnName("STREET_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.Zipcode)
                    .IsRequired()
                    .HasColumnName("ZIPCODE")
                    .HasColumnType("varchar(10)");
            });

            modelBuilder.Entity<BusinessLoan>(entity =>
            {
                entity.HasKey(e => e.BusinessLoanKey)
                    .HasName("PK_BusinessLoan");

                entity.HasIndex(e => e.CustomerBusinessKey)
                    .HasName("IX_BusinessLoan_CUSTOMER_BUSINESS_KEY");

                entity.HasIndex(e => e.LoanKey)
                    .HasName("IX_BusinessLoan_LOAN_KEY");

                entity.Property(e => e.BusinessLoanKey).HasColumnName("BUSINESS_LOAN_KEY");

                entity.Property(e => e.AddrNum)
                    .IsRequired()
                    .HasColumnName("ADDR_NUM")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.AddrPostDir)
                    .IsRequired()
                    .HasColumnName("ADDR_POST_DIR")
                    .HasColumnType("varchar(2)");

                entity.Property(e => e.AddrPreDir)
                    .IsRequired()
                    .HasColumnName("ADDR_PRE_DIR")
                    .HasColumnType("varchar(2)");

                entity.Property(e => e.AddrStreet)
                    .IsRequired()
                    .HasColumnName("ADDR_STREET")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.AddrSuffix)
                    .IsRequired()
                    .HasColumnName("ADDR_SUFFIX")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.AddrSuite)
                    .IsRequired()
                    .HasColumnName("ADDR_SUITE")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.AddrSuiteNum)
                    .IsRequired()
                    .HasColumnName("ADDR_SUITE_NUM")
                    .HasColumnType("varchar(15)");

                entity.Property(e => e.AddressCsz)
                    .HasColumnName("ADDRESS_CSZ")
                    .HasColumnType("varchar(100)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_CSZ]([ADDRESS_FORMAT],[CITY],[STATE],[ZIPCODE])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressFormat)
                    .IsRequired()
                    .HasColumnName("ADDRESS_FORMAT")
                    .HasColumnType("char(3)");

                entity.Property(e => e.AddressLine)
                    .HasColumnName("ADDRESS_LINE")
                    .HasColumnType("varchar(100)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE]([ADDRESS_FORMAT],'',[ADDR_NUM],[ADDR_PRE_DIR],[ADDR_STREET],[ADDR_SUFFIX],[ADDR_POST_DIR],[ADDR_SUITE],[ADDR_SUITE_NUM],[FLAT_NUM],[BUILDING_NAME],[BUILDING_NUM])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressLine1)
                    .HasColumnName("ADDRESS_LINE_1")
                    .HasColumnType("varchar(100)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE_1]([ADDRESS_FORMAT],'',[ADDR_NUM],[ADDR_PRE_DIR],[ADDR_STREET],[ADDR_SUFFIX],[ADDR_POST_DIR],[FLAT_NUM],[BUILDING_NAME],[ADDR_SUITE],[ADDR_SUITE_NUM])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressLine2)
                    .HasColumnName("ADDRESS_LINE_2")
                    .HasColumnType("varchar(150)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE_2]([ADDRESS_FORMAT],[ADDR_SUITE],[ADDR_SUITE_NUM],[CITY],[STATE],[ZIPCODE],[BUILDING_NUM],[ADDR_STREET],'',[ADDR_NUM],[ADDR_PRE_DIR],[ADDR_SUFFIX],[ADDR_POST_DIR])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressLine3)
                    .HasColumnName("ADDRESS_LINE_3")
                    .HasColumnType("varchar(150)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE_3]([ADDRESS_FORMAT],[ADDR_SUITE],[ADDR_SUITE_NUM],[CITY],[STATE],[ZIPCODE])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.BuildingName)
                    .IsRequired()
                    .HasColumnName("BUILDING_NAME")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.BuildingNum)
                    .IsRequired()
                    .HasColumnName("BUILDING_NUM")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.BusinessName)
                    .IsRequired()
                    .HasColumnName("BUSINESS_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.BusinessPhoneNum)
                    .IsRequired()
                    .HasColumnName("BUSINESS_PHONE_NUM")
                    .HasColumnType("varchar(12)");

                entity.Property(e => e.BusinessStartDate)
                    .HasColumnName("BUSINESS_START_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.BusinessTypeCode).HasColumnName("BUSINESS_TYPE_CODE");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasColumnName("CITY")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasColumnName("COUNTRY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.County)
                    .IsRequired()
                    .HasColumnName("COUNTY")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.CustomerBusinessKey).HasColumnName("CUSTOMER_BUSINESS_KEY");

                entity.Property(e => e.FlatNum)
                    .IsRequired()
                    .HasColumnName("FLAT_NUM")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.LegalTypeCode).HasColumnName("LEGAL_TYPE_CODE");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.LoanPurpose)
                    .IsRequired()
                    .HasColumnName("LOAN_PURPOSE")
                    .HasColumnType("varchar(255)");

                entity.Property(e => e.NumEmployees).HasColumnName("NUM_EMPLOYEES");

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasColumnName("STATE")
                    .HasColumnType("char(2)");

                entity.Property(e => e.TaxIdNum)
                    .IsRequired()
                    .HasColumnName("TAX_ID_NUM")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.UseHomeAddress).HasColumnName("USE_HOME_ADDRESS");

                entity.Property(e => e.VerBankDeposits)
                    .HasColumnName("VER_BANK_DEPOSITS")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.VerMonthlyNetInc)
                    .HasColumnName("VER_MONTHLY_NET_INC")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Zipcode)
                    .IsRequired()
                    .HasColumnName("ZIPCODE")
                    .HasColumnType("varchar(10)");

                entity.HasOne(d => d.CustomerBusinessKeyNavigation)
                    .WithMany(p => p.BusinessLoan)
                    .HasForeignKey(d => d.CustomerBusinessKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_BusinessLoan_CustomerBusiness");

                entity.HasOne(d => d.LoanKeyNavigation)
                    .WithMany(p => p.BusinessLoan)
                    .HasForeignKey(d => d.LoanKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_BusinessLoan_Loan");
            });

            modelBuilder.Entity<Cablender>(entity =>
            {
                entity.HasKey(e => e.CabLenderKey)
                    .HasName("PK_CABLender");

                entity.ToTable("CABLender");

                entity.Property(e => e.CabLenderKey).HasColumnName("CAB_LENDER_KEY");

                entity.Property(e => e.AddrNum)
                    .IsRequired()
                    .HasColumnName("ADDR_NUM")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.AddrPostDir)
                    .IsRequired()
                    .HasColumnName("ADDR_POST_DIR")
                    .HasColumnType("varchar(2)");

                entity.Property(e => e.AddrPreDir)
                    .IsRequired()
                    .HasColumnName("ADDR_PRE_DIR")
                    .HasColumnType("varchar(2)");

                entity.Property(e => e.AddrStreet)
                    .IsRequired()
                    .HasColumnName("ADDR_STREET")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.AddrSuffix)
                    .IsRequired()
                    .HasColumnName("ADDR_SUFFIX")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.AddrSuite)
                    .IsRequired()
                    .HasColumnName("ADDR_SUITE")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.AddrSuiteNum)
                    .IsRequired()
                    .HasColumnName("ADDR_SUITE_NUM")
                    .HasColumnType("varchar(15)");

                entity.Property(e => e.AddressCsz)
                    .HasColumnName("ADDRESS_CSZ")
                    .HasColumnType("varchar(100)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_CSZ]([ADDRESS_FORMAT],[CITY],[STATE],[ZIPCODE])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressFormat)
                    .IsRequired()
                    .HasColumnName("ADDRESS_FORMAT")
                    .HasColumnType("char(3)");

                entity.Property(e => e.AddressLine)
                    .HasColumnName("ADDRESS_LINE")
                    .HasColumnType("varchar(100)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE]([ADDRESS_FORMAT],'',[ADDR_NUM],[ADDR_PRE_DIR],[ADDR_STREET],[ADDR_SUFFIX],[ADDR_POST_DIR],[ADDR_SUITE],[ADDR_SUITE_NUM],[FLAT_NUM],[BUILDING_NAME],[BUILDING_NUM])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressLine1)
                    .HasColumnName("ADDRESS_LINE_1")
                    .HasColumnType("varchar(100)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE_1]([ADDRESS_FORMAT],'',[ADDR_NUM],[ADDR_PRE_DIR],[ADDR_STREET],[ADDR_SUFFIX],[ADDR_POST_DIR],[FLAT_NUM],[BUILDING_NAME],[ADDR_SUITE],[ADDR_SUITE_NUM])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressLine2)
                    .HasColumnName("ADDRESS_LINE_2")
                    .HasColumnType("varchar(150)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE_2]([ADDRESS_FORMAT],[ADDR_SUITE],[ADDR_SUITE_NUM],[CITY],[STATE],[ZIPCODE],[BUILDING_NUM],[ADDR_STREET],'',[ADDR_NUM],[ADDR_PRE_DIR],[ADDR_SUFFIX],[ADDR_POST_DIR])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressLine3)
                    .HasColumnName("ADDRESS_LINE_3")
                    .HasColumnType("varchar(150)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE_3]([ADDRESS_FORMAT],[ADDR_SUITE],[ADDR_SUITE_NUM],[CITY],[STATE],[ZIPCODE])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.BuildingName)
                    .IsRequired()
                    .HasColumnName("BUILDING_NAME")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.BuildingNum)
                    .IsRequired()
                    .HasColumnName("BUILDING_NUM")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.CabLenderName)
                    .IsRequired()
                    .HasColumnName("CAB_LENDER_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.CertificateId)
                    .IsRequired()
                    .HasColumnName("CERTIFICATE_ID")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasColumnName("CITY")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.ContactFirstName)
                    .IsRequired()
                    .HasColumnName("CONTACT_FIRST_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.ContactLastName)
                    .IsRequired()
                    .HasColumnName("CONTACT_LAST_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasColumnName("COUNTRY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.County)
                    .IsRequired()
                    .HasColumnName("COUNTY")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.FlatNum)
                    .IsRequired()
                    .HasColumnName("FLAT_NUM")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.IsDeleted).HasColumnName("IS_DELETED");

                entity.Property(e => e.LastUpdated)
                    .HasColumnName("LAST_UPDATED")
                    .HasColumnType("datetime");

                entity.Property(e => e.LastUpdatedBy)
                    .IsRequired()
                    .HasColumnName("LAST_UPDATED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.PhoneNumber)
                    .IsRequired()
                    .HasColumnName("PHONE_NUMBER")
                    .HasColumnType("varchar(12)");

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasColumnName("STATE")
                    .HasColumnType("char(2)");

                entity.Property(e => e.Zipcode)
                    .IsRequired()
                    .HasColumnName("ZIPCODE")
                    .HasColumnType("varchar(10)");
            });

            modelBuilder.Entity<CapsCctxref>(entity =>
            {
                entity.HasKey(e => e.CreditCardTransKey)
                    .HasName("PK_CapsCCTXRef");

                entity.ToTable("CapsCCTXRef");

                entity.Property(e => e.CreditCardTransKey)
                    .HasColumnName("CREDIT_CARD_TRANS_KEY")
                    .ValueGeneratedNever();

                entity.Property(e => e.Amt)
                    .HasColumnName("AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Approved).HasColumnName("APPROVED");

                entity.Property(e => e.CapsHoldKey).HasColumnName("CAPS_HOLD_KEY");

                entity.Property(e => e.Posted).HasColumnName("POSTED");

                entity.HasOne(d => d.CapsHoldKeyNavigation)
                    .WithMany(p => p.CapsCctxref)
                    .HasForeignKey(d => d.CapsHoldKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CapsCCTXRef_CAPS_HOLD_KEY");
            });

            modelBuilder.Entity<CapsHold>(entity =>
            {
                entity.HasKey(e => e.CapsHoldKey)
                    .HasName("PK_CapsHold");

                entity.HasIndex(e => new { e.CapsHoldKey, e.CapsRunKey })
                    .HasName("IX_CapsHold_CAPS_RUN_KEY");

                entity.Property(e => e.CapsHoldKey).HasColumnName("CAPS_HOLD_KEY");

                entity.Property(e => e.AmtCollected)
                    .HasColumnName("AMT_COLLECTED")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.AmtToCollect)
                    .HasColumnName("AMT_TO_COLLECT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.AppErrCode)
                    .IsRequired()
                    .HasColumnName("APP_ERR_CODE")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.Approved).HasColumnName("APPROVED");

                entity.Property(e => e.BillingAddress)
                    .IsRequired()
                    .HasColumnName("BILLING_ADDRESS")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.BillingCity)
                    .IsRequired()
                    .HasColumnName("BILLING_CITY")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.BillingState)
                    .IsRequired()
                    .HasColumnName("BILLING_STATE")
                    .HasColumnType("char(2)");

                entity.Property(e => e.BillingZipcode)
                    .IsRequired()
                    .HasColumnName("BILLING_ZIPCODE")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.CalcPayDate)
                    .HasColumnName("CALC_PAY_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.CapsAttemptId)
                    .HasColumnName("CAPS_ATTEMPT_ID")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.CapsRunKey).HasColumnName("CAPS_RUN_KEY");

                entity.Property(e => e.CapsSkipReasonKey)
                    .HasColumnName("CAPS_SKIP_REASON_KEY")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.CardBrand).HasColumnName("CARD_BRAND");

                entity.Property(e => e.CardType).HasColumnName("CARD_TYPE");

                entity.Property(e => e.Cardnum)
                    .HasColumnName("CARDNUM")
                    .HasColumnType("varchar(19)");

                entity.Property(e => e.CashedCheckKey).HasColumnName("CASHED_CHECK_KEY");

                entity.Property(e => e.CreditcardKey).HasColumnName("CREDITCARD_KEY");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DcardConsecutiveDays).HasColumnName("DCARD_CONSECUTIVE_DAYS");

                entity.Property(e => e.DepositMethod)
                    .IsRequired()
                    .HasColumnName("DEPOSIT_METHOD")
                    .HasColumnType("char(1)");

                entity.Property(e => e.DepositOrder).HasColumnName("DEPOSIT_ORDER");

                entity.Property(e => e.DueDate)
                    .HasColumnName("DUE_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ExcludeFromCap).HasColumnName("EXCLUDE_FROM_CAP");

                entity.Property(e => e.Expmonth).HasColumnName("EXPMONTH");

                entity.Property(e => e.Expyear).HasColumnName("EXPYEAR");

                entity.Property(e => e.IsAdAstra).HasColumnName("IS_AD_ASTRA");

                entity.Property(e => e.IssuerKey).HasColumnName("ISSUER_KEY");

                entity.Property(e => e.LastCctransKey).HasColumnName("LAST_CCTRANS_KEY");

                entity.Property(e => e.LastDcardAttemptDate)
                    .HasColumnName("LAST_DCARD_ATTEMPT_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.LoanType)
                    .IsRequired()
                    .HasColumnName("LOAN_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.Nameoncard)
                    .IsRequired()
                    .HasColumnName("NAMEONCARD")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.OptplusCardDetailKey).HasColumnName("OPTPLUS_CARD_DETAIL_KEY");

                entity.Property(e => e.Posted).HasColumnName("POSTED");

                entity.Property(e => e.Processed).HasColumnName("PROCESSED");

                entity.Property(e => e.ProductType)
                    .IsRequired()
                    .HasColumnName("PRODUCT_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.PtpDetailKey).HasColumnName("PTP_DETAIL_KEY");

                entity.Property(e => e.PtpHeaderKey).HasColumnName("PTP_HEADER_KEY");

                entity.Property(e => e.ReturnDate)
                    .HasColumnName("RETURN_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RiAge).HasColumnName("RI_AGE");

                entity.Property(e => e.RisAuditId).HasColumnName("RIS_AUDIT_ID");

                entity.Property(e => e.RisreptKey).HasColumnName("RISREPT_KEY");

                entity.Property(e => e.Selected).HasColumnName("SELECTED");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.Token)
                    .IsRequired()
                    .HasColumnName("TOKEN")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.TotFeeAmt)
                    .HasColumnName("TOT_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.HasOne(d => d.CapsSkipReasonKeyNavigation)
                    .WithMany(p => p.CapsHold)
                    .HasForeignKey(d => d.CapsSkipReasonKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CapsHold_CAPS_SKIP_REASON_KEY");
            });

            modelBuilder.Entity<CapsRun>(entity =>
            {
                entity.HasKey(e => e.CapsRunKey)
                    .HasName("PK_CapsRunKey");

                entity.HasIndex(e => new { e.StartTime, e.FinishTime, e.CapsRunStatusKey, e.ProcessConfigInstanceKey, e.PrevCapsRunKey, e.CapsRunKey })
                    .HasName("IX_CapsRun_PREV_CAPS_RUN_KEY");

                entity.Property(e => e.CapsRunKey).HasColumnName("CAPS_RUN_KEY");

                entity.Property(e => e.CapsRunStatusKey)
                    .HasColumnName("CAPS_RUN_STATUS_KEY")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.FinishTime)
                    .HasColumnName("FINISH_TIME")
                    .HasColumnType("datetime");

                entity.Property(e => e.PrevCapsRunKey).HasColumnName("PREV_CAPS_RUN_KEY");

                entity.Property(e => e.ProcessConfigInstanceKey).HasColumnName("PROCESS_CONFIG_INSTANCE_KEY");

                entity.Property(e => e.StartTime)
                    .HasColumnName("START_TIME")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.CapsRunStatusKeyNavigation)
                    .WithMany(p => p.CapsRun)
                    .HasForeignKey(d => d.CapsRunStatusKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CapsRun_CAPS_RUN_STATUS_KEY");
            });

            modelBuilder.Entity<CapsRunStatus>(entity =>
            {
                entity.HasKey(e => e.CapsRunStatusKey)
                    .HasName("PK_CapsRunStatus");

                entity.Property(e => e.CapsRunStatusKey)
                    .HasColumnName("CAPS_RUN_STATUS_KEY")
                    .ValueGeneratedNever();

                entity.Property(e => e.RunStatusDesc)
                    .IsRequired()
                    .HasColumnName("RUN_STATUS_DESC")
                    .HasColumnType("varchar(50)");
            });

            modelBuilder.Entity<CapsSkipReason>(entity =>
            {
                entity.HasKey(e => e.CapsSkipReasonKey)
                    .HasName("PK_SkipReason");

                entity.Property(e => e.CapsSkipReasonKey)
                    .HasColumnName("CAPS_SKIP_REASON_KEY")
                    .ValueGeneratedNever();

                entity.Property(e => e.SkipDesc)
                    .IsRequired()
                    .HasColumnName("SKIP_DESC")
                    .HasColumnType("varchar(50)");
            });

            modelBuilder.Entity<CapsUpdates>(entity =>
            {
                entity.HasKey(e => e.CapsUpdatesKey)
                    .HasName("PK_CapsUpdates");

                entity.HasIndex(e => new { e.CapsUpdatesKey, e.Sql, e.Processed, e.CapsHoldKey, e.UpdateTable, e.CapsRunKey })
                    .HasName("IX_CapsUpdates_PROCESS_CAPS_RUN_KEY");

                entity.Property(e => e.CapsUpdatesKey).HasColumnName("CAPS_UPDATES_KEY");

                entity.Property(e => e.CapsHoldKey).HasColumnName("CAPS_HOLD_KEY");

                entity.Property(e => e.CapsRunKey).HasColumnName("CAPS_RUN_KEY");

                entity.Property(e => e.Processed).HasColumnName("PROCESSED");

                entity.Property(e => e.Sql)
                    .IsRequired()
                    .HasColumnName("SQL")
                    .HasColumnType("varchar(max)");

                entity.Property(e => e.UpdateTable)
                    .HasColumnName("UPDATE_TABLE")
                    .HasColumnType("varchar(30)");
            });

            modelBuilder.Entity<CardBatchSettle>(entity =>
            {
                entity.HasKey(e => e.CardBatchSettleKey)
                    .HasName("PK_CardBatchSettle");

                entity.Property(e => e.CardBatchSettleKey).HasColumnName("CARD_BATCH_SETTLE_KEY");

                entity.Property(e => e.Accepted).HasColumnName("ACCEPTED");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndBatchDateTime)
                    .HasColumnName("END_BATCH_DATE_TIME")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndTime)
                    .HasColumnName("END_TIME")
                    .HasColumnType("datetime");

                entity.Property(e => e.EodVaultCountKey).HasColumnName("EOD_VAULT_COUNT_KEY");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.RequestData)
                    .HasColumnName("REQUEST_DATA")
                    .HasColumnType("varchar(1000)");

                entity.Property(e => e.ResponseData)
                    .HasColumnName("RESPONSE_DATA")
                    .HasColumnType("varchar(4000)");

                entity.Property(e => e.StartTime)
                    .HasColumnName("START_TIME")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.EodVaultCountKeyNavigation)
                    .WithMany(p => p.CardBatchSettle)
                    .HasForeignKey(d => d.EodVaultCountKey)
                    .HasConstraintName("FK_CardBatchSettle_VaultCount");
            });

            modelBuilder.Entity<CashMoneyToCuroXref>(entity =>
            {
                entity.HasKey(e => new { e.CustomerKey, e.ClientKey })
                    .HasName("PK_CashMoneyToCuroXRef");

                entity.ToTable("CashMoneyToCuroXRef");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.ClientKey).HasColumnName("CLIENT_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.CashMoneyToCuroXref)
                    .HasForeignKey(d => d.CustomerKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CashMoneyToCuroXRef_CUSTOMER_KEY");
            });

            modelBuilder.Entity<CashedCheck>(entity =>
            {
                entity.HasKey(e => e.CashedCheckKey)
                    .HasName("PK_CashedCheck");

                entity.HasIndex(e => e.CustomerKey)
                    .HasName("IX_CashedCheck_CUSTOMER_KEY");

                entity.HasIndex(e => e.DateEntered)
                    .HasName("IX_CashedCheck_DATE_ENTERED");

                entity.HasIndex(e => e.ImageCashLetterBundleKey)
                    .HasName("IX_CashedCheck_IMAGE_CASH_LETTER_BUNDLE_KEY");

                entity.HasIndex(e => e.IssuerKey)
                    .HasName("IX_CashedCheck_ISSUER_KEY");

                entity.HasIndex(e => e.SrcApproval)
                    .HasName("IX_CashedCheck_SRC_APPROVAL");

                entity.HasIndex(e => e.Teller)
                    .HasName("IX_CashedCheck_TELLER");

                entity.HasIndex(e => new { e.CheckType, e.TransDetailKey })
                    .HasName("IX_CashedCheck_TRANS_DETAIL_KEY");

                entity.HasIndex(e => new { e.IssuerKey, e.Reversed })
                    .HasName("IX_CashedCheck_ISSUER_KEY_REVERSED");

                entity.HasIndex(e => new { e.Reversed, e.Location, e.CheckType, e.CashedCheckKey })
                    .HasName("IX_CashedCheck_REVERSED_1");

                entity.HasIndex(e => new { e.DrawerzKey, e.CashedCheckKey, e.CheckType, e.CheckAmount, e.Location, e.Reversed })
                    .HasName("IX_CashedCheck_LOCATION_REVERSED");

                entity.HasIndex(e => new { e.CashedCheckKey, e.CustomerKey, e.CheckNo, e.CcTotFee, e.IssuerKey, e.TransDetailKey, e.CcIsPostDated, e.Dwdocid, e.WsResponseKey, e.ElectronicCashedCheck, e.Teller, e.CheckAmount, e.Location, e.Reversed, e.CurrencyKey, e.DateEntered, e.CheckType, e.CheckDate, e.DrawerzKey })
                    .HasName("IX_CashedCheck_LOCATION_REVERSED_CURRENCY_KEY");

                entity.Property(e => e.CashedCheckKey).HasColumnName("CASHED_CHECK_KEY");

                entity.Property(e => e.Bounced)
                    .HasColumnName("BOUNCED")
                    .HasColumnType("LOGICAL");

                entity.Property(e => e.CcDiscountAmt)
                    .HasColumnName("CC_DISCOUNT_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CcFlatFeeAmt)
                    .HasColumnName("CC_FLAT_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CcFree)
                    .HasColumnName("CC_FREE")
                    .HasColumnType("LOGICAL");

                entity.Property(e => e.CcIsPostDated).HasColumnName("CC_IS_POST_DATED");

                entity.Property(e => e.CcMoneyOrder)
                    .HasColumnName("CC_MONEY_ORDER")
                    .HasColumnType("LOGICAL");

                entity.Property(e => e.CcOrigRate)
                    .HasColumnName("CC_ORIG_RATE")
                    .HasColumnType("numeric");

                entity.Property(e => e.CcPctFeeAmt)
                    .HasColumnName("CC_PCT_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CcRate).HasColumnName("CC_RATE");

                entity.Property(e => e.CcTotFee)
                    .HasColumnName("CC_TOT_FEE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CheckAmount)
                    .HasColumnName("CHECK_AMOUNT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CheckDate)
                    .HasColumnName("CHECK_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.CheckNo)
                    .IsRequired()
                    .HasColumnName("CHECK_NO")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.CheckType)
                    .IsRequired()
                    .HasColumnName("CHECK_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.CurrencyKey).HasColumnName("CURRENCY_KEY");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DrawerzKey).HasColumnName("DRAWERZ_KEY");

                entity.Property(e => e.Dwdocid).HasColumnName("DWDOCID");

                entity.Property(e => e.ElectronicCashedCheck).HasColumnName("ELECTRONIC_CASHED_CHECK");

                entity.Property(e => e.ImageCashLetterBundleKey).HasColumnName("IMAGE_CASH_LETTER_BUNDLE_KEY");

                entity.Property(e => e.IsShredded).HasColumnName("IS_SHREDDED");

                entity.Property(e => e.IssuerKey).HasColumnName("ISSUER_KEY");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.Reversed)
                    .HasColumnName("REVERSED")
                    .HasColumnType("LOGICAL");

                entity.Property(e => e.ReversedDate)
                    .HasColumnName("REVERSED_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.SrcApproval).HasColumnName("SRC_APPROVAL");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");

                entity.Property(e => e.WsResponseKey).HasColumnName("WS_RESPONSE_KEY");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.CashedCheck)
                    .HasForeignKey(d => d.CustomerKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CashedCheck_Customer");

                entity.HasOne(d => d.ImageCashLetterBundleKeyNavigation)
                    .WithMany(p => p.CashedCheck)
                    .HasForeignKey(d => d.ImageCashLetterBundleKey)
                    .HasConstraintName("FK_CashedCheck_ImageCashLetterBundle");

                entity.HasOne(d => d.LocationNavigation)
                    .WithMany(p => p.CashedCheck)
                    .HasForeignKey(d => d.Location)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CashedCheck_Company");

                entity.HasOne(d => d.TransDetailKeyNavigation)
                    .WithMany(p => p.CashedCheck)
                    .HasForeignKey(d => d.TransDetailKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CashedCheck_TransDetail");
            });

            modelBuilder.Entity<CashedCheckImage>(entity =>
            {
                entity.HasKey(e => e.CashedCheckImageKey)
                    .HasName("PK_CashedCheckImage");

                entity.Property(e => e.CashedCheckImageKey).HasColumnName("CASHED_CHECK_IMAGE_KEY");

                entity.Property(e => e.CashedCheckKey).HasColumnName("CASHED_CHECK_KEY");

                entity.Property(e => e.Data)
                    .IsRequired()
                    .HasColumnName("DATA");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DateToDelete)
                    .HasColumnName("DATE_TO_DELETE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ImageType).HasColumnName("IMAGE_TYPE");

                entity.HasOne(d => d.CashedCheckKeyNavigation)
                    .WithMany(p => p.CashedCheckImage)
                    .HasForeignKey(d => d.CashedCheckKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CashedCheckImage_CashedCheck");
            });

            modelBuilder.Entity<CashedCheckMicr>(entity =>
            {
                entity.HasKey(e => e.CashedCheckMicrKey)
                    .HasName("PK_CashedCheckMICR");

                entity.ToTable("CashedCheckMICR");

                entity.Property(e => e.CashedCheckMicrKey).HasColumnName("CASHED_CHECK_MICR_KEY");

                entity.Property(e => e.AuxOnUs)
                    .IsRequired()
                    .HasColumnName("AUX_ON_US")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.CashedCheckKey).HasColumnName("CASHED_CHECK_KEY");

                entity.Property(e => e.ChecksumDigit)
                    .IsRequired()
                    .HasColumnName("CHECKSUM_DIGIT")
                    .HasColumnType("char(1)");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DepositBankControlData)
                    .IsRequired()
                    .HasColumnName("DEPOSIT_BANK_CONTROL_DATA")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.ExternalProcessingCode)
                    .IsRequired()
                    .HasColumnName("EXTERNAL_PROCESSING_CODE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.MicrAmount)
                    .IsRequired()
                    .HasColumnName("MICR_AMOUNT")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.Micrdata)
                    .IsRequired()
                    .HasColumnName("MICRDATA")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.OnUs)
                    .IsRequired()
                    .HasColumnName("ON_US")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.TransitNumber)
                    .IsRequired()
                    .HasColumnName("TRANSIT_NUMBER")
                    .HasColumnType("varchar(30)");

                entity.HasOne(d => d.CashedCheckKeyNavigation)
                    .WithMany(p => p.CashedCheckMicr)
                    .HasForeignKey(d => d.CashedCheckKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CashedCheckMICR_CashedCheck");
            });

            modelBuilder.Entity<CashedCheckPayment>(entity =>
            {
                entity.HasKey(e => e.CashedCheckPaymentKey)
                    .HasName("PK_CashedCheckPayment");

                entity.HasIndex(e => e.CashedCheckKey)
                    .HasName("IX_CashedCheckPayment_CASHED_CHECK_KEY");

                entity.HasIndex(e => new { e.CashedCheckPaymentKey, e.TransDetailKey })
                    .HasName("IX_CashedCheckPayment_TRANS_DETAIL_KEY");

                entity.Property(e => e.CashedCheckPaymentKey).HasColumnName("CASHED_CHECK_PAYMENT_KEY");

                entity.Property(e => e.CashedCheckKey).HasColumnName("CASHED_CHECK_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasColumnType("varchar(500)");

                entity.Property(e => e.PaidAmt)
                    .HasColumnName("PAID_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PaymentMethod).HasColumnName("PAYMENT_METHOD");

                entity.Property(e => e.Reversed).HasColumnName("REVERSED");

                entity.Property(e => e.ReversedDate)
                    .HasColumnName("REVERSED_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.TransCode).HasColumnName("TRANS_CODE");

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");

                entity.HasOne(d => d.CashedCheckKeyNavigation)
                    .WithMany(p => p.CashedCheckPayment)
                    .HasForeignKey(d => d.CashedCheckKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CashedCheckPayment_CashedCheck");
            });

            modelBuilder.Entity<CashedCheckPaymentRefund>(entity =>
            {
                entity.HasKey(e => e.CashedCheckPaymentRefundKey)
                    .HasName("PK_CashedCheckPaymentRefund");

                entity.HasIndex(e => e.RefundedCashedCheckPaymentKey)
                    .HasName("IX_CashedCheckPaymentRefund_REFUNDED_CASHED_CHECK_PAYMENT_KEY");

                entity.HasIndex(e => e.TransDetailKey)
                    .HasName("IX_CashedCheckPaymentRefund_TRANS_DETAIL_KEY");

                entity.Property(e => e.CashedCheckPaymentRefundKey).HasColumnName("CASHED_CHECK_PAYMENT_REFUND_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.RefundedCashedCheckPaymentKey).HasColumnName("REFUNDED_CASHED_CHECK_PAYMENT_KEY");

                entity.Property(e => e.ReverseTransDetailKey).HasColumnName("REVERSE_TRANS_DETAIL_KEY");

                entity.Property(e => e.Reversed).HasColumnName("REVERSED");

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");

                entity.HasOne(d => d.RefundedCashedCheckPaymentKeyNavigation)
                    .WithMany(p => p.CashedCheckPaymentRefund)
                    .HasForeignKey(d => d.RefundedCashedCheckPaymentKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CashedCheckPaymentRefund_CashedCheckPayment");

                entity.HasOne(d => d.TransDetailKeyNavigation)
                    .WithMany(p => p.CashedCheckPaymentRefund)
                    .HasForeignKey(d => d.TransDetailKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CashedCheckPaymentRefund_TransDetail");
            });

            modelBuilder.Entity<CashedCheckPaymentRefundXref>(entity =>
            {
                entity.HasKey(e => e.CashedCheckPaymentRefundXrefKey)
                    .HasName("PK_CashedCheckPaymentRefundXRef");

                entity.ToTable("CashedCheckPaymentRefundXRef");

                entity.HasIndex(e => e.RefundedCashedCheckPaymentKey)
                    .HasName("IX_CashedCheckPaymentRefundXRef_REFUNDED_CASHED_CHECK_PAYMENT_KEY");

                entity.Property(e => e.CashedCheckPaymentRefundXrefKey).HasColumnName("CASHED_CHECK_PAYMENT_REFUND_XREF_KEY");

                entity.Property(e => e.RefundAmount)
                    .HasColumnName("REFUND_AMOUNT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.RefundCashedCheckPaymentKey).HasColumnName("REFUND_CASHED_CHECK_PAYMENT_KEY");

                entity.Property(e => e.RefundedCashedCheckPaymentKey).HasColumnName("REFUNDED_CASHED_CHECK_PAYMENT_KEY");

                entity.HasOne(d => d.RefundCashedCheckPaymentKeyNavigation)
                    .WithMany(p => p.CashedCheckPaymentRefundXrefRefundCashedCheckPaymentKeyNavigation)
                    .HasForeignKey(d => d.RefundCashedCheckPaymentKey)
                    .HasConstraintName("FK_CashedCheckPaymentRefundXRef_REFUND_CASHED_CHECK_PAYMENT_KEY");

                entity.HasOne(d => d.RefundedCashedCheckPaymentKeyNavigation)
                    .WithMany(p => p.CashedCheckPaymentRefundXrefRefundedCashedCheckPaymentKeyNavigation)
                    .HasForeignKey(d => d.RefundedCashedCheckPaymentKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CashedCheckPaymentRefundXRef_REFUNDED_CASHED_CHECK_PAYMENT_KEY");
            });

            modelBuilder.Entity<CcStatus>(entity =>
            {
                entity.HasKey(e => e.CcStatusKey)
                    .HasName("PK_CCStatus");

                entity.ToTable("CC_Status");

                entity.Property(e => e.CcStatusKey).HasColumnName("CC_STATUS_KEY");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(300)");

                entity.Property(e => e.StatusCode).HasColumnName("STATUS_CODE");
            });

            modelBuilder.Entity<CcardResponse>(entity =>
            {
                entity.HasKey(e => e.CcardResponseKey)
                    .HasName("PK_CCardResponse");

                entity.ToTable("CCardResponse");

                entity.Property(e => e.CcardResponseKey).HasColumnName("CCARD_RESPONSE_KEY");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.LoanType)
                    .IsRequired()
                    .HasColumnName("LOAN_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.NewExist).HasColumnName("NEW_EXIST");

                entity.Property(e => e.ProductType)
                    .IsRequired()
                    .HasColumnName("PRODUCT_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.Response).HasColumnName("RESPONSE");

                entity.Property(e => e.ResponseDate)
                    .HasColumnName("RESPONSE_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.CcardResponse)
                    .HasForeignKey(d => d.CustomerKey)
                    .HasConstraintName("FK_CCardResponse_Customer");
            });

            modelBuilder.Entity<CcardResponses>(entity =>
            {
                entity.HasKey(e => e.CcardResponseKey)
                    .HasName("PK_CCardResponses");

                entity.ToTable("CCardResponses");

                entity.HasIndex(e => e.CustomerKey)
                    .HasName("IX_CCardResponses_CUSTOMER_KEY");

                entity.Property(e => e.CcardResponseKey).HasColumnName("CCARD_RESPONSE_KEY");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsNew).HasColumnName("IS_NEW");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.Response).HasColumnName("RESPONSE");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.CcardResponses)
                    .HasForeignKey(d => d.CustomerKey)
                    .HasConstraintName("FK_CCardResponses_Customer");

                entity.HasOne(d => d.LocationNavigation)
                    .WithMany(p => p.CcardResponses)
                    .HasForeignKey(d => d.Location)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CCardResponses_Company");

                entity.HasOne(d => d.TellerNavigation)
                    .WithMany(p => p.CcardResponses)
                    .HasPrincipalKey(p => p.Teller)
                    .HasForeignKey(d => d.Teller)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CCardResponses_TELLER");
            });

            modelBuilder.Entity<Certificate>(entity =>
            {
                entity.HasKey(e => e.CertificateKey)
                    .HasName("PK_Certificate_CERTIFICATE_KEY");

                entity.HasIndex(e => e.Name)
                    .HasName("UC_Certificate_NAME")
                    .IsUnique();

                entity.Property(e => e.CertificateKey).HasColumnName("CERTIFICATE_KEY");

                entity.Property(e => e.Data).HasColumnName("DATA");

                entity.Property(e => e.DateEnteredUtc)
                    .HasColumnName("DATE_ENTERED_UTC")
                    .HasColumnType("datetimeoffset(0)");

                entity.Property(e => e.DateExpiresUtc)
                    .HasColumnName("DATE_EXPIRES_UTC")
                    .HasColumnType("datetimeoffset(0)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.Password)
                    .HasColumnName("PASSWORD")
                    .HasColumnType("varchar(100)");
            });

            modelBuilder.Entity<CheckAgain>(entity =>
            {
                entity.HasKey(e => e.CheckagainKey)
                    .HasName("PK__CheckAga__A817185F4F8CC93B");

                entity.HasIndex(e => e.LoanKey)
                    .HasName("U_CheckAgain_Loan")
                    .IsUnique();

                entity.Property(e => e.CheckagainKey).HasColumnName("CHECKAGAIN_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.Sent).HasColumnName("SENT");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasColumnName("STATUS")
                    .HasColumnType("char(1)");

                entity.HasOne(d => d.LoanKeyNavigation)
                    .WithOne(p => p.CheckAgain)
                    .HasForeignKey<CheckAgain>(d => d.LoanKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CheckAgain_Loan");
            });

            modelBuilder.Entity<CheckAgainHistory>(entity =>
            {
                entity.HasKey(e => e.CheckagainhistoryKey)
                    .HasName("PK__CheckAga__9FC380C8A76B869E");

                entity.HasIndex(e => e.CheckagainKey)
                    .HasName("IX_CheckAgainHistory_CHECKAGAIN_KEY");

                entity.Property(e => e.CheckagainhistoryKey).HasColumnName("CHECKAGAINHISTORY_KEY");

                entity.Property(e => e.CheckagainKey).HasColumnName("CHECKAGAIN_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasColumnName("STATUS")
                    .HasColumnType("char(1)");

                entity.HasOne(d => d.CheckagainKeyNavigation)
                    .WithMany(p => p.CheckAgainHistory)
                    .HasForeignKey(d => d.CheckagainKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CheckAgainHistory_CheckAgain");
            });

            modelBuilder.Entity<CheckPaymentType>(entity =>
            {
                entity.HasKey(e => e.CheckPaymentTypeKey)
                    .HasName("PK_CHECK_PAYMENT_TYPE");

                entity.Property(e => e.CheckPaymentTypeKey).HasColumnName("CHECK_PAYMENT_TYPE_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.IsActive).HasColumnName("IS_ACTIVE");

                entity.Property(e => e.TypeDescription)
                    .IsRequired()
                    .HasColumnName("TYPE_DESCRIPTION")
                    .HasColumnType("varchar(50)");
            });

            modelBuilder.Entity<CheckReturn>(entity =>
            {
                entity.HasKey(e => e.CheckReturnKey)
                    .HasName("PK_CheckReturn");

                entity.Property(e => e.CheckReturnKey).HasColumnName("CHECK_RETURN_KEY");

                entity.Property(e => e.CrGlAcct).HasColumnName("CR_GL_ACCT");

                entity.Property(e => e.CrReasonCode).HasColumnName("CR_REASON_CODE");

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");

                entity.HasOne(d => d.CrGlAcctNavigation)
                    .WithMany(p => p.CheckReturn)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.CrGlAcct)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CheckReturn_CR_GL_ACCT");
            });

            modelBuilder.Entity<CheckType>(entity =>
            {
                entity.HasKey(e => e.CheckTypeKey)
                    .HasName("PK_CheckType");

                entity.HasIndex(e => e.CheckTypeCode)
                    .HasName("IX_CheckType_CHECK_TYPE_CODE");

                entity.Property(e => e.CheckTypeKey).HasColumnName("CHECK_TYPE_KEY");

                entity.Property(e => e.CheckTypeCode)
                    .IsRequired()
                    .HasColumnName("CHECK_TYPE_CODE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.CheckTypeDesc)
                    .HasColumnName("CHECK_TYPE_DESC")
                    .HasColumnType("char(20)")
                    .HasDefaultValueSql("''");
            });

            modelBuilder.Entity<ChkType>(entity =>
            {
                entity.HasKey(e => e.ChkCode)
                    .HasName("PK_ChkType_ChkCode");

                entity.ToTable("chk_type");

                entity.Property(e => e.ChkCode)
                    .HasColumnName("chk_code")
                    .HasColumnType("char(1)");

                entity.Property(e => e.ChkType1)
                    .HasColumnName("chk_type")
                    .HasColumnType("char(20)")
                    .HasDefaultValueSql("''");
            });

            modelBuilder.Entity<CollBonusDetail>(entity =>
            {
                entity.HasKey(e => e.CollBonusDetailKey)
                    .HasName("PK_CollBonusDetail");

                entity.HasIndex(e => e.Tellerid)
                    .HasName("ix_cbd_teller");

                entity.HasIndex(e => new { e.Rdate, e.Cdate })
                    .HasName("IX_CollBonusDates");

                entity.Property(e => e.CollBonusDetailKey).HasColumnName("COLL_BONUS_DETAIL_KEY");

                entity.Property(e => e.Cdate)
                    .HasColumnName("cdate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Creditamt)
                    .HasColumnName("creditamt")
                    .HasColumnType("decimal");

                entity.Property(e => e.FecBec).HasColumnName("fec_bec");

                entity.Property(e => e.Location).HasColumnName("location");

                entity.Property(e => e.Paytype).HasColumnName("paytype");

                entity.Property(e => e.Pdate)
                    .HasColumnName("pdate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Product).HasColumnName("product");

                entity.Property(e => e.Rdate)
                    .HasColumnName("rdate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Reference)
                    .HasColumnName("reference")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.Riage).HasColumnName("riage");

                entity.Property(e => e.Rikey).HasColumnName("rikey");

                entity.Property(e => e.Task).HasColumnName("task");

                entity.Property(e => e.Tellerid)
                    .HasColumnName("tellerid")
                    .HasColumnType("char(3)");

                entity.Property(e => e.Timeframe).HasColumnName("timeframe");
            });

            modelBuilder.Entity<CollBonusPtp>(entity =>
            {
                entity.HasKey(e => e.CollBonusPtpKey)
                    .HasName("PK_CollBonusPTP");

                entity.ToTable("CollBonusPTP");

                entity.Property(e => e.CollBonusPtpKey).HasColumnName("COLL_BONUS_PTP_KEY");

                entity.Property(e => e.Amount)
                    .HasColumnName("AMOUNT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.LoanType)
                    .HasColumnName("LOAN_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.ProductType)
                    .HasColumnName("PRODUCT_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.PtpDetailKey).HasColumnName("PTP_DETAIL_KEY");

                entity.Property(e => e.PtpType).HasColumnName("PTP_TYPE");

                entity.Property(e => e.RisreptKey).HasColumnName("RISREPT_KEY");

                entity.Property(e => e.Teller)
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");
            });

            modelBuilder.Entity<CollBonusTasks>(entity =>
            {
                entity.HasKey(e => e.CollBonusTasksKey)
                    .HasName("PK_CollBonusTasks");

                entity.HasIndex(e => new { e.Tellerid, e.Tdate })
                    .HasName("ix_cbt_teller");

                entity.HasIndex(e => new { e.Tellerid, e.Task, e.Tdate })
                    .HasName("IX_CollBonusTasksDate");

                entity.Property(e => e.CollBonusTasksKey).HasColumnName("COLL_BONUS_TASKS_KEY");

                entity.Property(e => e.Product).HasColumnName("product");

                entity.Property(e => e.Riage).HasColumnName("riage");

                entity.Property(e => e.Task).HasColumnName("task");

                entity.Property(e => e.Tdate)
                    .HasColumnName("tdate")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Tellerid)
                    .HasColumnName("tellerid")
                    .HasColumnType("char(3)");
            });

            modelBuilder.Entity<CollectionAction>(entity =>
            {
                entity.HasKey(e => e.CollectionActionKey)
                    .HasName("PK_CollectionAction");

                entity.HasIndex(e => e.CollectionMovementKey)
                    .HasName("IX_CollectionAction_COLLECTION_MOVEMENT_KEY");

                entity.HasIndex(e => e.RisreptKey)
                    .HasName("IX_CollectionAction_RISREPT_KEY");

                entity.HasIndex(e => new { e.RisreptKey, e.Location, e.Teller, e.AgentActionKey, e.AgentResultKey1, e.AgentResultKey2, e.DateEntered })
                    .HasName("IX_CollectionAction_DATEENTERED");

                entity.Property(e => e.CollectionActionKey).HasColumnName("COLLECTION_ACTION_KEY");

                entity.Property(e => e.AgentActionKey).HasColumnName("AGENT_ACTION_KEY");

                entity.Property(e => e.AgentResultKey1).HasColumnName("AGENT_RESULT_KEY1");

                entity.Property(e => e.AgentResultKey2).HasColumnName("AGENT_RESULT_KEY2");

                entity.Property(e => e.CollectionMovementKey).HasColumnName("COLLECTION_MOVEMENT_KEY");

                entity.Property(e => e.CustomerPhoneNumberKey).HasColumnName("CUSTOMER_PHONE_NUMBER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsAdAstra).HasColumnName("IS_AD_ASTRA");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.Note)
                    .HasColumnName("NOTE")
                    .HasColumnType("varchar(600)");

                entity.Property(e => e.RisreptKey).HasColumnName("RISREPT_KEY");

                entity.Property(e => e.TaskActionResultKey).HasColumnName("TASK_ACTION_RESULT_KEY");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.AgentActionKeyNavigation)
                    .WithMany(p => p.CollectionAction)
                    .HasForeignKey(d => d.AgentActionKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CollectionAction_AgentAction");

                entity.HasOne(d => d.LocationNavigation)
                    .WithMany(p => p.CollectionAction)
                    .HasForeignKey(d => d.Location)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CollectionAction_Company");

                entity.HasOne(d => d.RisreptKeyNavigation)
                    .WithMany(p => p.CollectionAction)
                    .HasForeignKey(d => d.RisreptKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CollectionAction_RisRept");
            });

            modelBuilder.Entity<CollectionAgency>(entity =>
            {
                entity.HasKey(e => e.CollectionAgencyKey)
                    .HasName("PK_CollectionAgency");

                entity.HasIndex(e => e.AgencyCode)
                    .HasName("UC_CollectionAgency_AGENCY_CODE")
                    .IsUnique();

                entity.Property(e => e.CollectionAgencyKey).HasColumnName("COLLECTION_AGENCY_KEY");

                entity.Property(e => e.Address1)
                    .IsRequired()
                    .HasColumnName("ADDRESS1")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.AgencyCode)
                    .IsRequired()
                    .HasColumnName("AGENCY_CODE")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.AgencyName)
                    .IsRequired()
                    .HasColumnName("AGENCY_NAME")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasColumnName("CITY")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.ContactName)
                    .IsRequired()
                    .HasColumnName("CONTACT_NAME")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.Email)
                    .HasColumnName("EMAIL")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.IsActive).HasColumnName("IS_ACTIVE");

                entity.Property(e => e.IsDmc).HasColumnName("IS_DMC");

                entity.Property(e => e.MaxDaysPctRange1).HasColumnName("MAX_DAYS_PCT_RANGE1");

                entity.Property(e => e.MaxDaysPctRange2).HasColumnName("MAX_DAYS_PCT_RANGE2");

                entity.Property(e => e.PctRange1)
                    .HasColumnName("PCT_RANGE1")
                    .HasColumnType("decimal");

                entity.Property(e => e.PctRange2)
                    .HasColumnName("PCT_RANGE2")
                    .HasColumnType("decimal");

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasColumnName("PHONE")
                    .HasColumnType("varchar(15)");

                entity.Property(e => e.PhoneExt)
                    .IsRequired()
                    .HasColumnName("PHONE_EXT")
                    .HasColumnType("varchar(5)");

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasColumnName("STATE")
                    .HasColumnType("char(2)");

                entity.Property(e => e.Zipcode)
                    .IsRequired()
                    .HasColumnName("ZIPCODE")
                    .HasColumnType("varchar(10)");
            });

            modelBuilder.Entity<CollectionAgencyPct>(entity =>
            {
                entity.HasKey(e => e.CollectionAgencyPctKey)
                    .HasName("PK_CollectionAgencyPct");

                entity.Property(e => e.CollectionAgencyPctKey).HasColumnName("COLLECTION_AGENCY_PCT_KEY");

                entity.Property(e => e.AssignmentNumber).HasColumnName("ASSIGNMENT_NUMBER");

                entity.Property(e => e.CollectionAgencyKey).HasColumnName("COLLECTION_AGENCY_KEY");

                entity.Property(e => e.IsActive).HasColumnName("IS_ACTIVE");

                entity.Property(e => e.Pct)
                    .HasColumnName("PCT")
                    .HasColumnType("decimal");

                entity.Property(e => e.StartDate)
                    .HasColumnName("START_DATE")
                    .HasColumnType("date");

                entity.HasOne(d => d.CollectionAgencyKeyNavigation)
                    .WithMany(p => p.CollectionAgencyPct)
                    .HasForeignKey(d => d.CollectionAgencyKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CollectionAgencyPct_CollectionAgency");
            });

            modelBuilder.Entity<CollectionMovement>(entity =>
            {
                entity.HasKey(e => e.CollectionMovementKey)
                    .HasName("PK_CollectionMovement");

                entity.HasIndex(e => e.RisreptKey)
                    .HasName("IX_CollectionMovement_RISREPT_KEY");

                entity.Property(e => e.CollectionMovementKey).HasColumnName("COLLECTION_MOVEMENT_KEY");

                entity.Property(e => e.AssignmentNumber).HasColumnName("ASSIGNMENT_NUMBER");

                entity.Property(e => e.AuditKey).HasColumnName("AUDIT_KEY");

                entity.Property(e => e.CollectionAgencyKey).HasColumnName("COLLECTION_AGENCY_KEY");

                entity.Property(e => e.CrTeller)
                    .HasColumnName("CR_TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.FollowupDate)
                    .HasColumnName("FOLLOWUP_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ReasonForArrearsKey).HasColumnName("REASON_FOR_ARREARS_KEY");

                entity.Property(e => e.RisreptKey).HasColumnName("RISREPT_KEY");

                entity.HasOne(d => d.RisreptKeyNavigation)
                    .WithMany(p => p.CollectionMovement)
                    .HasForeignKey(d => d.RisreptKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CollectionMovement_Risrept");
            });

            modelBuilder.Entity<CollectionNote>(entity =>
            {
                entity.HasKey(e => e.CollectionNoteKey)
                    .HasName("PK_CollectionNote");

                entity.HasIndex(e => e.CustomerKey)
                    .HasName("IX_CollectionNote_CUSTOMER_KEY");

                entity.HasIndex(e => e.RisreptKey)
                    .HasName("IX_CollectionNote_RISREPT_KEY");

                entity.Property(e => e.CollectionNoteKey).HasColumnName("COLLECTION_NOTE_KEY");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateDeleted)
                    .HasColumnName("DATE_DELETED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy)
                    .HasColumnName("DELETED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.IsDeleted).HasColumnName("IS_DELETED");

                entity.Property(e => e.IsFlash).HasColumnName("IS_FLASH");

                entity.Property(e => e.NewCollectionNoteKey).HasColumnName("NEW_COLLECTION_NOTE_KEY");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasColumnType("varchar(2000)");

                entity.Property(e => e.RisreptKey).HasColumnName("RISREPT_KEY");

                entity.Property(e => e.RtfNote)
                    .IsRequired()
                    .HasColumnName("RTF_NOTE")
                    .HasColumnType("text");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.CollectionNote)
                    .HasForeignKey(d => d.CustomerKey)
                    .HasConstraintName("FK_CollectionNote_CUSTOMER_KEY");

                entity.HasOne(d => d.RisreptKeyNavigation)
                    .WithMany(p => p.CollectionNote)
                    .HasForeignKey(d => d.RisreptKey)
                    .HasConstraintName("FK_CollectionNote_RISREPT_KEY");
            });

            modelBuilder.Entity<Company>(entity =>
            {
                entity.HasKey(e => e.Location)
                    .HasName("PK_Company");

                entity.Property(e => e.Location)
                    .HasColumnName("LOCATION")
                    .ValueGeneratedNever();

                entity.Property(e => e.AcctgTeller)
                    .IsRequired()
                    .HasColumnName("ACCTG_TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.AchAdAstraPassword)
                    .IsRequired()
                    .HasColumnName("ACH_AD_ASTRA_PASSWORD")
                    .HasColumnType("varchar(15)");

                entity.Property(e => e.AchAdAstraUsername)
                    .IsRequired()
                    .HasColumnName("ACH_AD_ASTRA_USERNAME")
                    .HasColumnType("varchar(4)");

                entity.Property(e => e.AchCoolingOffPeriodDays).HasColumnName("ACH_COOLING_OFF_PERIOD_DAYS");

                entity.Property(e => e.AchGroupKey)
                    .HasColumnName("ACH_GROUP_KEY")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.AchPassword)
                    .IsRequired()
                    .HasColumnName("ACH_PASSWORD")
                    .HasColumnType("varchar(15)");

                entity.Property(e => e.AchUrl)
                    .IsRequired()
                    .HasColumnName("ACH_URL")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.AchUsername)
                    .IsRequired()
                    .HasColumnName("ACH_USERNAME")
                    .HasColumnType("varchar(6)");

                entity.Property(e => e.AddrStreet)
                    .IsRequired()
                    .HasColumnName("ADDR_STREET")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.Address1)
                    .IsRequired()
                    .HasColumnName("ADDRESS1")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.AddressCsz)
                    .HasColumnName("ADDRESS_CSZ")
                    .HasColumnType("varchar(100)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_CSZ]([ADDRESS_FORMAT],[CITY],[STATE],[ZIPCODE])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressFormat)
                    .IsRequired()
                    .HasColumnName("ADDRESS_FORMAT")
                    .HasColumnType("char(3)");

                entity.Property(e => e.AddressLine)
                    .HasColumnName("ADDRESS_LINE")
                    .HasColumnType("varchar(100)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE]([ADDRESS_FORMAT],[ADDRESS1],'','',[ADDR_STREET],'','','','',[FLAT_NUM],[BUILDING_NAME],[BUILDING_NUM])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressLine1)
                    .HasColumnName("ADDRESS_LINE_1")
                    .HasColumnType("varchar(100)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE_1]([ADDRESS_FORMAT],[ADDRESS1],'','',[ADDR_STREET],'','',[FLAT_NUM],[BUILDING_NAME],'','')")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressLine2)
                    .HasColumnName("ADDRESS_LINE_2")
                    .HasColumnType("varchar(150)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE_2]([ADDRESS_FORMAT],'','',[CITY],[STATE],[ZIPCODE],[BUILDING_NUM],[ADDR_STREET],[ADDRESS1],'','','','')")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressLine3)
                    .HasColumnName("ADDRESS_LINE_3")
                    .HasColumnType("varchar(150)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE_3]([ADDRESS_FORMAT],'','',[CITY],[STATE],[ZIPCODE])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AimMinDmRecords).HasColumnName("AIM_MIN_DM_RECORDS");

                entity.Property(e => e.AimMinLoanRecords).HasColumnName("AIM_MIN_LOAN_RECORDS");

                entity.Property(e => e.AlternateLenderKey).HasColumnName("ALTERNATE_LENDER_KEY");

                entity.Property(e => e.AppRenewalDays).HasColumnName("APP_RENEWAL_DAYS");

                entity.Property(e => e.AreaCode)
                    .HasColumnName("AREA_CODE")
                    .HasColumnType("char(3)");

                entity.Property(e => e.AuthCustDayLimit).HasColumnName("AUTH_CUST_DAY_LIMIT");

                entity.Property(e => e.AuthIssDayLimit).HasColumnName("AUTH_ISS_DAY_LIMIT");

                entity.Property(e => e.BaseCurrencyKey).HasColumnName("BASE_CURRENCY_KEY");

                entity.Property(e => e.BoaClientId).HasColumnName("BOA_CLIENT_ID");

                entity.Property(e => e.BuildingName)
                    .IsRequired()
                    .HasColumnName("BUILDING_NAME")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.BuildingNum)
                    .IsRequired()
                    .HasColumnName("BUILDING_NUM")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.BusinessEntity)
                    .HasColumnName("BUSINESS_ENTITY")
                    .HasColumnType("char(8)");

                entity.Property(e => e.BusinessState)
                    .IsRequired()
                    .HasColumnName("BUSINESS_STATE")
                    .HasColumnType("char(2)");

                entity.Property(e => e.CabLenderKey).HasColumnName("CAB_LENDER_KEY");

                entity.Property(e => e.CheckCashingGovtIdRequired).HasColumnName("CHECK_CASHING_GOVT_ID_REQUIRED");

                entity.Property(e => e.ChkFeeLastUpdate)
                    .HasColumnName("CHK_FEE_LAST_UPDATE")
                    .HasColumnType("date");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasColumnName("CITY")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.CommideaLocationOverride).HasColumnName("COMMIDEA_LOCATION_OVERRIDE");

                entity.Property(e => e.CommideaOciusAccount).HasColumnName("COMMIDEA_OCIUS_ACCOUNT");

                entity.Property(e => e.Company1)
                    .IsRequired()
                    .HasColumnName("COMPANY")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasColumnName("COUNTRY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasColumnName("COUNTRY_CODE")
                    .HasColumnType("char(3)");

                entity.Property(e => e.County)
                    .IsRequired()
                    .HasColumnName("COUNTY")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.CrTeller)
                    .IsRequired()
                    .HasColumnName("CR_TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.CurrVaultMgr)
                    .IsRequired()
                    .HasColumnName("CURR_VAULT_MGR")
                    .HasColumnType("char(3)");

                entity.Property(e => e.CurrencyExchangeNonCustomerLimit).HasColumnName("CURRENCY_EXCHANGE_NON_CUSTOMER_LIMIT");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DaysBeforeCheckShred).HasColumnName("DAYS_BEFORE_CHECK_SHRED");

                entity.Property(e => e.DaysToRerequestExpenses).HasColumnName("DAYS_TO_REREQUEST_EXPENSES");

                entity.Property(e => e.DcardPaymentFeeAmt)
                    .HasColumnName("DCARD_PAYMENT_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.DefSurcharge)
                    .HasColumnName("DEF_SURCHARGE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.DistrictKey).HasColumnName("DISTRICT_KEY");

                entity.Property(e => e.EmailAddr)
                    .IsRequired()
                    .HasColumnName("EMAIL_ADDR")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.EmailSmtp)
                    .IsRequired()
                    .HasColumnName("EMAIL_SMTP")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.EmailTemplatePath)
                    .IsRequired()
                    .HasColumnName("EMAIL_TEMPLATE_PATH")
                    .HasColumnType("varchar(500)");

                entity.Property(e => e.EnableAddressDr).HasColumnName("ENABLE_ADDRESS_DR");

                entity.Property(e => e.EnableAdjustCustomerDueDateForHolidaysAndWeekends).HasColumnName("ENABLE_ADJUST_CUSTOMER_DUE_DATE_FOR_HOLIDAYS_AND_WEEKENDS");

                entity.Property(e => e.EnableAvsValidationDeclines).HasColumnName("ENABLE_AVS_VALIDATION_DECLINES");

                entity.Property(e => e.EnableCapWithdrawal).HasColumnName("ENABLE_CAP_WITHDRAWAL");

                entity.Property(e => e.EnableCashedCheckBarcodePagePrint)
                    .HasColumnName("ENABLE_CASHED_CHECK_BARCODE_PAGE_PRINT")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.EnableCcard).HasColumnName("ENABLE_CCARD");

                entity.Property(e => e.EnableCheckAmtVerify).HasColumnName("ENABLE_CHECK_AMT_VERIFY");

                entity.Property(e => e.EnableCheckCashing).HasColumnName("ENABLE_CHECK_CASHING");

                entity.Property(e => e.EnableCheckImaging).HasColumnName("ENABLE_CHECK_IMAGING");

                entity.Property(e => e.EnableCommidea).HasColumnName("ENABLE_COMMIDEA");

                entity.Property(e => e.EnableCurrencyExchange).HasColumnName("ENABLE_CURRENCY_EXCHANGE");

                entity.Property(e => e.EnableCurrencyExchangeRateChange).HasColumnName("ENABLE_CURRENCY_EXCHANGE_RATE_CHANGE");

                entity.Property(e => e.EnableDcardFraudCheck).HasColumnName("ENABLE_DCARD_FRAUD_CHECK");

                entity.Property(e => e.EnableDcardPaymentFee).HasColumnName("ENABLE_DCARD_PAYMENT_FEE");

                entity.Property(e => e.EnableDecisionLogic).HasColumnName("ENABLE_DECISION_LOGIC");

                entity.Property(e => e.EnableDialer).HasColumnName("ENABLE_DIALER");

                entity.Property(e => e.EnableEasypayWarehouse).HasColumnName("ENABLE_EASYPAY_WAREHOUSE");

                entity.Property(e => e.EnableEpdq).HasColumnName("ENABLE_EPDQ");

                entity.Property(e => e.EnableEpp).HasColumnName("ENABLE_EPP");

                entity.Property(e => e.EnableEsign).HasColumnName("ENABLE_ESIGN");

                entity.Property(e => e.EnableExperianDebitCardVerification).HasColumnName("ENABLE_EXPERIAN_DEBIT_CARD_VERIFICATION");

                entity.Property(e => e.EnableForeignAddresses).HasColumnName("ENABLE_FOREIGN_ADDRESSES");

                entity.Property(e => e.EnableIncomeCalculator).HasColumnName("ENABLE_INCOME_CALCULATOR");

                entity.Property(e => e.EnableInternalAudit).HasColumnName("ENABLE_INTERNAL_AUDIT");

                entity.Property(e => e.EnableLaborModel).HasColumnName("ENABLE_LABOR_MODEL");

                entity.Property(e => e.EnableLoanPaymentPro).HasColumnName("ENABLE_LOAN_PAYMENT_PRO");

                entity.Property(e => e.EnableMatchDuecycle).HasColumnName("ENABLE_MATCH_DUECYCLE");

                entity.Property(e => e.EnableMobileAppMsg).HasColumnName("ENABLE_MOBILE_APP_MSG");

                entity.Property(e => e.EnableMoneris).HasColumnName("ENABLE_MONERIS");

                entity.Property(e => e.EnableNpaReferral).HasColumnName("ENABLE_NPA_REFERRAL");

                entity.Property(e => e.EnableOptplus).HasColumnName("ENABLE_OPTPLUS");

                entity.Property(e => e.EnableOptplusLoanFunding).HasColumnName("ENABLE_OPTPLUS_LOAN_FUNDING");

                entity.Property(e => e.EnablePhoneDeposits).HasColumnName("ENABLE_PHONE_DEPOSITS");

                entity.Property(e => e.EnablePictures).HasColumnName("ENABLE_PICTURES");

                entity.Property(e => e.EnablePrintCreditAvailable).HasColumnName("ENABLE_PRINT_CREDIT_AVAILABLE");

                entity.Property(e => e.EnableRepay).HasColumnName("ENABLE_REPAY");

                entity.Property(e => e.EnableRequiresJobType).HasColumnName("ENABLE_REQUIRES_JOB_TYPE");

                entity.Property(e => e.EnableRita).HasColumnName("ENABLE_RITA");

                entity.Property(e => e.EnableSelex).HasColumnName("ENABLE_SELEX");

                entity.Property(e => e.EnableServiceBox).HasColumnName("ENABLE_SERVICE_BOX");

                entity.Property(e => e.EnableStateDbReporting).HasColumnName("ENABLE_STATE_DB_REPORTING");

                entity.Property(e => e.EnableStateNewAppRequired).HasColumnName("ENABLE_STATE_NEW_APP_REQUIRED");

                entity.Property(e => e.EnableStoreCreditForInternetLoans).HasColumnName("ENABLE_STORE_CREDIT_FOR_INTERNET_LOANS");

                entity.Property(e => e.EnableTellerCashCount).HasColumnName("ENABLE_TELLER_CASH_COUNT");

                entity.Property(e => e.EnableTellerPwdSelfReset).HasColumnName("ENABLE_TELLER_PWD_SELF_RESET");

                entity.Property(e => e.EnableVaultMgr).HasColumnName("ENABLE_VAULT_MGR");

                entity.Property(e => e.EnableVerepay).HasColumnName("ENABLE_VEREPAY");

                entity.Property(e => e.EnableWireTransferMatching).HasColumnName("ENABLE_WIRE_TRANSFER_MATCHING");

                entity.Property(e => e.EppKey)
                    .IsRequired()
                    .HasColumnName("EPP_KEY")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.FlatNum)
                    .IsRequired()
                    .HasColumnName("FLAT_NUM")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.GlAcctGroupKey).HasColumnName("GL_ACCT_GROUP_KEY");

                entity.Property(e => e.GrossToNetIncomePct)
                    .HasColumnName("GROSS_TO_NET_INCOME_PCT")
                    .HasColumnType("decimal");

                entity.Property(e => e.HpiPassword)
                    .HasColumnName("HPI_PASSWORD")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.HpiUsername)
                    .IsRequired()
                    .HasColumnName("HPI_USERNAME")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.IncomeVerificationDays).HasColumnName("INCOME_VERIFICATION_DAYS");

                entity.Property(e => e.InterCoNoncashApAcct).HasColumnName("INTER_CO_NONCASH_AP_ACCT");

                entity.Property(e => e.InterCoNoncashArAcct).HasColumnName("INTER_CO_NONCASH_AR_ACCT");

                entity.Property(e => e.InterCoTitleApAcct).HasColumnName("INTER_CO_TITLE_AP_ACCT");

                entity.Property(e => e.InterCoTitleArAcct).HasColumnName("INTER_CO_TITLE_AR_ACCT");

                entity.Property(e => e.InterStoreApAcct).HasColumnName("INTER_STORE_AP_ACCT");

                entity.Property(e => e.InterStoreArAcct).HasColumnName("INTER_STORE_AR_ACCT");

                entity.Property(e => e.IsAutoEod).HasColumnName("IS_AUTO_EOD");

                entity.Property(e => e.IsAutoprintCtr).HasColumnName("IS_AUTOPRINT_CTR");

                entity.Property(e => e.IsAutoprintMo).HasColumnName("IS_AUTOPRINT_MO");

                entity.Property(e => e.IsAutoprintReceipt).HasColumnName("IS_AUTOPRINT_RECEIPT");

                entity.Property(e => e.IsCollections).HasColumnName("IS_COLLECTIONS");

                entity.Property(e => e.IsCorporate).HasColumnName("IS_CORPORATE");

                entity.Property(e => e.IsInternet).HasColumnName("IS_INTERNET");

                entity.Property(e => e.IsSdnCustomer).HasColumnName("IS_SDN_CUSTOMER");

                entity.Property(e => e.IsSdnIssuer).HasColumnName("IS_SDN_ISSUER");

                entity.Property(e => e.IsSendEmail).HasColumnName("IS_SEND_EMAIL");

                entity.Property(e => e.IsSundayAutoSod).HasColumnName("IS_SUNDAY_AUTO_SOD");

                entity.Property(e => e.Latitude)
                    .HasColumnName("LATITUDE")
                    .HasColumnType("decimal");

                entity.Property(e => e.LienAddressLocation).HasColumnName("LIEN_ADDRESS_LOCATION");

                entity.Property(e => e.LoanPaymentProPin)
                    .IsRequired()
                    .HasColumnName("LOAN_PAYMENT_PRO_PIN")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.LoanPaymentProSourceId)
                    .IsRequired()
                    .HasColumnName("LOAN_PAYMENT_PRO_SOURCE_ID")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.LoanPaymentProSourceKey)
                    .IsRequired()
                    .HasColumnName("LOAN_PAYMENT_PRO_SOURCE_KEY")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.Longitude)
                    .HasColumnName("LONGITUDE")
                    .HasColumnType("decimal");

                entity.Property(e => e.MarketKey).HasColumnName("MARKET_KEY");

                entity.Property(e => e.MaxCollectionsAttemptsMpay).HasColumnName("MAX_COLLECTIONS_ATTEMPTS_MPAY");

                entity.Property(e => e.MaxCollectionsAttemptsOend).HasColumnName("MAX_COLLECTIONS_ATTEMPTS_OEND");

                entity.Property(e => e.MaxCollectionsAttemptsPerRepresentmentEnabled).HasColumnName("MAX_COLLECTIONS_ATTEMPTS_PER_REPRESENTMENT_ENABLED");

                entity.Property(e => e.MaxCollectionsAttemptsSpay).HasColumnName("MAX_COLLECTIONS_ATTEMPTS_SPAY");

                entity.Property(e => e.MerchantId)
                    .IsRequired()
                    .HasColumnName("MERCHANT_ID")
                    .HasColumnType("varchar(16)");

                entity.Property(e => e.MonerisApiToken)
                    .IsRequired()
                    .HasColumnName("MONERIS_API_TOKEN")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.MonerisStoreId)
                    .IsRequired()
                    .HasColumnName("MONERIS_STORE_ID")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.OptplusPayoutAsCash).HasColumnName("OPTPLUS_PAYOUT_AS_CASH");

                entity.Property(e => e.OptplusVersionWsconfigKey).HasColumnName("OPTPLUS_VERSION_WSCONFIG_KEY");

                entity.Property(e => e.PasswordExpDays).HasColumnName("PASSWORD_EXP_DAYS");

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasColumnName("PHONE")
                    .HasColumnType("varchar(12)");

                entity.Property(e => e.PrintChkFeeNotice).HasColumnName("PRINT_CHK_FEE_NOTICE");

                entity.Property(e => e.ReceiptCopies).HasColumnName("RECEIPT_COPIES");

                entity.Property(e => e.ReceiptDunningMsg)
                    .HasColumnName("RECEIPT_DUNNING_MSG")
                    .HasColumnType("varchar(300)");

                entity.Property(e => e.RepayPassword)
                    .IsRequired()
                    .HasColumnName("REPAY_PASSWORD")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.RepayStoreId)
                    .IsRequired()
                    .HasColumnName("REPAY_STORE_ID")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.RepayUsername)
                    .IsRequired()
                    .HasColumnName("REPAY_USERNAME")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.RepresentativeApr)
                    .IsRequired()
                    .HasColumnName("REPRESENTATIVE_APR")
                    .HasColumnType("varchar(12)");

                entity.Property(e => e.ReqFieldsDaysLastLoan).HasColumnName("REQ_FIELDS_DAYS_LAST_LOAN");

                entity.Property(e => e.ReqdPreviousAddressCount).HasColumnName("REQD_PREVIOUS_ADDRESS_COUNT");

                entity.Property(e => e.RetakePictureDays).HasColumnName("RETAKE_PICTURE_DAYS");

                entity.Property(e => e.RitaVnum)
                    .IsRequired()
                    .HasColumnName("RITA_VNUM")
                    .HasColumnType("char(8)");

                entity.Property(e => e.SalesTaxPercent)
                    .HasColumnName("SALES_TAX_PERCENT")
                    .HasColumnType("decimal");

                entity.Property(e => e.SelexPayout).HasColumnName("SELEX_PAYOUT");

                entity.Property(e => e.ShowTitlePaidAtOtherLocations).HasColumnName("SHOW_TITLE_PAID_AT_OTHER_LOCATIONS");

                entity.Property(e => e.SolomonId)
                    .IsRequired()
                    .HasColumnName("SOLOMON_ID")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.SolomonNoncashExists).HasColumnName("SOLOMON_NONCASH_EXISTS");

                entity.Property(e => e.SolomonNoncashId)
                    .IsRequired()
                    .HasColumnName("SOLOMON_NONCASH_ID")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.SolomonTitleExists).HasColumnName("SOLOMON_TITLE_EXISTS");

                entity.Property(e => e.SolomonTitleId)
                    .IsRequired()
                    .HasColumnName("SOLOMON_TITLE_ID")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasColumnName("STATE")
                    .HasColumnType("char(2)");

                entity.Property(e => e.StoreHours)
                    .IsRequired()
                    .HasColumnName("STORE_HOURS")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.StoreIsOpen).HasColumnName("STORE_IS_OPEN");

                entity.Property(e => e.StoreNickname)
                    .IsRequired()
                    .HasColumnName("STORE_NICKNAME")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.StoreOpenedDate)
                    .HasColumnName("STORE_OPENED_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.TimeZone)
                    .IsRequired()
                    .HasColumnName("TIME_ZONE")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.UpdateOpenLoansWithNewCard).HasColumnName("UPDATE_OPEN_LOANS_WITH_NEW_CARD");

                entity.Property(e => e.UseBlackbook).HasColumnName("USE_BLACKBOOK");

                entity.Property(e => e.UseMoneygramMo).HasColumnName("USE_MONEYGRAM_MO");

                entity.Property(e => e.UtcDstOffset)
                    .IsRequired()
                    .HasColumnName("UTC_DST_OFFSET")
                    .HasColumnType("varchar(6)");

                entity.Property(e => e.UtcOffset)
                    .IsRequired()
                    .HasColumnName("UTC_OFFSET")
                    .HasColumnType("varchar(6)");

                entity.Property(e => e.VerepayStoreKey)
                    .IsRequired()
                    .HasColumnName("VEREPAY_STORE_KEY")
                    .HasColumnType("varchar(19)");

                entity.Property(e => e.VerepayTerminalId)
                    .IsRequired()
                    .HasColumnName("VEREPAY_TERMINAL_ID")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.VerificationDocsRequired).HasColumnName("VERIFICATION_DOCS_REQUIRED");

                entity.Property(e => e.WesternUnionBillpayConnectorid)
                    .IsRequired()
                    .HasColumnName("WESTERN_UNION_BILLPAY_CONNECTORID")
                    .HasColumnType("varchar(8)");

                entity.Property(e => e.YearsGoodAddress).HasColumnName("YEARS_GOOD_ADDRESS");

                entity.Property(e => e.Zipcode)
                    .IsRequired()
                    .HasColumnName("ZIPCODE")
                    .HasColumnType("varchar(10)");

                entity.HasOne(d => d.AlternateLenderKeyNavigation)
                    .WithMany(p => p.Company)
                    .HasForeignKey(d => d.AlternateLenderKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_Company_AlternateLender");

                entity.HasOne(d => d.BaseCurrencyKeyNavigation)
                    .WithMany(p => p.Company)
                    .HasForeignKey(d => d.BaseCurrencyKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_Company_Currency");

                entity.HasOne(d => d.BusinessStateNavigation)
                    .WithMany(p => p.Company)
                    .HasForeignKey(d => d.BusinessState)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_Company_BUSINESS_STATE");

                entity.HasOne(d => d.BusinessState1)
                    .WithMany(p => p.Company)
                    .HasPrincipalKey(p => p.StateAbbrv)
                    .HasForeignKey(d => d.BusinessState)
                    .OnDelete(DeleteBehavior.Restrict);

                entity.HasOne(d => d.CabLenderKeyNavigation)
                    .WithMany(p => p.Company)
                    .HasForeignKey(d => d.CabLenderKey)
                    .HasConstraintName("FK_Company_CAB_LENDER_KEY");

                entity.HasOne(d => d.GlAcctGroupKeyNavigation)
                    .WithMany(p => p.Company)
                    .HasForeignKey(d => d.GlAcctGroupKey)
                    .HasConstraintName("FK_Company_GL_ACCT_GROUP_KEY");

                entity.HasOne(d => d.InterCoNoncashApAcctNavigation)
                    .WithMany(p => p.CompanyInterCoNoncashApAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.InterCoNoncashApAcct)
                    .HasConstraintName("FK_Company_INTER_CO_NONCASH_AP_ACCT");

                entity.HasOne(d => d.InterCoNoncashArAcctNavigation)
                    .WithMany(p => p.CompanyInterCoNoncashArAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.InterCoNoncashArAcct)
                    .HasConstraintName("FK_Company_INTER_CO_NONCASH_AR_ACCT");

                entity.HasOne(d => d.InterCoTitleApAcctNavigation)
                    .WithMany(p => p.CompanyInterCoTitleApAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.InterCoTitleApAcct)
                    .HasConstraintName("FK_Company_INTER_CO_TITLE_AP_ACCT");

                entity.HasOne(d => d.InterCoTitleArAcctNavigation)
                    .WithMany(p => p.CompanyInterCoTitleArAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.InterCoTitleArAcct)
                    .HasConstraintName("FK_Company_INTER_CO_TITLE_AR_ACCT");

                entity.HasOne(d => d.InterStoreApAcctNavigation)
                    .WithMany(p => p.CompanyInterStoreApAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.InterStoreApAcct)
                    .HasConstraintName("FK_Company_INTER_STORE_AP_ACCT");

                entity.HasOne(d => d.InterStoreArAcctNavigation)
                    .WithMany(p => p.CompanyInterStoreArAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.InterStoreArAcct)
                    .HasConstraintName("FK_Company_INTER_STORE_AR_ACCT");

                entity.HasOne(d => d.MarketKeyNavigation)
                    .WithMany(p => p.Company)
                    .HasForeignKey(d => d.MarketKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_Company_Markets");
            });

            modelBuilder.Entity<CompanyAchbank>(entity =>
            {
                entity.HasKey(e => e.CompanyAchbankKey)
                    .HasName("PK__CompanyA__F13E9883996C60C5");

                entity.ToTable("CompanyACHBank");

                entity.Property(e => e.CompanyAchbankKey).HasColumnName("CompanyACHBank_Key");

                entity.Property(e => e.CreditAchBankKey).HasColumnName("CREDIT_ACH_BANK_KEY");

                entity.Property(e => e.DebitAchBankKey).HasColumnName("DEBIT_ACH_BANK_KEY");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.HasOne(d => d.CreditAchBankKeyNavigation)
                    .WithMany(p => p.CompanyAchbankCreditAchBankKeyNavigation)
                    .HasForeignKey(d => d.CreditAchBankKey)
                    .HasConstraintName("FK_CompanyACHBank_CreditACHBankKey");

                entity.HasOne(d => d.DebitAchBankKeyNavigation)
                    .WithMany(p => p.CompanyAchbankDebitAchBankKeyNavigation)
                    .HasForeignKey(d => d.DebitAchBankKey)
                    .HasConstraintName("FK_CompanyACHBank_DebitACHBankKey");
            });

            modelBuilder.Entity<CompanyDetail>(entity =>
            {
                entity.HasKey(e => e.Location)
                    .HasName("PK_LOCATION");

                entity.Property(e => e.Location)
                    .HasColumnName("LOCATION")
                    .ValueGeneratedNever();

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasColumnName("ADDRESS")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.AlternateHours)
                    .IsRequired()
                    .HasColumnName("ALTERNATE_HOURS")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.CrossStreets)
                    .IsRequired()
                    .HasColumnName("CROSS_STREETS")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.Directions)
                    .IsRequired()
                    .HasColumnName("DIRECTIONS")
                    .HasColumnType("varchar(1000)");

                entity.Property(e => e.Fax)
                    .IsRequired()
                    .HasColumnName("FAX")
                    .HasColumnType("varchar(12)");

                entity.Property(e => e.NewsFlash)
                    .IsRequired()
                    .HasColumnName("NEWS_FLASH")
                    .HasColumnType("varchar(500)");

                entity.Property(e => e.StoreEmailAddress)
                    .IsRequired()
                    .HasColumnName("STORE_EMAIL_ADDRESS")
                    .HasColumnType("varchar(300)");

                entity.HasOne(d => d.LocationNavigation)
                    .WithOne(p => p.CompanyDetail)
                    .HasForeignKey<CompanyDetail>(d => d.Location)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CompanyDetail_Company");
            });

            modelBuilder.Entity<CompanyDocumentResource>(entity =>
            {
                entity.HasKey(e => e.CompanyDocumentResourceKey)
                    .HasName("PK_CompanyDocumentResource");

                entity.HasIndex(e => new { e.Location, e.DocumentFieldName })
                    .HasName("UX_CompanyDocumentResource")
                    .IsUnique();

                entity.Property(e => e.CompanyDocumentResourceKey).HasColumnName("COMPANY_DOCUMENT_RESOURCE_KEY");

                entity.Property(e => e.DocumentFieldName)
                    .IsRequired()
                    .HasColumnName("DOCUMENT_FIELD_NAME")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.DocumentResourceKey).HasColumnName("DOCUMENT_RESOURCE_KEY");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.HasOne(d => d.DocumentResourceKeyNavigation)
                    .WithMany(p => p.CompanyDocumentResource)
                    .HasForeignKey(d => d.DocumentResourceKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CompanyDocumentResource_DocumentResource");

                entity.HasOne(d => d.LocationNavigation)
                    .WithMany(p => p.CompanyDocumentResource)
                    .HasForeignKey(d => d.Location)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CompanyDocumentResource_Company");
            });

            modelBuilder.Entity<CompanyExpenseType>(entity =>
            {
                entity.HasKey(e => e.CompanyExpenseTypeKey)
                    .HasName("PK_CompanyExpenseType");

                entity.HasIndex(e => new { e.ExpenseTypeKey, e.Location })
                    .HasName("UC_CompanyExpenseType_Company")
                    .IsUnique();

                entity.Property(e => e.CompanyExpenseTypeKey).HasColumnName("COMPANY_EXPENSE_TYPE_KEY");

                entity.Property(e => e.ExpenseTypeKey).HasColumnName("EXPENSE_TYPE_KEY");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.HasOne(d => d.ExpenseTypeKeyNavigation)
                    .WithMany(p => p.CompanyExpenseType)
                    .HasForeignKey(d => d.ExpenseTypeKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CompanyExpenseType_ExpenseType");

                entity.HasOne(d => d.LocationNavigation)
                    .WithMany(p => p.CompanyExpenseType)
                    .HasForeignKey(d => d.Location)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CompanyExpenseType_Company");
            });

            modelBuilder.Entity<Country>(entity =>
            {
                entity.HasKey(e => e.CountryKey)
                    .HasName("PK_Country");

                entity.HasIndex(e => e.CountryCode)
                    .HasName("UC_Country_Code")
                    .IsUnique();

                entity.HasIndex(e => e.Iso2CharCountryCode)
                    .HasName("UC_Country_ISOCode")
                    .IsUnique();

                entity.Property(e => e.CountryKey).HasColumnName("COUNTRY_KEY");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasColumnName("COUNTRY_CODE")
                    .HasColumnType("char(3)");

                entity.Property(e => e.CurrencyKey).HasColumnName("CURRENCY_KEY");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.IsEnabled).HasColumnName("IS_ENABLED");

                entity.Property(e => e.Iso2CharCountryCode)
                    .IsRequired()
                    .HasColumnName("ISO_2_CHAR_COUNTRY_CODE")
                    .HasColumnType("char(2)");

                entity.HasOne(d => d.CurrencyKeyNavigation)
                    .WithMany(p => p.Country)
                    .HasForeignKey(d => d.CurrencyKey)
                    .HasConstraintName("FK_Country_Currency");
            });

            modelBuilder.Entity<CourtesyPayout>(entity =>
            {
                entity.HasKey(e => e.CourtesyPayoutKey)
                    .HasName("PK_CourtesyPayout");

                entity.HasIndex(e => e.CashedCheckKey)
                    .HasName("IX_CourtesyPayout_CASHED_CHECK_KEY");

                entity.HasIndex(e => e.CustomerKey)
                    .HasName("IX_CourtesyPayout_CUSTOMER_KEY");

                entity.HasIndex(e => e.LoanKey)
                    .HasName("IX_CourtesyPayout_LOAN_KEY");

                entity.HasIndex(e => new { e.CourtesyPayoutAmt, e.TransDetailKey })
                    .HasName("IX_CourtesyPayout_TRANS_DETAIL_KEY");

                entity.Property(e => e.CourtesyPayoutKey).HasColumnName("COURTESY_PAYOUT_KEY");

                entity.Property(e => e.CashedCheckKey).HasColumnName("CASHED_CHECK_KEY");

                entity.Property(e => e.CourtesyPayoutAmt)
                    .HasColumnName("COURTESY_PAYOUT_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CourtesyPayoutType)
                    .IsRequired()
                    .HasColumnName("COURTESY_PAYOUT_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasColumnType("varchar(2000)");

                entity.Property(e => e.RtfNote)
                    .IsRequired()
                    .HasColumnName("RTF_NOTE")
                    .HasColumnType("varchar(max)");

                entity.Property(e => e.ServiceTransKey).HasColumnName("SERVICE_TRANS_KEY");

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");

                entity.HasOne(d => d.CashedCheckKeyNavigation)
                    .WithMany(p => p.CourtesyPayout)
                    .HasForeignKey(d => d.CashedCheckKey)
                    .HasConstraintName("FK_CourtesyPayout_CASHED_CHECK_KEY");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.CourtesyPayout)
                    .HasForeignKey(d => d.CustomerKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CourtesyPayout_LOAN_KEY");

                entity.HasOne(d => d.LoanKeyNavigation)
                    .WithMany(p => p.CourtesyPayout)
                    .HasForeignKey(d => d.LoanKey)
                    .HasConstraintName("FK_CourtesyPayout_CUSTOMER_KEY");

                entity.HasOne(d => d.ServiceTransKeyNavigation)
                    .WithMany(p => p.CourtesyPayout)
                    .HasForeignKey(d => d.ServiceTransKey)
                    .HasConstraintName("FK_CourtesyPayout_SERVICE_TRANS_KEY");

                entity.HasOne(d => d.TransDetailKeyNavigation)
                    .WithMany(p => p.CourtesyPayout)
                    .HasForeignKey(d => d.TransDetailKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CourtesyPayout_TRANS_DETAIL_KEY");
            });

            modelBuilder.Entity<CpiuDetail>(entity =>
            {
                entity.HasKey(e => e.CpiuDetailKey)
                    .HasName("PK_CpiuDetail");

                entity.Property(e => e.CpiuDetailKey).HasColumnName("CPIU_DETAIL_KEY");

                entity.Property(e => e.AgencyReference)
                    .HasColumnName("AGENCY_REFERENCE")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.CheckNo)
                    .HasColumnName("CHECK_NO")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.ClientAddress)
                    .HasColumnName("CLIENT_ADDRESS")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.ClientDob)
                    .HasColumnName("CLIENT_DOB")
                    .HasColumnType("date");

                entity.Property(e => e.ClientName)
                    .HasColumnName("CLIENT_NAME")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.ClientPostcode)
                    .HasColumnName("CLIENT_POSTCODE")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.CpiuMasterKey).HasColumnName("CPIU_MASTER_KEY");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DoNotPost).HasColumnName("DO_NOT_POST");

                entity.Property(e => e.DoNotPostDatetime)
                    .HasColumnName("DO_NOT_POST_DATETIME")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DoNotPostTeller)
                    .HasColumnName("DO_NOT_POST_TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.ErrorMsg)
                    .HasColumnName("ERROR_MSG")
                    .HasColumnType("varchar(250)");

                entity.Property(e => e.IsPif).HasColumnName("IS_PIF");

                entity.Property(e => e.IsSif).HasColumnName("IS_SIF");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.Note)
                    .HasColumnName("NOTE")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.PaymentAmt)
                    .HasColumnName("PAYMENT_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PaymentDate)
                    .HasColumnName("PAYMENT_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.Posted).HasColumnName("POSTED");

                entity.Property(e => e.PostedDatetime)
                    .HasColumnName("POSTED_DATETIME")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.PostedTeller)
                    .HasColumnName("POSTED_TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.Reference)
                    .HasColumnName("REFERENCE")
                    .HasColumnType("varchar(43)");

                entity.Property(e => e.RisreptKey).HasColumnName("RISREPT_KEY");

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");

                entity.HasOne(d => d.CpiuMasterKeyNavigation)
                    .WithMany(p => p.CpiuDetail)
                    .HasForeignKey(d => d.CpiuMasterKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CpiuDetail_CPIU_MASTER_KEY");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.CpiuDetail)
                    .HasForeignKey(d => d.CustomerKey)
                    .HasConstraintName("FK_CpiuDetail_CUSTOMER_KEY");

                entity.HasOne(d => d.RisreptKeyNavigation)
                    .WithMany(p => p.CpiuDetail)
                    .HasForeignKey(d => d.RisreptKey)
                    .HasConstraintName("FK_CpiuDetail_RISREPT_KEY");

                entity.HasOne(d => d.TransDetailKeyNavigation)
                    .WithMany(p => p.CpiuDetail)
                    .HasForeignKey(d => d.TransDetailKey)
                    .HasConstraintName("FK_CpiuDetail_TRANS_DETAIL_KEY");
            });

            modelBuilder.Entity<CpiuExceptionReport>(entity =>
            {
                entity.HasKey(e => e.CpiuExceptionReportKey)
                    .HasName("PK_CpiuExceptionReport");

                entity.HasIndex(e => new { e.CpiuExceptionReportKey, e.Message, e.ExceptionType, e.DatetimeEntered, e.CpiuDetailKey })
                    .HasName("IX_CpiuExceptionReport_DATETIME_ENTERED_CPIU_DETAIL_KEY");

                entity.Property(e => e.CpiuExceptionReportKey).HasColumnName("CPIU_EXCEPTION_REPORT_KEY");

                entity.Property(e => e.CpiuDetailKey).HasColumnName("CPIU_DETAIL_KEY");

                entity.Property(e => e.DatetimeEntered)
                    .HasColumnName("DATETIME_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ExceptionType).HasColumnName("EXCEPTION_TYPE");

                entity.Property(e => e.Message)
                    .IsRequired()
                    .HasColumnName("MESSAGE")
                    .HasColumnType("varchar(500)");

                entity.HasOne(d => d.CpiuDetailKeyNavigation)
                    .WithMany(p => p.CpiuExceptionReport)
                    .HasForeignKey(d => d.CpiuDetailKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CpiuExceptionReport_CPIU_DETAIL_KEY");
            });

            modelBuilder.Entity<CpiuMaster>(entity =>
            {
                entity.HasKey(e => e.CpiuMasterKey)
                    .HasName("PK_CpiuMaster");

                entity.HasIndex(e => e.FileName)
                    .HasName("IX_CpiuMaster_FILE_NAME");

                entity.HasIndex(e => new { e.CpiuMasterKey, e.LockedBy, e.Teller, e.CollectionAgencyKey, e.FileName, e.FinishedBy, e.FinishedDatetime, e.LockedDatetime, e.Locked })
                    .HasName("IX_CpiuMaster_LOCKED_DATETIME_LOCKED");

                entity.HasIndex(e => new { e.LockedDatetime, e.Locked, e.LockedBy, e.CpiuMasterKey, e.FinishedBy, e.Teller, e.CollectionAgencyKey, e.FileName, e.FinishedDatetime, e.ImportedDatetime, e.Finished })
                    .HasName("IX_CpiuMaster_IMPORTED_DATETIME_FINISHED");

                entity.Property(e => e.CpiuMasterKey).HasColumnName("CPIU_MASTER_KEY");

                entity.Property(e => e.CollectionAgencyKey).HasColumnName("COLLECTION_AGENCY_KEY");

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasColumnName("FILE_NAME")
                    .HasColumnType("varchar(250)");

                entity.Property(e => e.Finished).HasColumnName("FINISHED");

                entity.Property(e => e.FinishedBy)
                    .HasColumnName("FINISHED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.FinishedDatetime)
                    .HasColumnName("FINISHED_DATETIME")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ImportedDatetime)
                    .HasColumnName("IMPORTED_DATETIME")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Locked).HasColumnName("LOCKED");

                entity.Property(e => e.LockedBy)
                    .HasColumnName("LOCKED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.LockedDatetime)
                    .HasColumnName("LOCKED_DATETIME")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.CollectionAgencyKeyNavigation)
                    .WithMany(p => p.CpiuMaster)
                    .HasForeignKey(d => d.CollectionAgencyKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CpiuMaster_COLLECTION_AGENCY_KEY");

                entity.HasOne(d => d.TellerNavigation)
                    .WithMany(p => p.CpiuMaster)
                    .HasPrincipalKey(p => p.Teller)
                    .HasForeignKey(d => d.Teller)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CpiuMaster_TELLER");
            });

            modelBuilder.Entity<CreditCardAttempts>(entity =>
            {
                entity.HasKey(e => e.CreditCardTransKey)
                    .HasName("PK_CreditCardAttempts");

                entity.HasIndex(e => new { e.Paid, e.TransType, e.IsRecurring, e.CardNumber, e.DateEntered })
                    .HasName("IX_CreditCardAttempts_CARD_NUMBER_DATE_ENTERED_PAID_TRANS_TYPE_IS_RECURRING");

                entity.HasIndex(e => new { e.Paid, e.TransType, e.IsRecurring, e.Token, e.DateEntered })
                    .HasName("IX_CreditCardAttempts_TOKEN_DATE_ENTERED_PAID_TRANS_TYPE_IS_RECURRING");

                entity.Property(e => e.CreditCardTransKey)
                    .HasColumnName("CREDIT_CARD_TRANS_KEY")
                    .ValueGeneratedNever();

                entity.Property(e => e.CardNumber)
                    .HasColumnName("CARD_NUMBER")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsRecurring).HasColumnName("IS_RECURRING");

                entity.Property(e => e.Paid).HasColumnName("PAID");

                entity.Property(e => e.Token)
                    .HasColumnName("TOKEN")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.TransType).HasColumnName("TRANS_TYPE");
            });

            modelBuilder.Entity<CreditCardBlock>(entity =>
            {
                entity.HasKey(e => e.CreditCardBlockKey)
                    .HasName("PK_CreditCardBlock");

                entity.HasIndex(e => e.CardNum)
                    .HasName("IX_CreditCardBlock_CARD_NUM");

                entity.Property(e => e.CreditCardBlockKey).HasColumnName("CREDIT_CARD_BLOCK_KEY");

                entity.Property(e => e.BlockReasonKey).HasColumnName("BLOCK_REASON_KEY");

                entity.Property(e => e.CardNum)
                    .HasColumnName("CARD_NUM")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.CountAtBlock).HasColumnName("COUNT_AT_BLOCK");

                entity.Property(e => e.CreditCardResultCodeKey).HasColumnName("CREDIT_CARD_RESULT_CODE_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsToken).HasColumnName("IS_TOKEN");

                entity.HasOne(d => d.BlockReasonKeyNavigation)
                    .WithMany(p => p.CreditCardBlock)
                    .HasForeignKey(d => d.BlockReasonKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CreditCardBlock_BlockReason");
            });

            modelBuilder.Entity<CreditCardBrand>(entity =>
            {
                entity.HasKey(e => e.CreditCardBrandKey)
                    .HasName("PK_CardBrand");

                entity.Property(e => e.CreditCardBrandKey).HasColumnName("CREDIT_CARD_BRAND_KEY");

                entity.Property(e => e.BrandDescription)
                    .IsRequired()
                    .HasColumnName("BRAND_DESCRIPTION")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.BrandName)
                    .IsRequired()
                    .HasColumnName("BRAND_NAME")
                    .HasColumnType("varchar(25)");
            });

            modelBuilder.Entity<CreditCardResultCode>(entity =>
            {
                entity.HasKey(e => e.CreditCardResultCodeKey)
                    .HasName("PK_CreditCardResultCode");

                entity.Property(e => e.CreditCardResultCodeKey).HasColumnName("CREDIT_CARD_RESULT_CODE_KEY");

                entity.Property(e => e.BlockCard).HasColumnName("BLOCK_CARD");

                entity.Property(e => e.CanSecureInternetLoan).HasColumnName("CAN_SECURE_INTERNET_LOAN");

                entity.Property(e => e.CanSecureStoreLoan).HasColumnName("CAN_SECURE_STORE_LOAN");

                entity.Property(e => e.CreditCardVendorKey).HasColumnName("CREDIT_CARD_VENDOR_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateUpdated)
                    .HasColumnName("DATE_UPDATED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IsApproved).HasColumnName("IS_APPROVED");

                entity.Property(e => e.IsAvApproved).HasColumnName("IS_AV_APPROVED");

                entity.Property(e => e.IsSystemError).HasColumnName("IS_SYSTEM_ERROR");

                entity.Property(e => e.MarkCardExpired).HasColumnName("MARK_CARD_EXPIRED");

                entity.Property(e => e.MarkCardInvalid).HasColumnName("MARK_CARD_INVALID");

                entity.Property(e => e.MarkCreditCard).HasColumnName("MARK_CREDIT_CARD");

                entity.Property(e => e.ResultCode)
                    .IsRequired()
                    .HasColumnName("RESULT_CODE")
                    .HasColumnType("varchar(5)");

                entity.Property(e => e.ResultCodeTypeId).HasColumnName("RESULT_CODE_TYPE_ID");

                entity.Property(e => e.ResultDescription)
                    .HasColumnName("RESULT_DESCRIPTION")
                    .HasColumnType("varchar(500)");

                entity.Property(e => e.ResultText)
                    .IsRequired()
                    .HasColumnName("RESULT_TEXT")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.UpdatedBy)
                    .HasColumnName("UPDATED_BY")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.CreditCardVendorKeyNavigation)
                    .WithMany(p => p.CreditCardResultCode)
                    .HasForeignKey(d => d.CreditCardVendorKey)
                    .HasConstraintName("FK_CreditCardResultCode_CreditCardVendor");
            });

            modelBuilder.Entity<CreditCardResultCodeType>(entity =>
            {
                entity.HasKey(e => e.ResultCodeTypeId)
                    .HasName("PK_ResultCodeType");

                entity.Property(e => e.ResultCodeTypeId)
                    .HasColumnName("RESULT_CODE_TYPE_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.ResultCodeTypeDescription)
                    .IsRequired()
                    .HasColumnName("RESULT_CODE_TYPE_DESCRIPTION")
                    .HasColumnType("varchar(100)");
            });

            modelBuilder.Entity<CreditCardTrans>(entity =>
            {
                entity.HasKey(e => e.CreditCardTransKey)
                    .HasName("PK_CreditCardTrans");

                entity.HasIndex(e => e.CcardNum)
                    .HasName("IX_CreditCardTrans_CCARD_NUM");

                entity.HasIndex(e => e.CustomerKey)
                    .HasName("IX_CreditCardTrans_CUSTOMER_KEY");

                entity.HasIndex(e => e.DateEntered)
                    .HasName("IX_CreditCardTrans_DATE_ENTERED");

                entity.HasIndex(e => e.TransDetailKey)
                    .HasName("IX_CreditCardTrans_TRANS_DETAIL_KEY");

                entity.HasIndex(e => e.TransPosKey)
                    .HasName("IX_CreditCardTrans_TRANS_POS_KEY");

                entity.HasIndex(e => new { e.RisreptKey, e.DateEntered, e.Teller })
                    .HasName("IX_CreditCardTrans_RISREPT_KEY_DATE_ENTERED_TELLER");

                entity.HasIndex(e => new { e.Location, e.CreditCardTransKey, e.TransDetailKey, e.DateEntered, e.SuccessFlag, e.Teller, e.ChargeAmt, e.LoanKey })
                    .HasName("IX_CreditCardTrans_LOAN_KEY");

                entity.Property(e => e.CreditCardTransKey).HasColumnName("CREDIT_CARD_TRANS_KEY");

                entity.Property(e => e.AuthCode)
                    .HasColumnName("AUTH_CODE")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.AvsCode)
                    .IsRequired()
                    .HasColumnName("AVS_CODE")
                    .HasColumnType("varchar(3)");

                entity.Property(e => e.AvsCodeTwoChar)
                    .HasColumnName("AVS_CODE_TWO_CHAR")
                    .HasColumnType("char(2)");

                entity.Property(e => e.CcardName)
                    .IsRequired()
                    .HasColumnName("CCARD_NAME")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.CcardNum)
                    .HasColumnName("CCARD_NUM")
                    .HasColumnType("varchar(19)");

                entity.Property(e => e.ChargeAmt)
                    .HasColumnName("CHARGE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CreditCardResultCodeKey).HasColumnName("CREDIT_CARD_RESULT_CODE_KEY");

                entity.Property(e => e.CreditCardVendorKey).HasColumnName("CREDIT_CARD_VENDOR_KEY");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.CvvCode)
                    .IsRequired()
                    .HasColumnName("CVV_CODE")
                    .HasColumnType("char(2)");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DeclineCode)
                    .IsRequired()
                    .HasColumnName("DECLINE_CODE")
                    .HasColumnType("varchar(5)");

                entity.Property(e => e.DeclineCodeTwoChar)
                    .HasColumnName("DECLINE_CODE_TWO_CHAR")
                    .HasColumnType("char(2)");

                entity.Property(e => e.EpdqTransId)
                    .HasColumnName("EPDQ_TRANS_ID")
                    .HasColumnType("varchar(255)");

                entity.Property(e => e.ErrorMsg)
                    .HasColumnName("ERROR_MSG")
                    .HasColumnType("varchar(512)");

                entity.Property(e => e.ExpMonth).HasColumnName("EXP_MONTH");

                entity.Property(e => e.ExpYear).HasColumnName("EXP_YEAR");

                entity.Property(e => e.FeeChargedAmt)
                    .HasColumnName("FEE_CHARGED_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.MagStrip)
                    .HasColumnName("MAG_STRIP")
                    .HasColumnType("varchar(117)");

                entity.Property(e => e.RefundTransDetailKey).HasColumnName("REFUND_TRANS_DETAIL_KEY");

                entity.Property(e => e.ReqFileType)
                    .IsRequired()
                    .HasColumnName("REQ_FILE_TYPE")
                    .HasColumnType("char(3)");

                entity.Property(e => e.ResultCode)
                    .HasColumnName("RESULT_CODE")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.RisreptKey).HasColumnName("RISREPT_KEY");

                entity.Property(e => e.RitaSequenceNum).HasColumnName("RITA_SEQUENCE_NUM");

                entity.Property(e => e.RitaTroutd).HasColumnName("RITA_TROUTD");

                entity.Property(e => e.SuccessFlag)
                    .HasColumnName("SUCCESS_FLAG")
                    .HasColumnType("LOGICAL");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.Token)
                    .IsRequired()
                    .HasColumnName("TOKEN")
                    .HasColumnType("varchar(40)")
                    .HasDefaultValueSql("''");

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");

                entity.Property(e => e.TransPosKey).HasColumnName("TRANS_POS_KEY");

                entity.Property(e => e.VendorPost)
                    .HasColumnName("VENDOR_POST")
                    .HasColumnType("varchar(max)");

                entity.Property(e => e.VendorResponse)
                    .HasColumnName("VENDOR_RESPONSE")
                    .HasColumnType("varchar(max)");

                entity.HasOne(d => d.CreditCardVendorKeyNavigation)
                    .WithMany(p => p.CreditCardTrans)
                    .HasForeignKey(d => d.CreditCardVendorKey)
                    .HasConstraintName("FK_CreditCardTrans_CREDITCARDVENDOR");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.CreditCardTrans)
                    .HasForeignKey(d => d.CustomerKey)
                    .HasConstraintName("FK_CreditCardTrans_Customer");

                entity.HasOne(d => d.TellerNavigation)
                    .WithMany(p => p.CreditCardTrans)
                    .HasPrincipalKey(p => p.Teller)
                    .HasForeignKey(d => d.Teller)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CreditCardTrans_TellerID");

                entity.HasOne(d => d.TransDetailKeyNavigation)
                    .WithMany(p => p.CreditCardTrans)
                    .HasForeignKey(d => d.TransDetailKey)
                    .HasConstraintName("FK_CreditCardTrans_TransDetail");
            });

            modelBuilder.Entity<CreditCardVendor>(entity =>
            {
                entity.HasKey(e => e.CreditCardVendorKey)
                    .HasName("PK_CreditCardVendor");

                entity.Property(e => e.CreditCardVendorKey)
                    .HasColumnName("CREDIT_CARD_VENDOR_KEY")
                    .ValueGeneratedNever();

                entity.Property(e => e.CcVendorName)
                    .IsRequired()
                    .HasColumnName("CC_VENDOR_NAME")
                    .HasColumnType("varchar(25)");
            });

            modelBuilder.Entity<CreditCardXref>(entity =>
            {
                entity.HasKey(e => e.CreditcardxrefKey)
                    .HasName("PK_CreditCardXRef");

                entity.ToTable("CreditCardXRef");

                entity.HasIndex(e => e.CreditCardKey)
                    .HasName("IX_CreditCardXRef_CREDIT_CARD_KEY");

                entity.HasIndex(e => new { e.OriginalPrn, e.IdNo, e.CustomerKey })
                    .HasName("IX_CreditCardXRef_CUSTOMER_KEY");

                entity.Property(e => e.CreditcardxrefKey).HasColumnName("CREDITCARDXREF_KEY");

                entity.Property(e => e.CardBrand).HasColumnName("CARD_BRAND");

                entity.Property(e => e.CreditCardKey).HasColumnName("CREDIT_CARD_KEY");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.IdNo)
                    .HasColumnName("ID_NO")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.OriginalPrn)
                    .HasColumnName("ORIGINAL_PRN")
                    .HasColumnType("varchar(20)");

                entity.HasOne(d => d.CreditCardKeyNavigation)
                    .WithMany(p => p.CreditCardXref)
                    .HasForeignKey(d => d.CreditCardKey)
                    .HasConstraintName("FK_CreditCardXRef_CREDIT_CARD_KEY");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.CreditCardXref)
                    .HasForeignKey(d => d.CustomerKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CreditCardXRef_CUSTOMER_KEY");
            });

            modelBuilder.Entity<CreditCards>(entity =>
            {
                entity.HasKey(e => e.CreditCardKey)
                    .HasName("PK_CreditCards");

                entity.HasIndex(e => e.CardNum)
                    .HasName("IX_CreditCards_CARDNUM");

                entity.HasIndex(e => e.CustomerKey)
                    .HasName("IX_CreditCards_CUSTOMER_KEY");

                entity.HasIndex(e => new { e.CreditCardKey, e.CcStatus, e.CustomerKey })
                    .HasName("IX_CreditCards_DTA");

                entity.HasIndex(e => new { e.CreditCardKey, e.ExpMonth, e.ExpYear, e.CcStatus, e.Deleted })
                    .HasName("IX_CreditCards_CCSTATUS_DELETED");

                entity.Property(e => e.CreditCardKey).HasColumnName("CreditCard_Key");

                entity.Property(e => e.AddressFormat)
                    .IsRequired()
                    .HasColumnName("ADDRESS_FORMAT")
                    .HasColumnType("char(3)");

                entity.Property(e => e.AliasId)
                    .HasColumnName("ALIAS_ID")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.BillingAddrStreet)
                    .IsRequired()
                    .HasColumnName("BILLING_ADDR_STREET")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.BillingAddress1)
                    .IsRequired()
                    .HasColumnName("BILLING_ADDRESS1")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.BillingAddressCsz)
                    .HasColumnName("BILLING_ADDRESS_CSZ")
                    .HasColumnType("varchar(100)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_CSZ]([ADDRESS_FORMAT],[BILLING_CITY],[BILLING_STATE],[BILLING_ZIPCODE])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.BillingAddressLine)
                    .HasColumnName("BILLING_ADDRESS_LINE")
                    .HasColumnType("varchar(100)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE]([ADDRESS_FORMAT],[BILLING_ADDRESS1],'','',[BILLING_ADDR_STREET],'','','','',[BILLING_FLAT_NUM],[BILLING_BUILDING_NAME],[BILLING_BUILDING_NUM])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.BillingAddressLine1)
                    .HasColumnName("BILLING_ADDRESS_LINE_1")
                    .HasColumnType("varchar(100)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE_1]([ADDRESS_FORMAT],[BILLING_ADDRESS1],'','',[BILLING_ADDR_STREET],'','',[BILLING_FLAT_NUM],[BILLING_BUILDING_NAME],'','')")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.BillingAddressLine2)
                    .HasColumnName("BILLING_ADDRESS_LINE_2")
                    .HasColumnType("varchar(150)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE_2]([ADDRESS_FORMAT],'','',[BILLING_CITY],[BILLING_STATE],[BILLING_ZIPCODE],[BILLING_BUILDING_NUM],[BILLING_ADDR_STREET],[BILLING_ADDRESS1],'','','','')")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.BillingAddressLine3)
                    .HasColumnName("BILLING_ADDRESS_LINE_3")
                    .HasColumnType("varchar(150)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE_3]([ADDRESS_FORMAT],'','',[BILLING_CITY],[BILLING_STATE],[BILLING_ZIPCODE])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.BillingBuildingName)
                    .IsRequired()
                    .HasColumnName("BILLING_BUILDING_NAME")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.BillingBuildingNum)
                    .IsRequired()
                    .HasColumnName("BILLING_BUILDING_NUM")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.BillingCity)
                    .IsRequired()
                    .HasColumnName("BILLING_CITY")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.BillingCountry)
                    .IsRequired()
                    .HasColumnName("BILLING_COUNTRY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.BillingCounty)
                    .IsRequired()
                    .HasColumnName("BILLING_COUNTY")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.BillingFlatNum)
                    .IsRequired()
                    .HasColumnName("BILLING_FLAT_NUM")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.BillingState)
                    .IsRequired()
                    .HasColumnName("BILLING_STATE")
                    .HasColumnType("char(2)");

                entity.Property(e => e.BillingZipcode)
                    .IsRequired()
                    .HasColumnName("BILLING_ZIPCODE")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.CardBrand).HasColumnName("CARD_BRAND");

                entity.Property(e => e.CardNum).HasColumnType("varchar(19)");

                entity.Property(e => e.CardType).HasColumnName("CARD_TYPE");

                entity.Property(e => e.CcStatus).HasColumnName("CC_STATUS");

                entity.Property(e => e.Ccv)
                    .HasColumnName("CCV")
                    .HasColumnType("varchar(4)");

                entity.Property(e => e.CustomerKey).HasColumnName("Customer_Key");

                entity.Property(e => e.DateDeleted)
                    .HasColumnName("DATE_DELETED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Deleted)
                    .HasColumnName("DELETED")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.DeletedBy)
                    .HasColumnName("DELETED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.Electron)
                    .HasColumnName("ELECTRON")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.LastResult).HasColumnType("varchar(255)");

                entity.Property(e => e.Lastupdate)
                    .HasColumnName("LASTUPDATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.MaestroSwitch)
                    .HasColumnName("MAESTRO_SWITCH")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.MagStrip)
                    .HasColumnName("MAG_STRIP")
                    .HasColumnType("varchar(117)");

                entity.Property(e => e.NameOnCard)
                    .IsRequired()
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.PinlessEligible).HasColumnName("PINLESS_ELIGIBLE");

                entity.Property(e => e.ProcessorFlaggedCredit).HasColumnName("PROCESSOR_FLAGGED_CREDIT");

                entity.Property(e => e.RiccEffDate)
                    .HasColumnName("RICC_EFF_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.Token)
                    .IsRequired()
                    .HasColumnName("TOKEN")
                    .HasColumnType("varchar(40)");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.CreditCards)
                    .HasForeignKey(d => d.CustomerKey)
                    .HasConstraintName("FK_CreditCards_Customer");
            });

            modelBuilder.Entity<CreditCardsEdit>(entity =>
            {
                entity.HasKey(e => e.CreditcardseditKey)
                    .HasName("PK_CreditCardsEdit");

                entity.HasIndex(e => new { e.CreditcardseditKey, e.Location, e.Teller, e.DateEntered, e.OldValue, e.FieldName, e.NewValue, e.CreditcardKey })
                    .HasName("IX_CreditCardsEdit_CREDITCARD_KEY");

                entity.Property(e => e.CreditcardseditKey).HasColumnName("CREDITCARDSEDIT_KEY");

                entity.Property(e => e.CreditcardKey).HasColumnName("CREDITCARD_KEY");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.FieldName)
                    .IsRequired()
                    .HasColumnName("FIELD_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.NewValue)
                    .IsRequired()
                    .HasColumnName("NEW_VALUE")
                    .HasColumnType("varchar(120)");

                entity.Property(e => e.OldValue)
                    .IsRequired()
                    .HasColumnName("OLD_VALUE")
                    .HasColumnType("varchar(120)");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");
            });

            modelBuilder.Entity<CreditRptPrint>(entity =>
            {
                entity.HasKey(e => e.CrpKey)
                    .HasName("PK_CreditRptPrint");

                entity.HasIndex(e => e.CreditRptKey)
                    .HasName("IX_CreditRptPrint_Credit_Rpt_Key");

                entity.Property(e => e.CrpKey).HasColumnName("CRP_key");

                entity.Property(e => e.CreditRptKey).HasColumnName("Credit_Rpt_Key");

                entity.Property(e => e.ReportLine).HasColumnType("varchar(300)");
            });

            modelBuilder.Entity<CreditVendor>(entity =>
            {
                entity.HasKey(e => e.CreditVendorKey)
                    .HasName("PK_CreditVendor");

                entity.Property(e => e.CreditVendorKey).HasColumnName("CREDIT_VENDOR_KEY");

                entity.Property(e => e.ClarityActive).HasColumnName("CLARITY_ACTIVE");

                entity.Property(e => e.ClverifyActive).HasColumnName("CLVERIFY_ACTIVE");

                entity.Property(e => e.DataxActive).HasColumnName("DATAX_ACTIVE");

                entity.Property(e => e.GentryActive).HasColumnName("GENTRY_ACTIVE");

                entity.Property(e => e.IsDataxBmReportingActive).HasColumnName("IS_DATAX_BM_REPORTING_ACTIVE");

                entity.Property(e => e.LastClarityRunTime)
                    .HasColumnName("LAST_CLARITY_RUN_TIME")
                    .HasColumnType("datetime");

                entity.Property(e => e.LastClverifyRunTime)
                    .HasColumnName("LAST_CLVERIFY_RUN_TIME")
                    .HasColumnType("datetime");

                entity.Property(e => e.LastDataxRunTime)
                    .HasColumnName("LAST_DATAX_RUN_TIME")
                    .HasColumnType("datetime");

                entity.Property(e => e.LastFtDailyRunTime)
                    .HasColumnName("LAST_FT_DAILY_RUN_TIME")
                    .HasColumnType("datetime");

                entity.Property(e => e.LastGentryRunTime)
                    .HasColumnName("LAST_GENTRY_RUN_TIME")
                    .HasColumnType("datetime");

                entity.Property(e => e.LastTeletrackukRunTime)
                    .HasColumnName("LAST_TELETRACKUK_RUN_TIME")
                    .HasColumnType("datetime");

                entity.Property(e => e.LastVeritecIlRunTime)
                    .HasColumnName("LAST_VERITEC_IL_RUN_TIME")
                    .HasColumnType("datetime");

                entity.Property(e => e.LastVeritecMiRunTime)
                    .HasColumnName("LAST_VERITEC_MI_RUN_TIME")
                    .HasColumnType("datetime");

                entity.Property(e => e.LastVeritecNdRunTime)
                    .HasColumnName("LAST_VERITEC_ND_RUN_TIME")
                    .HasColumnType("datetime");

                entity.Property(e => e.LastVeritecOkRunTime)
                    .HasColumnName("LAST_VERITEC_OK_RUN_TIME")
                    .HasColumnType("datetime");

                entity.Property(e => e.LastVeritecWaRunTime)
                    .HasColumnName("LAST_VERITEC_WA_RUN_TIME")
                    .HasColumnType("datetime");

                entity.Property(e => e.LastVeritecWiRunTime)
                    .HasColumnName("LAST_VERITEC_WI_RUN_TIME")
                    .HasColumnType("datetime");

                entity.Property(e => e.TeletrackukActive).HasColumnName("TELETRACKUK_ACTIVE");

                entity.Property(e => e.VeritecIlActive).HasColumnName("VERITEC_IL_ACTIVE");

                entity.Property(e => e.VeritecMiActive).HasColumnName("VERITEC_MI_ACTIVE");

                entity.Property(e => e.VeritecNdActive).HasColumnName("VERITEC_ND_ACTIVE");

                entity.Property(e => e.VeritecOkActive).HasColumnName("VERITEC_OK_ACTIVE");

                entity.Property(e => e.VeritecWaActive).HasColumnName("VERITEC_WA_ACTIVE");

                entity.Property(e => e.VeritecWiActive).HasColumnName("VERITEC_WI_ACTIVE");
            });

            modelBuilder.Entity<CreditVendorData>(entity =>
            {
                entity.HasKey(e => e.CreditVendorDataKey)
                    .HasName("PK_CreditVendorData");

                entity.HasIndex(e => new { e.LoanKey, e.ClverifyStatus })
                    .HasName("IX_CreditVendorData_LOANKEY");

                entity.HasIndex(e => new { e.DataxStatus, e.ClverifyStatus, e.IsSentDatax, e.IsSentClverify, e.LoanKey, e.CreditVendorDataKey })
                    .HasName("IX_CreditVendorData_DATAX_STATUS_CLVERIFY_STATUS");

                entity.HasIndex(e => new { e.CreditVendorDataKey, e.LoanKey, e.TransAmount, e.ClverifyPaymentCode, e.ClverifyPaymentNumber, e.OriginalLoanKey, e.IsSentClverify, e.DateEntered, e.ClverifyStatus })
                    .HasName("IX_CreditVendorData_IS_SENT_CLVERIFY_DATE_ENTERED_CLVERIFY_STATUS");

                entity.Property(e => e.CreditVendorDataKey).HasColumnName("CREDIT_VENDOR_DATA_KEY");

                entity.Property(e => e.ClarityStatus).HasColumnName("CLARITY_STATUS");

                entity.Property(e => e.ClverifyPaymentCode)
                    .HasColumnName("CLVERIFY_PAYMENT_CODE")
                    .HasColumnType("varchar(4)");

                entity.Property(e => e.ClverifyPaymentNumber).HasColumnName("CLVERIFY_PAYMENT_NUMBER");

                entity.Property(e => e.ClverifyStatus).HasColumnName("CLVERIFY_STATUS");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DataxStatus).HasColumnName("DATAX_STATUS");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DaysLate).HasColumnName("DAYS_LATE");

                entity.Property(e => e.DefState)
                    .IsRequired()
                    .HasColumnName("DEF_STATE")
                    .HasColumnType("char(2)");

                entity.Property(e => e.IsSentClarity).HasColumnName("IS_SENT_CLARITY");

                entity.Property(e => e.IsSentClverify).HasColumnName("IS_SENT_CLVERIFY");

                entity.Property(e => e.IsSentDatax).HasColumnName("IS_SENT_DATAX");

                entity.Property(e => e.IsSentGentry).HasColumnName("IS_SENT_GENTRY");

                entity.Property(e => e.IsSentVeritec).HasColumnName("IS_SENT_VERITEC");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.OriginalLoanKey).HasColumnName("ORIGINAL_LOAN_KEY");

                entity.Property(e => e.SentMsg)
                    .HasColumnName("SENT_MSG")
                    .HasColumnType("varchar(max)");

                entity.Property(e => e.TransAmount)
                    .HasColumnName("TRANS_AMOUNT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.VeritecStatus).HasColumnName("VERITEC_STATUS");
            });

            modelBuilder.Entity<CuroHelp>(entity =>
            {
                entity.HasKey(e => e.CurohelpKey)
                    .HasName("PK_CuroHelp");

                entity.Property(e => e.CurohelpKey).HasColumnName("CUROHELP_KEY");

                entity.Property(e => e.ControlName)
                    .IsRequired()
                    .HasColumnName("CONTROL_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.FormName)
                    .IsRequired()
                    .HasColumnName("FORM_NAME")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.HelpText)
                    .IsRequired()
                    .HasColumnName("HELP_TEXT")
                    .HasColumnType("text");

                entity.Property(e => e.HelpTitle)
                    .IsRequired()
                    .HasColumnName("HELP_TITLE")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.TooltipText)
                    .IsRequired()
                    .HasColumnName("TOOLTIP_TEXT")
                    .HasColumnType("varchar(500)");
            });

            modelBuilder.Entity<Currency>(entity =>
            {
                entity.HasKey(e => e.CurrencyKey)
                    .HasName("PK_Currency");

                entity.HasIndex(e => e.Description)
                    .HasName("IX_Currency_DESCRIPTION");

                entity.Property(e => e.CurrencyKey).HasColumnName("CURRENCY_KEY");

                entity.Property(e => e.Acct).HasColumnName("ACCT");

                entity.Property(e => e.BillDisplay)
                    .IsRequired()
                    .HasColumnName("BILL_DISPLAY")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.CashTransitAcct).HasColumnName("CASH_TRANSIT_ACCT");

                entity.Property(e => e.CurrencyCode)
                    .IsRequired()
                    .HasColumnName("CURRENCY_CODE")
                    .HasColumnType("char(3)");

                entity.Property(e => e.CurrencySymbol)
                    .IsRequired()
                    .HasColumnName("CURRENCY_SYMBOL")
                    .HasColumnType("char(1)");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.GroupedCoinDisplay)
                    .IsRequired()
                    .HasColumnName("GROUPED_COIN_DISPLAY")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.IsEnabled).HasColumnName("IS_ENABLED");

                entity.Property(e => e.OperatingAcct).HasColumnName("OPERATING_ACCT");

                entity.HasOne(d => d.AcctNavigation)
                    .WithMany(p => p.CurrencyAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.Acct)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_Currency_Accounts");

                entity.HasOne(d => d.CashTransitAcctNavigation)
                    .WithMany(p => p.CurrencyCashTransitAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.CashTransitAcct)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_Currency_Transit_Accounts");

                entity.HasOne(d => d.OperatingAcctNavigation)
                    .WithMany(p => p.CurrencyOperatingAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.OperatingAcct)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_Currency_Operating_Accounts");
            });

            modelBuilder.Entity<CurrencyExchangeConfig>(entity =>
            {
                entity.HasKey(e => e.CurrencyExchangeConfigKey)
                    .HasName("PK_CurrencyExchangeConfig");

                entity.Property(e => e.CurrencyExchangeConfigKey).HasColumnName("CURRENCY_EXCHANGE_CONFIG_KEY");

                entity.Property(e => e.BuyExchangeRatePercent)
                    .HasColumnName("BUY_EXCHANGE_RATE_PERCENT")
                    .HasColumnType("numeric");

                entity.Property(e => e.CurrencyKey).HasColumnName("CURRENCY_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DualAuthorization).HasColumnName("DUAL_AUTHORIZATION");

                entity.Property(e => e.EnteredBy)
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.ExchangeFee)
                    .HasColumnName("EXCHANGE_FEE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.ExchangeRateOverride).HasColumnName("EXCHANGE_RATE_OVERRIDE");

                entity.Property(e => e.GovtIdRequired).HasColumnName("GOVT_ID_REQUIRED");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.ManualFeeOverride).HasColumnName("MANUAL_FEE_OVERRIDE");

                entity.Property(e => e.MaxExchangeFee)
                    .HasColumnName("MAX_EXCHANGE_FEE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.MaxExchangeRate)
                    .HasColumnName("MAX_EXCHANGE_RATE")
                    .HasColumnType("numeric");

                entity.Property(e => e.MinExchangeFee)
                    .HasColumnName("MIN_EXCHANGE_FEE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.MinExchangeRate)
                    .HasColumnName("MIN_EXCHANGE_RATE")
                    .HasColumnType("numeric");

                entity.Property(e => e.SellExchangeRatePercent)
                    .HasColumnName("SELL_EXCHANGE_RATE_PERCENT")
                    .HasColumnType("numeric");

                entity.HasOne(d => d.CurrencyKeyNavigation)
                    .WithMany(p => p.CurrencyExchangeConfig)
                    .HasForeignKey(d => d.CurrencyKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CurrencyExchangeConfig_Currency");

                entity.HasOne(d => d.LocationNavigation)
                    .WithMany(p => p.CurrencyExchangeConfig)
                    .HasForeignKey(d => d.Location)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CurrencyExchange_Company");
            });

            modelBuilder.Entity<CurrencyExchangeTrans>(entity =>
            {
                entity.HasKey(e => e.CurrencyExchangeTransKey)
                    .HasName("PK_CurrencyExchangeTrans");

                entity.HasIndex(e => new { e.CurrencyExchangeTransKey, e.AmountReceived, e.TransDetailKey })
                    .HasName("IX_CurrencyExchangeTrans_TRANS_DETAIL_KEY");

                entity.Property(e => e.CurrencyExchangeTransKey).HasColumnName("CURRENCY_EXCHANGE_TRANS_KEY");

                entity.Property(e => e.AmountDue)
                    .HasColumnName("AMOUNT_DUE")
                    .HasColumnType("money");

                entity.Property(e => e.AmountReceived)
                    .HasColumnName("AMOUNT_RECEIVED")
                    .HasColumnType("money");

                entity.Property(e => e.BaseCurrencyCode)
                    .IsRequired()
                    .HasColumnName("BASE_CURRENCY_CODE")
                    .HasColumnType("varchar(3)");

                entity.Property(e => e.BaseCurrencyRate)
                    .HasColumnName("BASE_CURRENCY_RATE")
                    .HasColumnType("decimal");

                entity.Property(e => e.CalculatedConversionRate)
                    .HasColumnName("CALCULATED_CONVERSION_RATE")
                    .HasColumnType("decimal");

                entity.Property(e => e.ChangeDue)
                    .HasColumnName("CHANGE_DUE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.ConversionRate)
                    .HasColumnName("CONVERSION_RATE")
                    .HasColumnType("decimal");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ExchangeAmount)
                    .HasColumnName("EXCHANGE_AMOUNT")
                    .HasColumnType("money");

                entity.Property(e => e.ExchangeRatePercent)
                    .HasColumnName("EXCHANGE_RATE_PERCENT")
                    .HasColumnType("decimal");

                entity.Property(e => e.Fee)
                    .HasColumnName("FEE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.FeeInBase)
                    .HasColumnName("FEE_IN_BASE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.FromCurrencyCode)
                    .IsRequired()
                    .HasColumnName("FROM_CURRENCY_CODE")
                    .HasColumnType("varchar(3)");

                entity.Property(e => e.FromCurrencyRate)
                    .HasColumnName("FROM_CURRENCY_RATE")
                    .HasColumnType("decimal");

                entity.Property(e => e.GainLoss)
                    .HasColumnName("GAIN_LOSS")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.PayBill)
                    .HasColumnName("PAY_BILL")
                    .HasColumnType("money");

                entity.Property(e => e.PayChange)
                    .HasColumnName("PAY_CHANGE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Reversed).HasColumnName("REVERSED");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("varchar(3)");

                entity.Property(e => e.ToCurrencyCode)
                    .IsRequired()
                    .HasColumnName("TO_CURRENCY_CODE")
                    .HasColumnType("varchar(3)");

                entity.Property(e => e.ToCurrencyRate)
                    .HasColumnName("TO_CURRENCY_RATE")
                    .HasColumnType("decimal");

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");

                entity.Property(e => e.TransPosKey).HasColumnName("TRANS_POS_KEY");

                entity.Property(e => e.XeConversionRate)
                    .HasColumnName("XE_CONVERSION_RATE")
                    .HasColumnType("decimal");

                entity.HasOne(d => d.LocationNavigation)
                    .WithMany(p => p.CurrencyExchangeTrans)
                    .HasForeignKey(d => d.Location)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CurrencyExchangeTrans_Company");

                entity.HasOne(d => d.TransDetailKeyNavigation)
                    .WithMany(p => p.CurrencyExchangeTrans)
                    .HasForeignKey(d => d.TransDetailKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CurrencyExchangeTrans_TransDetail");

                entity.HasOne(d => d.TransPosKeyNavigation)
                    .WithMany(p => p.CurrencyExchangeTrans)
                    .HasForeignKey(d => d.TransPosKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CurrencyExchangeTrans_TransPOS");
            });

            modelBuilder.Entity<Customer>(entity =>
            {
                entity.HasKey(e => e.CustomerKey)
                    .HasName("PK_Customer");

                entity.HasIndex(e => e.CellPhone)
                    .HasName("IX_Customer_CELL_PHONE");

                entity.HasIndex(e => e.Dob)
                    .HasName("IX_Customer_DOB");

                entity.HasIndex(e => e.Firstname)
                    .HasName("IX_Customer_FIRSTNAME");

                entity.HasIndex(e => e.HomePhone)
                    .HasName("IX_Customer_HOME_PHONE");

                entity.HasIndex(e => e.IdNo)
                    .HasName("IX_Customer_ID_NO");

                entity.HasIndex(e => e.Lastname)
                    .HasName("IX_Customer_LASTNAME");

                entity.HasIndex(e => e.Location)
                    .HasName("IX_Customer_LOCATION");

                entity.HasIndex(e => e.Nickname)
                    .HasName("IX_Customer_NICKNAME");

                entity.HasIndex(e => e.OptplusAccountId)
                    .HasName("IX_Customer_OPTPLUS_ACCOUNT_ID");

                entity.HasIndex(e => e.OriginalPrn)
                    .HasName("IX_Customer_ORIGINAL_PRN");

                entity.HasIndex(e => e.SpouseSsn)
                    .HasName("IX_Customer_SPOUSE_SSN");

                entity.HasIndex(e => e.Ssn)
                    .HasName("IX_Customer_SSN");

                entity.HasIndex(e => e.VisitorKey)
                    .HasName("UX_Customer_VISITOR_KEY")
                    .IsUnique();

                entity.HasIndex(e => e.WorkPhone)
                    .HasName("IX_Customer_WORK_PHONE");

                entity.HasIndex(e => new { e.CustomerKey, e.RiBalance })
                    .HasName("IC_Customer_RI_BALANCE");

                entity.HasIndex(e => new { e.HomeAddrNum, e.HomeAddrStreet })
                    .HasName("IX_Customer_HOME_ADDR_NUM_STREET");

                entity.HasIndex(e => new { e.Lastname, e.Firstname })
                    .HasName("IX_Customer_Fullname");

                entity.HasIndex(e => new { e.CalcPayDate, e.CustomerKey, e.DateEntered })
                    .HasName("IX_Customer_DTA");

                entity.HasIndex(e => new { e.CustomerKey, e.Firstname, e.Lastname })
                    .HasName("IX_Customer_CUSTOMER_KEY_FIRSTNAME");

                entity.HasIndex(e => new { e.Ssn, e.Firstname, e.Lastname, e.Dob, e.CustomerKey })
                    .HasName("IX_Customer_CUSTOMER_KEY");

                entity.HasIndex(e => new { e.BiweekBase, e.CustomerKey, e.PayCycle2nd, e.PayCycleMonthInt, e.CalcPayDate, e.PayCycleCountDaysFromEndOfMonth, e.DateEntered, e.PayCycle, e.PayCycleDay, e.PayCycle1st, e.PayInfoComplete })
                    .HasName("IX_Customer_PAY_INFO_COMPLETE");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.AcctBlocked)
                    .HasColumnName("ACCT_BLOCKED")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.AcctBlockedCode).HasColumnName("ACCT_BLOCKED_CODE");

                entity.Property(e => e.AchStatus)
                    .HasColumnName("ACH_STATUS")
                    .HasColumnType("char(1)")
                    .HasDefaultValueSql("'A'");

                entity.Property(e => e.ActiveMilitary).HasColumnName("ACTIVE_MILITARY");

                entity.Property(e => e.AddressFormat)
                    .IsRequired()
                    .HasColumnName("ADDRESS_FORMAT")
                    .HasColumnType("char(3)");

                entity.Property(e => e.AdjustDueDateForHolidaysAndWeekendsMethod).HasColumnName("ADJUST_DUE_DATE_FOR_HOLIDAYS_AND_WEEKENDS_METHOD");

                entity.Property(e => e.BiweekBase)
                    .HasColumnName("BIWEEK_BASE")
                    .HasColumnType("date");

                entity.Property(e => e.Bounced).HasColumnName("BOUNCED");

                entity.Property(e => e.CalcPayDate)
                    .HasColumnName("CALC_PAY_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.CcBlock).HasColumnName("CC_BLOCK");

                entity.Property(e => e.CellPhone)
                    .IsRequired()
                    .HasColumnName("CELL_PHONE")
                    .HasColumnType("varchar(12)");

                entity.Property(e => e.ChkCashingFeeNoticeDate)
                    .HasColumnName("CHK_CASHING_FEE_NOTICE_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ChkCashingFeeNoticeLocation).HasColumnName("CHK_CASHING_FEE_NOTICE_LOCATION");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasColumnName("CITY")
                    .HasColumnType("varchar(30)")
                    .HasComputedColumnSql("[HOME_CITY]")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.Cklimit)
                    .HasColumnName("CKLIMIT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.County)
                    .HasColumnName("COUNTY")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.CourtesyCallNum)
                    .IsRequired()
                    .HasColumnName("COURTESY_CALL_NUM")
                    .HasColumnType("char(1)")
                    .HasDefaultValueSql("'H'");

                entity.Property(e => e.CreditScore).HasDefaultValueSql("0");

                entity.Property(e => e.CustIdSource)
                    .HasColumnName("CUST_ID_SOURCE")
                    .HasColumnType("varchar(15)");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Dependents).HasColumnName("DEPENDENTS");

                entity.Property(e => e.Dob)
                    .HasColumnName("DOB")
                    .HasColumnType("date");

                entity.Property(e => e.EmailLastResponse).HasColumnName("EMAIL_LAST_RESPONSE");

                entity.Property(e => e.EmailObsolete)
                    .HasColumnName("EMAIL_OBSOLETE")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.EmailVerifyDate)
                    .HasColumnName("EMAIL_VERIFY_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Firstname)
                    .HasColumnName("FIRSTNAME")
                    .HasColumnType("varchar(24)");

                entity.Property(e => e.Gender)
                    .HasColumnName("GENDER")
                    .HasColumnType("char(1)");

                entity.Property(e => e.HomeAddrNum)
                    .IsRequired()
                    .HasColumnName("HOME_ADDR_NUM")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.HomeAddrPostDir)
                    .IsRequired()
                    .HasColumnName("HOME_ADDR_POST_DIR")
                    .HasColumnType("varchar(2)");

                entity.Property(e => e.HomeAddrPreDir)
                    .IsRequired()
                    .HasColumnName("HOME_ADDR_PRE_DIR")
                    .HasColumnType("varchar(2)");

                entity.Property(e => e.HomeAddrStreet)
                    .IsRequired()
                    .HasColumnName("HOME_ADDR_STREET")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.HomeAddrSuffix)
                    .IsRequired()
                    .HasColumnName("HOME_ADDR_SUFFIX")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.HomeAddrSuite)
                    .IsRequired()
                    .HasColumnName("HOME_ADDR_SUITE")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.HomeAddrSuiteNum)
                    .IsRequired()
                    .HasColumnName("HOME_ADDR_SUITE_NUM")
                    .HasColumnType("varchar(15)");

                entity.Property(e => e.HomeAddressCsz)
                    .HasColumnName("HOME_ADDRESS_CSZ")
                    .HasColumnType("varchar(100)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_CSZ]([ADDRESS_FORMAT],[HOME_CITY],[HOME_STATE],[HOME_ZIPCODE])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.HomeAddressLine)
                    .HasColumnName("HOME_ADDRESS_LINE")
                    .HasColumnType("varchar(100)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE]([ADDRESS_FORMAT],'',[HOME_ADDR_NUM],[HOME_ADDR_PRE_DIR],[HOME_ADDR_STREET],[HOME_ADDR_SUFFIX],[HOME_ADDR_POST_DIR],[HOME_ADDR_SUITE],[HOME_ADDR_SUITE_NUM],[HOME_FLAT_NUM],[HOME_BUILDING_NAME],[HOME_BUILDING_NUM])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.HomeAddressLine1)
                    .HasColumnName("HOME_ADDRESS_LINE_1")
                    .HasColumnType("varchar(100)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE_1]([ADDRESS_FORMAT],'',[HOME_ADDR_NUM],[HOME_ADDR_PRE_DIR],[HOME_ADDR_STREET],[HOME_ADDR_SUFFIX],[HOME_ADDR_POST_DIR],[HOME_FLAT_NUM],[HOME_BUILDING_NAME],[HOME_ADDR_SUITE],[HOME_ADDR_SUITE_NUM])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.HomeAddressLine2)
                    .HasColumnName("HOME_ADDRESS_LINE_2")
                    .HasColumnType("varchar(150)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE_2]([ADDRESS_FORMAT],[HOME_ADDR_SUITE],[HOME_ADDR_SUITE_NUM],[HOME_CITY],[HOME_STATE],[HOME_ZIPCODE],[HOME_BUILDING_NUM],[HOME_ADDR_STREET],'',[HOME_ADDR_NUM],[HOME_ADDR_PRE_DIR],[HOME_ADDR_SUFFIX],[HOME_ADDR_POST_DIR])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.HomeAddressLine3)
                    .HasColumnName("HOME_ADDRESS_LINE_3")
                    .HasColumnType("varchar(150)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE_3]([ADDRESS_FORMAT],[HOME_ADDR_SUITE],[HOME_ADDR_SUITE_NUM],[HOME_CITY],[HOME_STATE],[HOME_ZIPCODE])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.HomeBuildingName)
                    .IsRequired()
                    .HasColumnName("HOME_BUILDING_NAME")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.HomeBuildingNum)
                    .IsRequired()
                    .HasColumnName("HOME_BUILDING_NUM")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.HomeCity)
                    .IsRequired()
                    .HasColumnName("HOME_CITY")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.HomeCountry)
                    .IsRequired()
                    .HasColumnName("HOME_COUNTRY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.HomeCounty)
                    .IsRequired()
                    .HasColumnName("HOME_COUNTY")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.HomeFlatNum)
                    .IsRequired()
                    .HasColumnName("HOME_FLAT_NUM")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.HomePhone)
                    .IsRequired()
                    .HasColumnName("HOME_PHONE")
                    .HasColumnType("varchar(12)");

                entity.Property(e => e.HomeState)
                    .IsRequired()
                    .HasColumnName("HOME_STATE")
                    .HasColumnType("char(2)");

                entity.Property(e => e.HomeZipcode)
                    .IsRequired()
                    .HasColumnName("HOME_ZIPCODE")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.HowRefObsolete)
                    .HasColumnName("HOW_REF_OBSOLETE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.IdNo)
                    .HasColumnName("ID_NO")
                    .HasColumnType("varchar(12)");

                entity.Property(e => e.InetApproved).HasColumnName("INET_APPROVED");

                entity.Property(e => e.IsInChain).HasColumnName("IS_IN_CHAIN");

                entity.Property(e => e.LastAchResult).HasColumnName("LAST_ACH_RESULT");

                entity.Property(e => e.LastAppDate)
                    .HasColumnName("LAST_APP_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.LastScoreDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Lastname)
                    .HasColumnName("LASTNAME")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.LegalNumber)
                    .HasColumnName("LEGAL_NUMBER")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.MaritalStatus)
                    .HasColumnName("MARITAL_STATUS")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Midname)
                    .HasColumnName("MIDNAME")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.MilActiveDuty).HasColumnName("MIL_ACTIVE_DUTY");

                entity.Property(e => e.MilCombatDuty).HasColumnName("MIL_COMBAT_DUTY");

                entity.Property(e => e.MilReserveActive).HasColumnName("MIL_RESERVE_ACTIVE");

                entity.Property(e => e.MilReserveNotActive).HasColumnName("MIL_RESERVE_NOT_ACTIVE");

                entity.Property(e => e.MilitaryMember).HasColumnName("MILITARY_MEMBER");

                entity.Property(e => e.MismatchedDuecycleApproved).HasColumnName("MISMATCHED_DUECYCLE_APPROVED");

                entity.Property(e => e.NewCustRef).HasColumnName("NEW_CUST_REF");

                entity.Property(e => e.NewCustRefId).HasColumnName("NEW_CUST_REF_ID");

                entity.Property(e => e.Nickname)
                    .HasColumnName("NICKNAME")
                    .HasColumnType("varchar(24)");

                entity.Property(e => e.Nin)
                    .HasColumnName("NIN")
                    .HasColumnType("varchar(15)");

                entity.Property(e => e.OptplusAccountId)
                    .HasColumnName("OPTPLUS_ACCOUNT_ID")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.OptplusCarrierKey).HasColumnName("OPTPLUS_CARRIER_KEY");

                entity.Property(e => e.OptplusCipDenial).HasColumnName("OPTPLUS_CIP_DENIAL");

                entity.Property(e => e.OriginalPrn)
                    .HasColumnName("ORIGINAL_PRN")
                    .HasColumnType("varchar(12)");

                entity.Property(e => e.OriginalWebVisitSource)
                    .HasColumnName("ORIGINAL_WEB_VISIT_SOURCE")
                    .HasColumnType("varchar(38)");

                entity.Property(e => e.OwnRentOther).HasDefaultValueSql("0");

                entity.Property(e => e.PayCycle)
                    .IsRequired()
                    .HasColumnName("PAY_CYCLE")
                    .HasColumnType("char(1)")
                    .HasDefaultValueSql("'N'");

                entity.Property(e => e.PayCycle1st).HasColumnName("PAY_CYCLE_1ST");

                entity.Property(e => e.PayCycle2nd).HasColumnName("PAY_CYCLE_2ND");

                entity.Property(e => e.PayCycleCountDaysFromEndOfMonth).HasColumnName("PAY_CYCLE_COUNT_DAYS_FROM_END_OF_MONTH");

                entity.Property(e => e.PayCycleDay).HasColumnName("PAY_CYCLE_DAY");

                entity.Property(e => e.PayCycleMonthInt)
                    .IsRequired()
                    .HasColumnName("PAY_CYCLE_MONTH_INT")
                    .HasColumnType("char(1)");

                entity.Property(e => e.PayCycleUpdated)
                    .HasColumnName("PAY_CYCLE_UPDATED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.PayCycleUpdatedBy)
                    .HasColumnName("PAY_CYCLE_UPDATED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.PayInfoComplete)
                    .HasColumnName("PAY_INFO_COMPLETE")
                    .HasComputedColumnSql("isnull(case when [PAY_CYCLE]='N' then (0) when [PAY_CYCLE]='M' AND ([PAY_CYCLE_MONTH_INT]='D' OR [PAY_CYCLE_MONTH_INT]='B') then case when [PAY_CYCLE_1ST]>(0) then (1) else (0) end when [PAY_CYCLE]='M' AND ([PAY_CYCLE_MONTH_INT]='L' OR [PAY_CYCLE_MONTH_INT]='4' OR [PAY_CYCLE_MONTH_INT]='3' OR [PAY_CYCLE_MONTH_INT]='2' OR [PAY_CYCLE_MONTH_INT]='1') then case when [PAY_CYCLE_DAY]>(0) then (1) else (0) end when [PAY_CYCLE]='T' then case when [PAY_CYCLE_1ST]>(0) AND [PAY_CYCLE_2ND]>(0) then (1) else (0) end when [PAY_CYCLE]='W' then case when [PAY_CYCLE_DAY]>(0) then (1) else (0) end when [PAY_CYCLE]='4' OR [PAY_CYCLE]='3' OR [PAY_CYCLE]='B' then case when [PAY_CYCLE_DAY]>(0) AND datepart(year,[BIWEEK_BASE])>(2000) then (1) else (0) end when [PAY_CYCLE]='I' then (1)  end,(0))")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.Pralimit)
                    .HasColumnName("PRALIMIT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PreferredLanguage)
                    .IsRequired()
                    .HasColumnName("PREFERRED_LANGUAGE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.Ref1Firstname)
                    .HasColumnName("REF1_FIRSTNAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Ref1Lastname)
                    .HasColumnName("REF1_LASTNAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Ref1Phone)
                    .IsRequired()
                    .HasColumnName("REF1_PHONE")
                    .HasColumnType("varchar(12)");

                entity.Property(e => e.Ref1Relationship)
                    .HasColumnName("REF1_RELATIONSHIP")
                    .HasColumnType("char(1)");

                entity.Property(e => e.Ref2Firstname)
                    .HasColumnName("REF2_FIRSTNAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Ref2Lastname)
                    .HasColumnName("REF2_LASTNAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Ref2Phone)
                    .IsRequired()
                    .HasColumnName("REF2_PHONE")
                    .HasColumnType("varchar(12)");

                entity.Property(e => e.Ref2Relationship)
                    .HasColumnName("REF2_RELATIONSHIP")
                    .HasColumnType("char(1)");

                entity.Property(e => e.ReferralMethodKey).HasColumnName("REFERRAL_METHOD_KEY");

                entity.Property(e => e.ResidenceSince).HasColumnType("date");

                entity.Property(e => e.RiBalance)
                    .HasColumnName("RI_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.RiFollowup)
                    .HasColumnName("RI_FOLLOWUP")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.SpouseCellPhone)
                    .HasColumnName("SPOUSE_CELL_PHONE")
                    .HasColumnType("varchar(12)");

                entity.Property(e => e.SpouseDirDep).HasColumnName("SPOUSE_DIR_DEP");

                entity.Property(e => e.SpouseFirstname)
                    .HasColumnName("SPOUSE_FIRSTNAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.SpouseHomePhone)
                    .HasColumnName("SPOUSE_HOME_PHONE")
                    .HasColumnType("varchar(12)");

                entity.Property(e => e.SpouseLastname)
                    .HasColumnName("SPOUSE_LASTNAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.SpouseMidname)
                    .HasColumnName("SPOUSE_MIDNAME")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.SpousePaycycle)
                    .HasColumnName("SPOUSE_PAYCYCLE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.SpouseSsn)
                    .HasColumnName("SPOUSE_SSN")
                    .HasColumnType("varchar(9)");

                entity.Property(e => e.SpouseWorkName)
                    .HasColumnName("SPOUSE_WORK_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.SpouseWorkPhone)
                    .HasColumnName("SPOUSE_WORK_PHONE")
                    .HasColumnType("varchar(12)");

                entity.Property(e => e.SpouseWorkPhoneExt)
                    .HasColumnName("SPOUSE_WORK_PHONE_EXT")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.Ssn)
                    .HasColumnName("SSN")
                    .HasColumnType("char(9)");

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasColumnName("STATE")
                    .HasColumnType("char(2)")
                    .HasComputedColumnSql("[HOME_STATE]")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.Title).HasColumnName("TITLE");

                entity.Property(e => e.Tloc).HasColumnName("TLOC");

                entity.Property(e => e.Tupd)
                    .HasColumnName("TUPD")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Tupt)
                    .HasColumnName("TUPT")
                    .HasColumnType("char(3)");

                entity.Property(e => e.Util1)
                    .HasColumnName("UTIL1")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Util2)
                    .HasColumnName("UTIL2")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Util3)
                    .HasColumnName("UTIL3")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.VisitorKey).HasColumnName("VISITOR_KEY");

                entity.Property(e => e.WorkPhone)
                    .IsRequired()
                    .HasColumnName("WORK_PHONE")
                    .HasColumnType("varchar(12)");

                entity.Property(e => e.WorkPhoneExt)
                    .HasColumnName("WORK_PHONE_EXT")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.Zipcode)
                    .IsRequired()
                    .HasColumnName("ZIPCODE")
                    .HasColumnType("varchar(10)")
                    .HasComputedColumnSql("[HOME_ZIPCODE]")
                    .ValueGeneratedOnAddOrUpdate();

                entity.HasOne(d => d.HomeStateNavigation)
                    .WithMany(p => p.Customer)
                    .HasForeignKey(d => d.HomeState)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_Customer_USStates");

                entity.HasOne(d => d.OptplusCarrierKeyNavigation)
                    .WithMany(p => p.Customer)
                    .HasForeignKey(d => d.OptplusCarrierKey)
                    .HasConstraintName("FK_Customer_OptPlusCarrer");

                entity.HasOne(d => d.OriginalWebVisitSourceNavigation)
                    .WithMany(p => p.Customer)
                    .HasForeignKey(d => d.OriginalWebVisitSource)
                    .HasConstraintName("FK_Customer_ORIGINAL_WEB_VISIT_SOURCE");

                entity.HasOne(d => d.ReferralMethodKeyNavigation)
                    .WithMany(p => p.Customer)
                    .HasForeignKey(d => d.ReferralMethodKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_Customer_REFERRAL_METHOD_KEY");

                entity.HasOne(d => d.TitleNavigation)
                    .WithMany(p => p.Customer)
                    .HasForeignKey(d => d.Title)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_Customer_PersonTitle");

                entity.HasOne(d => d.VisitorKeyNavigation)
                    .WithOne(p => p.Customer)
                    .HasForeignKey<Customer>(d => d.VisitorKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_Customer_Visitor");
            });

            modelBuilder.Entity<CustomerActivity>(entity =>
            {
                entity.HasKey(e => e.CustomerActivityKey)
                    .HasName("PK_CustomerActivity");

                entity.HasIndex(e => e.CustomerKey)
                    .HasName("IX_CustomerActivity_CUSTOMER_KEY");

                entity.HasIndex(e => new { e.CustomerActivityKey, e.ProductType, e.FirstActivity, e.LastActivity, e.PriorActivity, e.CustomerKey, e.LoanType })
                    .HasName("IX_CustomerActivity_DTA");

                entity.Property(e => e.CustomerActivityKey).HasColumnName("CUSTOMER_ACTIVITY_KEY");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.FirstActivity)
                    .HasColumnName("FIRST_ACTIVITY")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.LastActivity)
                    .HasColumnName("LAST_ACTIVITY")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.LoanType)
                    .IsRequired()
                    .HasColumnName("LOAN_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.PriorActivity)
                    .HasColumnName("PRIOR_ACTIVITY")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ProductType)
                    .IsRequired()
                    .HasColumnName("PRODUCT_TYPE")
                    .HasColumnType("char(1)");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.CustomerActivity)
                    .HasForeignKey(d => d.CustomerKey)
                    .HasConstraintName("FK_CustomerActivity_Customer");
            });

            modelBuilder.Entity<CustomerAddress>(entity =>
            {
                entity.HasKey(e => e.CustomerAddressKey)
                    .HasName("PK_CustomerAddress");

                entity.HasIndex(e => e.CustomerKey)
                    .HasName("IX_CustomerAddress_CUSTOMER_KEY");

                entity.HasIndex(e => e.Zipcode)
                    .HasName("IX_CustomerAddress_ZIPCODE");

                entity.HasIndex(e => new { e.CustomerAddressKey, e.CustomerKey, e.State, e.AddressTypeCode, e.AddressStatusCode, e.AddressPriority })
                    .HasName("IX_CustomerAddress_ADDRESSTYPECODE_ADDRESSSTATUSCODE");

                entity.Property(e => e.CustomerAddressKey).HasColumnName("CUSTOMER_ADDRESS_KEY");

                entity.Property(e => e.AddrNum)
                    .IsRequired()
                    .HasColumnName("ADDR_NUM")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.AddrPostDir)
                    .IsRequired()
                    .HasColumnName("ADDR_POST_DIR")
                    .HasColumnType("varchar(2)");

                entity.Property(e => e.AddrPreDir)
                    .IsRequired()
                    .HasColumnName("ADDR_PRE_DIR")
                    .HasColumnType("varchar(2)");

                entity.Property(e => e.AddrStreet)
                    .IsRequired()
                    .HasColumnName("ADDR_STREET")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.AddrSuffix)
                    .IsRequired()
                    .HasColumnName("ADDR_SUFFIX")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.AddrSuite)
                    .IsRequired()
                    .HasColumnName("ADDR_SUITE")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.AddrSuiteNum)
                    .IsRequired()
                    .HasColumnName("ADDR_SUITE_NUM")
                    .HasColumnType("varchar(15)");

                entity.Property(e => e.AddressContactFirstName)
                    .IsRequired()
                    .HasColumnName("ADDRESS_CONTACT_FIRST_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.AddressContactLastName)
                    .IsRequired()
                    .HasColumnName("ADDRESS_CONTACT_LAST_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.AddressCsz)
                    .HasColumnName("ADDRESS_CSZ")
                    .HasColumnType("varchar(100)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_CSZ]([ADDRESS_FORMAT],[CITY],[STATE],[ZIPCODE])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressFormat)
                    .IsRequired()
                    .HasColumnName("ADDRESS_FORMAT")
                    .HasColumnType("char(3)");

                entity.Property(e => e.AddressLine)
                    .HasColumnName("ADDRESS_LINE")
                    .HasColumnType("varchar(100)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE]([ADDRESS_FORMAT],'',[ADDR_NUM],[ADDR_PRE_DIR],[ADDR_STREET],[ADDR_SUFFIX],[ADDR_POST_DIR],[ADDR_SUITE],[ADDR_SUITE_NUM],[FLAT_NUM],[BUILDING_NAME],[BUILDING_NUM])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressLine1)
                    .HasColumnName("ADDRESS_LINE_1")
                    .HasColumnType("varchar(100)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE_1]([ADDRESS_FORMAT],'',[ADDR_NUM],[ADDR_PRE_DIR],[ADDR_STREET],[ADDR_SUFFIX],[ADDR_POST_DIR],[FLAT_NUM],[BUILDING_NAME],[ADDR_SUITE],[ADDR_SUITE_NUM])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressLine2)
                    .HasColumnName("ADDRESS_LINE_2")
                    .HasColumnType("varchar(150)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE_2]([ADDRESS_FORMAT],[ADDR_SUITE],[ADDR_SUITE_NUM],[CITY],[STATE],[ZIPCODE],[BUILDING_NUM],[ADDR_STREET],'',[ADDR_NUM],[ADDR_PRE_DIR],[ADDR_SUFFIX],[ADDR_POST_DIR])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressLine3)
                    .HasColumnName("ADDRESS_LINE_3")
                    .HasColumnType("varchar(150)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE_3]([ADDRESS_FORMAT],[ADDR_SUITE],[ADDR_SUITE_NUM],[CITY],[STATE],[ZIPCODE])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressPriority).HasColumnName("ADDRESS_PRIORITY");

                entity.Property(e => e.AddressSourceCode).HasColumnName("ADDRESS_SOURCE_CODE");

                entity.Property(e => e.AddressStatusCode).HasColumnName("ADDRESS_STATUS_CODE");

                entity.Property(e => e.AddressTypeCode).HasColumnName("ADDRESS_TYPE_CODE");

                entity.Property(e => e.BuildingName)
                    .IsRequired()
                    .HasColumnName("BUILDING_NAME")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.BuildingNum)
                    .IsRequired()
                    .HasColumnName("BUILDING_NUM")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasColumnName("CITY")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasColumnName("COUNTRY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.County)
                    .IsRequired()
                    .HasColumnName("COUNTY")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DateLastUsed)
                    .HasColumnName("DATE_LAST_USED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.FlatNum)
                    .IsRequired()
                    .HasColumnName("FLAT_NUM")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.FromDate)
                    .HasColumnName("FROM_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.LastUpdated)
                    .HasColumnName("LAST_UPDATED")
                    .HasColumnType("datetime");

                entity.Property(e => e.LastUpdatedBy)
                    .IsRequired()
                    .HasColumnName("LAST_UPDATED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.PriorityChangeDate)
                    .HasColumnName("PRIORITY_CHANGE_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.PriorityChangeTeller)
                    .HasColumnName("PRIORITY_CHANGE_TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.RemovedReasonKey).HasColumnName("REMOVED_REASON_KEY");

                entity.Property(e => e.RemovedReasonNotes)
                    .HasColumnName("REMOVED_REASON_NOTES")
                    .HasColumnType("varchar(2000)");

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasColumnName("STATE")
                    .HasColumnType("char(2)");

                entity.Property(e => e.StatusChangeDate)
                    .HasColumnName("STATUS_CHANGE_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StatusChangeTeller)
                    .HasColumnName("STATUS_CHANGE_TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.ToDate)
                    .HasColumnName("TO_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.Zipcode)
                    .IsRequired()
                    .HasColumnName("ZIPCODE")
                    .HasColumnType("varchar(10)");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.CustomerAddress)
                    .HasForeignKey(d => d.CustomerKey)
                    .HasConstraintName("FK_CustomerAddress_Customer");

                entity.HasOne(d => d.RemovedReasonKeyNavigation)
                    .WithMany(p => p.CustomerAddress)
                    .HasForeignKey(d => d.RemovedReasonKey)
                    .HasConstraintName("FK_CustomerAddress_RemovedReason");
            });

            modelBuilder.Entity<CustomerAddressEdit>(entity =>
            {
                entity.HasKey(e => e.CustomerAddressEditKey)
                    .HasName("PK_CustomerAddressEdit");

                entity.HasIndex(e => e.CustomerAddressKey)
                    .HasName("IX_CustomerAddressEdit_CUSTOMER_ADDRESS_KEY");

                entity.Property(e => e.CustomerAddressEditKey).HasColumnName("CUSTOMER_ADDRESS_EDIT_KEY");

                entity.Property(e => e.CustomerAddressKey).HasColumnName("CUSTOMER_ADDRESS_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.FieldName)
                    .IsRequired()
                    .HasColumnName("FIELD_NAME")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.NewValue)
                    .IsRequired()
                    .HasColumnName("NEW_VALUE")
                    .HasColumnType("varchar(150)");

                entity.Property(e => e.OldValue)
                    .IsRequired()
                    .HasColumnName("OLD_VALUE")
                    .HasColumnType("varchar(150)");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.CustomerAddressKeyNavigation)
                    .WithMany(p => p.CustomerAddressEdit)
                    .HasForeignKey(d => d.CustomerAddressKey)
                    .HasConstraintName("FK_CustomerAddressEdit_CustomerAddress");
            });

            modelBuilder.Entity<CustomerAppDate>(entity =>
            {
                entity.HasKey(e => e.CustomerCertKey)
                    .HasName("PK_CustomerCert");

                entity.Property(e => e.CustomerCertKey).HasColumnName("CUSTOMER_CERT_KEY");

                entity.Property(e => e.CertDate)
                    .HasColumnName("CERT_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");
            });

            modelBuilder.Entity<CustomerBusiness>(entity =>
            {
                entity.HasKey(e => e.CustomerBusinessKey)
                    .HasName("PK_CustomerBusiness");

                entity.HasIndex(e => e.CustomerKey)
                    .HasName("IX_CustomerBusiness_CUSTOMER_KEY");

                entity.Property(e => e.CustomerBusinessKey).HasColumnName("CUSTOMER_BUSINESS_KEY");

                entity.Property(e => e.AddrNum)
                    .IsRequired()
                    .HasColumnName("ADDR_NUM")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.AddrPostDir)
                    .IsRequired()
                    .HasColumnName("ADDR_POST_DIR")
                    .HasColumnType("varchar(2)");

                entity.Property(e => e.AddrPreDir)
                    .IsRequired()
                    .HasColumnName("ADDR_PRE_DIR")
                    .HasColumnType("varchar(2)");

                entity.Property(e => e.AddrStreet)
                    .IsRequired()
                    .HasColumnName("ADDR_STREET")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.AddrSuffix)
                    .IsRequired()
                    .HasColumnName("ADDR_SUFFIX")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.AddrSuite)
                    .IsRequired()
                    .HasColumnName("ADDR_SUITE")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.AddrSuiteNum)
                    .IsRequired()
                    .HasColumnName("ADDR_SUITE_NUM")
                    .HasColumnType("varchar(15)");

                entity.Property(e => e.AddressCsz)
                    .HasColumnName("ADDRESS_CSZ")
                    .HasColumnType("varchar(100)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_CSZ]([ADDRESS_FORMAT],[CITY],[STATE],[ZIPCODE])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressFormat)
                    .IsRequired()
                    .HasColumnName("ADDRESS_FORMAT")
                    .HasColumnType("char(3)");

                entity.Property(e => e.AddressLine)
                    .HasColumnName("ADDRESS_LINE")
                    .HasColumnType("varchar(100)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE]([ADDRESS_FORMAT],'',[ADDR_NUM],[ADDR_PRE_DIR],[ADDR_STREET],[ADDR_SUFFIX],[ADDR_POST_DIR],[ADDR_SUITE],[ADDR_SUITE_NUM],[FLAT_NUM],[BUILDING_NAME],[BUILDING_NUM])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressLine1)
                    .HasColumnName("ADDRESS_LINE_1")
                    .HasColumnType("varchar(100)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE_1]([ADDRESS_FORMAT],'',[ADDR_NUM],[ADDR_PRE_DIR],[ADDR_STREET],[ADDR_SUFFIX],[ADDR_POST_DIR],[FLAT_NUM],[BUILDING_NAME],[ADDR_SUITE],[ADDR_SUITE_NUM])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressLine2)
                    .HasColumnName("ADDRESS_LINE_2")
                    .HasColumnType("varchar(150)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE_2]([ADDRESS_FORMAT],[ADDR_SUITE],[ADDR_SUITE_NUM],[CITY],[STATE],[ZIPCODE],[BUILDING_NUM],[ADDR_STREET],'',[ADDR_NUM],[ADDR_PRE_DIR],[ADDR_SUFFIX],[ADDR_POST_DIR])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressLine3)
                    .HasColumnName("ADDRESS_LINE_3")
                    .HasColumnType("varchar(150)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE_3]([ADDRESS_FORMAT],[ADDR_SUITE],[ADDR_SUITE_NUM],[CITY],[STATE],[ZIPCODE])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.BuildingName)
                    .IsRequired()
                    .HasColumnName("BUILDING_NAME")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.BuildingNum)
                    .IsRequired()
                    .HasColumnName("BUILDING_NUM")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.BusinessName)
                    .IsRequired()
                    .HasColumnName("BUSINESS_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.BusinessPhoneNum)
                    .IsRequired()
                    .HasColumnName("BUSINESS_PHONE_NUM")
                    .HasColumnType("varchar(12)");

                entity.Property(e => e.BusinessStartDate)
                    .HasColumnName("BUSINESS_START_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.BusinessTypeCode).HasColumnName("BUSINESS_TYPE_CODE");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasColumnName("CITY")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasColumnName("COUNTRY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.County)
                    .IsRequired()
                    .HasColumnName("COUNTY")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.FlatNum)
                    .IsRequired()
                    .HasColumnName("FLAT_NUM")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.IsActive).HasColumnName("IS_ACTIVE");

                entity.Property(e => e.LegalTypeCode).HasColumnName("LEGAL_TYPE_CODE");

                entity.Property(e => e.NumEmployees).HasColumnName("NUM_EMPLOYEES");

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasColumnName("STATE")
                    .HasColumnType("char(2)");

                entity.Property(e => e.TaxIdNum)
                    .IsRequired()
                    .HasColumnName("TAX_ID_NUM")
                    .HasColumnType("varchar(14)");

                entity.Property(e => e.VerBankDeposits)
                    .HasColumnName("VER_BANK_DEPOSITS")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.VerMonthlyNetInc)
                    .HasColumnName("VER_MONTHLY_NET_INC")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Zipcode)
                    .IsRequired()
                    .HasColumnName("ZIPCODE")
                    .HasColumnType("varchar(10)");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.CustomerBusiness)
                    .HasForeignKey(d => d.CustomerKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CustomerBusiness_Customer");
            });

            modelBuilder.Entity<CustomerCreditRpt>(entity =>
            {
                entity.HasKey(e => e.CreditRptKey)
                    .HasName("PK_CustomerCreditRpt");

                entity.Property(e => e.CreditRptKey).HasColumnName("CREDIT_RPT_KEY");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.CustomerCreditRpt)
                    .HasForeignKey(d => d.CustomerKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CustomerCreditRpt_Customer");
            });

            modelBuilder.Entity<CustomerCreditRptDetail>(entity =>
            {
                entity.HasKey(e => e.CrDetailKey)
                    .HasName("PK_CustomerCreditRptDetail");

                entity.HasIndex(e => e.CreditRptKey)
                    .HasName("IX_CustomerCreditRptDetail_CREDIT_RPT_KEY");

                entity.Property(e => e.CrDetailKey).HasColumnName("CR_DETAIL_KEY");

                entity.Property(e => e.CreditRptKey).HasColumnName("CREDIT_RPT_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.LineOrder).HasColumnName("LINE_ORDER");

                entity.Property(e => e.LineText)
                    .IsRequired()
                    .HasColumnName("LINE_TEXT")
                    .HasColumnType("varchar(288)");

                entity.Property(e => e.LineType)
                    .IsRequired()
                    .HasColumnName("LINE_TYPE")
                    .HasColumnType("char(4)");

                entity.HasOne(d => d.CreditRptKeyNavigation)
                    .WithMany(p => p.CustomerCreditRptDetail)
                    .HasForeignKey(d => d.CreditRptKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CustomerCreditRptDetail_CustomerCreditRpt");
            });

            modelBuilder.Entity<CustomerDocument>(entity =>
            {
                entity.HasKey(e => e.CustomerDocumentKey)
                    .HasName("PK_CustomerDocument");

                entity.HasIndex(e => new { e.CustomerKey, e.DocumentType })
                    .HasName("IX_CustomerDocument_DOCUMENT_TYPE");

                entity.HasIndex(e => new { e.CustomerKey, e.Dwdocid })
                    .HasName("IX_CustomerDocument_CUSTOMER_KEY_DWDOCID");

                entity.HasIndex(e => new { e.DateEntered, e.Location, e.Dwdocid })
                    .HasName("IX_CustomerDocument_DATE_ENTERED_LOCATION_DWDOCID");

                entity.Property(e => e.CustomerDocumentKey).HasColumnName("CUSTOMER_DOCUMENT_KEY");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DocumentType).HasColumnName("DOCUMENT_TYPE");

                entity.Property(e => e.Dwdocid).HasColumnName("DWDOCID");

                entity.Property(e => e.IgnoreDate)
                    .HasColumnName("IGNORE_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.IgnoreTeller)
                    .HasColumnName("IGNORE_TELLER")
                    .HasColumnType("varchar(3)");

                entity.Property(e => e.IgnoreType)
                    .HasColumnName("IGNORE_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.Teller)
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.CustomerDocument)
                    .HasForeignKey(d => d.CustomerKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CustomerDocument_Customer");

                entity.HasOne(d => d.LocationNavigation)
                    .WithMany(p => p.CustomerDocument)
                    .HasForeignKey(d => d.Location)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CustomerDocument_Company");
            });

            modelBuilder.Entity<CustomerEarnedCredit>(entity =>
            {
                entity.HasKey(e => e.CustomerEarnedCreditKey)
                    .HasName("PK_CustomerEarnedCredit");

                entity.HasIndex(e => new { e.CustomerKey, e.EarnedCreditTypeKey })
                    .HasName("IX_CustomerEarnedCredit_CUSTOMER_KEY")
                    .IsUnique();

                entity.Property(e => e.CustomerEarnedCreditKey).HasColumnName("CUSTOMER_EARNED_CREDIT_KEY");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.EarnedCreditTypeKey).HasColumnName("EARNED_CREDIT_TYPE_KEY");

                entity.Property(e => e.ExpireDate)
                    .HasColumnName("EXPIRE_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.TotalEarned)
                    .HasColumnName("TOTAL_EARNED")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TotalRedeemed)
                    .HasColumnName("TOTAL_REDEEMED")
                    .HasColumnType("smallmoney");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.CustomerEarnedCredit)
                    .HasForeignKey(d => d.CustomerKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CustomerEarnedCredit_CUSTOMER_KEY");

                entity.HasOne(d => d.EarnedCreditTypeKeyNavigation)
                    .WithMany(p => p.CustomerEarnedCredit)
                    .HasForeignKey(d => d.EarnedCreditTypeKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CustomerEarnedCredit_EarnedCreditType");
            });

            modelBuilder.Entity<CustomerEdit>(entity =>
            {
                entity.HasKey(e => e.CustomerEditKey)
                    .HasName("PK_CustomerEdit");

                entity.HasIndex(e => e.CustomerKey)
                    .HasName("IX_CustomerEdit_CUSTOMER_KEY");

                entity.HasIndex(e => new { e.CustomerEditKey, e.Location, e.Teller, e.DateEntered, e.OldValue, e.CustomerKey, e.FieldName, e.NewValue })
                    .HasName("IX_CustomerEdit_CUSTOMER_KEY_FIELD_NAME");

                entity.Property(e => e.CustomerEditKey).HasColumnName("CUSTOMER_EDIT_KEY");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.FieldName)
                    .IsRequired()
                    .HasColumnName("FIELD_NAME")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.NewValue)
                    .HasColumnName("NEW_VALUE")
                    .HasColumnType("varchar(150)");

                entity.Property(e => e.OldValue)
                    .HasColumnName("OLD_VALUE")
                    .HasColumnType("varchar(150)");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.CustomerEdit)
                    .HasForeignKey(d => d.CustomerKey)
                    .HasConstraintName("FK_CustomerEdit_Customer");
            });

            modelBuilder.Entity<CustomerEmployer>(entity =>
            {
                entity.HasKey(e => e.CustomerEmployerKey)
                    .HasName("PK_CustomerEmployer");

                entity.HasIndex(e => e.AddressKey)
                    .HasName("IX_CustomerEmployer_CustomerAddressKey");

                entity.HasIndex(e => e.CustomerKey)
                    .HasName("IX_CustomerEmployer_Customer");

                entity.HasIndex(e => e.IncomeTypeKey)
                    .HasName("IX_CustomerEmployer_IncomeType");

                entity.HasIndex(e => e.PhoneNumberKey)
                    .HasName("IX_CustomerEmployer_CustomerPhoneNumberKey");

                entity.HasIndex(e => new { e.CustomerKey, e.IsActive, e.IsPrimaryEmployer })
                    .HasName("IX_CustomerEmployer_PrimaryEmployer");

                entity.HasIndex(e => new { e.CustomerKey, e.IsPrimaryEmployer, e.IsActive })
                    .HasName("IDX_CustomerEmployer_CustomerKey_IsPrimary_IsActive_Unique")
                    .IsUnique();

                entity.HasIndex(e => new { e.PayCycleCountDaysFromEndOfMonth, e.DateEntered, e.CustomerKey, e.PayCycleDay, e.CustomerEmployerKey, e.PayCycle1st, e.PayCycle2nd, e.BiweekBase, e.PayCycleMonthInt, e.IsActive, e.IsDeleted, e.PayCycle, e.CalcPayDate })
                    .HasName("IX_CustomerEmployer_ACTIVE_DELETE_PAY_CYCLE_CALC_PAY_DATE_MultipleInclude");

                entity.Property(e => e.CustomerEmployerKey).HasColumnName("CUSTOMER_EMPLOYER_KEY");

                entity.Property(e => e.AddressKey).HasColumnName("ADDRESS_KEY");

                entity.Property(e => e.BiweekBase)
                    .HasColumnName("BIWEEK_BASE")
                    .HasColumnType("date");

                entity.Property(e => e.CalcPayDate)
                    .HasColumnName("CALC_PAY_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasColumnName("COUNTRY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.County)
                    .IsRequired()
                    .HasColumnName("COUNTY")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateDeleted)
                    .HasColumnName("DATE_DELETED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DateInactive)
                    .HasColumnName("DATE_INACTIVE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DateUpdated)
                    .HasColumnName("DATE_UPDATED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedTeller)
                    .IsRequired()
                    .HasColumnName("DELETED_TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.Department)
                    .IsRequired()
                    .HasColumnName("DEPARTMENT")
                    .HasColumnType("varchar(60)");

                entity.Property(e => e.EmpSince)
                    .HasColumnName("EMP_SINCE")
                    .HasColumnType("date");

                entity.Property(e => e.EmployerName)
                    .IsRequired()
                    .HasColumnName("EMPLOYER_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Fullparttime)
                    .IsRequired()
                    .HasColumnName("FULLPARTTIME")
                    .HasColumnType("char(1)");

                entity.Property(e => e.InactiveTeller)
                    .IsRequired()
                    .HasColumnName("INACTIVE_TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.IncomeJobTypeKey).HasColumnName("INCOME_JOB_TYPE_KEY");

                entity.Property(e => e.IncomeSourceKey).HasColumnName("INCOME_SOURCE_KEY");

                entity.Property(e => e.IncomeTypeKey).HasColumnName("INCOME_TYPE_KEY");

                entity.Property(e => e.IsActive).HasColumnName("IS_ACTIVE");

                entity.Property(e => e.IsDeleted).HasColumnName("IS_DELETED");

                entity.Property(e => e.IsDirectDeposit).HasColumnName("IS_DIRECT_DEPOSIT");

                entity.Property(e => e.IsPrimaryEmployer).HasColumnName("IS_PRIMARY_EMPLOYER");

                entity.Property(e => e.PayCycle)
                    .IsRequired()
                    .HasColumnName("PAY_CYCLE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.PayCycle1st).HasColumnName("PAY_CYCLE_1ST");

                entity.Property(e => e.PayCycle2nd).HasColumnName("PAY_CYCLE_2ND");

                entity.Property(e => e.PayCycleCountDaysFromEndOfMonth).HasColumnName("PAY_CYCLE_COUNT_DAYS_FROM_END_OF_MONTH");

                entity.Property(e => e.PayCycleDay).HasColumnName("PAY_CYCLE_DAY");

                entity.Property(e => e.PayCycleMonthInt)
                    .IsRequired()
                    .HasColumnName("PAY_CYCLE_MONTH_INT")
                    .HasColumnType("char(1)");

                entity.Property(e => e.PhoneNumberKey).HasColumnName("PHONE_NUMBER_KEY");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.UpdatedBy)
                    .HasColumnName("UPDATED_BY")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.AddressKeyNavigation)
                    .WithMany(p => p.CustomerEmployer)
                    .HasForeignKey(d => d.AddressKey)
                    .HasConstraintName("FK_CustomerEmployer_CustomerAddress");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.CustomerEmployer)
                    .HasForeignKey(d => d.CustomerKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CustomerEmployer_Customer");

                entity.HasOne(d => d.IncomeJobTypeKeyNavigation)
                    .WithMany(p => p.CustomerEmployer)
                    .HasForeignKey(d => d.IncomeJobTypeKey)
                    .HasConstraintName("FK_CustomerEmployer_IncomeJobType");

                entity.HasOne(d => d.IncomeSourceKeyNavigation)
                    .WithMany(p => p.CustomerEmployer)
                    .HasForeignKey(d => d.IncomeSourceKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CustomerEmployer_IncomeSource");

                entity.HasOne(d => d.IncomeTypeKeyNavigation)
                    .WithMany(p => p.CustomerEmployer)
                    .HasForeignKey(d => d.IncomeTypeKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CustomerEmployer_IncomeType");

                entity.HasOne(d => d.PhoneNumberKeyNavigation)
                    .WithMany(p => p.CustomerEmployer)
                    .HasForeignKey(d => d.PhoneNumberKey)
                    .HasConstraintName("FK_CustomerEmployer_CustomerPhoneNumber");
            });

            modelBuilder.Entity<CustomerEmployerEdit>(entity =>
            {
                entity.HasKey(e => e.CustomerEmployerEditKey)
                    .HasName("PK_CustomerEmployerEdit");

                entity.HasIndex(e => new { e.CustomerEmployerEditKey, e.Location, e.Teller, e.DateEntered, e.FieldName, e.OldValue, e.NewValue, e.CustomerEmployerKey })
                    .HasName("IX_CustomerEmployerEdit_CUSTOMER_EMPLOYER_KEY");

                entity.Property(e => e.CustomerEmployerEditKey).HasColumnName("CUSTOMER_EMPLOYER_EDIT_KEY");

                entity.Property(e => e.CustomerEmployerKey).HasColumnName("CUSTOMER_EMPLOYER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.FieldName)
                    .IsRequired()
                    .HasColumnName("FIELD_NAME")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.NewValue)
                    .HasColumnName("NEW_VALUE")
                    .HasColumnType("varchar(150)");

                entity.Property(e => e.OldValue)
                    .HasColumnName("OLD_VALUE")
                    .HasColumnType("varchar(150)");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");
            });

            modelBuilder.Entity<CustomerExpense>(entity =>
            {
                entity.HasKey(e => e.CustomerExpenseKey)
                    .HasName("PK_CustomerExpense");

                entity.HasIndex(e => e.CustomerKey)
                    .HasName("IX_CustomerExpense_CUSTOMER_KEY");

                entity.Property(e => e.CustomerExpenseKey).HasColumnName("CUSTOMER_EXPENSE_KEY");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.CustomerExpense)
                    .HasForeignKey(d => d.CustomerKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CustomerExpense_Customer");
            });

            modelBuilder.Entity<CustomerExpenseDetail>(entity =>
            {
                entity.HasKey(e => e.CustomerExpenseDetailKey)
                    .HasName("PK_CustomerExpenseDetail");

                entity.HasIndex(e => e.CustomerExpenseKey)
                    .HasName("IX_CustomerExpenseDetail_CUSTOMER_EXPENSE_KEY");

                entity.HasIndex(e => e.ExpenseTypeKey)
                    .HasName("IX_CustomerExpenseDetail_EXPENSE_TYPE_KEY");

                entity.HasIndex(e => new { e.CustomerExpenseKey, e.ExpenseTypeKey })
                    .HasName("UC_CustomerExpenseDetail_ExpenseType")
                    .IsUnique();

                entity.Property(e => e.CustomerExpenseDetailKey).HasColumnName("CUSTOMER_EXPENSE_DETAIL_KEY");

                entity.Property(e => e.Amount)
                    .HasColumnName("AMOUNT")
                    .HasColumnType("money");

                entity.Property(e => e.CustomerExpenseKey).HasColumnName("CUSTOMER_EXPENSE_KEY");

                entity.Property(e => e.ExpenseTypeKey).HasColumnName("EXPENSE_TYPE_KEY");

                entity.HasOne(d => d.CustomerExpenseKeyNavigation)
                    .WithMany(p => p.CustomerExpenseDetail)
                    .HasForeignKey(d => d.CustomerExpenseKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CustomerExpenseDetail_CustomerExpense");

                entity.HasOne(d => d.ExpenseTypeKeyNavigation)
                    .WithMany(p => p.CustomerExpenseDetail)
                    .HasForeignKey(d => d.ExpenseTypeKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CustomerExpenseDetail_ExpenseType");
            });

            modelBuilder.Entity<CustomerFeedback>(entity =>
            {
                entity.HasKey(e => e.CustomerFeedbackKey)
                    .HasName("PK_CustomerFeedback");

                entity.Property(e => e.CustomerFeedbackKey).HasColumnName("CUSTOMER_FEEDBACK_KEY");

                entity.Property(e => e.CustomerFeedbackCategoryKey).HasColumnName("CUSTOMER_FEEDBACK_CATEGORY_KEY");

                entity.Property(e => e.CustomerFeedbackResolutionKey).HasColumnName("CUSTOMER_FEEDBACK_RESOLUTION_KEY");

                entity.Property(e => e.CustomerFeedbackTypeKey).HasColumnName("CUSTOMER_FEEDBACK_TYPE_KEY");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.Feedback)
                    .IsRequired()
                    .HasColumnName("FEEDBACK")
                    .HasColumnType("varchar(2000)");

                entity.Property(e => e.LastUpdateDate)
                    .HasColumnName("LAST_UPDATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.LastUpdatedBy)
                    .IsRequired()
                    .HasColumnName("LAST_UPDATED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.ResolutionNotes)
                    .IsRequired()
                    .HasColumnName("RESOLUTION_NOTES")
                    .HasColumnType("varchar(2000)");

                entity.HasOne(d => d.CustomerFeedbackCategoryKeyNavigation)
                    .WithMany(p => p.CustomerFeedback)
                    .HasForeignKey(d => d.CustomerFeedbackCategoryKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CustomerFeedback_CUSTOMER_FEEDBACK_CATEGORY_KEY");

                entity.HasOne(d => d.CustomerFeedbackResolutionKeyNavigation)
                    .WithMany(p => p.CustomerFeedback)
                    .HasForeignKey(d => d.CustomerFeedbackResolutionKey)
                    .HasConstraintName("FK_CustomerFeedback_CUSTOMER_FEEDBACK_RESOLUTION_KEY");

                entity.HasOne(d => d.CustomerFeedbackTypeKeyNavigation)
                    .WithMany(p => p.CustomerFeedback)
                    .HasForeignKey(d => d.CustomerFeedbackTypeKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CustomerFeedback_CUSTOMER_FEEDBACK_TYPE_KEY");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.CustomerFeedback)
                    .HasForeignKey(d => d.CustomerKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CustomerFeedback_CUSTOMER_KEY");

                entity.HasOne(d => d.LocationNavigation)
                    .WithMany(p => p.CustomerFeedback)
                    .HasForeignKey(d => d.Location)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CustomerFeedback_LOCATION");
            });

            modelBuilder.Entity<CustomerFeedbackCategory>(entity =>
            {
                entity.HasKey(e => e.CustomerFeedbackCategoryKey)
                    .HasName("PK_CustomerFeedbackCategory");

                entity.Property(e => e.CustomerFeedbackCategoryKey).HasColumnName("CUSTOMER_FEEDBACK_CATEGORY_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.LastUpdateDate)
                    .HasColumnName("LAST_UPDATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.LastUpdatedBy)
                    .IsRequired()
                    .HasColumnName("LAST_UPDATED_BY")
                    .HasColumnType("char(3)");
            });

            modelBuilder.Entity<CustomerFeedbackResolution>(entity =>
            {
                entity.HasKey(e => e.CustomerFeedbackResolutionKey)
                    .HasName("PK_CustomerFeedbackResolution");

                entity.Property(e => e.CustomerFeedbackResolutionKey).HasColumnName("CUSTOMER_FEEDBACK_RESOLUTION_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.IsActive).HasColumnName("IS_ACTIVE");

                entity.Property(e => e.IsClosed).HasColumnName("IS_CLOSED");

                entity.Property(e => e.LastUpdateDate)
                    .HasColumnName("LAST_UPDATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.LastUpdatedBy)
                    .IsRequired()
                    .HasColumnName("LAST_UPDATED_BY")
                    .HasColumnType("char(3)");
            });

            modelBuilder.Entity<CustomerFeedbackType>(entity =>
            {
                entity.HasKey(e => e.CustomerFeedbackTypeKey)
                    .HasName("PK_CustomerFeedbackType");

                entity.Property(e => e.CustomerFeedbackTypeKey).HasColumnName("CUSTOMER_FEEDBACK_TYPE_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.IsActive).HasColumnName("IS_ACTIVE");

                entity.Property(e => e.LastUpdateDate)
                    .HasColumnName("LAST_UPDATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.LastUpdatedBy)
                    .IsRequired()
                    .HasColumnName("LAST_UPDATED_BY")
                    .HasColumnType("char(3)");
            });

            modelBuilder.Entity<CustomerFeedbackTypeCategoryXref>(entity =>
            {
                entity.HasKey(e => e.CustomerFeedbackTypeCategoryXrefKey)
                    .HasName("PK_CustomerFeedbackTypeCategoryXRef");

                entity.ToTable("CustomerFeedbackTypeCategoryXRef");

                entity.HasIndex(e => new { e.CustomerFeedbackTypeKey, e.CustomerFeedbackCategoryKey })
                    .HasName("UC_CustomerFeedbackTypeCategoryXRef_CUSTOMER_FEEDBACK_TYPE_KEY_CUSTOMER_FEEDBACK_CATEGORY_KEY")
                    .IsUnique();

                entity.Property(e => e.CustomerFeedbackTypeCategoryXrefKey).HasColumnName("CUSTOMER_FEEDBACK_TYPE_CATEGORY_XREF_KEY");

                entity.Property(e => e.CustomerFeedbackCategoryKey).HasColumnName("CUSTOMER_FEEDBACK_CATEGORY_KEY");

                entity.Property(e => e.CustomerFeedbackTypeKey).HasColumnName("CUSTOMER_FEEDBACK_TYPE_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.CustomerFeedbackCategoryKeyNavigation)
                    .WithMany(p => p.CustomerFeedbackTypeCategoryXref)
                    .HasForeignKey(d => d.CustomerFeedbackCategoryKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CustomerFeedbackTypeCategoryXRef_CUSTOMER_FEEDBACK_CATEGORY_KEY");

                entity.HasOne(d => d.CustomerFeedbackTypeKeyNavigation)
                    .WithMany(p => p.CustomerFeedbackTypeCategoryXref)
                    .HasForeignKey(d => d.CustomerFeedbackTypeKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CustomerFeedbackTypeCategoryXRef_CUSTOMER_FEEDBACK_TYPE_KEY");
            });

            modelBuilder.Entity<CustomerFlash>(entity =>
            {
                entity.HasKey(e => new { e.CustomerKey, e.SpecialMessageKey })
                    .HasName("PK_CustomerFlash");

                entity.HasIndex(e => e.CustomerKey)
                    .HasName("IX_CustomerFlash_CUSTOMER_KEY");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.SpecialMessageKey).HasColumnName("SPECIAL_MESSAGE_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DateExpired)
                    .HasColumnName("DATE_EXPIRED")
                    .HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<CustomerFlashOrrebates>(entity =>
            {
                entity.HasKey(e => e.CustomerKey)
                    .HasName("PK_CustomerFlashORRebates");

                entity.ToTable("CustomerFlashORRebates");

                entity.Property(e => e.CustomerKey)
                    .HasColumnName("CUSTOMER_KEY")
                    .ValueGeneratedNever();

                entity.Property(e => e.DateRebated)
                    .HasColumnName("DATE_REBATED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RebateAmt)
                    .HasColumnName("REBATE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Teller)
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");
            });

            modelBuilder.Entity<CustomerFlashQuestions>(entity =>
            {
                entity.HasKey(e => e.CustomerFlashQuestionsKey)
                    .HasName("PK_CustomerFlashQuestions");

                entity.HasIndex(e => e.LookupCode)
                    .HasName("IX_CustomerFlashQuestions_LOOKUP_CODE")
                    .IsUnique();

                entity.Property(e => e.CustomerFlashQuestionsKey).HasColumnName("CUSTOMER_FLASH_QUESTIONS_KEY");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.LookupCode)
                    .IsRequired()
                    .HasColumnName("LOOKUP_CODE")
                    .HasColumnType("varchar(3)");
            });

            modelBuilder.Entity<CustomerFlashResponse>(entity =>
            {
                entity.HasKey(e => e.CustomerFlashResponseKey)
                    .HasName("PK_CustomerFlashResponse");

                entity.HasIndex(e => e.CustomerKey)
                    .HasName("IX_CustomerFlashResponse_CUSTOMER_KEY");

                entity.HasIndex(e => new { e.CustomerFlashQuestionsKey, e.CustomerKey, e.DateEntered })
                    .HasName("IX_CustomerFlashResponse_CUSTOMER_FLASH_QUESTIONS_KEY_CUSTOMER_KEY_DATE_ENTERED");

                entity.Property(e => e.CustomerFlashResponseKey).HasColumnName("CUSTOMER_FLASH_RESPONSE_KEY");

                entity.Property(e => e.CustomerFlashQuestionsKey).HasColumnName("CUSTOMER_FLASH_QUESTIONS_KEY");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsNew).HasColumnName("IS_NEW");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.Response).HasColumnName("RESPONSE");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.CustomerFlashResponse)
                    .HasForeignKey(d => d.CustomerKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CustomerFlashResponse_Customer");

                entity.HasOne(d => d.TellerNavigation)
                    .WithMany(p => p.CustomerFlashResponse)
                    .HasPrincipalKey(p => p.Teller)
                    .HasForeignKey(d => d.Teller)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CustomerFlashResponse_Teller");
            });

            modelBuilder.Entity<CustomerIdentification>(entity =>
            {
                entity.HasKey(e => e.CustomerIdentificationKey)
                    .HasName("PK_CustomerIdentification");

                entity.HasIndex(e => e.CustomerKey)
                    .HasName("IX_CustomerIdentification_CUSTOMER_KEY");

                entity.HasIndex(e => new { e.CustomerKey, e.IdentificationTypeKey, e.IdNumber, e.IdSource, e.CustIdState, e.CustIdCountry })
                    .HasName("UX_CUSTOMER_IDENTIFICATION")
                    .IsUnique();

                entity.Property(e => e.CustomerIdentificationKey).HasColumnName("CUSTOMER_IDENTIFICATION_KEY");

                entity.Property(e => e.CustIdCountry)
                    .IsRequired()
                    .HasColumnName("CUST_ID_COUNTRY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.CustIdState)
                    .IsRequired()
                    .HasColumnName("CUST_ID_STATE")
                    .HasColumnType("char(2)");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.ExpirationDate)
                    .HasColumnName("EXPIRATION_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.IdNumber)
                    .IsRequired()
                    .HasColumnName("ID_NUMBER")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.IdSource)
                    .IsRequired()
                    .HasColumnName("ID_SOURCE")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.IdentificationTypeKey).HasColumnName("IDENTIFICATION_TYPE_KEY");

                entity.Property(e => e.IdentificationTypeVerifyKey).HasColumnName("IDENTIFICATION_TYPE_VERIFY_KEY");

                entity.Property(e => e.IsActive).HasColumnName("IS_ACTIVE");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.VerifiedOther)
                    .IsRequired()
                    .HasColumnName("VERIFIED_OTHER")
                    .HasColumnType("varchar(30)");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.CustomerIdentification)
                    .HasForeignKey(d => d.CustomerKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CustomerIdentification_Customer");

                entity.HasOne(d => d.IdentificationTypeKeyNavigation)
                    .WithMany(p => p.CustomerIdentification)
                    .HasForeignKey(d => d.IdentificationTypeKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CustomerIdentification_IdentificationType");

                entity.HasOne(d => d.IdentificationTypeVerifyKeyNavigation)
                    .WithMany(p => p.CustomerIdentification)
                    .HasForeignKey(d => d.IdentificationTypeVerifyKey)
                    .HasConstraintName("FK_IdentificationTypeVerify_IDENTIFICATION_TYPE_VERIFY_KEY");
            });

            modelBuilder.Entity<CustomerIdentificationEdit>(entity =>
            {
                entity.HasKey(e => e.CustomerIdentificationEditKey)
                    .HasName("PK_CustomerIdentificationEdit");

                entity.HasIndex(e => new { e.CustomerIdentificationEditKey, e.Location, e.DateEntered, e.FieldName, e.OldValue, e.NewValue, e.Teller, e.CustomerIdentificationKey })
                    .HasName("IX_CustomerIdentificationEdit_CUSTOMER_IDENTIFICATION_KEY");

                entity.Property(e => e.CustomerIdentificationEditKey).HasColumnName("CUSTOMER_IDENTIFICATION_EDIT_KEY");

                entity.Property(e => e.CustomerIdentificationKey).HasColumnName("CUSTOMER_IDENTIFICATION_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.FieldName)
                    .IsRequired()
                    .HasColumnName("FIELD_NAME")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.NewValue)
                    .HasColumnName("NEW_VALUE")
                    .HasColumnType("varchar(150)");

                entity.Property(e => e.OldValue)
                    .HasColumnName("OLD_VALUE")
                    .HasColumnType("varchar(150)");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.CustomerIdentificationKeyNavigation)
                    .WithMany(p => p.CustomerIdentificationEdit)
                    .HasForeignKey(d => d.CustomerIdentificationKey)
                    .HasConstraintName("FK_CustomerIDEdit_CustomerID");
            });

            modelBuilder.Entity<CustomerIncome>(entity =>
            {
                entity.HasKey(e => e.CustomerIncomeKey)
                    .HasName("PK_CustomerIncome");

                entity.HasIndex(e => e.CustomerEmployerKey)
                    .HasName("IX_CustomerIncome_CUSTOMER_EMPLOYER_KEY");

                entity.HasIndex(e => new { e.CustomerIncomeKey, e.CustomerKey, e.IsDeleted, e.IsActive })
                    .HasName("IX_CustomerIncome_CUSTOMER_KEY_DELETED_ACTIVE");

                entity.HasIndex(e => new { e.IncomeAmount, e.CustomerKey, e.AmountType, e.DateEntered })
                    .HasName("IX_CustomerIncome_CUSTOMER_KEY");

                entity.Property(e => e.CustomerIncomeKey).HasColumnName("CUSTOMER_INCOME_KEY");

                entity.Property(e => e.AmountCycle)
                    .IsRequired()
                    .HasColumnName("AMOUNT_CYCLE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.AmountType)
                    .IsRequired()
                    .HasColumnName("AMOUNT_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.CustomerEmployerKey).HasColumnName("CUSTOMER_EMPLOYER_KEY");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateDeleted)
                    .HasColumnName("DATE_DELETED")
                    .HasColumnType("date");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DateInactive)
                    .HasColumnName("DATE_INACTIVE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DateVerified)
                    .HasColumnName("DATE_VERIFIED")
                    .HasColumnType("date");

                entity.Property(e => e.DeletedTeller)
                    .IsRequired()
                    .HasColumnName("DELETED_TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.InactiveTeller)
                    .IsRequired()
                    .HasColumnName("INACTIVE_TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.IncomeAmount)
                    .HasColumnName("INCOME_AMOUNT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.IncomeVerifyMethodKey).HasColumnName("INCOME_VERIFY_METHOD_KEY");

                entity.Property(e => e.IsActive).HasColumnName("IS_ACTIVE");

                entity.Property(e => e.IsDeleted).HasColumnName("IS_DELETED");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.CustomerEmployerKeyNavigation)
                    .WithMany(p => p.CustomerIncome)
                    .HasForeignKey(d => d.CustomerEmployerKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CustomerIncome_CustomerEmployer");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.CustomerIncome)
                    .HasForeignKey(d => d.CustomerKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CustomerIncome_Customer");

                entity.HasOne(d => d.IncomeVerifyMethodKeyNavigation)
                    .WithMany(p => p.CustomerIncome)
                    .HasForeignKey(d => d.IncomeVerifyMethodKey)
                    .HasConstraintName("FK_CustomerIncome_VerifyMethod");
            });

            modelBuilder.Entity<CustomerLastCreditReport>(entity =>
            {
                entity.HasKey(e => e.CustomerLastCreditReportKey)
                    .HasName("PK_CustomerLastCreditReport");

                entity.HasIndex(e => e.CustomerKey)
                    .HasName("IX_CustomerLastCreditReport_CustomerKey");

                entity.Property(e => e.CustomerLastCreditReportKey).HasColumnName("CUSTOMER_LAST_CREDIT_REPORT_KEY");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Dob)
                    .HasColumnName("DOB")
                    .HasColumnType("date");

                entity.Property(e => e.Firstname)
                    .HasColumnName("FIRSTNAME")
                    .HasColumnType("varchar(24)");

                entity.Property(e => e.Lastname)
                    .IsRequired()
                    .HasColumnName("LASTNAME")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.Ssn)
                    .HasColumnName("SSN")
                    .HasColumnType("char(9)");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.CustomerLastCreditReport)
                    .HasForeignKey(d => d.CustomerKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CustomerLastCreditReport_CustomerKey");
            });

            modelBuilder.Entity<CustomerLead>(entity =>
            {
                entity.HasKey(e => e.CustomerLeadKey)
                    .HasName("PK_CustomerLead");

                entity.HasIndex(e => e.LoanApplicationKey)
                    .HasName("IX_CustomerLead_LOAN_APPLICATION_KEY");

                entity.HasIndex(e => new { e.Superstore, e.CustomerKey, e.LoanKey, e.CustomerLeadStatusKey })
                    .HasName("IX_CustomerLead_SUPERSTORE_CUSTOMER_KEY_LOAN_KEY_CUSTOMER_LEAD_STATUS_KEY");

                entity.HasIndex(e => new { e.Superstore, e.CustomerLeadStatusKey, e.CustomerKey, e.LoanKey })
                    .HasName("IX_CustomerLead_SUPERSTORE_CUSTOMER_LEAD_STATUS_KEY_CUSTOMER_KEY_LOAN_KEY");

                entity.HasIndex(e => new { e.Satellite, e.CustomerLeadKey, e.StatusChangeDate, e.CustomerKey, e.CustomerLeadStatusKey })
                    .HasName("IX_CustomerLead_CUSTOMER_LEAD_STATUS_KEY");

                entity.Property(e => e.CustomerLeadKey).HasColumnName("CUSTOMER_LEAD_KEY");

                entity.Property(e => e.AbaNum)
                    .HasColumnName("ABA_NUM")
                    .HasColumnType("varchar(9)");

                entity.Property(e => e.AcctNo)
                    .HasColumnName("ACCT_NO")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.ApptFollowDate)
                    .HasColumnName("APPT_FOLLOW_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.ApptFollowTime)
                    .HasColumnName("APPT_FOLLOW_TIME")
                    .HasColumnType("char(1)");

                entity.Property(e => e.CellPhone)
                    .HasColumnName("CELL_PHONE")
                    .HasColumnType("varchar(12)");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.CustomerLeadReasonKey).HasColumnName("CUSTOMER_LEAD_REASON_KEY");

                entity.Property(e => e.CustomerLeadStatusKey).HasColumnName("CUSTOMER_LEAD_STATUS_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DateUpdated)
                    .HasColumnName("DATE_UPDATED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Dob)
                    .HasColumnName("DOB")
                    .HasColumnType("date");

                entity.Property(e => e.Email)
                    .HasColumnName("EMAIL")
                    .HasColumnType("varchar(60)");

                entity.Property(e => e.Firstname)
                    .HasColumnName("FIRSTNAME")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.GrossIncome)
                    .HasColumnName("GROSS_INCOME")
                    .HasColumnType("decimal");

                entity.Property(e => e.HomeAddrNum)
                    .HasColumnName("HOME_ADDR_NUM")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.HomeAddrPostDir)
                    .HasColumnName("HOME_ADDR_POST_DIR")
                    .HasColumnType("varchar(2)");

                entity.Property(e => e.HomeAddrPreDir)
                    .HasColumnName("HOME_ADDR_PRE_DIR")
                    .HasColumnType("varchar(2)");

                entity.Property(e => e.HomeAddrStreet)
                    .HasColumnName("HOME_ADDR_STREET")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.HomeAddrSuffix)
                    .HasColumnName("HOME_ADDR_SUFFIX")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.HomeAddrSuite)
                    .HasColumnName("HOME_ADDR_SUITE")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.HomeAddrSuiteNum)
                    .HasColumnName("HOME_ADDR_SUITE_NUM")
                    .HasColumnType("varchar(15)");

                entity.Property(e => e.HomeAddressLine)
                    .HasColumnName("HOME_ADDRESS_LINE")
                    .HasColumnType("varchar(100)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE]('USA','',[HOME_ADDR_NUM],[HOME_ADDR_PRE_DIR],[HOME_ADDR_STREET],[HOME_ADDR_SUFFIX],[HOME_ADDR_POST_DIR],[HOME_ADDR_SUITE],[HOME_ADDR_SUITE_NUM],'','','')")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.HomeCity)
                    .HasColumnName("HOME_CITY")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.HomePhone)
                    .HasColumnName("HOME_PHONE")
                    .HasColumnType("varchar(12)");

                entity.Property(e => e.HomeState)
                    .HasColumnName("HOME_STATE")
                    .HasColumnType("varchar(2)");

                entity.Property(e => e.HomeZipcode)
                    .HasColumnName("HOME_ZIPCODE")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.Lastname)
                    .HasColumnName("LASTNAME")
                    .HasColumnType("varchar(24)");

                entity.Property(e => e.LeadSource)
                    .IsRequired()
                    .HasColumnName("LEAD_SOURCE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.LoanApplicationKey).HasColumnName("LOAN_APPLICATION_KEY");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.Midname)
                    .HasColumnName("MIDNAME")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.MobileCarrier).HasColumnName("MOBILE_CARRIER");

                entity.Property(e => e.NetIncome)
                    .HasColumnName("NET_INCOME")
                    .HasColumnType("decimal");

                entity.Property(e => e.OrigLocation).HasColumnName("ORIG_LOCATION");

                entity.Property(e => e.Ownrentother).HasColumnName("OWNRENTOTHER");

                entity.Property(e => e.PayCycle)
                    .HasColumnName("PAY_CYCLE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.PreferredContact)
                    .HasColumnName("PREFERRED_CONTACT")
                    .HasColumnType("char(1)");

                entity.Property(e => e.PvbdIncome)
                    .HasColumnName("PVBD_INCOME")
                    .HasColumnType("decimal");

                entity.Property(e => e.ResidenceSince)
                    .HasColumnName("RESIDENCE_SINCE")
                    .HasColumnType("date");

                entity.Property(e => e.Satellite).HasColumnName("SATELLITE");

                entity.Property(e => e.Ssn)
                    .HasColumnName("SSN")
                    .HasColumnType("varchar(9)");

                entity.Property(e => e.StatusChangeDate)
                    .HasColumnName("STATUS_CHANGE_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.Superstore).HasColumnName("SUPERSTORE");

                entity.Property(e => e.TellerUpdated)
                    .HasColumnName("TELLER_UPDATED")
                    .HasColumnType("char(3)");

                entity.Property(e => e.VisitorKey).HasColumnName("VISITOR_KEY");

                entity.Property(e => e.WorkPhone)
                    .HasColumnName("WORK_PHONE")
                    .HasColumnType("varchar(12)");

                entity.Property(e => e.WorkPhoneExt)
                    .HasColumnName("WORK_PHONE_EXT")
                    .HasColumnType("varchar(10)");

                entity.HasOne(d => d.CustomerLeadReasonKeyNavigation)
                    .WithMany(p => p.CustomerLead)
                    .HasForeignKey(d => d.CustomerLeadReasonKey)
                    .HasConstraintName("FK_CustomerLeadCustomerLeadReason");

                entity.HasOne(d => d.LoanApplicationKeyNavigation)
                    .WithMany(p => p.CustomerLead)
                    .HasForeignKey(d => d.LoanApplicationKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CustomerLeadLoanApplication");
            });

            modelBuilder.Entity<CustomerLeadAction>(entity =>
            {
                entity.HasKey(e => e.CustomerLeadActionKey)
                    .HasName("PK_CustomerLeadAction");

                entity.Property(e => e.CustomerLeadActionKey).HasColumnName("CUSTOMER_LEAD_ACTION_KEY");

                entity.Property(e => e.Action)
                    .IsRequired()
                    .HasColumnName("ACTION")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.CustomerLeadStatusKey).HasColumnName("CUSTOMER_LEAD_STATUS_KEY");

                entity.Property(e => e.IsActive).HasColumnName("IS_ACTIVE");
            });

            modelBuilder.Entity<CustomerLeadActivity>(entity =>
            {
                entity.HasKey(e => e.CustomerLeadActivityKey)
                    .HasName("PK_CustomerLeadActivity");

                entity.HasIndex(e => new { e.CustomerLeadActionKey, e.CustomerLeadKey })
                    .HasName("IX_CustomerLeadActivity_CUSTOMER_LEAD_KEY");

                entity.Property(e => e.CustomerLeadActivityKey).HasColumnName("CUSTOMER_LEAD_ACTIVITY_KEY");

                entity.Property(e => e.CustomerLeadActionKey).HasColumnName("CUSTOMER_LEAD_ACTION_KEY");

                entity.Property(e => e.CustomerLeadKey).HasColumnName("CUSTOMER_LEAD_KEY");

                entity.Property(e => e.CustomerLeadReasonKey).HasColumnName("CUSTOMER_LEAD_REASON_KEY");

                entity.Property(e => e.CustomerLeadStatusKey).HasColumnName("CUSTOMER_LEAD_STATUS_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.CustomerLeadActionKeyNavigation)
                    .WithMany(p => p.CustomerLeadActivity)
                    .HasForeignKey(d => d.CustomerLeadActionKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CustomerLeadActivityCustomerLeadAction");

                entity.HasOne(d => d.CustomerLeadKeyNavigation)
                    .WithMany(p => p.CustomerLeadActivity)
                    .HasForeignKey(d => d.CustomerLeadKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CustomerLeadActivityCustomerLead");

                entity.HasOne(d => d.CustomerLeadStatusKeyNavigation)
                    .WithMany(p => p.CustomerLeadActivity)
                    .HasForeignKey(d => d.CustomerLeadStatusKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CustomerLeadActivityCustomerLeadStatus");
            });

            modelBuilder.Entity<CustomerLeadLocation>(entity =>
            {
                entity.HasKey(e => e.CustomerLeadLocationKey)
                    .HasName("PK_CustomerLeadLocation");

                entity.Property(e => e.CustomerLeadLocationKey).HasColumnName("CUSTOMER_LEAD_LOCATION_KEY");

                entity.Property(e => e.IsSuperstore).HasColumnName("IS_SUPERSTORE");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.OfSuperstore).HasColumnName("OF_SUPERSTORE");

                entity.Property(e => e.RefreshRate).HasColumnName("REFRESH_RATE");

                entity.Property(e => e.SuperstoreRadius).HasColumnName("SUPERSTORE_RADIUS");

                entity.Property(e => e.WarningAge).HasColumnName("WARNING_AGE");

                entity.HasOne(d => d.LocationNavigation)
                    .WithMany(p => p.CustomerLeadLocation)
                    .HasForeignKey(d => d.Location)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CustomerLeadLocation_Location");
            });

            modelBuilder.Entity<CustomerLeadNote>(entity =>
            {
                entity.HasKey(e => e.CustomerLeadNoteKey)
                    .HasName("PK_CustomerLeadNote");

                entity.HasIndex(e => e.CustomerLeadKey)
                    .HasName("IX_CustomerLeadNote_CUSTOMER_LEAD_KEY");

                entity.Property(e => e.CustomerLeadNoteKey).HasColumnName("CUSTOMER_LEAD_NOTE_KEY");

                entity.Property(e => e.CustomerLeadKey).HasColumnName("CUSTOMER_LEAD_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasColumnType("varchar(max)");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.CustomerLeadKeyNavigation)
                    .WithMany(p => p.CustomerLeadNote)
                    .HasForeignKey(d => d.CustomerLeadKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CustomerLeadNote_CustomerLead");
            });

            modelBuilder.Entity<CustomerLeadReason>(entity =>
            {
                entity.HasKey(e => e.CustomerLeadReasonKey)
                    .HasName("PK_CustomerLeadReason");

                entity.Property(e => e.CustomerLeadReasonKey).HasColumnName("CUSTOMER_LEAD_REASON_KEY");

                entity.Property(e => e.IsActive).HasColumnName("IS_ACTIVE");

                entity.Property(e => e.Reason)
                    .IsRequired()
                    .HasColumnName("REASON")
                    .HasColumnType("varchar(30)");
            });

            modelBuilder.Entity<CustomerLeadStatus>(entity =>
            {
                entity.HasKey(e => e.CustomerLeadStatusKey)
                    .HasName("PK_CustomerLeadStatus");

                entity.Property(e => e.CustomerLeadStatusKey).HasColumnName("CUSTOMER_LEAD_STATUS_KEY");

                entity.Property(e => e.DeleteAfterDays).HasColumnName("DELETE_AFTER_DAYS");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(max)");

                entity.Property(e => e.DisplayOrder).HasColumnName("DISPLAY_ORDER");

                entity.Property(e => e.InF2Search).HasColumnName("IN_F2_SEARCH");

                entity.Property(e => e.InQueueMaint).HasColumnName("IN_QUEUE_MAINT");

                entity.Property(e => e.IsActive).HasColumnName("IS_ACTIVE");

                entity.Property(e => e.RequiresDate).HasColumnName("REQUIRES_DATE");

                entity.Property(e => e.RequiresReason).HasColumnName("REQUIRES_REASON");

                entity.Property(e => e.RequiresSatellite).HasColumnName("REQUIRES_SATELLITE");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasColumnName("STATUS")
                    .HasColumnType("varchar(30)");
            });

            modelBuilder.Entity<CustomerLeadStatusReason>(entity =>
            {
                entity.HasKey(e => e.CustomerLeadStatusReasonKey)
                    .HasName("PK_CustomerLeadStatusReason");

                entity.Property(e => e.CustomerLeadStatusReasonKey).HasColumnName("CUSTOMER_LEAD_STATUS_REASON_KEY");

                entity.Property(e => e.CustomerLeadReasonKey).HasColumnName("CUSTOMER_LEAD_REASON_KEY");

                entity.Property(e => e.CustomerLeadStatusKey).HasColumnName("CUSTOMER_LEAD_STATUS_KEY");

                entity.HasOne(d => d.CustomerLeadReasonKeyNavigation)
                    .WithMany(p => p.CustomerLeadStatusReason)
                    .HasForeignKey(d => d.CustomerLeadReasonKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CustomerLeadStatusReason_CustomerLeadReason");

                entity.HasOne(d => d.CustomerLeadStatusKeyNavigation)
                    .WithMany(p => p.CustomerLeadStatusReason)
                    .HasForeignKey(d => d.CustomerLeadStatusKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CustomerLeadStatuReason_CustomerLeadStatus");
            });

            modelBuilder.Entity<CustomerMergeHistory>(entity =>
            {
                entity.HasKey(e => e.CustomerMergeHistoryKey)
                    .HasName("PK_CustomerMergeHistory");

                entity.Property(e => e.CustomerMergeHistoryKey).HasColumnName("CUSTOMER_MERGE_HISTORY_KEY");

                entity.Property(e => e.DateEnteredWithSeconds)
                    .HasColumnName("DATE_ENTERED_WITH_SECONDS")
                    .HasColumnType("datetime");

                entity.Property(e => e.DeletedCustPkey).HasColumnName("DELETED_CUST_PKEY");

                entity.Property(e => e.MergedIntoCustPkey).HasColumnName("MERGED_INTO_CUST_PKEY");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");
            });

            modelBuilder.Entity<CustomerNote>(entity =>
            {
                entity.HasKey(e => e.CustomerNoteKey)
                    .HasName("PK_CustomerNote");

                entity.HasIndex(e => e.CustomerKey)
                    .HasName("IX_CustmerNote_CUSTOMER_KEY");

                entity.Property(e => e.CustomerNoteKey).HasColumnName("CUSTOMER_NOTE_KEY");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateDeleted)
                    .HasColumnName("DATE_DELETED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy)
                    .HasColumnName("DELETED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.IsDeleted).HasColumnName("IS_DELETED");

                entity.Property(e => e.IsFlash).HasColumnName("IS_FLASH");

                entity.Property(e => e.NewCustomerNoteKey).HasColumnName("NEW_CUSTOMER_NOTE_KEY");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasColumnType("varchar(2000)");

                entity.Property(e => e.RtfNote)
                    .IsRequired()
                    .HasColumnName("RTF_NOTE")
                    .HasColumnType("text");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.CustomerNote)
                    .HasForeignKey(d => d.CustomerKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CustomerNote_Customer");
            });

            modelBuilder.Entity<CustomerPhoneNumber>(entity =>
            {
                entity.HasKey(e => e.CustomerPhoneNumberKey)
                    .HasName("PK_CustomerPhoneNumber");

                entity.HasIndex(e => e.CustomerKey)
                    .HasName("IX_CustomerPhoneNumber_CUSTOMER_KEY");

                entity.HasIndex(e => new { e.PhoneStatusCode, e.PhoneNumber, e.PhoneTypeCode })
                    .HasName("IX_CustomerPhoneNumber_PHONE_NUMBER");

                entity.HasIndex(e => new { e.IsPhysicalCellNumber, e.HasAutoDialConsent, e.PhoneNumber, e.PhoneTypeCode })
                    .HasName("IX_CustomerPhoneNumber_PHONE_NUMBER_INCLUDEd");

                entity.HasIndex(e => new { e.CustomerPhoneNumberKey, e.CustomerKey, e.PhoneNumber, e.HasAutoDialConsent, e.AutoDialConsentModificationDate, e.IsPhysicalCellNumber, e.PhysicalCellNumberLastCheckedDate, e.PhoneStatusCode, e.PhoneTypeCode, e.PhonePriority })
                    .HasName("IX_CustomerPhoneNumber_PHONE_STATUS_CODE_PHONE_TYPE_CODE");

                entity.HasIndex(e => new { e.HasAutoDialConsent, e.AutoDialConsentModificationDate, e.IsPhysicalCellNumber, e.PhysicalCellNumberLastCheckedDate, e.PhoneExt, e.PhoneTypeCode, e.CustomerKey, e.PhoneStatusCode, e.PhonePriority, e.PhoneNumber, e.CustomerPhoneNumberKey })
                    .HasName("IX_CustomerPhoneNumber_PHONE_TYPE_CODE_INCLUDEd");

                entity.Property(e => e.CustomerPhoneNumberKey).HasColumnName("CUSTOMER_PHONE_NUMBER_KEY");

                entity.Property(e => e.AutoDialConsentModificationDate)
                    .HasColumnName("AUTO_DIAL_CONSENT_MODIFICATION_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.CallCenterDoNotCall).HasColumnName("CALL_CENTER_DO_NOT_CALL");

                entity.Property(e => e.CallCenterDoNotCallChangeDate)
                    .HasColumnName("CALL_CENTER_DO_NOT_CALL_CHANGE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.CallCenterDoNotCallChangeTeller)
                    .HasColumnName("CALL_CENTER_DO_NOT_CALL_CHANGE_TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.CallCenterDoNotCallUntil)
                    .HasColumnName("CALL_CENTER_DO_NOT_CALL_UNTIL")
                    .HasColumnType("datetime");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DateLastUsed)
                    .HasColumnName("DATE_LAST_USED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.HasAutoDialConsent).HasColumnName("HAS_AUTO_DIAL_CONSENT");

                entity.Property(e => e.IsPhysicalCellNumber).HasColumnName("IS_PHYSICAL_CELL_NUMBER");

                entity.Property(e => e.LastUpdated)
                    .HasColumnName("LAST_UPDATED")
                    .HasColumnType("datetime");

                entity.Property(e => e.LastUpdatedBy)
                    .IsRequired()
                    .HasColumnName("LAST_UPDATED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.PhoneContactFirstName)
                    .HasColumnName("PHONE_CONTACT_FIRST_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.PhoneContactLastName)
                    .HasColumnName("PHONE_CONTACT_LAST_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.PhoneExt)
                    .HasColumnName("PHONE_EXT")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.PhoneNumber)
                    .IsRequired()
                    .HasColumnName("PHONE_NUMBER")
                    .HasColumnType("varchar(12)");

                entity.Property(e => e.PhonePriority).HasColumnName("PHONE_PRIORITY");

                entity.Property(e => e.PhoneSourceCode).HasColumnName("PHONE_SOURCE_CODE");

                entity.Property(e => e.PhoneStatusCode).HasColumnName("PHONE_STATUS_CODE");

                entity.Property(e => e.PhoneTypeCode).HasColumnName("PHONE_TYPE_CODE");

                entity.Property(e => e.PhysicalCellNumberLastCheckedDate)
                    .HasColumnName("PHYSICAL_CELL_NUMBER_LAST_CHECKED_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.PriorityChangeDate)
                    .HasColumnName("PRIORITY_CHANGE_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.PriorityChangeTeller)
                    .HasColumnName("PRIORITY_CHANGE_TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.StatusChangeDate)
                    .HasColumnName("STATUS_CHANGE_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StatusChangeTeller)
                    .HasColumnName("STATUS_CHANGE_TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.TimesUsed).HasColumnName("TIMES_USED");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.CustomerPhoneNumber)
                    .HasForeignKey(d => d.CustomerKey)
                    .HasConstraintName("FK_CustomerPhoneNumber_Customer");
            });

            modelBuilder.Entity<CustomerPhoneNumberEdit>(entity =>
            {
                entity.HasKey(e => e.CustomerPhoneNumberEditKey)
                    .HasName("PK_CustomerPhoneNumberEdit");

                entity.HasIndex(e => e.CustomerPhoneNumberKey)
                    .HasName("IX_CustomerPhoneNumberEdit_CUSTOMER_PHONE_NUMBER_KEY");

                entity.Property(e => e.CustomerPhoneNumberEditKey).HasColumnName("CUSTOMER_PHONE_NUMBER_EDIT_KEY");

                entity.Property(e => e.ChangedAtLocation).HasColumnName("CHANGED_AT_LOCATION");

                entity.Property(e => e.CustomerPhoneNumberKey).HasColumnName("CUSTOMER_PHONE_NUMBER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.FieldName)
                    .IsRequired()
                    .HasColumnName("FIELD_NAME")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.NewValue)
                    .IsRequired()
                    .HasColumnName("NEW_VALUE")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.OldValue)
                    .IsRequired()
                    .HasColumnName("OLD_VALUE")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.CustomerPhoneNumberKeyNavigation)
                    .WithMany(p => p.CustomerPhoneNumberEdit)
                    .HasForeignKey(d => d.CustomerPhoneNumberKey)
                    .HasConstraintName("FK_CustomerPhoneNumberEdit_CustomerPhoneNumber");
            });

            modelBuilder.Entity<CustomerResponse>(entity =>
            {
                entity.HasKey(e => e.CustomerResponseKey)
                    .HasName("PK_CustomerResponse");

                entity.Property(e => e.CustomerResponseKey).HasColumnName("CUSTOMER_RESPONSE_KEY");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.Response)
                    .IsRequired()
                    .HasColumnName("RESPONSE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.VisitorKey).HasColumnName("VISITOR_KEY");
            });

            modelBuilder.Entity<CustomerSdncert>(entity =>
            {
                entity.HasKey(e => e.SdncertKey)
                    .HasName("PK_CustomerSDNCert");

                entity.ToTable("CustomerSDNCert");

                entity.HasIndex(e => e.CustomerKey)
                    .HasName("IX_CustomerSDNCert_CUSTOMER_KEY");

                entity.Property(e => e.SdncertKey).HasColumnName("SDNCERT_KEY");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DiffAddress).HasColumnName("DIFF_ADDRESS");

                entity.Property(e => e.DiffDob).HasColumnName("DIFF_DOB");

                entity.Property(e => e.DiffNumber).HasColumnName("DIFF_NUMBER");

                entity.Property(e => e.Dob)
                    .HasColumnName("DOB")
                    .HasColumnType("date");

                entity.Property(e => e.Other).HasColumnName("OTHER");

                entity.Property(e => e.OtherDesc)
                    .HasColumnName("OTHER_DESC")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");
            });

            modelBuilder.Entity<CustomerSurvey>(entity =>
            {
                entity.HasKey(e => e.CustomerSurveyKey)
                    .HasName("PK_CustomerSurvey");

                entity.Property(e => e.CustomerSurveyKey).HasColumnName("CUSTOMER_SURVEY_KEY");

                entity.Property(e => e.CalledFromCityState)
                    .IsRequired()
                    .HasColumnName("CALLED_FROM_CITY_STATE")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.CalledFromNum)
                    .IsRequired()
                    .HasColumnName("CALLED_FROM_NUM")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.CalledNum)
                    .IsRequired()
                    .HasColumnName("CALLED_NUM")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.NewCheck).HasColumnName("NEW_CHECK");

                entity.Property(e => e.NewCustomer).HasColumnName("NEW_CUSTOMER");

                entity.Property(e => e.NewPra).HasColumnName("NEW_PRA");

                entity.Property(e => e.NewSig).HasColumnName("NEW_SIG");

                entity.Property(e => e.NewTitle).HasColumnName("NEW_TITLE");

                entity.Property(e => e.NewType).HasColumnName("NEW_TYPE");

                entity.Property(e => e.Question1).HasColumnName("QUESTION1");

                entity.Property(e => e.Question2).HasColumnName("QUESTION2");

                entity.Property(e => e.Question3).HasColumnName("QUESTION3");

                entity.Property(e => e.Question4).HasColumnName("QUESTION4");

                entity.Property(e => e.Question5).HasColumnName("QUESTION5");

                entity.Property(e => e.Question6).HasColumnName("QUESTION6");

                entity.Property(e => e.Question7).HasColumnName("QUESTION7");

                entity.Property(e => e.Question8).HasColumnName("QUESTION8");

                entity.Property(e => e.Question9).HasColumnName("QUESTION9");

                entity.Property(e => e.Questionavg)
                    .HasColumnName("QUESTIONAVG")
                    .HasColumnType("money")
                    .HasComputedColumnSql("(((((((isnull(CONVERT([money],[QUESTION1],(0)),(0))+isnull([QUESTION2],(0)))+isnull([QUESTION3],(0)))+isnull([QUESTION4],(0)))+isnull([QUESTION5],(0)))+isnull([QUESTION6],(0)))+isnull([QUESTION7],(0)))+isnull([QUESTION8],(0)))+isnull([QUESTION9],(0)))/((((((((case when [QUESTION1] IS NULL then (0) else (1) end+case when [QUESTION2] IS NULL then (0) else (1) end)+case when [QUESTION3] IS NULL then (0) else (1) end)+case when [QUESTION4] IS NULL then (0) else (1) end)+case when [QUESTION5] IS NULL then (0) else (1) end)+case when [QUESTION6] IS NULL then (0) else (1) end)+case when [QUESTION7] IS NULL then (0) else (1) end)+case when [QUESTION8] IS NULL then (0) else (1) end)+case when [QUESTION9] IS NULL then (0) else (1) end")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.ResponseNum).HasColumnName("RESPONSE_NUM");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");

                entity.Property(e => e.TransType).HasColumnName("TRANS_TYPE");
            });

            modelBuilder.Entity<DbaIndexDefragLog>(entity =>
            {
                entity.HasKey(e => e.IndexDefragId)
                    .HasName("PK_indexDefragLog");

                entity.ToTable("dba_indexDefragLog");

                entity.Property(e => e.IndexDefragId).HasColumnName("indexDefrag_id");

                entity.Property(e => e.DatabaseId).HasColumnName("databaseID");

                entity.Property(e => e.DatabaseName)
                    .IsRequired()
                    .HasColumnName("databaseName")
                    .HasMaxLength(128);

                entity.Property(e => e.DateTimeStart)
                    .HasColumnName("dateTimeStart")
                    .HasColumnType("datetime");

                entity.Property(e => e.DurationSeconds).HasColumnName("durationSeconds");

                entity.Property(e => e.Fragmentation).HasColumnName("fragmentation");

                entity.Property(e => e.IndexId).HasColumnName("indexID");

                entity.Property(e => e.IndexName)
                    .IsRequired()
                    .HasColumnName("indexName")
                    .HasMaxLength(128);

                entity.Property(e => e.ObjectId).HasColumnName("objectID");

                entity.Property(e => e.ObjectName)
                    .IsRequired()
                    .HasColumnName("objectName")
                    .HasMaxLength(128);

                entity.Property(e => e.PageCount).HasColumnName("page_count");

                entity.Property(e => e.PartitionNumber).HasColumnName("partitionNumber");
            });

            modelBuilder.Entity<DcardChargeBackXref>(entity =>
            {
                entity.HasKey(e => e.DcardChargeBackXrefKey)
                    .HasName("PK_DCardChargeBackXRef");

                entity.ToTable("DCardChargeBackXRef");

                entity.HasIndex(e => e.RefundedTransDetailKey)
                    .HasName("IX_DCardChargeBackXRef_REFUNDED_TRANS_DETAIL_KEY");

                entity.Property(e => e.DcardChargeBackXrefKey).HasColumnName("DCARD_CHARGE_BACK_XREF_KEY");

                entity.Property(e => e.ChargeBackAmount)
                    .HasColumnName("CHARGE_BACK_AMOUNT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.RefundTransDetailKey).HasColumnName("REFUND_TRANS_DETAIL_KEY");

                entity.Property(e => e.RefundedTransDetailKey).HasColumnName("REFUNDED_TRANS_DETAIL_KEY");

                entity.HasOne(d => d.RefundTransDetailKeyNavigation)
                    .WithMany(p => p.DcardChargeBackXrefRefundTransDetailKeyNavigation)
                    .HasForeignKey(d => d.RefundTransDetailKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_DCardChargeBackXRef_REFUND_TRANS_DETAIL_KEY");

                entity.HasOne(d => d.RefundedTransDetailKeyNavigation)
                    .WithMany(p => p.DcardChargeBackXrefRefundedTransDetailKeyNavigation)
                    .HasForeignKey(d => d.RefundedTransDetailKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_DCardChargeBackXRef_REFUNDED_TRANS_DETAIL_KEY");
            });

            modelBuilder.Entity<Ddi>(entity =>
            {
                entity.HasKey(e => e.DdiKey)
                    .HasName("pk_DDI");

                entity.ToTable("DDI");

                entity.HasIndex(e => e.Reference)
                    .HasName("IX_DDI_REFERENCE");

                entity.Property(e => e.DdiKey).HasColumnName("DDI_KEY");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.EnteredDate)
                    .HasColumnName("ENTERED_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.ReSubmissionEmailSentDate)
                    .HasColumnName("RE_SUBMISSION_EMAIL_SENT_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasColumnName("REFERENCE")
                    .HasColumnType("varchar(18)");

                entity.Property(e => e.StatusChangedDate)
                    .HasColumnName("STATUS_CHANGED_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.StatusCode).HasColumnName("STATUS_CODE");

                entity.HasOne(d => d.LoanKeyNavigation)
                    .WithMany(p => p.Ddi)
                    .HasForeignKey(d => d.LoanKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_DDI_Loan");

                entity.HasOne(d => d.StatusCodeNavigation)
                    .WithMany(p => p.Ddi)
                    .HasPrincipalKey(p => p.StatusCode)
                    .HasForeignKey(d => d.StatusCode)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_DDI_DDIStatus");
            });

            modelBuilder.Entity<Ddiachhistory>(entity =>
            {
                entity.HasKey(e => new { e.DdiKey, e.AchSequenceNumber })
                    .HasName("pk_DDIACHHistory");

                entity.ToTable("DDIACHHistory");

                entity.HasIndex(e => e.AchHistoryKey)
                    .HasName("UQ__DDIACHHi__AB9AD18E73F48E98")
                    .IsUnique();

                entity.Property(e => e.DdiKey).HasColumnName("DDI_KEY");

                entity.Property(e => e.AchSequenceNumber).HasColumnName("ACH_SEQUENCE_NUMBER");

                entity.Property(e => e.AchHistoryKey).HasColumnName("ACH_HISTORY_KEY");

                entity.HasOne(d => d.AchHistoryKeyNavigation)
                    .WithOne(p => p.Ddiachhistory)
                    .HasForeignKey<Ddiachhistory>(d => d.AchHistoryKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_DDIACHHistory_ACHHistory");

                entity.HasOne(d => d.DdiKeyNavigation)
                    .WithMany(p => p.Ddiachhistory)
                    .HasForeignKey(d => d.DdiKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_DDIACHHistory_DDI");
            });

            modelBuilder.Entity<DdieditHistory>(entity =>
            {
                entity.HasKey(e => e.DdiEditHistoryKey)
                    .HasName("pk_DDIEditHistory");

                entity.ToTable("DDIEditHistory");

                entity.HasIndex(e => new { e.NewValue, e.DdiKey, e.FieldName })
                    .HasName("IX_DDIEditHistory_DDI_KEY_FIELD_NAME");

                entity.HasIndex(e => new { e.NewValue, e.EnteredDate, e.DdiKey, e.FieldName })
                    .HasName("IX_DDIEditHistory_FIELD_NAME");

                entity.Property(e => e.DdiEditHistoryKey).HasColumnName("DDI_EDIT_HISTORY_KEY");

                entity.Property(e => e.DdiKey).HasColumnName("DDI_KEY");

                entity.Property(e => e.EnteredDate)
                    .HasColumnName("ENTERED_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.FieldName)
                    .IsRequired()
                    .HasColumnName("FIELD_NAME")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.NewValue)
                    .IsRequired()
                    .HasColumnName("NEW_VALUE")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.OldValue)
                    .IsRequired()
                    .HasColumnName("OLD_VALUE")
                    .HasColumnType("varchar(100)");

                entity.HasOne(d => d.DdiKeyNavigation)
                    .WithMany(p => p.DdieditHistory)
                    .HasForeignKey(d => d.DdiKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_DDIEditHistory_DDI");
            });

            modelBuilder.Entity<Ddisend>(entity =>
            {
                entity.HasKey(e => e.DdiSendKey)
                    .HasName("pk_DDISend");

                entity.ToTable("DDISend");

                entity.Property(e => e.DdiSendKey).HasColumnName("DDI_SEND_KEY");

                entity.Property(e => e.FileName)
                    .HasColumnName("FILE_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.SentDate)
                    .HasColumnName("SENT_DATE")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<DdisendDetail>(entity =>
            {
                entity.HasKey(e => e.DdiSendDetailKey)
                    .HasName("pk_DDISendDetail");

                entity.ToTable("DDISendDetail");

                entity.Property(e => e.DdiSendDetailKey).HasColumnName("DDI_SEND_DETAIL_KEY");

                entity.Property(e => e.AccountNumber)
                    .IsRequired()
                    .HasColumnName("ACCOUNT_NUMBER")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.DdiKey).HasColumnName("DDI_KEY");

                entity.Property(e => e.DdiSendKey).HasColumnName("DDI_SEND_KEY");

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasColumnName("LAST_NAME")
                    .HasColumnType("varchar(18)");

                entity.Property(e => e.Originator)
                    .IsRequired()
                    .HasColumnName("ORIGINATOR")
                    .HasColumnType("varchar(18)");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasColumnName("REFERENCE")
                    .HasColumnType("varchar(18)");

                entity.Property(e => e.SentBy)
                    .IsRequired()
                    .HasColumnName("SENT_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.SentDate)
                    .HasColumnName("SENT_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.SortCode)
                    .IsRequired()
                    .HasColumnName("SORT_CODE")
                    .HasColumnType("varchar(9)");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasColumnName("STATUS")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.TransCode)
                    .IsRequired()
                    .HasColumnName("TRANS_CODE")
                    .HasColumnType("varchar(2)");

                entity.HasOne(d => d.DdiKeyNavigation)
                    .WithMany(p => p.DdisendDetail)
                    .HasForeignKey(d => d.DdiKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_DDISendDetail_DDI");

                entity.HasOne(d => d.DdiSendKeyNavigation)
                    .WithMany(p => p.DdisendDetail)
                    .HasForeignKey(d => d.DdiSendKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_DDISendDetail_DDISentKey");
            });

            modelBuilder.Entity<DdisendQueue>(entity =>
            {
                entity.HasKey(e => e.DdiSendQueueKey)
                    .HasName("pk_DDISendQueue");

                entity.ToTable("DDISendQueue");

                entity.Property(e => e.DdiSendQueueKey).HasColumnName("DDI_SEND_QUEUE_KEY");

                entity.Property(e => e.AccountNumber)
                    .IsRequired()
                    .HasColumnName("ACCOUNT_NUMBER")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.DdiKey).HasColumnName("DDI_KEY");

                entity.Property(e => e.EnteredDate)
                    .HasColumnName("ENTERED_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasColumnName("LAST_NAME")
                    .HasColumnType("varchar(18)");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.Originator)
                    .IsRequired()
                    .HasColumnName("ORIGINATOR")
                    .HasColumnType("varchar(18)");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasColumnName("REFERENCE")
                    .HasColumnType("varchar(18)");

                entity.Property(e => e.SentBy)
                    .IsRequired()
                    .HasColumnName("SENT_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.SortCode)
                    .IsRequired()
                    .HasColumnName("SORT_CODE")
                    .HasColumnType("varchar(9)");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasColumnName("STATUS")
                    .HasColumnType("varchar(18)");

                entity.Property(e => e.TransCode)
                    .IsRequired()
                    .HasColumnName("TRANS_CODE")
                    .HasColumnType("varchar(2)");

                entity.HasOne(d => d.DdiKeyNavigation)
                    .WithMany(p => p.DdisendQueue)
                    .HasForeignKey(d => d.DdiKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_DDISendQueue_DDIKey");

                entity.HasOne(d => d.LoanKeyNavigation)
                    .WithMany(p => p.DdisendQueue)
                    .HasForeignKey(d => d.LoanKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_DDISendQueue_Loan");
            });

            modelBuilder.Entity<Ddistatus>(entity =>
            {
                entity.HasKey(e => e.DdiStatusKey)
                    .HasName("pk_DDIStatus");

                entity.ToTable("DDIStatus");

                entity.HasIndex(e => e.StatusCode)
                    .HasName("UQ__DDIStatu__C2904BEA2F3C94C0")
                    .IsUnique();

                entity.Property(e => e.DdiStatusKey).HasColumnName("DDI_STATUS_KEY");

                entity.Property(e => e.CodeDescription)
                    .IsRequired()
                    .HasColumnName("CODE_DESCRIPTION")
                    .HasColumnType("varchar(200)");

                entity.Property(e => e.Display)
                    .HasColumnName("DISPLAY")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.StatusCode).HasColumnName("STATUS_CODE");
            });

            modelBuilder.Entity<Denomination>(entity =>
            {
                entity.HasKey(e => e.DenominationKey)
                    .HasName("PK_Denomination");

                entity.Property(e => e.DenominationKey).HasColumnName("DENOMINATION_KEY");

                entity.Property(e => e.Amount)
                    .HasColumnName("AMOUNT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.BaseDenominationKey).HasColumnName("BASE_DENOMINATION_KEY");

                entity.Property(e => e.CurrencyKey).HasColumnName("CURRENCY_KEY");

                entity.Property(e => e.DenominationType)
                    .IsRequired()
                    .HasColumnName("DENOMINATION_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.DisplaySequence).HasColumnName("DISPLAY_SEQUENCE");

                entity.Property(e => e.IsEnabled).HasColumnName("IS_ENABLED");

                entity.HasOne(d => d.BaseDenominationKeyNavigation)
                    .WithMany(p => p.InverseBaseDenominationKeyNavigation)
                    .HasForeignKey(d => d.BaseDenominationKey)
                    .HasConstraintName("FK_Denomination_Denomination");

                entity.HasOne(d => d.CurrencyKeyNavigation)
                    .WithMany(p => p.Denomination)
                    .HasForeignKey(d => d.CurrencyKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_Denomination_Currency");
            });

            modelBuilder.Entity<DepositBag>(entity =>
            {
                entity.HasKey(e => e.DepositBagKey)
                    .HasName("PK_DepositBag");

                entity.HasIndex(e => e.DbDateEntered)
                    .HasName("IX_DepositBag_DATE_ENTERED");

                entity.HasIndex(e => e.TransDetailKey)
                    .HasName("IX_DepositBag_TRANS_DETAIL_KEY");

                entity.HasIndex(e => new { e.DbReversed, e.DepositBagKey })
                    .HasName("IX_DepositBag_DB_REVERSED_DEPOSIT_BAG_KEY");

                entity.HasIndex(e => new { e.DepositChkKey, e.Location, e.DbReversed })
                    .HasName("IX_DepositBag_DEPOSIT_CHK_KEY_LOCATION_DB_REVERSED");

                entity.HasIndex(e => new { e.DbBagNum, e.DbMiddayDeposit, e.CashedChkTotalAmt, e.PaydayChkTotalAmt, e.UsdCashedChkTotalAmt, e.DepositChkKey })
                    .HasName("IX_DepositBag_DEPOSIT_CHK_KEY");

                entity.Property(e => e.DepositBagKey).HasColumnName("DEPOSIT_BAG_KEY");

                entity.Property(e => e.CashedChkCount).HasColumnName("CASHED_CHK_COUNT");

                entity.Property(e => e.CashedChkTotalAmt)
                    .HasColumnName("CASHED_CHK_TOTAL_AMT")
                    .HasColumnType("money");

                entity.Property(e => e.ChkCount)
                    .HasColumnName("CHK_COUNT")
                    .HasComputedColumnSql("([CASHED_CHK_COUNT]+[PAYDAY_CHK_COUNT])+[USD_CASHED_CHK_COUNT]")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.ChkTotalAmt)
                    .HasColumnName("CHK_TOTAL_AMT")
                    .HasColumnType("money")
                    .HasComputedColumnSql("([CASHED_CHK_TOTAL_AMT]+[PAYDAY_CHK_TOTAL_AMT])+[USD_CASHED_CHK_TOTAL_AMT]")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.DbBagNum)
                    .IsRequired()
                    .HasColumnName("DB_BAG_NUM")
                    .HasColumnType("varchar(15)");

                entity.Property(e => e.DbDateEntered)
                    .HasColumnName("DB_DATE_ENTERED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.DbEnteredBy)
                    .IsRequired()
                    .HasColumnName("DB_ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.DbMiddayDeposit).HasColumnName("DB_MIDDAY_DEPOSIT");

                entity.Property(e => e.DbReverseTransDetailKey).HasColumnName("DB_REVERSE_TRANS_DETAIL_KEY");

                entity.Property(e => e.DbReversed).HasColumnName("DB_REVERSED");

                entity.Property(e => e.DepositChkKey).HasColumnName("DEPOSIT_CHK_KEY");

                entity.Property(e => e.IsElectronicBag).HasColumnName("IS_ELECTRONIC_BAG");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.PaydayChkCount).HasColumnName("PAYDAY_CHK_COUNT");

                entity.Property(e => e.PaydayChkTotalAmt)
                    .HasColumnName("PAYDAY_CHK_TOTAL_AMT")
                    .HasColumnType("money");

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");

                entity.Property(e => e.UsdCashedChkCount).HasColumnName("USD_CASHED_CHK_COUNT");

                entity.Property(e => e.UsdCashedChkTotalAmt)
                    .HasColumnName("USD_CASHED_CHK_TOTAL_AMT")
                    .HasColumnType("money");

                entity.HasOne(d => d.DbReverseTransDetailKeyNavigation)
                    .WithMany(p => p.DepositBag)
                    .HasForeignKey(d => d.DbReverseTransDetailKey)
                    .HasConstraintName("FK_DepositBag_DB_REVERSE_TRANS_DETAIL_KEY");

                entity.HasOne(d => d.DepositChkKeyNavigation)
                    .WithMany(p => p.DepositBag)
                    .HasForeignKey(d => d.DepositChkKey)
                    .HasConstraintName("FK_DepositBag_DepositChk");

                entity.HasOne(d => d.LocationNavigation)
                    .WithMany(p => p.DepositBag)
                    .HasForeignKey(d => d.Location)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_DepositBag_Company");
            });

            modelBuilder.Entity<DepositBagDetail>(entity =>
            {
                entity.HasKey(e => e.DepositBagDetailKey)
                    .HasName("PK_DepositBagDetail");

                entity.HasIndex(e => e.CashedCheckKey)
                    .HasName("IX_DepositBagDetail_CASHED_CHECK_KEY");

                entity.HasIndex(e => e.CustomerKey)
                    .HasName("IX_DepositBagDetail_CUSTOMER_KEY");

                entity.HasIndex(e => e.LoanKey)
                    .HasName("IX_DepositBagDetail_LOAN_KEY");

                entity.HasIndex(e => e.TransDetailKey)
                    .HasName("IX_DepositBagDetail_TRANS_DETAIL_KEY");

                entity.HasIndex(e => new { e.CashedCheckKey, e.DepositBagKey })
                    .HasName("IX_DepositBagDetail_CASHED_CHECK_KEY_1");

                entity.HasIndex(e => new { e.DepositBagKey, e.CashedCheckKey })
                    .HasName("IX_DepositBagDetail_DEPOSIT_BAG_KEY");

                entity.Property(e => e.DepositBagDetailKey).HasColumnName("DEPOSIT_BAG_DETAIL_KEY");

                entity.Property(e => e.CashedCheckKey).HasColumnName("CASHED_CHECK_KEY");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DepositBagKey).HasColumnName("DEPOSIT_BAG_KEY");

                entity.Property(e => e.DrawerKey).HasColumnName("DRAWER_KEY");

                entity.Property(e => e.LoanCheckKey).HasColumnName("LOAN_CHECK_KEY");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.ReversedByDelete)
                    .HasColumnName("REVERSED_BY_DELETE")
                    .HasColumnType("char(3)");

                entity.Property(e => e.ReversedDateDelete)
                    .HasColumnName("REVERSED_DATE_DELETE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ReversedDelete).HasColumnName("REVERSED_DELETE");

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");

                entity.HasOne(d => d.CashedCheckKeyNavigation)
                    .WithMany(p => p.DepositBagDetail)
                    .HasForeignKey(d => d.CashedCheckKey)
                    .HasConstraintName("FK_DepositBagDetail_CashedCheck");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.DepositBagDetail)
                    .HasForeignKey(d => d.CustomerKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_DepositBagDetail_Customer");

                entity.HasOne(d => d.DepositBagKeyNavigation)
                    .WithMany(p => p.DepositBagDetail)
                    .HasForeignKey(d => d.DepositBagKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_DepositBagDetail_DepositBag");

                entity.HasOne(d => d.LoanKeyNavigation)
                    .WithMany(p => p.DepositBagDetail)
                    .HasForeignKey(d => d.LoanKey)
                    .HasConstraintName("FK_DepositBagDetail_Loan");
            });

            modelBuilder.Entity<DepositChk>(entity =>
            {
                entity.HasKey(e => e.DepositChkKey)
                    .HasName("PK_DepositChk");

                entity.HasIndex(e => new { e.DepositChkKey, e.Location, e.TransDetailKey, e.DcGlAcct, e.DcChkTot, e.DcBagType })
                    .HasName("IX_DepositChk_DC_BAG_TYPE");

                entity.Property(e => e.DepositChkKey).HasColumnName("DEPOSIT_CHK_KEY");

                entity.Property(e => e.DcBagType).HasColumnName("DC_BAG_TYPE");

                entity.Property(e => e.DcChkCntr).HasColumnName("DC_CHK_CNTR");

                entity.Property(e => e.DcChkTot)
                    .HasColumnName("DC_CHK_TOT")
                    .HasColumnType("money");

                entity.Property(e => e.DcCourierName)
                    .HasColumnName("DC_COURIER_NAME")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.DcDepositBy)
                    .IsRequired()
                    .HasColumnName("DC_DEPOSIT_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.DcDepositDate)
                    .HasColumnName("DC_DEPOSIT_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DcGlAcct).HasColumnName("DC_GL_ACCT");

                entity.Property(e => e.DcPraType).HasColumnName("DC_PRA_TYPE");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");

                entity.HasOne(d => d.LocationNavigation)
                    .WithMany(p => p.DepositChk)
                    .HasForeignKey(d => d.Location)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_DepositChk_Company");
            });

            modelBuilder.Entity<DepositChkDetail>(entity =>
            {
                entity.HasKey(e => e.DepositChkDetailKey)
                    .HasName("PK_DepositChkDetail");

                entity.HasIndex(e => e.CashedCheckKey)
                    .HasName("IX_DepositChkDetail_CASHED_CHECK_KEY");

                entity.HasIndex(e => new { e.CashedCheckKey, e.DepositChkKey })
                    .HasName("IX_DepositChkDetail_DEPOSIT_CHECK_KEY");

                entity.HasIndex(e => new { e.DepositChkDetailKey, e.CustomerKey })
                    .HasName("IX_DepositChkDetail_CUSTOMER_KEY_DEPOSIT_CHK_DETAIL_KEY");

                entity.Property(e => e.DepositChkDetailKey).HasColumnName("DEPOSIT_CHK_DETAIL_KEY");

                entity.Property(e => e.CashedCheckKey).HasColumnName("CASHED_CHECK_KEY");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DepositChkKey).HasColumnName("DEPOSIT_CHK_KEY");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");

                entity.HasOne(d => d.CashedCheckKeyNavigation)
                    .WithMany(p => p.DepositChkDetail)
                    .HasForeignKey(d => d.CashedCheckKey)
                    .HasConstraintName("FK_DepositChkDetail_CashedCheck");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.DepositChkDetail)
                    .HasForeignKey(d => d.CustomerKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_DepositChkDetail_Customer");

                entity.HasOne(d => d.DepositChkKeyNavigation)
                    .WithMany(p => p.DepositChkDetail)
                    .HasForeignKey(d => d.DepositChkKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_DepositChkDetail_DepositChk");

                entity.HasOne(d => d.LoanKeyNavigation)
                    .WithMany(p => p.DepositChkDetail)
                    .HasForeignKey(d => d.LoanKey)
                    .HasConstraintName("FK_DepositChkDetail_Loan");
            });

            modelBuilder.Entity<DepositDebitCard>(entity =>
            {
                entity.HasKey(e => e.DepositDebitCardKey)
                    .HasName("PK_DepositDebitCard");

                entity.Property(e => e.DepositDebitCardKey).HasColumnName("DEPOSIT_DEBIT_CARD_KEY");

                entity.Property(e => e.Completed).HasColumnName("COMPLETED");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DebitCntr).HasColumnName("DEBIT_CNTR");

                entity.Property(e => e.DebitTot)
                    .HasColumnName("DEBIT_TOT")
                    .HasColumnType("money");

                entity.Property(e => e.EndTime)
                    .HasColumnName("END_TIME")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.StartTime)
                    .HasColumnName("START_TIME")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");
            });

            modelBuilder.Entity<DepositDebitCardDetail>(entity =>
            {
                entity.HasKey(e => e.DepositDebitCardDetailKey)
                    .HasName("PK_DepositDebitCardDetail");

                entity.HasIndex(e => e.DepositDebitCardKey)
                    .HasName("IX_DepositDebitCardDetail_DEPOSIT_DEBIT_CARD_KEY");

                entity.HasIndex(e => e.LoanKey)
                    .HasName("IX_DepositDebitCardDetail_LOAN_KEY");

                entity.Property(e => e.DepositDebitCardDetailKey).HasColumnName("DEPOSIT_DEBIT_CARD_DETAIL_KEY");

                entity.Property(e => e.DepositDebitCardKey).HasColumnName("DEPOSIT_DEBIT_CARD_KEY");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.Reversed).HasColumnName("REVERSED");

                entity.Property(e => e.ReversedBy)
                    .HasColumnName("REVERSED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.ReversedDate)
                    .HasColumnName("REVERSED_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");

                entity.HasOne(d => d.DepositDebitCardKeyNavigation)
                    .WithMany(p => p.DepositDebitCardDetail)
                    .HasForeignKey(d => d.DepositDebitCardKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_DepositDebitCardDetail_DEPOSIT_DEBIT_CARD_KEY");
            });

            modelBuilder.Entity<DialerJob>(entity =>
            {
                entity.HasKey(e => e.DialerJobKey)
                    .HasName("PK_DialerJob");

                entity.Property(e => e.DialerJobKey).HasColumnName("DIALER_JOB_KEY");

                entity.Property(e => e.AdastraAgeFrom).HasColumnName("ADASTRA_AGE_FROM");

                entity.Property(e => e.AdastraAgeTo).HasColumnName("ADASTRA_AGE_TO");

                entity.Property(e => e.AgeFrom).HasColumnName("AGE_FROM");

                entity.Property(e => e.AgeTo).HasColumnName("AGE_TO");

                entity.Property(e => e.AuditCategories)
                    .IsRequired()
                    .HasColumnName("AUDIT_CATEGORIES")
                    .HasColumnType("varchar(1000)");

                entity.Property(e => e.BalanceFrom)
                    .HasColumnName("BALANCE_FROM")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.BalanceTest)
                    .HasColumnName("BALANCE_TEST")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.BalanceTo)
                    .HasColumnName("BALANCE_TO")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.BrokenPtpDays).HasColumnName("BROKEN_PTP_DAYS");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(255)");

                entity.Property(e => e.DirectDeposit).HasColumnName("DIRECT_DEPOSIT");

                entity.Property(e => e.ExcludePhoneAreacodes)
                    .IsRequired()
                    .HasColumnName("EXCLUDE_PHONE_AREACODES")
                    .HasColumnType("varchar(512)");

                entity.Property(e => e.ExportFileName)
                    .IsRequired()
                    .HasColumnName("EXPORT_FILE_NAME")
                    .HasColumnType("varchar(255)");

                entity.Property(e => e.FollowUpFrom)
                    .IsRequired()
                    .HasColumnName("FOLLOW_UP_FROM")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.FollowUpTo)
                    .IsRequired()
                    .HasColumnName("FOLLOW_UP_TO")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.HasBrokenPtps).HasColumnName("HAS_BROKEN_PTPS");

                entity.Property(e => e.IsAdAstra).HasColumnName("IS_AD_ASTRA");

                entity.Property(e => e.JobName)
                    .IsRequired()
                    .HasColumnName("JOB_NAME")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.JobType)
                    .HasColumnName("JOB_TYPE")
                    .HasColumnType("char(2)");

                entity.Property(e => e.LastNameFrom)
                    .IsRequired()
                    .HasColumnName("LAST_NAME_FROM")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.LastNameTo)
                    .IsRequired()
                    .HasColumnName("LAST_NAME_TO")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.Locations)
                    .IsRequired()
                    .HasColumnName("LOCATIONS")
                    .HasColumnType("varchar(1000)");

                entity.Property(e => e.PreferredLanguage)
                    .IsRequired()
                    .HasColumnName("PREFERRED_LANGUAGE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.Products)
                    .IsRequired()
                    .HasColumnName("PRODUCTS")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.PtpCall).HasColumnName("PTP_CALL");

                entity.Property(e => e.RiskAssessment)
                    .HasColumnName("RISK_ASSESSMENT")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.RunFriday).HasColumnName("RUN_FRIDAY");

                entity.Property(e => e.RunMonday).HasColumnName("RUN_MONDAY");

                entity.Property(e => e.RunSaturday).HasColumnName("RUN_SATURDAY");

                entity.Property(e => e.RunSunday).HasColumnName("RUN_SUNDAY");

                entity.Property(e => e.RunThursday).HasColumnName("RUN_THURSDAY");

                entity.Property(e => e.RunTuesday).HasColumnName("RUN_TUESDAY");

                entity.Property(e => e.RunWednesday).HasColumnName("RUN_WEDNESDAY");

                entity.Property(e => e.ScoreFrom).HasColumnName("SCORE_FROM");

                entity.Property(e => e.ScoreTo).HasColumnName("SCORE_TO");

                entity.Property(e => e.StepOrder).HasColumnName("STEP_ORDER");

                entity.Property(e => e.TodayPlus1).HasColumnName("TODAY_PLUS1");

                entity.Property(e => e.TodayPlus2).HasColumnName("TODAY_PLUS2");

                entity.Property(e => e.TodayPrior).HasColumnName("TODAY_PRIOR");

                entity.Property(e => e.ValidCc).HasColumnName("VALID_CC");
            });

            modelBuilder.Entity<DialerKeys>(entity =>
            {
                entity.HasKey(e => e.DialerKeysKey)
                    .HasName("PK_DialerKeys");

                entity.Property(e => e.DialerKeysKey).HasColumnName("DIALER_KEYS_KEY");

                entity.Property(e => e.Balance)
                    .HasColumnName("balance")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Balancetest)
                    .HasColumnName("balancetest")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CourtesyExport).HasColumnName("COURTESY_EXPORT");

                entity.Property(e => e.Date)
                    .HasColumnName("date")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ExportedToNoble).HasDefaultValueSql("0");

                entity.Property(e => e.Followup).HasColumnType("smalldatetime");

                entity.Property(e => e.Jobname)
                    .HasColumnName("jobname")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.Reference)
                    .HasColumnName("reference")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.Rikey).HasColumnName("rikey");

                entity.Property(e => e.RisAuditId).HasColumnName("ris_audit_id");
            });

            modelBuilder.Entity<DialerResultCodes>(entity =>
            {
                entity.HasKey(e => e.DialerResultsId)
                    .HasName("PK_Dialer_Result_Codes");

                entity.Property(e => e.DialerResultsId).HasColumnName("Dialer_Results_Id");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.ResultCode)
                    .IsRequired()
                    .HasColumnName("Result_Code")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.SpeedyResultCode).HasColumnName("Speedy_Result_Code");
            });

            modelBuilder.Entity<DirtyDataGroup>(entity =>
            {
                entity.HasKey(e => e.DirtyDataGroupKey)
                    .HasName("PK_DirtyDataGroup");

                entity.Property(e => e.DirtyDataGroupKey).HasColumnName("DIRTY_DATA_GROUP_KEY");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(2000)");

                entity.Property(e => e.GroupName)
                    .IsRequired()
                    .HasColumnName("GROUP_NAME")
                    .HasColumnType("varchar(100)");
            });

            modelBuilder.Entity<DirtyDataJob>(entity =>
            {
                entity.HasKey(e => e.DirtyDataJobKey)
                    .HasName("PK_DirtyDataJob");

                entity.Property(e => e.DirtyDataJobKey).HasColumnName("DIRTY_DATA_JOB_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(2000)");

                entity.Property(e => e.GroupKey).HasColumnName("GROUP_KEY");

                entity.Property(e => e.IsEnabled).HasColumnName("IS_ENABLED");

                entity.Property(e => e.JobName)
                    .IsRequired()
                    .HasColumnName("JOB_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.StoredProcName)
                    .IsRequired()
                    .HasColumnName("STORED_PROC_NAME")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.GroupKeyNavigation)
                    .WithMany(p => p.DirtyDataJob)
                    .HasForeignKey(d => d.GroupKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("CK_DirtyDataJob_GROUP_KEY");
            });

            modelBuilder.Entity<DirtyDataJobRun>(entity =>
            {
                entity.HasKey(e => e.DirtyDataJobRunKey)
                    .HasName("PK_DirtyDataJobRun");

                entity.Property(e => e.DirtyDataJobRunKey).HasColumnName("DIRTY_DATA_JOB_RUN_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ErrorMessage)
                    .IsRequired()
                    .HasColumnName("ERROR_MESSAGE")
                    .HasColumnType("varchar(1000)");

                entity.Property(e => e.IsError).HasColumnName("IS_ERROR");

                entity.Property(e => e.JobKey).HasColumnName("JOB_KEY");

                entity.Property(e => e.RecordCount).HasColumnName("RECORD_COUNT");

                entity.HasOne(d => d.JobKeyNavigation)
                    .WithMany(p => p.DirtyDataJobRun)
                    .HasForeignKey(d => d.JobKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("CK_DirtyDataJobRun_JOB_KEY");
            });

            modelBuilder.Entity<DiscountLocations>(entity =>
            {
                entity.HasKey(e => e.DiscountLocationsKey)
                    .HasName("PK_DiscountLocations");

                entity.HasIndex(e => e.Location)
                    .HasName("IX_DiscountLocations_LOCATION");

                entity.HasIndex(e => new { e.DiscountsKey, e.Location })
                    .HasName("IX_DiscountLocations_DISCOUNTS_KEY_LOCATION");

                entity.Property(e => e.DiscountLocationsKey).HasColumnName("DISCOUNT_LOCATIONS_KEY");

                entity.Property(e => e.DiscountsKey).HasColumnName("DISCOUNTS_KEY");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.HasOne(d => d.DiscountsKeyNavigation)
                    .WithMany(p => p.DiscountLocations)
                    .HasForeignKey(d => d.DiscountsKey)
                    .HasConstraintName("FK_DiscountLocations_DiscountMaster");

                entity.HasOne(d => d.LocationNavigation)
                    .WithMany(p => p.DiscountLocations)
                    .HasForeignKey(d => d.Location)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_DiscountLocations_Company");
            });

            modelBuilder.Entity<DiscountMaster>(entity =>
            {
                entity.HasKey(e => e.DiscountMasterKey)
                    .HasName("PK_DiscountMaster");

                entity.HasIndex(e => e.DiscountTypeKey)
                    .HasName("IX_DiscountMaster_DISCOUNT_TYPE_KEY");

                entity.Property(e => e.DiscountMasterKey).HasColumnName("DISCOUNT_MASTER_KEY");

                entity.Property(e => e.AmountType).HasColumnName("AMOUNT_TYPE");

                entity.Property(e => e.ApplyDiscountTo)
                    .IsRequired()
                    .HasColumnName("APPLY_DISCOUNT_TO")
                    .HasColumnType("char(1)");

                entity.Property(e => e.ApplyToChecks).HasColumnName("APPLY_TO_CHECKS");

                entity.Property(e => e.CustomerLevel).HasColumnName("CUSTOMER_LEVEL");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DefaultAmt)
                    .HasColumnName("DEFAULT_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(300)");

                entity.Property(e => e.DiscountCode)
                    .IsRequired()
                    .HasColumnName("DISCOUNT_CODE")
                    .HasColumnType("char(4)");

                entity.Property(e => e.DiscountName)
                    .IsRequired()
                    .HasColumnName("DISCOUNT_NAME")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.DiscountTypeKey).HasColumnName("DISCOUNT_TYPE_KEY");

                entity.Property(e => e.EarnedCreditTypeKey).HasColumnName("EARNED_CREDIT_TYPE_KEY");

                entity.Property(e => e.EndDate)
                    .HasColumnName("END_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.GlAcct).HasColumnName("GL_ACCT");

                entity.Property(e => e.IsActive).HasColumnName("IS_ACTIVE");

                entity.Property(e => e.IsAutoApplied)
                    .HasColumnName("IS_AUTO_APPLIED")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.MaxAmt)
                    .HasColumnName("MAX_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.RouteRequired).HasColumnName("ROUTE_REQUIRED");

                entity.Property(e => e.StartDate)
                    .HasColumnName("START_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.DiscountTypeKeyNavigation)
                    .WithMany(p => p.DiscountMaster)
                    .HasForeignKey(d => d.DiscountTypeKey)
                    .HasConstraintName("FK_DiscountMaster_DISCOUNT_TYPE_KEY");

                entity.HasOne(d => d.EarnedCreditTypeKeyNavigation)
                    .WithMany(p => p.DiscountMaster)
                    .HasForeignKey(d => d.EarnedCreditTypeKey)
                    .HasConstraintName("FK_DiscountMaster_EARNED_CREDIT_TYPE_KEY");

                entity.HasOne(d => d.GlAcctNavigation)
                    .WithMany(p => p.DiscountMaster)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.GlAcct)
                    .HasConstraintName("FK_DiscountMaster_GL_ACCT");
            });

            modelBuilder.Entity<DiscountMasterLoanProduct>(entity =>
            {
                entity.HasKey(e => e.DiscountMasterLoanProductKey)
                    .HasName("PK_DiscountMasterLoanProduct");

                entity.Property(e => e.DiscountMasterLoanProductKey).HasColumnName("DISCOUNT_MASTER_LOAN_PRODUCT_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DiscountMasterKey).HasColumnName("DISCOUNT_MASTER_KEY");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.LoanProductKey).HasColumnName("LOAN_PRODUCT_KEY");

                entity.HasOne(d => d.DiscountMasterKeyNavigation)
                    .WithMany(p => p.DiscountMasterLoanProduct)
                    .HasForeignKey(d => d.DiscountMasterKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_DiscountMasterLoanProduct_DISCOUNT_MASTER_KEY");

                entity.HasOne(d => d.LoanProductKeyNavigation)
                    .WithMany(p => p.DiscountMasterLoanProduct)
                    .HasForeignKey(d => d.LoanProductKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_DiscountMasterLoanProduct_LOAN_PRODUCT_KEY");
            });

            modelBuilder.Entity<DiscountSecurity>(entity =>
            {
                entity.HasKey(e => e.DiscountSecurityKey)
                    .HasName("PK_DISCOUNTSECURITY_KEY");

                entity.Property(e => e.DiscountSecurityKey).HasColumnName("DISCOUNT_SECURITY_KEY");

                entity.Property(e => e.DiscountsKey).HasColumnName("DISCOUNTS_KEY");

                entity.Property(e => e.SecuritygroupKey).HasColumnName("SECURITYGROUP_KEY");

                entity.HasOne(d => d.DiscountsKeyNavigation)
                    .WithMany(p => p.DiscountSecurity)
                    .HasForeignKey(d => d.DiscountsKey)
                    .HasConstraintName("FK_DiscountSecurity_DiscountMaster");

                entity.HasOne(d => d.SecuritygroupKeyNavigation)
                    .WithMany(p => p.DiscountSecurity)
                    .HasForeignKey(d => d.SecuritygroupKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_DISCOUNTSECURITY_SECURITYGROUP");
            });

            modelBuilder.Entity<DiscountType>(entity =>
            {
                entity.HasKey(e => e.DiscountTypeKey)
                    .HasName("PK_DiscountType");

                entity.HasIndex(e => e.Description)
                    .HasName("CK_DiscountType_DESCRIPTION")
                    .IsUnique();

                entity.Property(e => e.DiscountTypeKey).HasColumnName("DISCOUNT_TYPE_KEY");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(50)");
            });

            modelBuilder.Entity<DiscountUsed>(entity =>
            {
                entity.HasKey(e => e.DiscountUsedKey)
                    .HasName("PK_DiscountUsed");

                entity.HasIndex(e => new { e.DiscountAmt, e.TransDetailKey })
                    .HasName("IX_DiscountUsed_TRANS_DETAIL_KEY");

                entity.HasIndex(e => new { e.DiscountMasterKey, e.DateEntered, e.LoanKey })
                    .HasName("IX_Discount_Used_LOAN_KEY");

                entity.Property(e => e.DiscountUsedKey).HasColumnName("DISCOUNT_USED_KEY");

                entity.Property(e => e.CashedCheckKey).HasColumnName("CASHED_CHECK_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DiscountAmt)
                    .HasColumnName("DISCOUNT_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.DiscountMasterKey).HasColumnName("DISCOUNT_MASTER_KEY");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.LoanType)
                    .IsRequired()
                    .HasColumnName("LOAN_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.ProductType)
                    .IsRequired()
                    .HasColumnName("PRODUCT_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.RouteCode)
                    .IsRequired()
                    .HasColumnName("ROUTE_CODE")
                    .HasColumnType("varchar(4)");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");

                entity.Property(e => e.Zipcode)
                    .IsRequired()
                    .HasColumnName("ZIPCODE")
                    .HasColumnType("varchar(5)");

                entity.HasOne(d => d.DiscountMasterKeyNavigation)
                    .WithMany(p => p.DiscountUsed)
                    .HasForeignKey(d => d.DiscountMasterKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_DiscountUsed_DiscountMaster");
            });

            modelBuilder.Entity<District>(entity =>
            {
                entity.HasKey(e => e.DistrictKey)
                    .HasName("PK_District");

                entity.Property(e => e.DistrictKey).HasColumnName("DISTRICT_KEY");

                entity.Property(e => e.DistrictManager)
                    .IsRequired()
                    .HasColumnName("DISTRICT_MANAGER")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.DistrictName)
                    .IsRequired()
                    .HasColumnName("DISTRICT_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.RegionKey).HasColumnName("REGION_KEY");

                entity.HasOne(d => d.RegionKeyNavigation)
                    .WithMany(p => p.District)
                    .HasForeignKey(d => d.RegionKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_District_Region");
            });

            modelBuilder.Entity<Dma>(entity =>
            {
                entity.HasKey(e => e.DmaKey)
                    .HasName("PK_DMA");

                entity.ToTable("DMA");

                entity.HasIndex(e => e.Dma1)
                    .HasName("IX_DMA_DMA");

                entity.Property(e => e.DmaKey).HasColumnName("DMA_KEY");

                entity.Property(e => e.AdditionalDma)
                    .HasColumnName("Additional_DMA")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.City).HasColumnType("varchar(150)");

                entity.Property(e => e.CityCode).HasColumnName("City_Code");

                entity.Property(e => e.CityName)
                    .HasColumnName("City_Name")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.CitySize).HasColumnName("City_Size");

                entity.Property(e => e.Dma1).HasColumnName("DMA");

                entity.Property(e => e.DmaName)
                    .HasColumnName("DMA_Name")
                    .HasColumnType("varchar(150)");

                entity.Property(e => e.DmaRank).HasColumnName("DMA_Rank");

                entity.Property(e => e.MetroIndicator)
                    .HasColumnName("Metro_Indicator")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.NmrTerr).HasColumnName("NMR_Terr");

                entity.Property(e => e.State).HasColumnType("varchar(2)");

                entity.Property(e => e.StateCode).HasColumnName("State_Code");

                entity.Property(e => e.ZipCode)
                    .HasColumnName("Zip_Code")
                    .HasColumnType("varchar(5)");
            });

            modelBuilder.Entity<Doc10000Trans>(entity =>
            {
                entity.HasKey(e => e.Doc10000TransKey)
                    .HasName("PK_Doc10000Trans");

                entity.Property(e => e.Doc10000TransKey).HasColumnName("DOC_10000_TRANS_KEY");

                entity.Property(e => e.CashIn)
                    .HasColumnName("CASH_IN")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CashOut)
                    .HasColumnName("CASH_OUT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CashedCheck).HasColumnName("CASHED_CHECK");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.FormType).HasColumnName("FORM_TYPE");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.Doc10000Trans)
                    .HasForeignKey(d => d.CustomerKey)
                    .HasConstraintName("FK_Doc10000Trans_Customer");
            });

            modelBuilder.Entity<Doc10000TransDetail>(entity =>
            {
                entity.HasKey(e => e.Doc10000TransDetailKey)
                    .HasName("PK_Doc10000TransDetail");

                entity.Property(e => e.Doc10000TransDetailKey).HasColumnName("DOC_10000_TRANS_DETAIL_KEY");

                entity.Property(e => e.Doc10000TransKey).HasColumnName("DOC_10000_TRANS_KEY");

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");

                entity.HasOne(d => d.Doc10000TransKeyNavigation)
                    .WithMany(p => p.Doc10000TransDetail)
                    .HasForeignKey(d => d.Doc10000TransKey)
                    .HasConstraintName("FK_Doc10000TransDetail_Doc10000Trans");

                entity.HasOne(d => d.TransDetailKeyNavigation)
                    .WithMany(p => p.Doc10000TransDetail)
                    .HasForeignKey(d => d.TransDetailKey)
                    .HasConstraintName("FK_Doc10000TransDetail_TransDetail");
            });

            modelBuilder.Entity<DocImage>(entity =>
            {
                entity.HasKey(e => e.DocimageKey)
                    .HasName("IX_DOCIMAGE_DOCIMAGE_KEY");

                entity.HasIndex(e => e.DateEntered)
                    .HasName("IX_DOCIMAGE_DATE_ENTERED");

                entity.HasIndex(e => e.ImageName)
                    .HasName("IX_DOCIMAGE_IMAGE_NAME");

                entity.Property(e => e.DocimageKey).HasColumnName("DOCIMAGE_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DocData)
                    .IsRequired()
                    .HasColumnName("DOC_DATA")
                    .HasColumnType("text");

                entity.Property(e => e.ImageFormat)
                    .IsRequired()
                    .HasColumnName("IMAGE_FORMAT")
                    .HasColumnType("varchar(8)");

                entity.Property(e => e.ImageName)
                    .IsRequired()
                    .HasColumnName("IMAGE_NAME")
                    .HasColumnType("varchar(255)");

                entity.Property(e => e.ImageType)
                    .IsRequired()
                    .HasColumnName("IMAGE_TYPE")
                    .HasColumnType("char(3)");
            });

            modelBuilder.Entity<DocPrint>(entity =>
            {
                entity.HasKey(e => e.DocprintKey)
                    .HasName("PK_DocPrint");

                entity.HasIndex(e => e.CustomerKey)
                    .HasName("IX_DocPrint_CUSTOMER_KEY");

                entity.HasIndex(e => e.LoanKey)
                    .HasName("IX_DOCPRINT_LOAN_KEY");

                entity.Property(e => e.DocprintKey).HasColumnName("DOCPRINT_KEY");

                entity.Property(e => e.CashedCheckKey).HasColumnName("CASHED_CHECK_KEY");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DocData)
                    .IsRequired()
                    .HasColumnName("DOC_DATA")
                    .HasColumnType("text");

                entity.Property(e => e.DoctemplateKey).HasColumnName("DOCTEMPLATE_KEY");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");
            });

            modelBuilder.Entity<DocTemplate>(entity =>
            {
                entity.HasKey(e => e.DoctemplateKey)
                    .HasName("IX_DOCTEMPLATE_DOCTEMPLATE_KEY");

                entity.HasIndex(e => e.DateEntered)
                    .HasName("IX_DOCTEMPLATE_DATE_ENTERED");

                entity.Property(e => e.DoctemplateKey).HasColumnName("DOCTEMPLATE_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DocData)
                    .IsRequired()
                    .HasColumnName("DOC_DATA")
                    .HasColumnType("text");

                entity.Property(e => e.DocFormat)
                    .IsRequired()
                    .HasColumnName("DOC_FORMAT")
                    .HasColumnType("char(1)");

                entity.Property(e => e.DocName)
                    .IsRequired()
                    .HasColumnName("DOC_NAME")
                    .HasColumnType("varchar(255)");
            });

            modelBuilder.Entity<DocumentPrinting>(entity =>
            {
                entity.HasKey(e => e.DocumentPrintingKey)
                    .HasName("PK_DocumentPrinting");

                entity.Property(e => e.DocumentPrintingKey).HasColumnName("DOCUMENT_PRINTING_KEY");

                entity.Property(e => e.ComputerName)
                    .IsRequired()
                    .HasColumnName("COMPUTER_NAME")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.PrinterName)
                    .IsRequired()
                    .HasColumnName("PRINTER_NAME")
                    .HasColumnType("varchar(500)");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");
            });

            modelBuilder.Entity<DocumentResource>(entity =>
            {
                entity.HasKey(e => e.DocumentResourceKey)
                    .HasName("PK_DocumentResource");

                entity.HasIndex(e => e.ResourceName)
                    .HasName("UX_DocumentResource")
                    .IsUnique();

                entity.Property(e => e.DocumentResourceKey).HasColumnName("DOCUMENT_RESOURCE_KEY");

                entity.Property(e => e.CreatedBy).HasColumnName("CREATED_BY");

                entity.Property(e => e.CreatedDatetime)
                    .HasColumnName("CREATED_DATETIME")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Data)
                    .IsRequired()
                    .HasColumnName("DATA");

                entity.Property(e => e.IsActive).HasColumnName("IS_ACTIVE");

                entity.Property(e => e.MimeTypeKey).HasColumnName("MIME_TYPE_KEY");

                entity.Property(e => e.ResourceName)
                    .IsRequired()
                    .HasColumnName("RESOURCE_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.UpdatedBy).HasColumnName("UPDATED_BY");

                entity.Property(e => e.UpdatedDatetime)
                    .HasColumnName("UPDATED_DATETIME")
                    .HasColumnType("smalldatetime");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.DocumentResourceCreatedByNavigation)
                    .HasForeignKey(d => d.CreatedBy)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_DocumentResource_CREATEDBY_TELLERID");

                entity.HasOne(d => d.MimeTypeKeyNavigation)
                    .WithMany(p => p.DocumentResource)
                    .HasForeignKey(d => d.MimeTypeKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_DocumentResource_MimeType");

                entity.HasOne(d => d.UpdatedByNavigation)
                    .WithMany(p => p.DocumentResourceUpdatedByNavigation)
                    .HasForeignKey(d => d.UpdatedBy)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_DocumentResource_UpdatedBy_TELLERID");
            });

            modelBuilder.Entity<DocumentSigningStatus>(entity =>
            {
                entity.HasKey(e => e.DocumentSigningStatusKey)
                    .HasName("PK__Document__4852F188BEEE9ADF");

                entity.HasIndex(e => e.LoanApplicationKey)
                    .HasName("IX_DocumentSigningStatus_LOAN_APPLICATION_KEY")
                    .IsUnique();

                entity.Property(e => e.DocumentSigningStatusKey).HasColumnName("DOCUMENT_SIGNING_STATUS_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.GeneratedPin)
                    .IsRequired()
                    .HasColumnName("GENERATED_PIN")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.IsPinValidated).HasColumnName("IS_PIN_VALIDATED");

                entity.Property(e => e.LoanApplicationKey)
                    .IsRequired()
                    .HasColumnName("LOAN_APPLICATION_KEY");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.ValidatedDate)
                    .HasColumnName("VALIDATED_DATE")
                    .HasColumnType("smalldatetime");

                entity.HasOne(d => d.LoanApplicationKeyNavigation)
                    .WithOne(p => p.DocumentSigningStatus)
                    .HasForeignKey<DocumentSigningStatus>(d => d.LoanApplicationKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK__DocumentS__LOAN___6403B6FE");

                entity.HasOne(d => d.LoanKeyNavigation)
                    .WithMany(p => p.DocumentSigningStatus)
                    .HasForeignKey(d => d.LoanKey)
                    .HasConstraintName("FK__DocumentS__LOAN___64F7DB37");
            });

            modelBuilder.Entity<DocuwareCabinet>(entity =>
            {
                entity.HasKey(e => e.DocuwareCabinetKey)
                    .HasName("PK_DOCUWARE_CABINET_KEY");

                entity.Property(e => e.DocuwareCabinetKey).HasColumnName("DOCUWARE_CABINET_KEY");

                entity.Property(e => e.CabinetDbTable)
                    .IsRequired()
                    .HasColumnName("CABINET_DB_TABLE")
                    .HasColumnType("varchar(64)");

                entity.Property(e => e.DwReferenceLookup)
                    .HasColumnName("DW_REFERENCE_LOOKUP")
                    .HasColumnType("varchar(128)");

                entity.Property(e => e.ServerId).HasColumnName("SERVER_ID");
            });

            modelBuilder.Entity<DocuwareLoanLkup>(entity =>
            {
                entity.HasKey(e => e.DocuwareLoanLkupKey)
                    .HasName("PK_DOCUWARE_LOAN_LKUP");

                entity.HasIndex(e => e.LoanKey)
                    .HasName("IX_DocuwareLoanLkup_LOAN_KEY");

                entity.Property(e => e.DocuwareLoanLkupKey).HasColumnName("DOCUWARE_LOAN_LKUP_KEY");

                entity.Property(e => e.DocuwareCabinetKey).HasColumnName("DOCUWARE_CABINET_KEY");

                entity.Property(e => e.Dwdocid).HasColumnName("DWDOCID");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.HasOne(d => d.DocuwareCabinetKeyNavigation)
                    .WithMany(p => p.DocuwareLoanLkup)
                    .HasForeignKey(d => d.DocuwareCabinetKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_DOCUWARE_LOAN_LKUP_DocuwareCabinet");

                entity.HasOne(d => d.LoanKeyNavigation)
                    .WithMany(p => p.DocuwareLoanLkup)
                    .HasForeignKey(d => d.LoanKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_DOCUWARE_LOAN_LKUP_Loan");
            });

            modelBuilder.Entity<DocuwareStatus>(entity =>
            {
                entity.HasKey(e => e.DocuwarestatusKey)
                    .HasName("PK_DOCUWARESTATUS_KEY");

                entity.HasIndex(e => new { e.DocDate, e.Location, e.DocType })
                    .HasName("IX_DocuwareStatus_DOC_DATE_LOCATION_DOC_TYPE");

                entity.Property(e => e.DocuwarestatusKey).HasColumnName("DOCUWARESTATUS_KEY");

                entity.Property(e => e.DocDate)
                    .HasColumnName("DOC_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.DocType)
                    .HasColumnName("DOC_TYPE")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Dwdocid).HasColumnName("DWDOCID");

                entity.Property(e => e.IgnoreDate)
                    .HasColumnName("IGNORE_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.IgnoreTeller)
                    .HasColumnName("IGNORE_TELLER")
                    .HasColumnType("varchar(3)");

                entity.Property(e => e.IgnoreType)
                    .HasColumnName("IGNORE_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.Location).HasColumnName("LOCATION");
            });

            modelBuilder.Entity<DrawerMaster>(entity =>
            {
                entity.HasKey(e => e.DrawerKey)
                    .HasName("PK_DrawerMaster");

                entity.HasIndex(e => new { e.Teller, e.Location })
                    .HasName("IX_DrawerMaster_TELLER_LOCATION");

                entity.Property(e => e.DrawerKey).HasColumnName("DRAWER_KEY");

                entity.Property(e => e.AuditCompleted).HasColumnName("AUDIT_COMPLETED");

                entity.Property(e => e.DrawerBagChkAmt)
                    .HasColumnName("DRAWER_BAG_CHK_AMT")
                    .HasColumnType("money");

                entity.Property(e => e.DrawerBagChkCnt).HasColumnName("DRAWER_BAG_CHK_CNT");

                entity.Property(e => e.DrawerCcard)
                    .HasColumnName("DRAWER_CCARD")
                    .HasColumnType("money");

                entity.Property(e => e.DrawerChk)
                    .HasColumnName("DRAWER_CHK")
                    .HasColumnType("money");

                entity.Property(e => e.DrawerChkCnt).HasColumnName("DRAWER_CHK_CNT");

                entity.Property(e => e.DrawerMisc)
                    .HasColumnName("DRAWER_MISC")
                    .HasColumnType("money");

                entity.Property(e => e.DrawerOpened)
                    .HasColumnName("DRAWER_OPENED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DrawerPra)
                    .HasColumnName("DRAWER_PRA")
                    .HasColumnType("money");

                entity.Property(e => e.DrawerPraCnt).HasColumnName("DRAWER_PRA_CNT");

                entity.Property(e => e.DrawerzKey).HasColumnName("DRAWERZ_KEY");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.PraDebit)
                    .HasColumnName("PRA_DEBIT")
                    .HasColumnType("money");

                entity.Property(e => e.PraDebitCount).HasColumnName("PRA_DEBIT_COUNT");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.DrawerzKeyNavigation)
                    .WithMany(p => p.DrawerMaster)
                    .HasForeignKey(d => d.DrawerzKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_DrawerMaster_DrawerZ");
            });

            modelBuilder.Entity<DrawerMasterParsedCash>(entity =>
            {
                entity.HasKey(e => e.DrawerMasterParsedCashKey)
                    .HasName("PK_DrawerMasterParsedCash");

                entity.HasIndex(e => e.DrawerKey)
                    .HasName("IX_DrawerMasterParsedCash_DRAWER_KEY");

                entity.Property(e => e.DrawerMasterParsedCashKey).HasColumnName("DRAWER_MASTER_PARSED_CASH_KEY");

                entity.Property(e => e.Amount)
                    .HasColumnName("AMOUNT")
                    .HasColumnType("money");

                entity.Property(e => e.DenominationKey).HasColumnName("DENOMINATION_KEY");

                entity.Property(e => e.DrawerKey).HasColumnName("DRAWER_KEY");

                entity.HasOne(d => d.DenominationKeyNavigation)
                    .WithMany(p => p.DrawerMasterParsedCash)
                    .HasForeignKey(d => d.DenominationKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_DrawerMasterParsedCash_Denomination");

                entity.HasOne(d => d.DrawerKeyNavigation)
                    .WithMany(p => p.DrawerMasterParsedCash)
                    .HasForeignKey(d => d.DrawerKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_DrawerMasterParsedCash_DrawerMaster");
            });

            modelBuilder.Entity<DrawerService>(entity =>
            {
                entity.HasKey(e => e.DrawerServiceKey)
                    .HasName("PK_DrawerService");

                entity.HasIndex(e => e.DrawerKey)
                    .HasName("IX_DrawerService_DRAWER_KEY");

                entity.HasIndex(e => new { e.DrawerKey, e.ServiceDetailKey })
                    .HasName("IX_DrawerService_SERVICE_DETAIL_KEY_DRAWER_KEY");

                entity.Property(e => e.DrawerServiceKey).HasColumnName("DRAWER_SERVICE_KEY");

                entity.Property(e => e.DrawerKey).HasColumnName("DRAWER_KEY");

                entity.Property(e => e.DrawerQty).HasColumnName("DRAWER_QTY");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.ServiceDetailKey).HasColumnName("SERVICE_DETAIL_KEY");

                entity.HasOne(d => d.DrawerKeyNavigation)
                    .WithMany(p => p.DrawerService)
                    .HasForeignKey(d => d.DrawerKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_DrawerService_DrawerMaster");

                entity.HasOne(d => d.ServiceDetailKeyNavigation)
                    .WithMany(p => p.DrawerService)
                    .HasForeignKey(d => d.ServiceDetailKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_DrawerService_ServiceDetail");
            });

            modelBuilder.Entity<DrawerX>(entity =>
            {
                entity.HasKey(e => e.DrawerxKey)
                    .HasName("PK_DrawerX");

                entity.Property(e => e.DrawerxKey).HasColumnName("DRAWERX_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DrawerxCcard)
                    .HasColumnName("DRAWERX_CCARD")
                    .HasColumnType("money");

                entity.Property(e => e.DrawerxMisc)
                    .HasColumnName("DRAWERX_MISC")
                    .HasColumnType("money");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");
            });

            modelBuilder.Entity<DrawerXservice>(entity =>
            {
                entity.HasKey(e => e.DrawerxServiceKey)
                    .HasName("PK_DrawerXService");

                entity.ToTable("DrawerXService");

                entity.Property(e => e.DrawerxServiceKey).HasColumnName("DRAWERX_SERVICE_KEY");

                entity.Property(e => e.DrawerxKey).HasColumnName("DRAWERX_KEY");

                entity.Property(e => e.DrawerxQty).HasColumnName("DRAWERX_QTY");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.ServiceDetailKey).HasColumnName("SERVICE_DETAIL_KEY");

                entity.HasOne(d => d.DrawerxKeyNavigation)
                    .WithMany(p => p.DrawerXservice)
                    .HasForeignKey(d => d.DrawerxKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_DrawerXService_DrawerX");

                entity.HasOne(d => d.ServiceDetailKeyNavigation)
                    .WithMany(p => p.DrawerXservice)
                    .HasForeignKey(d => d.ServiceDetailKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_DrawerXService_ServiceDetail");
            });

            modelBuilder.Entity<DrawerZ>(entity =>
            {
                entity.HasKey(e => e.DrawerzKey)
                    .HasName("PK_DrawerZ");

                entity.HasIndex(e => new { e.DrawerzKey, e.DateEntered, e.Teller })
                    .HasName("IX_DrawerZ_TELLER");

                entity.Property(e => e.DrawerzKey).HasColumnName("DRAWERZ_KEY");

                entity.Property(e => e.CntzCcard)
                    .HasColumnName("CNTZ_CCARD")
                    .HasColumnType("money");

                entity.Property(e => e.CntzMisc)
                    .HasColumnName("CNTZ_MISC")
                    .HasColumnType("money");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DrawerOpened)
                    .HasColumnName("DRAWER_OPENED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DrawerzBagChkAmt)
                    .HasColumnName("DRAWERZ_BAG_CHK_AMT")
                    .HasColumnType("money");

                entity.Property(e => e.DrawerzBagChkCnt).HasColumnName("DRAWERZ_BAG_CHK_CNT");

                entity.Property(e => e.DrawerzCcard)
                    .HasColumnName("DRAWERZ_CCARD")
                    .HasColumnType("money");

                entity.Property(e => e.DrawerzChk)
                    .HasColumnName("DRAWERZ_CHK")
                    .HasColumnType("money");

                entity.Property(e => e.DrawerzChkCnt).HasColumnName("DRAWERZ_CHK_CNT");

                entity.Property(e => e.DrawerzMisc)
                    .HasColumnName("DRAWERZ_MISC")
                    .HasColumnType("money");

                entity.Property(e => e.DrawerzPra)
                    .HasColumnName("DRAWERZ_PRA")
                    .HasColumnType("money");

                entity.Property(e => e.DrawerzPraCnt).HasColumnName("DRAWERZ_PRA_CNT");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.OsCategory)
                    .HasColumnName("OS_CATEGORY")
                    .HasColumnType("char(1)");

                entity.Property(e => e.OsReason)
                    .HasColumnName("OS_REASON")
                    .HasColumnType("varchar(1000)");

                entity.Property(e => e.PraDebit)
                    .HasColumnName("PRA_DEBIT")
                    .HasColumnType("money");

                entity.Property(e => e.PraDebitCount).HasColumnName("PRA_DEBIT_COUNT");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");
            });

            modelBuilder.Entity<DrawerZcash>(entity =>
            {
                entity.HasKey(e => e.DrawerzCashKey)
                    .HasName("PK_DrawerZCash");

                entity.ToTable("DrawerZCash");

                entity.HasIndex(e => new { e.DrawerzKey, e.CurrencyKey })
                    .HasName("IX_DrawerZCash_DRAWERZ_KEY_CURRENCY_KEY");

                entity.HasIndex(e => new { e.CurrencyKey, e.EnteredAmount, e.CalculatedAmount, e.DrawerzKey })
                    .HasName("IX_DrawerZCash_DRAWERZ_KEY");

                entity.Property(e => e.DrawerzCashKey).HasColumnName("DRAWERZ_CASH_KEY");

                entity.Property(e => e.CalculatedAmount)
                    .HasColumnName("CALCULATED_AMOUNT")
                    .HasColumnType("money");

                entity.Property(e => e.CurrencyKey).HasColumnName("CURRENCY_KEY");

                entity.Property(e => e.DrawerzKey).HasColumnName("DRAWERZ_KEY");

                entity.Property(e => e.EnteredAmount)
                    .HasColumnName("ENTERED_AMOUNT")
                    .HasColumnType("money");

                entity.HasOne(d => d.CurrencyKeyNavigation)
                    .WithMany(p => p.DrawerZcash)
                    .HasForeignKey(d => d.CurrencyKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_DrawerZCash_Currency");

                entity.HasOne(d => d.DrawerzKeyNavigation)
                    .WithMany(p => p.DrawerZcash)
                    .HasForeignKey(d => d.DrawerzKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_DrawerZCash_DrawerZ");
            });

            modelBuilder.Entity<DrawerZservice>(entity =>
            {
                entity.HasKey(e => e.DrawerzServiceKey)
                    .HasName("PK_DrawerZService");

                entity.ToTable("DrawerZService");

                entity.Property(e => e.DrawerzServiceKey).HasColumnName("DRAWERZ_SERVICE_KEY");

                entity.Property(e => e.CntzQty).HasColumnName("CNTZ_QTY");

                entity.Property(e => e.DrawerzKey).HasColumnName("DRAWERZ_KEY");

                entity.Property(e => e.DrawerzQty).HasColumnName("DRAWERZ_QTY");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.ServiceDetailKey).HasColumnName("SERVICE_DETAIL_KEY");

                entity.HasOne(d => d.DrawerzKeyNavigation)
                    .WithMany(p => p.DrawerZservice)
                    .HasForeignKey(d => d.DrawerzKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_DrawerZService_DrawerZ");

                entity.HasOne(d => d.ServiceDetailKeyNavigation)
                    .WithMany(p => p.DrawerZservice)
                    .HasForeignKey(d => d.ServiceDetailKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_DrawerZService_ServiceDetail");
            });

            modelBuilder.Entity<DualApprovalMessage>(entity =>
            {
                entity.HasKey(e => e.DualApprovalMessageKey)
                    .HasName("PK_DualApprovalMessage");

                entity.HasIndex(e => e.MessageId)
                    .HasName("UC_DualApprovalMessage_MessageId")
                    .IsUnique();

                entity.Property(e => e.DualApprovalMessageKey).HasColumnName("DUAL_APPROVAL_MESSAGE_KEY");

                entity.Property(e => e.ApprovalMessage)
                    .IsRequired()
                    .HasColumnName("APPROVAL_MESSAGE")
                    .HasColumnType("varchar(max)");

                entity.Property(e => e.MessageId).HasColumnName("MESSAGE_ID");
            });

            modelBuilder.Entity<EarnedCreditTrans>(entity =>
            {
                entity.HasKey(e => e.EarnedCreditTransKey)
                    .HasName("PK_EarnedCreditTrans");

                entity.Property(e => e.EarnedCreditTransKey).HasColumnName("EARNED_CREDIT_TRANS_KEY");

                entity.Property(e => e.CustomerEarnedCreditKey).HasColumnName("CUSTOMER_EARNED_CREDIT_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EarnedAmt)
                    .HasColumnName("EARNED_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Reversed).HasColumnName("REVERSED");

                entity.Property(e => e.ReversedDate)
                    .HasColumnName("REVERSED_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");

                entity.HasOne(d => d.CustomerEarnedCreditKeyNavigation)
                    .WithMany(p => p.EarnedCreditTrans)
                    .HasForeignKey(d => d.CustomerEarnedCreditKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_EarnedCreditTrans_CustomerEarnedCredit");

                entity.HasOne(d => d.TransDetailKeyNavigation)
                    .WithMany(p => p.EarnedCreditTrans)
                    .HasForeignKey(d => d.TransDetailKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_EarnedCreditTrans_TRANS_DETAIL_KEY");
            });

            modelBuilder.Entity<EarnedCreditType>(entity =>
            {
                entity.HasKey(e => e.EarnedCreditTypeKey)
                    .HasName("PK_EarnedCreditType");

                entity.Property(e => e.EarnedCreditTypeKey).HasColumnName("EARNED_CREDIT_TYPE_KEY");

                entity.Property(e => e.Account).HasColumnName("ACCOUNT");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.DisplayName)
                    .IsRequired()
                    .HasColumnName("DISPLAY_NAME")
                    .HasColumnType("varchar(15)");

                entity.Property(e => e.IsEnabled).HasColumnName("IS_ENABLED");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.UpdatedBy)
                    .HasColumnName("UPDATED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("UPDATED_DATE")
                    .HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<EmailDisposition>(entity =>
            {
                entity.HasKey(e => e.EmailDispositionKey)
                    .HasName("PK_EmailDisposition");

                entity.Property(e => e.EmailDispositionKey)
                    .HasColumnName("EMAIL_DISPOSITION_KEY")
                    .ValueGeneratedNever();

                entity.Property(e => e.Disposition)
                    .IsRequired()
                    .HasColumnName("DISPOSITION")
                    .HasColumnType("varchar(100)");
            });

            modelBuilder.Entity<EmailTemplate>(entity =>
            {
                entity.HasKey(e => e.EmailTemplateKey)
                    .HasName("PK_EMAILTEMPLATE");

                entity.HasIndex(e => e.EmailId)
                    .HasName("IX_EmailTemplate_EMAIL_ID")
                    .IsUnique();

                entity.Property(e => e.EmailTemplateKey).HasColumnName("EMAIL_TEMPLATE_KEY");

                entity.Property(e => e.BodyHtml)
                    .IsRequired()
                    .HasColumnName("BODY_HTML")
                    .HasColumnType("varchar(max)");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateUpdated)
                    .HasColumnName("DATE_UPDATED")
                    .HasColumnType("datetime");

                entity.Property(e => e.EmailFrom)
                    .IsRequired()
                    .HasColumnName("EMAIL_FROM")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.EmailId).HasColumnName("EMAIL_ID");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.IsActive).HasColumnName("IS_ACTIVE");

                entity.Property(e => e.Notes)
                    .IsRequired()
                    .HasColumnName("NOTES")
                    .HasColumnType("varchar(500)");

                entity.Property(e => e.SubjectLine)
                    .IsRequired()
                    .HasColumnName("SUBJECT_LINE")
                    .HasColumnType("varchar(500)");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasColumnName("UPDATED_BY")
                    .HasColumnType("char(3)");
            });

            modelBuilder.Entity<EndOfDayInventoryDetail>(entity =>
            {
                entity.HasKey(e => new { e.EodrKey, e.LoanKey })
                    .HasName("PK_EndOfDayInventoryDetail");

                entity.Property(e => e.EodrKey).HasColumnName("EODR_KEY");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.CabFeeReceivableAmt)
                    .HasColumnName("CAB_FEE_RECEIVABLE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Defaulted).HasColumnName("DEFAULTED");

                entity.Property(e => e.OnhandAmt)
                    .HasColumnName("ONHAND_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.RiBalance)
                    .HasColumnName("RI_BALANCE")
                    .HasColumnType("smallmoney");
            });

            modelBuilder.Entity<EndOfDayRpt>(entity =>
            {
                entity.HasKey(e => e.EodrKey)
                    .HasName("PK_EndOfDayRpt");

                entity.Property(e => e.EodrKey).HasColumnName("EODR_KEY");

                entity.Property(e => e.BalsheetKey).HasColumnName("BALSHEET_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.ReGen)
                    .HasColumnName("RE_GEN")
                    .HasColumnType("LOGICAL");

                entity.HasOne(d => d.BalsheetKeyNavigation)
                    .WithMany(p => p.EndOfDayRpt)
                    .HasForeignKey(d => d.BalsheetKey)
                    .HasConstraintName("FK_EndOfDayRpt_BalSheet");
            });

            modelBuilder.Entity<EndOfDayRptDetail>(entity =>
            {
                entity.HasKey(e => e.EodrDetKey)
                    .HasName("PK_EndOfDayRptDetail");

                entity.HasIndex(e => e.EodrKey)
                    .HasName("IX_EndOfDayRptDetail_EODR_KEY");

                entity.Property(e => e.EodrDetKey).HasColumnName("EODR_DET_KEY");

                entity.Property(e => e.Account1)
                    .HasColumnName("ACCOUNT1")
                    .HasColumnType("varchar(6)");

                entity.Property(e => e.Account2)
                    .HasColumnName("ACCOUNT2")
                    .HasColumnType("varchar(6)");

                entity.Property(e => e.Amount1)
                    .HasColumnName("AMOUNT1")
                    .HasColumnType("varchar(14)");

                entity.Property(e => e.Amount2)
                    .HasColumnName("AMOUNT2")
                    .HasColumnType("varchar(14)");

                entity.Property(e => e.EodrDesc)
                    .HasColumnName("EODR_DESC")
                    .HasColumnType("varchar(300)");

                entity.Property(e => e.EodrKey).HasColumnName("EODR_KEY");

                entity.Property(e => e.Fee1)
                    .HasColumnName("FEE1")
                    .HasColumnType("varchar(15)");

                entity.Property(e => e.Fee2)
                    .HasColumnName("FEE2")
                    .HasColumnType("varchar(15)");

                entity.Property(e => e.Footer)
                    .HasColumnName("FOOTER")
                    .HasColumnType("LOGICAL");

                entity.Property(e => e.Header)
                    .HasColumnName("HEADER")
                    .HasColumnType("LOGICAL");

                entity.Property(e => e.OrderNum).HasColumnName("ORDER_NUM");

                entity.Property(e => e.Qty1)
                    .HasColumnName("QTY1")
                    .HasColumnType("varchar(6)");

                entity.Property(e => e.Qty2)
                    .HasColumnName("QTY2")
                    .HasColumnType("varchar(6)");

                entity.HasOne(d => d.EodrKeyNavigation)
                    .WithMany(p => p.EndOfDayRptDetail)
                    .HasForeignKey(d => d.EodrKey)
                    .HasConstraintName("FK_EndOfDayRptDetail_EndOfDayRpt");
            });

            modelBuilder.Entity<EoscarBatch>(entity =>
            {
                entity.HasKey(e => e.EoscarBatchKey)
                    .HasName("PK_EOscarBatch");

                entity.ToTable("EOscarBatch");

                entity.Property(e => e.EoscarBatchKey).HasColumnName("EOSCAR_BATCH_KEY");

                entity.Property(e => e.BatchId).HasColumnName("BATCH_ID");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("date");

                entity.Property(e => e.QueueId).HasColumnName("QUEUE_ID");

                entity.Property(e => e.RawXml)
                    .IsRequired()
                    .HasColumnName("RAW_XML")
                    .HasColumnType("varchar(max)");

                entity.Property(e => e.SendRecv)
                    .IsRequired()
                    .HasColumnName("SEND_RECV")
                    .HasColumnType("char(1)");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.TellerNavigation)
                    .WithMany(p => p.EoscarBatch)
                    .HasPrincipalKey(p => p.Teller)
                    .HasForeignKey(d => d.Teller)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_EOscarBatchTeller");
            });

            modelBuilder.Entity<EoscarBatchDetail>(entity =>
            {
                entity.HasKey(e => e.EoscarBatchDetailKey)
                    .HasName("PK_EOscarBatchDetail");

                entity.ToTable("EOscarBatchDetail");

                entity.Property(e => e.EoscarBatchDetailKey).HasColumnName("EOSCAR_BATCH_DETAIL_KEY");

                entity.Property(e => e.AcdvControlNumber)
                    .IsRequired()
                    .HasColumnName("ACDV_CONTROL_NUMBER")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.AcdvIdentifier).HasColumnName("ACDV_IDENTIFIER");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.EoscarBatchKeyRecv).HasColumnName("EOSCAR_BATCH_KEY_RECV");

                entity.Property(e => e.EoscarBatchKeySent).HasColumnName("EOSCAR_BATCH_KEY_SENT");

                entity.Property(e => e.ManualExport).HasColumnName("MANUAL_EXPORT");

                entity.Property(e => e.ManualReview).HasColumnName("MANUAL_REVIEW");

                entity.Property(e => e.Processed).HasColumnName("PROCESSED");

                entity.Property(e => e.RisreptKey).HasColumnName("RISREPT_KEY");

                entity.Property(e => e.XmlRecv)
                    .IsRequired()
                    .HasColumnName("XML_RECV")
                    .HasColumnType("varchar(max)");

                entity.Property(e => e.XmlSent)
                    .HasColumnName("XML_SENT")
                    .HasColumnType("varchar(max)");

                entity.HasOne(d => d.EoscarBatchKeyRecvNavigation)
                    .WithMany(p => p.EoscarBatchDetailEoscarBatchKeyRecvNavigation)
                    .HasForeignKey(d => d.EoscarBatchKeyRecv)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_EOscarBatchDetail_EOscarBatch_R");

                entity.HasOne(d => d.EoscarBatchKeySentNavigation)
                    .WithMany(p => p.EoscarBatchDetailEoscarBatchKeySentNavigation)
                    .HasForeignKey(d => d.EoscarBatchKeySent)
                    .HasConstraintName("FK_EOscarBatchDetail_EOscarBatch_S");
            });

            modelBuilder.Entity<EoscarDetailDisputeCode>(entity =>
            {
                entity.HasKey(e => e.EoscarDetailDisputeCodeKey)
                    .HasName("PK_EOscarDetailDisputeCode");

                entity.ToTable("EOscarDetailDisputeCode");

                entity.Property(e => e.EoscarDetailDisputeCodeKey).HasColumnName("EOSCAR_DETAIL_DISPUTE_CODE_KEY");

                entity.Property(e => e.EoscarBatchDetailKey).HasColumnName("EOSCAR_BATCH_DETAIL_KEY");

                entity.Property(e => e.EoscarDisputeCodeKey).HasColumnName("EOSCAR_DISPUTE_CODE_KEY");

                entity.HasOne(d => d.EoscarBatchDetailKeyNavigation)
                    .WithMany(p => p.EoscarDetailDisputeCode)
                    .HasForeignKey(d => d.EoscarBatchDetailKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_EOscarDetailDisputeCode_EOscarBatchDetail");

                entity.HasOne(d => d.EoscarDisputeCodeKeyNavigation)
                    .WithMany(p => p.EoscarDetailDisputeCode)
                    .HasForeignKey(d => d.EoscarDisputeCodeKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_EOscarDetailDisputeCode_EOscarDisputeCode");
            });

            modelBuilder.Entity<EoscarDisputeCode>(entity =>
            {
                entity.HasKey(e => e.EoscarDisputeCodeKey)
                    .HasName("PK_EOscarDisputeCode");

                entity.ToTable("EOscarDisputeCode");

                entity.Property(e => e.EoscarDisputeCodeKey).HasColumnName("EOSCAR_DISPUTE_CODE_KEY");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(max)");

                entity.Property(e => e.DisputeCode)
                    .IsRequired()
                    .HasColumnName("DISPUTE_CODE")
                    .HasColumnType("varchar(5)");

                entity.Property(e => e.ManualProcess).HasColumnName("MANUAL_PROCESS");
            });

            modelBuilder.Entity<ErrorLog>(entity =>
            {
                entity.HasKey(e => e.ErrorLogKey)
                    .HasName("PK_ErrorLog");

                entity.HasIndex(e => e.ApplicationKey)
                    .HasName("IX_ErrorLog_APPLICATION_KEY");

                entity.HasIndex(e => e.Browser)
                    .HasName("IX_ErrorLog_Browser");

                entity.HasIndex(e => e.Client)
                    .HasName("IX_ErrorLog_Client");

                entity.HasIndex(e => e.CustomerKey)
                    .HasName("ErrorLog_CUSTOMER_KEY");

                entity.HasIndex(e => e.DateEntered)
                    .HasName("IX_ErrorLog_DateEntered");

                entity.HasIndex(e => e.DateEnteredDay)
                    .HasName("IX_ErrorLog_DateEnteredDay");

                entity.HasIndex(e => e.DateEnteredHour)
                    .HasName("IX_ErrorLog_DateEnteredHour");

                entity.HasIndex(e => e.DateEnteredMinute)
                    .HasName("IX_ErrorLog_DateEnteredMinute");

                entity.HasIndex(e => e.ErrorMessage)
                    .HasName("IX_ErrorLog_ErrorMessage");

                entity.HasIndex(e => e.Severity)
                    .HasName("IX_ErrorLog_Severity");

                entity.HasIndex(e => e.VisitorKey)
                    .HasName("IX_ErrorLog_VISITOR_KEY");

                entity.HasIndex(e => new { e.WebServer, e.AppServer })
                    .HasName("IX_ErrorLog_WebServer_AppServer");

                entity.Property(e => e.AppServer).HasColumnType("varchar(30)");

                entity.Property(e => e.ApplicationKey).HasColumnName("APPLICATION_KEY");

                entity.Property(e => e.Browser).HasColumnType("varchar(50)");

                entity.Property(e => e.Client).HasColumnType("varchar(30)");

                entity.Property(e => e.CodeLocation).HasColumnType("varchar(100)");

                entity.Property(e => e.CurrentPage).HasColumnType("varchar(200)");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered).HasColumnType("datetime");

                entity.Property(e => e.DateEnteredDay).HasColumnType("datetime");

                entity.Property(e => e.DateEnteredHour).HasColumnType("datetime");

                entity.Property(e => e.DateEnteredMinute).HasColumnType("datetime");

                entity.Property(e => e.ErrorMessage)
                    .IsRequired()
                    .HasColumnType("varchar(250)");

                entity.Property(e => e.ExceptionText).HasColumnType("varchar(max)");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.ReferringPage).HasColumnType("varchar(200)");

                entity.Property(e => e.StateDump).HasColumnType("varchar(max)");

                entity.Property(e => e.SupportMessage).HasColumnType("varchar(1000)");

                entity.Property(e => e.Tier).HasColumnType("varchar(30)");

                entity.Property(e => e.UserAgent).HasColumnType("varchar(500)");

                entity.Property(e => e.VisitorKey).HasColumnName("VISITOR_KEY");

                entity.Property(e => e.WebServer).HasColumnType("varchar(30)");

                entity.HasOne(d => d.ApplicationKeyNavigation)
                    .WithMany(p => p.ErrorLog)
                    .HasForeignKey(d => d.ApplicationKey)
                    .HasConstraintName("FK_ErrorLog_LoanApplication");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.ErrorLog)
                    .HasForeignKey(d => d.CustomerKey)
                    .HasConstraintName("FK_ErrorLog_Customer");

                entity.HasOne(d => d.LoanKeyNavigation)
                    .WithMany(p => p.ErrorLog)
                    .HasForeignKey(d => d.LoanKey)
                    .HasConstraintName("FK_ErrorLog_Loan");
            });

            modelBuilder.Entity<ErrorLogBase>(entity =>
            {
                entity.HasKey(e => e.ErrorLogKey)
                    .HasName("PK___ErrorLo__41C172931CA66270");

                entity.ToTable("_ErrorLogBase");

                entity.HasIndex(e => e.Client)
                    .HasName("IX__ErrorLogBase_Client");

                entity.HasIndex(e => e.ErrorMessage)
                    .HasName("IX__ErrorLogBase_ErrorMessage");

                entity.HasIndex(e => e.Severity)
                    .HasName("IX__ErrorLogBase_Severity");

                entity.HasIndex(e => e.Tier)
                    .HasName("IX__ErrorLogBase_Tier");

                entity.HasIndex(e => new { e.ErrorMessage, e.DateEntered })
                    .HasName("IX__ErrorLogBase_DateEntered");

                entity.Property(e => e.ErrorLogKey).ValueGeneratedNever();

                entity.Property(e => e.AppServer).HasColumnType("varchar(30)");

                entity.Property(e => e.ApplicationKey).HasColumnName("APPLICATION_KEY");

                entity.Property(e => e.Browser).HasColumnType("varchar(50)");

                entity.Property(e => e.Client).HasColumnType("varchar(30)");

                entity.Property(e => e.CodeLocation).HasColumnType("varchar(100)");

                entity.Property(e => e.CurrentPage).HasColumnType("varchar(200)");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered).HasColumnType("datetime");

                entity.Property(e => e.DateEnteredDay).HasColumnType("datetime");

                entity.Property(e => e.DateEnteredHour).HasColumnType("datetime");

                entity.Property(e => e.DateEnteredMinute).HasColumnType("datetime");

                entity.Property(e => e.ErrorMessage)
                    .IsRequired()
                    .HasColumnType("varchar(250)");

                entity.Property(e => e.ExceptionText).HasColumnType("varchar(max)");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.ReferringPage).HasColumnType("varchar(200)");

                entity.Property(e => e.StateDump).HasColumnType("varchar(max)");

                entity.Property(e => e.SupportMessage).HasColumnType("varchar(1000)");

                entity.Property(e => e.Tier).HasColumnType("varchar(30)");

                entity.Property(e => e.UserAgent).HasColumnType("varchar(500)");

                entity.Property(e => e.VisitorKey).HasColumnName("VISITOR_KEY");

                entity.Property(e => e.WebServer).HasColumnType("varchar(30)");
            });

            modelBuilder.Entity<EsignLoan>(entity =>
            {
                entity.HasKey(e => e.LoanKey)
                    .HasName("PK_ESignLoan");

                entity.ToTable("ESignLoan");

                entity.HasIndex(e => new { e.EsignStatusKey, e.DateEntered, e.LoanKey })
                    .HasName("IX_ESignLoan_DATE_ENTERED_ESIGN_STATUS_KEY");

                entity.Property(e => e.LoanKey)
                    .HasColumnName("LOAN_KEY")
                    .ValueGeneratedNever();

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Document).HasColumnName("DOCUMENT");

                entity.Property(e => e.EsignStatusKey).HasColumnName("ESIGN_STATUS_KEY");

                entity.Property(e => e.IsSubmitted).HasColumnName("IS_SUBMITTED");

                entity.Property(e => e.SubmitError)
                    .HasColumnName("SUBMIT_ERROR")
                    .HasColumnType("varchar(500)");

                entity.HasOne(d => d.EsignStatusKeyNavigation)
                    .WithMany(p => p.EsignLoan)
                    .HasForeignKey(d => d.EsignStatusKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_ESignLoan_ESignLoanStatus");
            });

            modelBuilder.Entity<EsignLoanStatus>(entity =>
            {
                entity.HasKey(e => e.EsignStatusKey)
                    .HasName("PK_ESignLoanStatus");

                entity.ToTable("ESignLoanStatus");

                entity.Property(e => e.EsignStatusKey)
                    .HasColumnName("ESIGN_STATUS_KEY")
                    .ValueGeneratedNever();

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(30)");
            });

            modelBuilder.Entity<EsignOptIn>(entity =>
            {
                entity.HasKey(e => e.EsignOptInKey)
                    .HasName("PK_ESignOptIn");

                entity.ToTable("ESignOptIn");

                entity.Property(e => e.EsignOptInKey).HasColumnName("ESIGN_OPT_IN_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EsignOptInDocKey).HasColumnName("ESIGN_OPT_IN_DOC_KEY");

                entity.Property(e => e.Location).HasColumnName("LOCATION");
            });

            modelBuilder.Entity<EsignOptInDoc>(entity =>
            {
                entity.HasKey(e => e.EsignOptInDocKey)
                    .HasName("PK_ESignOptInDoc");

                entity.ToTable("ESignOptInDoc");

                entity.Property(e => e.EsignOptInDocKey).HasColumnName("ESIGN_OPT_IN_DOC_KEY");

                entity.Property(e => e.DateUpdated)
                    .HasColumnName("DATE_UPDATED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DocName)
                    .HasColumnName("DOC_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.DocXml)
                    .HasColumnName("DOC_XML")
                    .HasColumnType("varchar(max)");

                entity.Property(e => e.Language)
                    .HasColumnName("LANGUAGE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasColumnName("UPDATED_BY")
                    .HasColumnType("char(3)");
            });

            modelBuilder.Entity<ExchangeRate>(entity =>
            {
                entity.HasKey(e => e.ExchangeRateKey)
                    .HasName("PK_ExchangeRate");

                entity.Property(e => e.ExchangeRateKey).HasColumnName("EXCHANGE_RATE_KEY");

                entity.Property(e => e.AccessesRemaining).HasColumnName("ACCESSES_REMAINING");

                entity.Property(e => e.AccessesSoFar).HasColumnName("ACCESSES_SO_FAR");

                entity.Property(e => e.CurrencyBaseCode)
                    .IsRequired()
                    .HasColumnName("CURRENCY_BASE_CODE")
                    .HasColumnType("varchar(3)");

                entity.Property(e => e.CurrencyCode)
                    .IsRequired()
                    .HasColumnName("CURRENCY_CODE")
                    .HasColumnType("varchar(3)");

                entity.Property(e => e.CurrencyInverseRate)
                    .HasColumnName("CURRENCY_INVERSE_RATE")
                    .HasColumnType("decimal");

                entity.Property(e => e.CurrencyName)
                    .IsRequired()
                    .HasColumnName("CURRENCY_NAME")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.CurrencyRate)
                    .HasColumnName("CURRENCY_RATE")
                    .HasColumnType("decimal");

                entity.Property(e => e.LastUpdated)
                    .HasColumnName("LAST_UPDATED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UtcTimeStamp)
                    .HasColumnName("UTC_TIME_STAMP")
                    .HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<ExchangeRateDaily>(entity =>
            {
                entity.HasKey(e => e.ExchangeRateDailyKey)
                    .HasName("PK_ExchangeRateDaily");

                entity.Property(e => e.ExchangeRateDailyKey).HasColumnName("EXCHANGE_RATE_DAILY_KEY");

                entity.Property(e => e.BaseCurrencyCode)
                    .IsRequired()
                    .HasColumnName("BASE_CURRENCY_CODE")
                    .HasColumnType("char(3)");

                entity.Property(e => e.CurrencyCode)
                    .IsRequired()
                    .HasColumnName("CURRENCY_CODE")
                    .HasColumnType("char(3)");

                entity.Property(e => e.ExchangeRateDate)
                    .HasColumnName("EXCHANGE_RATE_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.Rate)
                    .HasColumnName("RATE")
                    .HasColumnType("decimal");
            });

            modelBuilder.Entity<ExcludeFromCapsHistory>(entity =>
            {
                entity.HasKey(e => e.ExcludeFromCapsHistoryKey)
                    .HasName("PK_ExcludeFromCapsHistory");

                entity.HasIndex(e => e.LoanKey)
                    .HasName("IX_ExcludeFromCapsHistory_LOAN_KEY");

                entity.Property(e => e.ExcludeFromCapsHistoryKey).HasColumnName("EXCLUDE_FROM_CAPS_HISTORY_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ExcludeFromCaps).HasColumnName("EXCLUDE_FROM_CAPS");

                entity.Property(e => e.ExcludeFromCapsAch).HasColumnName("EXCLUDE_FROM_CAPS_ACH");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.OptOutReason)
                    .IsRequired()
                    .HasColumnName("OPT_OUT_REASON")
                    .HasColumnType("varchar(250)");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.LoanKeyNavigation)
                    .WithMany(p => p.ExcludeFromCapsHistory)
                    .HasForeignKey(d => d.LoanKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_ExcludeFromCapsHistory_Loan");

                entity.HasOne(d => d.LocationNavigation)
                    .WithMany(p => p.ExcludeFromCapsHistory)
                    .HasForeignKey(d => d.Location)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_ExcludeFromCapsHistory_Company");

                entity.HasOne(d => d.TellerNavigation)
                    .WithMany(p => p.ExcludeFromCapsHistory)
                    .HasPrincipalKey(p => p.Teller)
                    .HasForeignKey(d => d.Teller)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_ExcludeFromCapsHistory_TellerID");
            });

            modelBuilder.Entity<ExpenseType>(entity =>
            {
                entity.HasKey(e => e.ExpenseTypeKey)
                    .HasName("PK_ExpenseType");

                entity.HasIndex(e => e.Code)
                    .HasName("UC_ExpenseType_Code")
                    .IsUnique();

                entity.Property(e => e.ExpenseTypeKey).HasColumnName("EXPENSE_TYPE_KEY");

                entity.Property(e => e.Code).HasColumnName("CODE");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.HelpDescription)
                    .IsRequired()
                    .HasColumnName("HELP_DESCRIPTION")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");
            });

            modelBuilder.Entity<ExperianCardValidation>(entity =>
            {
                entity.HasKey(e => e.ExperianCardValidationKey)
                    .HasName("PK_ExperianCardValidation_EXPERIAN_CARD_VALIDATION_KEY");

                entity.HasIndex(e => e.LoanApplicationKey)
                    .HasName("IX_ExperianCardValidation_LOAN_APPLICATION_KEY");

                entity.HasIndex(e => new { e.DateEntered, e.SuccessfullyVerified, e.Token })
                    .HasName("IX_ExperianCardValidation_TOKEN");

                entity.Property(e => e.ExperianCardValidationKey).HasColumnName("EXPERIAN_CARD_VALIDATION_KEY");

                entity.Property(e => e.AbaMatchResult)
                    .HasColumnName("ABA_MATCH_RESULT")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.AvsMatched).HasColumnName("AVS_MATCHED");

                entity.Property(e => e.CallName)
                    .IsRequired()
                    .HasColumnName("CALL_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.CardConditionCode).HasColumnName("CARD_CONDITION_CODE");

                entity.Property(e => e.CardConditionReason).HasColumnName("CARD_CONDITION_REASON");

                entity.Property(e => e.CardConditionSeverity)
                    .HasColumnName("CARD_CONDITION_SEVERITY")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.CardIssuerName)
                    .HasColumnName("CARD_ISSUER_NAME")
                    .HasColumnType("varchar(255)");

                entity.Property(e => e.CardSchemeName)
                    .HasColumnName("CARD_SCHEME_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.CardSubType)
                    .HasColumnName("CARD_SUB_TYPE")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.CardType)
                    .HasColumnName("CARD_TYPE")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.CvvMatched).HasColumnName("CVV_MATCHED");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.LoanApplicationKey).HasColumnName("LOAN_APPLICATION_KEY");

                entity.Property(e => e.PostcodeMatched).HasColumnName("POSTCODE_MATCHED");

                entity.Property(e => e.PreAuthorised)
                    .HasColumnName("PRE_AUTHORISED")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.RawResponseData)
                    .HasColumnName("RAW_RESPONSE_DATA")
                    .HasColumnType("varchar(max)");

                entity.Property(e => e.ResponseId)
                    .HasColumnName("RESPONSE_ID")
                    .HasColumnType("varchar(255)");

                entity.Property(e => e.SentData)
                    .IsRequired()
                    .HasColumnName("SENT_DATA")
                    .HasColumnType("varchar(max)");

                entity.Property(e => e.SuccessfullyVerified).HasColumnName("SUCCESSFULLY_VERIFIED");

                entity.Property(e => e.Token)
                    .IsRequired()
                    .HasColumnName("TOKEN")
                    .HasColumnType("varchar(40)");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.ExperianCardValidation)
                    .HasForeignKey(d => d.CustomerKey)
                    .HasConstraintName("FK_ExperianCardValidation_CUSTOMER_KEY");

                entity.HasOne(d => d.LoanApplicationKeyNavigation)
                    .WithMany(p => p.ExperianCardValidation)
                    .HasForeignKey(d => d.LoanApplicationKey)
                    .HasConstraintName("FK_ExperianCardValidation_LOAN_APPLICATION_KEY");
            });

            modelBuilder.Entity<ExternalAppConfig>(entity =>
            {
                entity.HasKey(e => e.ExternalAppConfigKey)
                    .HasName("PK_ExternalAppConfig_ExternalAppConfigKey");

                entity.Property(e => e.ExternalAppConfigKey).HasColumnName("EXTERNAL_APP_CONFIG_KEY");

                entity.Property(e => e.ConfigName)
                    .IsRequired()
                    .HasColumnName("CONFIG_NAME")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.ConfigValue)
                    .IsRequired()
                    .HasColumnName("CONFIG_VALUE")
                    .HasColumnType("varchar(1000)");

                entity.Property(e => e.ExternalAppsKey).HasColumnName("EXTERNAL_APPS_KEY");

                entity.HasOne(d => d.ExternalAppsKeyNavigation)
                    .WithMany(p => p.ExternalAppConfig)
                    .HasForeignKey(d => d.ExternalAppsKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_ExternalAppConfig_ExternalAppsKey");
            });

            modelBuilder.Entity<ExternalAppMaster>(entity =>
            {
                entity.HasKey(e => e.ExternalAppMasterKey)
                    .HasName("PK_ExternalAppMaster");

                entity.Property(e => e.ExternalAppMasterKey).HasColumnName("EXTERNAL_APP_MASTER_KEY");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(255)");

                entity.Property(e => e.DtsOrExe)
                    .IsRequired()
                    .HasColumnName("DTS_OR_EXE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.LastResult)
                    .IsRequired()
                    .HasColumnName("LAST_RESULT")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.LastRunDate)
                    .HasColumnName("LAST_RUN_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.NextRunDate)
                    .HasColumnName("NEXT_RUN_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RunFile)
                    .IsRequired()
                    .HasColumnName("RUN_FILE")
                    .HasColumnType("varchar(255)");

                entity.Property(e => e.RunStartFolder)
                    .IsRequired()
                    .HasColumnName("RUN_START_FOLDER")
                    .HasColumnType("varchar(255)");

                entity.Property(e => e.ServerName)
                    .IsRequired()
                    .HasColumnName("SERVER_NAME")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.StatusDesc)
                    .IsRequired()
                    .HasColumnName("STATUS_DESC")
                    .HasColumnType("varchar(64)");

                entity.Property(e => e.TaskName)
                    .IsRequired()
                    .HasColumnName("TASK_NAME")
                    .HasColumnType("varchar(100)");
            });

            modelBuilder.Entity<ExternalAppRunDates>(entity =>
            {
                entity.HasKey(e => e.ExternalAppsRunDatesKey)
                    .HasName("PK_ACHDATES_KEY");

                entity.Property(e => e.ExternalAppsRunDatesKey).HasColumnName("EXTERNAL_APPS_RUN_DATES_KEY");

                entity.Property(e => e.ExternalAppsKey).HasColumnName("EXTERNAL_APPS_KEY");

                entity.Property(e => e.Priority)
                    .HasColumnName("priority")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.RunDate)
                    .HasColumnName("RUN_DATE")
                    .HasColumnType("date");

                entity.HasOne(d => d.ExternalAppsKeyNavigation)
                    .WithMany(p => p.ExternalAppRunDates)
                    .HasForeignKey(d => d.ExternalAppsKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_ACHDATES_EXERNALAPPS");
            });

            modelBuilder.Entity<ExternalApps>(entity =>
            {
                entity.HasKey(e => e.ExternalAppsKey)
                    .HasName("PK_ExternalApps_ExternalAppsKey");

                entity.Property(e => e.ExternalAppsKey).HasColumnName("EXTERNAL_APPS_KEY");

                entity.Property(e => e.AppDescription)
                    .HasColumnName("APP_DESCRIPTION")
                    .HasColumnType("varchar(300)");

                entity.Property(e => e.AppInstance)
                    .HasColumnName("APP_INSTANCE")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.AppName)
                    .IsRequired()
                    .HasColumnName("APP_NAME")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.CmdNamedArg)
                    .HasColumnName("CMD_NAMED_ARG")
                    .HasColumnType("varchar(50)");
            });

            modelBuilder.Entity<FcrmAmlCheckTypeXref>(entity =>
            {
                entity.HasKey(e => e.FcrmAmlChecktypeXrefKey)
                    .HasName("PK_FcrmAmlCheckTypeXref");

                entity.HasIndex(e => new { e.FcrmAmlTransCodeKey, e.CheckTypeKey })
                    .HasName("UX_FcrmAmlCheckTypeXref_FCRM_AML_TRANS_CODE_KEY_CHECK_TYPE_KEY")
                    .IsUnique();

                entity.Property(e => e.FcrmAmlChecktypeXrefKey).HasColumnName("FCRM_AML_CHECKTYPE_XREF_KEY");

                entity.Property(e => e.CheckTypeKey).HasColumnName("CHECK_TYPE_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.FcrmAmlTransCodeKey).HasColumnName("FCRM_AML_TRANS_CODE_KEY");

                entity.HasOne(d => d.FcrmAmlTransCodeKeyNavigation)
                    .WithMany(p => p.FcrmAmlCheckTypeXref)
                    .HasForeignKey(d => d.FcrmAmlTransCodeKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_FcrmAmlCheckTypeXref_FCRM_AML_TRANS_CODE_KEY");
            });

            modelBuilder.Entity<FcrmAmlServiceXref>(entity =>
            {
                entity.HasKey(e => e.FcrmAmlServiceXrefKey)
                    .HasName("PK_FcrmAmlServiceXRefKey");

                entity.ToTable("FcrmAmlServiceXRef");

                entity.HasIndex(e => new { e.FcrmAmlTransCodeKey, e.ServiceMasterKey })
                    .HasName("UX_FcrmAmlServiceXRef_FCRM_AML_TRANS_CODE_KEY_SERVICE_MASTER_KEY")
                    .IsUnique();

                entity.Property(e => e.FcrmAmlServiceXrefKey).HasColumnName("FCRM_AML_SERVICE_XREF_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.FcrmAmlTransCodeKey).HasColumnName("FCRM_AML_TRANS_CODE_KEY");

                entity.Property(e => e.ServiceMasterKey).HasColumnName("SERVICE_MASTER_KEY");

                entity.HasOne(d => d.FcrmAmlTransCodeKeyNavigation)
                    .WithMany(p => p.FcrmAmlServiceXref)
                    .HasForeignKey(d => d.FcrmAmlTransCodeKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_FcrmAmlServiceXRef_FCRM_AML_TRANS_CODE_KEY");
            });

            modelBuilder.Entity<FcrmAmlTransCode>(entity =>
            {
                entity.HasKey(e => e.FcrmAmlTransCodeKey)
                    .HasName("PK_FcrmAmlTransCodeKey");

                entity.Property(e => e.FcrmAmlTransCodeKey).HasColumnName("FCRM_AML_TRANS_CODE_KEY");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasColumnType("char(10)");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DateUpdated)
                    .HasColumnName("DATE_UPDATED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.DuplicateCashRecord).HasColumnName("DUPLICATE_CASH_RECORD");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.IsEnabled).HasColumnName("IS_ENABLED");

                entity.Property(e => e.UpdatedBy)
                    .HasColumnName("UPDATED_BY")
                    .HasColumnType("char(3)");
            });

            modelBuilder.Entity<FcrmAmlTransCodeXref>(entity =>
            {
                entity.HasKey(e => e.FcrmAmlTransCodeXrefKey)
                    .HasName("PK_FcrmAmlTransCodeXRefKey");

                entity.ToTable("FcrmAmlTransCodeXRef");

                entity.HasIndex(e => new { e.FcrmAmlTransCodeKey, e.TransCode })
                    .HasName("UX_FcrmAmlTransCodeXRef_FCRM_AML_TRANS_CODE_KEY_TRANS_CODE")
                    .IsUnique();

                entity.Property(e => e.FcrmAmlTransCodeXrefKey).HasColumnName("FCRM_AML_TRANS_CODE_XREF_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.FcrmAmlTransCodeKey).HasColumnName("FCRM_AML_TRANS_CODE_KEY");

                entity.Property(e => e.TransCode).HasColumnName("TRANS_CODE");

                entity.HasOne(d => d.FcrmAmlTransCodeKeyNavigation)
                    .WithMany(p => p.FcrmAmlTransCodeXref)
                    .HasForeignKey(d => d.FcrmAmlTransCodeKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_FcrmAmlTransCodeXRef_FCRM_AML_TRANS_CODE_KEY");
            });

            modelBuilder.Entity<ForceApprovalQuestion>(entity =>
            {
                entity.HasKey(e => e.ForceApprovalQuestionKey)
                    .HasName("PK_Force_Approval_Question");

                entity.Property(e => e.ForceApprovalQuestionKey).HasColumnName("FORCE_APPROVAL_QUESTION_KEY");

                entity.Property(e => e.IsActive).HasColumnName("IS_ACTIVE");

                entity.Property(e => e.IsStatementRelated).HasColumnName("IS_STATEMENT_RELATED");

                entity.Property(e => e.Question)
                    .IsRequired()
                    .HasColumnName("QUESTION")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.QuestionId).HasColumnName("QUESTION_ID");
            });

            modelBuilder.Entity<ForceApprovalValue>(entity =>
            {
                entity.HasKey(e => e.ForceApprovalValueKey)
                    .HasName("PK_FORCEAPPROVALVALUE");

                entity.Property(e => e.ForceApprovalValueKey).HasColumnName("FORCE_APPROVAL_VALUE_KEY");

                entity.Property(e => e.BankStatementSupplied).HasColumnName("BANK_STATEMENT_SUPPLIED");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ForceApprovalQuestionKey).HasColumnName("FORCE_APPROVAL_QUESTION_KEY");

                entity.Property(e => e.LoanApplicationKey).HasColumnName("LOAN_APPLICATION_KEY");

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasColumnName("VALUE")
                    .HasColumnType("varchar(100)");
            });

            modelBuilder.Entity<FormLetter>(entity =>
            {
                entity.HasKey(e => e.FormLetterKey)
                    .HasName("PK_FormLetter");

                entity.Property(e => e.FormLetterKey).HasColumnName("FORM_LETTER_KEY");

                entity.Property(e => e.AddDaysToFollowupDate).HasColumnName("ADD_DAYS_TO_FOLLOWUP_DATE");

                entity.Property(e => e.AfterDays).HasColumnName("AFTER_DAYS");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DateUpdated)
                    .HasColumnName("DATE_UPDATED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy)
                    .HasColumnName("DELETED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.DeletedDate)
                    .HasColumnName("DELETED_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.ExcludeSecondLienLoans).HasColumnName("EXCLUDE_SECOND_LIEN_LOANS");

                entity.Property(e => e.FormLetterBody)
                    .HasColumnName("FORM_LETTER_BODY")
                    .HasColumnType("text");

                entity.Property(e => e.FormLetterDescription)
                    .IsRequired()
                    .HasColumnName("FORM_LETTER_DESCRIPTION")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.FormLetterName)
                    .IsRequired()
                    .HasColumnName("FORM_LETTER_NAME")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.IncludeLoanHistory).HasColumnName("INCLUDE_LOAN_HISTORY");

                entity.Property(e => e.IncludePayments).HasColumnName("INCLUDE_PAYMENTS");

                entity.Property(e => e.IsActive).HasColumnName("IS_ACTIVE");

                entity.Property(e => e.IsAdAstra).HasColumnName("IS_AD_ASTRA");

                entity.Property(e => e.IsAdAstraAchLetter).HasColumnName("IS_AD_ASTRA_ACH_LETTER");

                entity.Property(e => e.IsAfterCreditReport).HasColumnName("IS_AFTER_CREDIT_REPORT");

                entity.Property(e => e.IsDeleted).HasColumnName("IS_DELETED");

                entity.Property(e => e.IsInitialLetter).HasColumnName("IS_INITIAL_LETTER");

                entity.Property(e => e.IsLoanInactive).HasColumnName("IS_LOAN_INACTIVE");

                entity.Property(e => e.IsLoanMatured).HasColumnName("IS_LOAN_MATURED");

                entity.Property(e => e.IsLoanMaturedOrInactive).HasColumnName("IS_LOAN_MATURED_OR_INACTIVE");

                entity.Property(e => e.IsLoanNotInactive).HasColumnName("IS_LOAN_NOT_INACTIVE");

                entity.Property(e => e.IsLoanNotMatured).HasColumnName("IS_LOAN_NOT_MATURED");

                entity.Property(e => e.IsLoanNotMaturedOrNotInactive).HasColumnName("IS_LOAN_NOT_MATURED_OR_NOT_INACTIVE");

                entity.Property(e => e.IsUkArrearsNotice).HasColumnName("IS_UK_ARREARS_NOTICE");

                entity.Property(e => e.KeepAddressWhenMailReturned).HasColumnName("KEEP_ADDRESS_WHEN_MAIL_RETURNED");

                entity.Property(e => e.Language)
                    .IsRequired()
                    .HasColumnName("LANGUAGE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.LetterOrder).HasColumnName("LETTER_ORDER");

                entity.Property(e => e.MaximumAaAge).HasColumnName("MAXIMUM_AA_AGE");

                entity.Property(e => e.MaximumCyclesPastDue).HasColumnName("MAXIMUM_CYCLES_PAST_DUE");

                entity.Property(e => e.MaximumRiAge).HasColumnName("MAXIMUM_RI_AGE");

                entity.Property(e => e.MaximumRiAmount)
                    .HasColumnName("MAXIMUM_RI_AMOUNT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.MinimumAaAge).HasColumnName("MINIMUM_AA_AGE");

                entity.Property(e => e.MinimumBalance)
                    .HasColumnName("MINIMUM_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.MinimumCyclesPastDue).HasColumnName("MINIMUM_CYCLES_PAST_DUE");

                entity.Property(e => e.MinimumRiAge).HasColumnName("MINIMUM_RI_AGE");

                entity.Property(e => e.MinimumRiAmount)
                    .HasColumnName("MINIMUM_RI_AMOUNT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.OnDemandPrompt1)
                    .IsRequired()
                    .HasColumnName("ON_DEMAND_PROMPT_1")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.OnDemandPrompt2)
                    .IsRequired()
                    .HasColumnName("ON_DEMAND_PROMPT_2")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.OnDemandPrompt3)
                    .IsRequired()
                    .HasColumnName("ON_DEMAND_PROMPT_3")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.OnDemandPrompt4)
                    .IsRequired()
                    .HasColumnName("ON_DEMAND_PROMPT_4")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.OnDemandPrompt5)
                    .IsRequired()
                    .HasColumnName("ON_DEMAND_PROMPT_5")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.PrintAfterCollDate)
                    .HasColumnName("PRINT_AFTER_COLL_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RiskAssessment)
                    .HasColumnName("RISK_ASSESSMENT")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.SetAuditCodeKey).HasColumnName("SET_AUDIT_CODE_KEY");

                entity.Property(e => e.SetToPrevAuditId).HasColumnName("SET_TO_PREV_AUDIT_ID");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasColumnName("UPDATED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.UseAdastraSdsUploadPath).HasColumnName("USE_ADASTRA_SDS_UPLOAD_PATH");

                entity.Property(e => e.UseLastKnownAddress).HasColumnName("USE_LAST_KNOWN_ADDRESS");

                entity.HasOne(d => d.SetAuditCodeKeyNavigation)
                    .WithMany(p => p.FormLetter)
                    .HasForeignKey(d => d.SetAuditCodeKey)
                    .HasConstraintName("FK_FormLetter_RisAudit");
            });

            modelBuilder.Entity<FormLetterAfterLetterXref>(entity =>
            {
                entity.HasKey(e => new { e.FormLetterKey, e.AfterFormLetterKey })
                    .HasName("PK_FormLetterAfterLetterXRef");

                entity.ToTable("FormLetterAfterLetterXRef");

                entity.Property(e => e.FormLetterKey).HasColumnName("FORM_LETTER_KEY");

                entity.Property(e => e.AfterFormLetterKey).HasColumnName("AFTER_FORM_LETTER_KEY");

                entity.HasOne(d => d.AfterFormLetterKeyNavigation)
                    .WithMany(p => p.FormLetterAfterLetterXrefAfterFormLetterKeyNavigation)
                    .HasForeignKey(d => d.AfterFormLetterKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_FormLetterAfterLetterXRef_AFTER_FORM_LETTER_KEY");

                entity.HasOne(d => d.FormLetterKeyNavigation)
                    .WithMany(p => p.FormLetterAfterLetterXrefFormLetterKeyNavigation)
                    .HasForeignKey(d => d.FormLetterKey)
                    .HasConstraintName("FK_FormLetterAfterLetterXRef_FORM_LETTER_KEY");
            });

            modelBuilder.Entity<FormLetterAuditCode>(entity =>
            {
                entity.HasKey(e => new { e.FormLetterKey, e.AuditCodeKey })
                    .HasName("PK_FormLetterAuditCode");

                entity.HasIndex(e => e.FormLetterKey)
                    .HasName("IX_FormLetterAuditCode_FORM_LETTER_KEY");

                entity.Property(e => e.FormLetterKey).HasColumnName("FORM_LETTER_KEY");

                entity.Property(e => e.AuditCodeKey).HasColumnName("AUDIT_CODE_KEY");

                entity.HasOne(d => d.AuditCodeKeyNavigation)
                    .WithMany(p => p.FormLetterAuditCode)
                    .HasForeignKey(d => d.AuditCodeKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_FormLetterAuditCode_RisAudit");

                entity.HasOne(d => d.FormLetterKeyNavigation)
                    .WithMany(p => p.FormLetterAuditCode)
                    .HasForeignKey(d => d.FormLetterKey)
                    .HasConstraintName("FK_FormLetterAuditCode_FormLetter");
            });

            modelBuilder.Entity<FormLetterBatch>(entity =>
            {
                entity.HasKey(e => e.FormLetterBatchKey)
                    .HasName("PK_FormLetterBatch");

                entity.HasIndex(e => new { e.UploadOrDownload, e.IsAdAstra, e.FormLetterBatchStatusKey })
                    .HasName("IX_FormLetterBatch_UpOrDown_IsAdAstra_FormLtrBatchStatusKey");

                entity.Property(e => e.FormLetterBatchKey).HasColumnName("FORM_LETTER_BATCH_KEY");

                entity.Property(e => e.BatchDate)
                    .HasColumnName("BATCH_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.BatchStatusDatetime)
                    .HasColumnName("BATCH_STATUS_DATETIME")
                    .HasColumnType("datetime");

                entity.Property(e => e.BatchStep).HasColumnName("BATCH_STEP");

                entity.Property(e => e.FormLetterBatchStatusKey).HasColumnName("FORM_LETTER_BATCH_STATUS_KEY");

                entity.Property(e => e.IsAdAstra).HasColumnName("IS_AD_ASTRA");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.UploadOrDownload)
                    .IsRequired()
                    .HasColumnName("UPLOAD_OR_DOWNLOAD")
                    .HasColumnType("char(1)");

                entity.HasOne(d => d.FormLetterBatchStatusKeyNavigation)
                    .WithMany(p => p.FormLetterBatch)
                    .HasForeignKey(d => d.FormLetterBatchStatusKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_FormLetterBatch_FORM_LETTER_BATCH_STATUS_KEY");
            });

            modelBuilder.Entity<FormLetterBatchBuildLetterProgress>(entity =>
            {
                entity.HasKey(e => e.FormLetterBatchBuildLetterProgressKey)
                    .HasName("PK_FormLetterBatchBuildLetterProgress");

                entity.Property(e => e.FormLetterBatchBuildLetterProgressKey).HasColumnName("FORM_LETTER_BATCH_BUILD_LETTER_PROGRESS_KEY");

                entity.Property(e => e.BuildComplete).HasColumnName("BUILD_COMPLETE");

                entity.Property(e => e.FormLetterBatchKey).HasColumnName("FORM_LETTER_BATCH_KEY");

                entity.Property(e => e.FormLetterKey).HasColumnName("FORM_LETTER_KEY");
            });

            modelBuilder.Entity<FormLetterBatchStatus>(entity =>
            {
                entity.HasKey(e => e.FormLetterBatchStatusKey)
                    .HasName("PK_FormLetterBatchStatus");

                entity.Property(e => e.FormLetterBatchStatusKey)
                    .HasColumnName("FORM_LETTER_BATCH_STATUS_KEY")
                    .ValueGeneratedNever();

                entity.Property(e => e.StatusDesc)
                    .IsRequired()
                    .HasColumnName("STATUS_DESC")
                    .HasColumnType("varchar(50)");
            });

            modelBuilder.Entity<FormLetterBatchValidation>(entity =>
            {
                entity.HasKey(e => e.FormLetterBatchValidationKey)
                    .HasName("PK_FormLetterBatchValidation");

                entity.HasIndex(e => new { e.FormLetterBatchKey, e.FormLetterKey })
                    .HasName("UX_FormLetterBatchValidation")
                    .IsUnique();

                entity.Property(e => e.FormLetterBatchValidationKey).HasColumnName("FORM_LETTER_BATCH_VALIDATION_KEY");

                entity.Property(e => e.DateTimeEntered)
                    .HasColumnName("DATE_TIME_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.FormLetterBatchKey).HasColumnName("FORM_LETTER_BATCH_KEY");

                entity.Property(e => e.FormLetterKey).HasColumnName("FORM_LETTER_KEY");

                entity.Property(e => e.FormLetterName)
                    .IsRequired()
                    .HasColumnName("FORM_LETTER_NAME")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.ReceiveCount).HasColumnName("RECEIVE_COUNT");

                entity.Property(e => e.UploadCount).HasColumnName("UPLOAD_COUNT");
            });

            modelBuilder.Entity<FormLetterBatchVendorFile>(entity =>
            {
                entity.HasKey(e => e.FormLetterBatchBuildVendorFileKey)
                    .HasName("PK_FormLetterBatchVendorFile");

                entity.HasIndex(e => new { e.FileName, e.Uploaded, e.FormLetterBatchBuildVendorFileKey, e.FormLetterBatchKey, e.FormLetterKey })
                    .HasName("IX_Customer_FORM_LETTER_BATCH_KEY_FORM_LETTER_KEY");

                entity.Property(e => e.FormLetterBatchBuildVendorFileKey).HasColumnName("FORM_LETTER_BATCH_BUILD_VENDOR_FILE_KEY");

                entity.Property(e => e.FileName)
                    .HasColumnName("FILE_NAME")
                    .HasColumnType("varchar(150)");

                entity.Property(e => e.FormLetterBatchKey).HasColumnName("FORM_LETTER_BATCH_KEY");

                entity.Property(e => e.FormLetterKey).HasColumnName("FORM_LETTER_KEY");

                entity.Property(e => e.Uploaded).HasColumnName("UPLOADED");
            });

            modelBuilder.Entity<FormLetterConfig>(entity =>
            {
                entity.HasKey(e => e.FormLetterConfigKey)
                    .HasName("PK_FormLetterConfig");

                entity.Property(e => e.FormLetterConfigKey).HasColumnName("FORM_LETTER_CONFIG_KEY");

                entity.Property(e => e.EnableBatchValidation).HasColumnName("ENABLE_BATCH_VALIDATION");

                entity.Property(e => e.EnableDownloadBatch).HasColumnName("ENABLE_DOWNLOAD_BATCH");

                entity.Property(e => e.EnableUploadBatch).HasColumnName("ENABLE_UPLOAD_BATCH");

                entity.Property(e => e.FtpPassword)
                    .IsRequired()
                    .HasColumnName("FTP_PASSWORD")
                    .HasColumnType("varchar(66)");

                entity.Property(e => e.FtpUsername)
                    .IsRequired()
                    .HasColumnName("FTP_USERNAME")
                    .HasColumnType("varchar(66)");

                entity.Property(e => e.IsAdAstra).HasColumnName("IS_AD_ASTRA");
            });

            modelBuilder.Entity<FormLetterEmail>(entity =>
            {
                entity.HasKey(e => e.FormLetterEmailKey)
                    .HasName("PK_FormLetterEmail");

                entity.Property(e => e.FormLetterEmailKey).HasColumnName("FORM_LETTER_EMAIL_KEY");

                entity.Property(e => e.EmailAddress)
                    .IsRequired()
                    .HasColumnName("EMAIL_ADDRESS")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.IsAdastra).HasColumnName("IS_ADASTRA");
            });

            modelBuilder.Entity<FormLetterLoanHistoryFile>(entity =>
            {
                entity.HasKey(e => e.FormLetterLoanHistoryFileKey)
                    .HasName("PK_FormLetterLoanHistoryFile");

                entity.Property(e => e.FormLetterLoanHistoryFileKey).HasColumnName("FORM_LETTER_LOAN_HISTORY_FILE_KEY");

                entity.Property(e => e.FormLetterBatchKey).HasColumnName("FORM_LETTER_BATCH_KEY");

                entity.Property(e => e.FormLetterPrintedKey).HasColumnName("FORM_LETTER_PRINTED_KEY");

                entity.Property(e => e.LoanHistoryFileName)
                    .HasColumnName("LOAN_HISTORY_FILE_NAME")
                    .HasColumnType("varchar(150)");

                entity.Property(e => e.Uploaded).HasColumnName("UPLOADED");

                entity.Property(e => e.ZipFileName)
                    .HasColumnName("ZIP_FILE_NAME")
                    .HasColumnType("varchar(150)");
            });

            modelBuilder.Entity<FormLetterLoanHistoryState>(entity =>
            {
                entity.HasKey(e => e.FormLetterLoanHistoryState1)
                    .HasName("PK_FormLetterLoanHistoryState");

                entity.Property(e => e.FormLetterLoanHistoryState1)
                    .HasColumnName("FORM_LETTER_LOAN_HISTORY_STATE")
                    .HasColumnType("char(2)");
            });

            modelBuilder.Entity<FormLetterLocation>(entity =>
            {
                entity.HasKey(e => new { e.FormLetterKey, e.Location })
                    .HasName("PK_FormLetterLocation");

                entity.HasIndex(e => e.FormLetterKey)
                    .HasName("IX_FormLetterLocation_FORM_LETTER_KEY");

                entity.Property(e => e.FormLetterKey).HasColumnName("FORM_LETTER_KEY");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.HasOne(d => d.FormLetterKeyNavigation)
                    .WithMany(p => p.FormLetterLocation)
                    .HasForeignKey(d => d.FormLetterKey)
                    .HasConstraintName("FK_FormLetterLocation_FormLetter");

                entity.HasOne(d => d.LocationNavigation)
                    .WithMany(p => p.FormLetterLocation)
                    .HasForeignKey(d => d.Location)
                    .HasConstraintName("FK_FormLetterLocation_Company");
            });

            modelBuilder.Entity<FormLetterOnDemand>(entity =>
            {
                entity.HasKey(e => e.FormLetterOnDemandKey)
                    .HasName("PK_FormLetterOnDemand");

                entity.HasIndex(e => e.FormLetterKey)
                    .HasName("IX_FormLetterOnDemand_FORM_LETTER_KEY");

                entity.Property(e => e.FormLetterOnDemandKey).HasColumnName("FORM_LETTER_ON_DEMAND_KEY");

                entity.Property(e => e.CashedCheckKey).HasColumnName("CASHED_CHECK_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.FormLetterBatchKey).HasColumnName("FORM_LETTER_BATCH_KEY");

                entity.Property(e => e.FormLetterKey).HasColumnName("FORM_LETTER_KEY");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.OptplusCardDetailKey).HasColumnName("OPTPLUS_CARD_DETAIL_KEY");

                entity.Property(e => e.PromptData1)
                    .IsRequired()
                    .HasColumnName("PROMPT_DATA_1")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.PromptData2)
                    .IsRequired()
                    .HasColumnName("PROMPT_DATA_2")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.PromptData3)
                    .IsRequired()
                    .HasColumnName("PROMPT_DATA_3")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.PromptData4)
                    .IsRequired()
                    .HasColumnName("PROMPT_DATA_4")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.PromptData5)
                    .IsRequired()
                    .HasColumnName("PROMPT_DATA_5")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.CashedCheckKeyNavigation)
                    .WithMany(p => p.FormLetterOnDemand)
                    .HasForeignKey(d => d.CashedCheckKey)
                    .HasConstraintName("FK_FormLetterOnDemand_CashedCheckKey");

                entity.HasOne(d => d.FormLetterBatchKeyNavigation)
                    .WithMany(p => p.FormLetterOnDemand)
                    .HasForeignKey(d => d.FormLetterBatchKey)
                    .HasConstraintName("FK_FormLetterOnDemand_FormLetterBatch");

                entity.HasOne(d => d.FormLetterKeyNavigation)
                    .WithMany(p => p.FormLetterOnDemand)
                    .HasForeignKey(d => d.FormLetterKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_FormLetterOnDemand_FormLetter");

                entity.HasOne(d => d.LoanKeyNavigation)
                    .WithMany(p => p.FormLetterOnDemand)
                    .HasForeignKey(d => d.LoanKey)
                    .HasConstraintName("FK_FormLetterOnDemand_Loan");

                entity.HasOne(d => d.OptplusCardDetailKeyNavigation)
                    .WithMany(p => p.FormLetterOnDemand)
                    .HasForeignKey(d => d.OptplusCardDetailKey)
                    .HasConstraintName("FK_FormLetterOnDemand_OptPlusCardKey");
            });

            modelBuilder.Entity<FormLetterPrinted>(entity =>
            {
                entity.HasKey(e => e.FormLetterPrintedKey)
                    .HasName("PK_FormLetterPrinted");

                entity.HasIndex(e => e.FormLetterBatchKey)
                    .HasName("IX_FormLetterPrinted_FORM_LETTER_BATCH_KEY");

                entity.HasIndex(e => e.LoanKey)
                    .HasName("IX_FormLetterPrinted_LOAN_KEY");

                entity.HasIndex(e => e.PromiseToPayDetailKey)
                    .HasName("IX_FormLetterPrinted_PROMISE_TO_PAY_DETAIL_KEY");

                entity.HasIndex(e => e.RisreptKey)
                    .HasName("IX_FormLetterPrinted_RISREPT_KEY");

                entity.HasIndex(e => new { e.CustomerKey, e.Dwdocid })
                    .HasName("IX_FormLetterPrinted_CUSTOMER_KEY_DWDOCID");

                entity.HasIndex(e => new { e.FormLetterBatchKey, e.FormLetterKey, e.CashedCheckKey })
                    .HasName("IX_FormLetterPrinted_CASHED_CHECK_KEY");

                entity.HasIndex(e => new { e.FormLetterBatchKey, e.FormLetterKey, e.LoanKey })
                    .HasName("IX_FormLetterPrinted_1");

                entity.HasIndex(e => new { e.FormLetterKey, e.FormLetterResultFileType, e.LoanKey, e.FormLetterOnDemandKey, e.CashedCheckKey, e.FormLetterBatchKey })
                    .HasName("IX_FormLetterPrinted_3");

                entity.HasIndex(e => new { e.RisreptKey, e.LoanKey, e.PromiseToPayDetailKey, e.CustomerKey, e.CustomerAddressKey, e.FormLetterKey, e.FormLetterBatchKey, e.FormLetterOnDemandKey, e.CashedCheckKey, e.OptplusCardDetailKey, e.FormLetterResultFileType })
                    .HasName("IX_FormLetterPrinted_FORM_LETTER_RESULT_FILE_TYPE_ManyIncludes");

                entity.Property(e => e.FormLetterPrintedKey).HasColumnName("FORM_LETTER_PRINTED_KEY");

                entity.Property(e => e.CashedCheckKey).HasColumnName("CASHED_CHECK_KEY");

                entity.Property(e => e.CustomerAddressKey).HasColumnName("CUSTOMER_ADDRESS_KEY");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.Dwdocid).HasColumnName("DWDOCID");

                entity.Property(e => e.FormLetterBatchKey).HasColumnName("FORM_LETTER_BATCH_KEY");

                entity.Property(e => e.FormLetterKey).HasColumnName("FORM_LETTER_KEY");

                entity.Property(e => e.FormLetterOnDemandKey).HasColumnName("FORM_LETTER_ON_DEMAND_KEY");

                entity.Property(e => e.FormLetterResultFileType).HasColumnName("FORM_LETTER_RESULT_FILE_TYPE");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.OptplusCardDetailKey).HasColumnName("OPTPLUS_CARD_DETAIL_KEY");

                entity.Property(e => e.ProcessingStateKey).HasColumnName("PROCESSING_STATE_KEY");

                entity.Property(e => e.PromiseToPayDetailKey).HasColumnName("PROMISE_TO_PAY_DETAIL_KEY");

                entity.Property(e => e.RisreptKey).HasColumnName("RISREPT_KEY");

                entity.Property(e => e.VendorDatePrinted)
                    .HasColumnName("VENDOR_DATE_PRINTED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VendorJobCode)
                    .HasColumnName("VENDOR_JOB_CODE")
                    .HasColumnType("varchar(10)");

                entity.HasOne(d => d.CashedCheckKeyNavigation)
                    .WithMany(p => p.FormLetterPrinted)
                    .HasForeignKey(d => d.CashedCheckKey)
                    .HasConstraintName("FK_FormLetterPrinted_CashedCheckKey");

                entity.HasOne(d => d.CustomerAddressKeyNavigation)
                    .WithMany(p => p.FormLetterPrinted)
                    .HasForeignKey(d => d.CustomerAddressKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_FormLetterPrinted_CustomerAddress");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.FormLetterPrinted)
                    .HasForeignKey(d => d.CustomerKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_FormLetterPrinted_Customer");

                entity.HasOne(d => d.FormLetterBatchKeyNavigation)
                    .WithMany(p => p.FormLetterPrinted)
                    .HasForeignKey(d => d.FormLetterBatchKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_FormLetterPrinted_FormLetterBatch");

                entity.HasOne(d => d.FormLetterKeyNavigation)
                    .WithMany(p => p.FormLetterPrinted)
                    .HasForeignKey(d => d.FormLetterKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_FormLetterPrinted_FormLetter");

                entity.HasOne(d => d.FormLetterOnDemandKeyNavigation)
                    .WithMany(p => p.FormLetterPrinted)
                    .HasForeignKey(d => d.FormLetterOnDemandKey)
                    .HasConstraintName("FK_FormLetterPrinted_FormLetterOnDemand");

                entity.HasOne(d => d.LoanKeyNavigation)
                    .WithMany(p => p.FormLetterPrinted)
                    .HasForeignKey(d => d.LoanKey)
                    .HasConstraintName("FK_FormLetterPrinted_Loan");

                entity.HasOne(d => d.OptplusCardDetailKeyNavigation)
                    .WithMany(p => p.FormLetterPrinted)
                    .HasForeignKey(d => d.OptplusCardDetailKey)
                    .HasConstraintName("FK_FormLetterPrinted_OptPlusCardKey");

                entity.HasOne(d => d.PromiseToPayDetailKeyNavigation)
                    .WithMany(p => p.FormLetterPrinted)
                    .HasForeignKey(d => d.PromiseToPayDetailKey)
                    .HasConstraintName("FK_FormLetterPrinted_PromiseToPayDetail");

                entity.HasOne(d => d.RisreptKeyNavigation)
                    .WithMany(p => p.FormLetterPrinted)
                    .HasForeignKey(d => d.RisreptKey)
                    .HasConstraintName("FK_FormLetterPrinted_RISREPT");
            });

            modelBuilder.Entity<FormLetterProduct>(entity =>
            {
                entity.HasKey(e => new { e.FormLetterKey, e.ProductType, e.LoanType, e.LoanSubType })
                    .HasName("PK_FormLetterProduct");

                entity.HasIndex(e => e.FormLetterKey)
                    .HasName("IX_FormLetterProduct_FORM_LETTER_KEY");

                entity.Property(e => e.FormLetterKey).HasColumnName("FORM_LETTER_KEY");

                entity.Property(e => e.ProductType)
                    .HasColumnName("PRODUCT_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.LoanType)
                    .HasColumnName("LOAN_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.LoanSubType)
                    .HasColumnName("LOAN_SUB_TYPE")
                    .HasColumnType("char(1)");

                entity.HasOne(d => d.FormLetterKeyNavigation)
                    .WithMany(p => p.FormLetterProduct)
                    .HasForeignKey(d => d.FormLetterKey)
                    .HasConstraintName("FK_FormLetterProduct_FormLetter");
            });

            modelBuilder.Entity<FormLetterReplacesXref>(entity =>
            {
                entity.HasKey(e => new { e.FormLetterKey, e.DeletedFormLetterKey })
                    .HasName("PK_FormLetterReplacesXRef");

                entity.ToTable("FormLetterReplacesXRef");

                entity.HasIndex(e => e.FormLetterKey)
                    .HasName("IX_FormLetterReplacesXRef_FORM_LETTER_KEY");

                entity.Property(e => e.FormLetterKey).HasColumnName("FORM_LETTER_KEY");

                entity.Property(e => e.DeletedFormLetterKey).HasColumnName("DELETED_FORM_LETTER_KEY");

                entity.HasOne(d => d.DeletedFormLetterKeyNavigation)
                    .WithMany(p => p.FormLetterReplacesXrefDeletedFormLetterKeyNavigation)
                    .HasForeignKey(d => d.DeletedFormLetterKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_FormLetterReplacesXRef_DELETED_FORM_LETTER_KEY");

                entity.HasOne(d => d.FormLetterKeyNavigation)
                    .WithMany(p => p.FormLetterReplacesXrefFormLetterKeyNavigation)
                    .HasForeignKey(d => d.FormLetterKey)
                    .HasConstraintName("FK_FormLetterReplacesXRef_FORM_LETTER_KEY");
            });

            modelBuilder.Entity<FormLetterResult>(entity =>
            {
                entity.HasKey(e => e.FormLetterResultKey)
                    .HasName("PK_FormLetterResult");

                entity.HasIndex(e => e.CustomerKey)
                    .HasName("IX_FormLetterResult_CUSTOMER_KEY");

                entity.HasIndex(e => e.FormLetterPrintedKey)
                    .HasName("IX_FormLetterPrinted_PRINTED_KEY");

                entity.Property(e => e.FormLetterResultKey).HasColumnName("FORM_LETTER_RESULT_KEY");

                entity.Property(e => e.CustomerAddressKey).HasColumnName("CUSTOMER_ADDRESS_KEY");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.FormLetterBatchKey).HasColumnName("FORM_LETTER_BATCH_KEY");

                entity.Property(e => e.FormLetterPrintedKey).HasColumnName("FORM_LETTER_PRINTED_KEY");

                entity.Property(e => e.FormLetterResultDpvCode)
                    .IsRequired()
                    .HasColumnName("FORM_LETTER_RESULT_DPV_CODE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.FormLetterResultErrorCode)
                    .IsRequired()
                    .HasColumnName("FORM_LETTER_RESULT_ERROR_CODE")
                    .HasColumnType("varchar(4)");

                entity.Property(e => e.FormLetterResultFfwdCode)
                    .IsRequired()
                    .HasColumnName("FORM_LETTER_RESULT_FFWD_CODE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.FormLetterResultFileType).HasColumnName("FORM_LETTER_RESULT_FILE_TYPE");

                entity.Property(e => e.FormLetterResultRetCode)
                    .IsRequired()
                    .HasColumnName("FORM_LETTER_RESULT_RET_CODE")
                    .HasColumnType("char(2)");

                entity.Property(e => e.MailingSvcJobNum)
                    .IsRequired()
                    .HasColumnName("MAILING_SVC_JOB_NUM")
                    .HasColumnType("varchar(10)");

                entity.HasOne(d => d.CustomerAddressKeyNavigation)
                    .WithMany(p => p.FormLetterResult)
                    .HasForeignKey(d => d.CustomerAddressKey)
                    .HasConstraintName("FK_FormLetterResult_CustomerAddress");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.FormLetterResult)
                    .HasForeignKey(d => d.CustomerKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_FormLetterResult_Customer");

                entity.HasOne(d => d.FormLetterBatchKeyNavigation)
                    .WithMany(p => p.FormLetterResult)
                    .HasForeignKey(d => d.FormLetterBatchKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_FormLetterResult_FormLetterBatch");

                entity.HasOne(d => d.FormLetterPrintedKeyNavigation)
                    .WithMany(p => p.FormLetterResult)
                    .HasForeignKey(d => d.FormLetterPrintedKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_FormLetterResult_FormLetterPrinted");
            });

            modelBuilder.Entity<FurtherFinanceExecutionLog>(entity =>
            {
                entity.HasKey(e => e.FurtherFinanceExecutionLogKey)
                    .HasName("PK_FurtherFinanceExecutionLog");

                entity.Property(e => e.FurtherFinanceExecutionLogKey).HasColumnName("FURTHER_FINANCE_EXECUTION_LOG_KEY");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.FurtherFinanceParentOutcomeKey).HasColumnName("FURTHER_FINANCE_PARENT_OUTCOME_KEY");

                entity.Property(e => e.LoanApplicationKey).HasColumnName("LOAN_APPLICATION_KEY");

                entity.Property(e => e.LoanType)
                    .HasColumnName("LOAN_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.ProductType)
                    .HasColumnName("PRODUCT_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.Teller)
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.LoanApplicationKeyNavigation)
                    .WithMany(p => p.FurtherFinanceExecutionLog)
                    .HasForeignKey(d => d.LoanApplicationKey)
                    .HasConstraintName("FK_FurtherFinanceExecutionLog_LoanApplicationKey");
            });

            modelBuilder.Entity<FurtherFinanceExecutionLogDetail>(entity =>
            {
                entity.HasKey(e => e.FurtherFinanceExecutionLogDetailKey)
                    .HasName("PK_FurtherFinanceExecutionLogDetail");

                entity.Property(e => e.FurtherFinanceExecutionLogDetailKey).HasColumnName("FURTHER_FINANCE_EXECUTION_LOG_DETAIL_KEY");

                entity.Property(e => e.DisposableLimit)
                    .HasColumnName("DISPOSABLE_LIMIT")
                    .HasColumnType("money");

                entity.Property(e => e.FurtherFinanceAmt)
                    .HasColumnName("FURTHER_FINANCE_AMT")
                    .HasColumnType("money");

                entity.Property(e => e.FurtherFinanceAmtMessage)
                    .HasColumnName("FURTHER_FINANCE_AMT_MESSAGE")
                    .HasColumnType("varchar(255)");

                entity.Property(e => e.FurtherFinanceExecutionLogKey).HasColumnName("FURTHER_FINANCE_EXECUTION_LOG_KEY");

                entity.Property(e => e.FurtherFinanceOutcomeKey).HasColumnName("FURTHER_FINANCE_OUTCOME_KEY");

                entity.Property(e => e.FurtherFinanceQueryKey).HasColumnName("FURTHER_FINANCE_QUERY_KEY");

                entity.Property(e => e.LoanLimit)
                    .HasColumnName("LOAN_LIMIT")
                    .HasColumnType("money");

                entity.Property(e => e.LoanProductConfigKey).HasColumnName("LOAN_PRODUCT_CONFIG_KEY");

                entity.Property(e => e.LoanProductKey).HasColumnName("LOAN_PRODUCT_KEY");

                entity.Property(e => e.WageLimit)
                    .HasColumnName("WAGE_LIMIT")
                    .HasColumnType("money");

                entity.HasOne(d => d.FurtherFinanceExecutionLogKeyNavigation)
                    .WithMany(p => p.FurtherFinanceExecutionLogDetail)
                    .HasForeignKey(d => d.FurtherFinanceExecutionLogKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_FurtherFinanceExecutionLogDetail_FurtherFinanceExecutionLog");

                entity.HasOne(d => d.FurtherFinanceOutcomeKeyNavigation)
                    .WithMany(p => p.FurtherFinanceExecutionLogDetail)
                    .HasForeignKey(d => d.FurtherFinanceOutcomeKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_FurtherFinanceExecutionLogDetail_FurtherFinanceOutcome");

                entity.HasOne(d => d.FurtherFinanceQueryKeyNavigation)
                    .WithMany(p => p.FurtherFinanceExecutionLogDetail)
                    .HasForeignKey(d => d.FurtherFinanceQueryKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_FurtherFinanceExecutionLogDetail_FurtherFinanceQuery");

                entity.HasOne(d => d.LoanProductConfigKeyNavigation)
                    .WithMany(p => p.FurtherFinanceExecutionLogDetail)
                    .HasForeignKey(d => d.LoanProductConfigKey)
                    .HasConstraintName("FK_FurtherFinanceExecutionLogDetail_LoanProductConfig");

                entity.HasOne(d => d.LoanProductKeyNavigation)
                    .WithMany(p => p.FurtherFinanceExecutionLogDetail)
                    .HasForeignKey(d => d.LoanProductKey)
                    .HasConstraintName("FK_FurtherFinanceExecutionLogDetail_LoanProduct");
            });

            modelBuilder.Entity<FurtherFinanceJobType>(entity =>
            {
                entity.HasKey(e => e.FurtherFinanceJobTypeKey)
                    .HasName("PK_FurtherFinanceJobType");

                entity.Property(e => e.FurtherFinanceJobTypeKey).HasColumnName("FURTHER_FINANCE_JOB_TYPE_KEY");

                entity.Property(e => e.IncomeJobTypeKey).HasColumnName("INCOME_JOB_TYPE_KEY");

                entity.Property(e => e.Increase1)
                    .HasColumnName("INCREASE1")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Increase2)
                    .HasColumnName("INCREASE2")
                    .HasColumnType("smallmoney");

                entity.HasOne(d => d.IncomeJobTypeKeyNavigation)
                    .WithMany(p => p.FurtherFinanceJobType)
                    .HasForeignKey(d => d.IncomeJobTypeKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_FurtherFianceIncomeJobType");
            });

            modelBuilder.Entity<FurtherFinanceOutcome>(entity =>
            {
                entity.HasKey(e => e.FurtherFinanceOutcomeKey)
                    .HasName("PK_FurtherFinanceOutcome");

                entity.Property(e => e.FurtherFinanceOutcomeKey).HasColumnName("FURTHER_FINANCE_OUTCOME_KEY");

                entity.Property(e => e.OutcomeApprovalPct)
                    .HasColumnName("OUTCOME_APPROVAL_PCT")
                    .HasColumnType("decimal");

                entity.Property(e => e.OutcomeDescription)
                    .IsRequired()
                    .HasColumnName("OUTCOME_DESCRIPTION")
                    .HasColumnType("varchar(50)");
            });

            modelBuilder.Entity<FurtherFinanceQuery>(entity =>
            {
                entity.HasKey(e => e.FurtherFinanceQueryKey)
                    .HasName("PK_FurtherFinanceQuery");

                entity.Property(e => e.FurtherFinanceQueryKey).HasColumnName("FURTHER_FINANCE_QUERY_KEY");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(max)");

                entity.Property(e => e.QueryName)
                    .IsRequired()
                    .HasColumnName("QUERY_NAME")
                    .HasColumnType("varchar(50)");
            });

            modelBuilder.Entity<FurtherFinanceResult>(entity =>
            {
                entity.HasKey(e => e.FurtherFinanceResultKey)
                    .HasName("PK_FurtherFinanceResult");

                entity.HasIndex(e => e.CustomerKey)
                    .HasName("UX_CUSTOMER_KEY")
                    .IsUnique();

                entity.Property(e => e.FurtherFinanceResultKey).HasColumnName("FURTHER_FINANCE_RESULT_KEY");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.FurtherFinanceParentOutcomeKey).HasColumnName("FURTHER_FINANCE_PARENT_OUTCOME_KEY");

                entity.Property(e => e.LoanApplicationKey).HasColumnName("LOAN_APPLICATION_KEY");

                entity.Property(e => e.ProductTypeSelected)
                    .HasColumnName("PRODUCT_TYPE_SELECTED")
                    .HasColumnType("char(1)");

                entity.Property(e => e.Teller)
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithOne(p => p.FurtherFinanceResult)
                    .HasForeignKey<FurtherFinanceResult>(d => d.CustomerKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_FurtherFinanceCustomer_Customer");

                entity.HasOne(d => d.LoanApplicationKeyNavigation)
                    .WithMany(p => p.FurtherFinanceResult)
                    .HasForeignKey(d => d.LoanApplicationKey)
                    .HasConstraintName("FK_FurtherFinanceResult_LoanApplicationKey");
            });

            modelBuilder.Entity<FurtherFinanceResultDetail>(entity =>
            {
                entity.HasKey(e => e.FurtherFinanceResultDetailKey)
                    .HasName("PK_FurtherFinanceResultDetail");

                entity.HasIndex(e => e.FurtherFinanceResultKey)
                    .HasName("IX_FURTHER_FINANCE_RESULT_KEY");

                entity.Property(e => e.FurtherFinanceResultDetailKey).HasColumnName("FURTHER_FINANCE_RESULT_DETAIL_KEY");

                entity.Property(e => e.DisposableLimit)
                    .HasColumnName("DISPOSABLE_LIMIT")
                    .HasColumnType("money");

                entity.Property(e => e.FurtherFinanceAmt)
                    .HasColumnName("FURTHER_FINANCE_AMT")
                    .HasColumnType("money");

                entity.Property(e => e.FurtherFinanceAmtMessage)
                    .HasColumnName("FURTHER_FINANCE_AMT_MESSAGE")
                    .HasColumnType("varchar(255)");

                entity.Property(e => e.FurtherFinanceOutcomeKey).HasColumnName("FURTHER_FINANCE_OUTCOME_KEY");

                entity.Property(e => e.FurtherFinanceQueryKey).HasColumnName("FURTHER_FINANCE_QUERY_KEY");

                entity.Property(e => e.FurtherFinanceResultKey).HasColumnName("FURTHER_FINANCE_RESULT_KEY");

                entity.Property(e => e.LoanLimit)
                    .HasColumnName("LOAN_LIMIT")
                    .HasColumnType("money");

                entity.Property(e => e.LoanProductConfigKey).HasColumnName("LOAN_PRODUCT_CONFIG_KEY");

                entity.Property(e => e.LoanProductKey).HasColumnName("LOAN_PRODUCT_KEY");

                entity.Property(e => e.WageLimit)
                    .HasColumnName("WAGE_LIMIT")
                    .HasColumnType("money");

                entity.HasOne(d => d.FurtherFinanceOutcomeKeyNavigation)
                    .WithMany(p => p.FurtherFinanceResultDetail)
                    .HasForeignKey(d => d.FurtherFinanceOutcomeKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_FurtherFinanceResultDetail_FurtherFinanceOutcome");

                entity.HasOne(d => d.FurtherFinanceQueryKeyNavigation)
                    .WithMany(p => p.FurtherFinanceResultDetail)
                    .HasForeignKey(d => d.FurtherFinanceQueryKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_FurtherFinanceResultDetail_FurtherFinanceQuery");

                entity.HasOne(d => d.FurtherFinanceResultKeyNavigation)
                    .WithMany(p => p.FurtherFinanceResultDetail)
                    .HasForeignKey(d => d.FurtherFinanceResultKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_FurtherFinanceResultDetail_FurtherFinanceResult");

                entity.HasOne(d => d.LoanProductConfigKeyNavigation)
                    .WithMany(p => p.FurtherFinanceResultDetail)
                    .HasForeignKey(d => d.LoanProductConfigKey)
                    .HasConstraintName("FK_FurtherFinanceResultDetail_LoanProductConfig");

                entity.HasOne(d => d.LoanProductKeyNavigation)
                    .WithMany(p => p.FurtherFinanceResultDetail)
                    .HasForeignKey(d => d.LoanProductKey)
                    .HasConstraintName("FK_FurtherFinanceResultDetail_LoanProduct");
            });

            modelBuilder.Entity<GalileoResponseCode>(entity =>
            {
                entity.HasKey(e => e.GalileoResponseCodeKey)
                    .HasName("PK_GalileoResponseCode");

                entity.Property(e => e.GalileoResponseCodeKey).HasColumnName("GALILEO_RESPONSE_CODE_KEY");

                entity.Property(e => e.Code).HasColumnName("CODE");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasMaxLength(50);

                entity.Property(e => e.Detail)
                    .IsRequired()
                    .HasColumnName("DETAIL")
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<GiftCard>(entity =>
            {
                entity.HasKey(e => e.GiftCardKey)
                    .HasName("PK_GiftCard");

                entity.Property(e => e.GiftCardKey).HasColumnName("GIFT_CARD_KEY");

                entity.Property(e => e.CardAmount)
                    .HasColumnName("CARD_AMOUNT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CardData)
                    .IsRequired()
                    .HasColumnName("CARD_DATA")
                    .HasColumnType("varchar(150)");

                entity.Property(e => e.CardNumber)
                    .IsRequired()
                    .HasColumnName("CARD_NUMBER")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.ServiceDetailKey).HasColumnName("SERVICE_DETAIL_KEY");

                entity.HasOne(d => d.LocationNavigation)
                    .WithMany(p => p.GiftCard)
                    .HasForeignKey(d => d.Location)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_GiftCard_Location");

                entity.HasOne(d => d.ServiceDetailKeyNavigation)
                    .WithMany(p => p.GiftCard)
                    .HasForeignKey(d => d.ServiceDetailKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_GiftCard_ServiceDetail");
            });

            modelBuilder.Entity<Glacct>(entity =>
            {
                entity.HasKey(e => e.GlAcctKey)
                    .HasName("PK_GLAccount");

                entity.ToTable("GLAcct");

                entity.HasIndex(e => e.GlAcctNum)
                    .HasName("IX_GLAcct_GL_ACCT_NUM")
                    .IsUnique();

                entity.Property(e => e.GlAcctKey).HasColumnName("GL_ACCT_KEY");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.GlAcctNum).HasColumnName("GL_ACCT_NUM");

                entity.Property(e => e.IsAdastra).HasColumnName("IS_ADASTRA");

                entity.Property(e => e.IsNoncashAcct).HasColumnName("IS_NONCASH_ACCT");

                entity.Property(e => e.IsTitleAcct).HasColumnName("IS_TITLE_ACCT");

                entity.Property(e => e.IsTrecsCashAcct).HasColumnName("IS_TRECS_CASH_ACCT");
            });

            modelBuilder.Entity<GlacctGlobal>(entity =>
            {
                entity.HasKey(e => e.GlAcctGlobalKey)
                    .HasName("PK__GLAcctGl__2926E7F0384090AC");

                entity.ToTable("GLAcctGlobal");

                entity.Property(e => e.GlAcctGlobalKey).HasColumnName("GL_ACCT_GLOBAL_KEY");

                entity.Property(e => e.AdastraBadDebtCheckAcct).HasColumnName("ADASTRA_BAD_DEBT_CHECK_ACCT");

                entity.Property(e => e.AdastraCashAndChecksAcct).HasColumnName("ADASTRA_CASH_AND_CHECKS_ACCT");

                entity.Property(e => e.AdastraCentralTrustAcct).HasColumnName("ADASTRA_CENTRAL_TRUST_ACCT");

                entity.Property(e => e.AdastraCollectionAgencyReceivableAcct).HasColumnName("ADASTRA_COLLECTION_AGENCY_RECEIVABLE_ACCT");

                entity.Property(e => e.AdastraCommissionsApAcct).HasColumnName("ADASTRA_COMMISSIONS_AP_ACCT");

                entity.Property(e => e.AdastraCommissionsArAcct).HasColumnName("ADASTRA_COMMISSIONS_AR_ACCT");

                entity.Property(e => e.AdastraCommissionsExpenseAcct).HasColumnName("ADASTRA_COMMISSIONS_EXPENSE_ACCT");

                entity.Property(e => e.AdastraCommissionsFeesAcct).HasColumnName("ADASTRA_COMMISSIONS_FEES_ACCT");

                entity.Property(e => e.AdastraTrustProceedsApAcct).HasColumnName("ADASTRA_TRUST_PROCEEDS_AP_ACCT");

                entity.Property(e => e.CashInStoreAcct).HasColumnName("CASH_IN_STORE_ACCT");

                entity.Property(e => e.CashedCheckDiscountAcct).HasColumnName("CASHED_CHECK_DISCOUNT_ACCT");

                entity.Property(e => e.CashedCheckFlatFeesAcct).HasColumnName("CASHED_CHECK_FLAT_FEES_ACCT");

                entity.Property(e => e.CashedCheckPctFeesAcct).HasColumnName("CASHED_CHECK_PCT_FEES_ACCT");

                entity.Property(e => e.CashedCheckPostDatedAcct).HasColumnName("CASHED_CHECK_POST_DATED_ACCT");

                entity.Property(e => e.CcardFeeAcct).HasColumnName("CCARD_FEE_ACCT");

                entity.Property(e => e.CheckCollAcct).HasColumnName("CHECK_COLL_ACCT");

                entity.Property(e => e.CheckRiAcct).HasColumnName("CHECK_RI_ACCT");

                entity.Property(e => e.CourtesyPayoutAcct).HasColumnName("COURTESY_PAYOUT_ACCT");

                entity.Property(e => e.CurrencyExchangeFeeAcct).HasColumnName("CURRENCY_EXCHANGE_FEE_ACCT");

                entity.Property(e => e.CurrencyExchangeGainlossAcct).HasColumnName("CURRENCY_EXCHANGE_GAINLOSS_ACCT");

                entity.Property(e => e.CurrencyExchangeOnCheckAcct).HasColumnName("CURRENCY_EXCHANGE_ON_CHECK_ACCT");

                entity.Property(e => e.DepositBagsAcct).HasColumnName("DEPOSIT_BAGS_ACCT");

                entity.Property(e => e.GoldFeesPaidAcct).HasColumnName("GOLD_FEES_PAID_ACCT");

                entity.Property(e => e.GoldInvestmentAcct).HasColumnName("GOLD_INVESTMENT_ACCT");

                entity.Property(e => e.GoldLossesAcct).HasColumnName("GOLD_LOSSES_ACCT");

                entity.Property(e => e.GoldProcessFeeAcct).HasColumnName("GOLD_PROCESS_FEE_ACCT");

                entity.Property(e => e.GoldRevenueAcct).HasColumnName("GOLD_REVENUE_ACCT");

                entity.Property(e => e.GoldTransitAcct).HasColumnName("GOLD_TRANSIT_ACCT");

                entity.Property(e => e.InternalShortAcct).HasColumnName("INTERNAL_SHORT_ACCT");

                entity.Property(e => e.MpayInternetCollectionsAcct).HasColumnName("MPAY_INTERNET_COLLECTIONS_ACCT");

                entity.Property(e => e.MpayInternetCreditClearingAcct).HasColumnName("MPAY_INTERNET_CREDIT_CLEARING_ACCT");

                entity.Property(e => e.MpayInternetReturnsAcct).HasColumnName("MPAY_INTERNET_RETURNS_ACCT");

                entity.Property(e => e.MpayInternetRevenueAcct).HasColumnName("MPAY_INTERNET_REVENUE_ACCT");

                entity.Property(e => e.OendInternetCollectionsAcct).HasColumnName("OEND_INTERNET_COLLECTIONS_ACCT");

                entity.Property(e => e.OendInternetCreditClearingAcct).HasColumnName("OEND_INTERNET_CREDIT_CLEARING_ACCT");

                entity.Property(e => e.OendInternetReturnsAcct).HasColumnName("OEND_INTERNET_RETURNS_ACCT");

                entity.Property(e => e.OendInternetRevenueAcct).HasColumnName("OEND_INTERNET_REVENUE_ACCT");

                entity.Property(e => e.OptplusCollAcct).HasColumnName("OPTPLUS_COLL_ACCT");

                entity.Property(e => e.OptplusReturnsAcct).HasColumnName("OPTPLUS_RETURNS_ACCT");

                entity.Property(e => e.OverShortAcct).HasColumnName("OVER_SHORT_ACCT");

                entity.Property(e => e.SalesTaxAcct).HasColumnName("SALES_TAX_ACCT");

                entity.Property(e => e.SpayInternetCollectionsAcct).HasColumnName("SPAY_INTERNET_COLLECTIONS_ACCT");

                entity.Property(e => e.SpayInternetCreditClearingAcct).HasColumnName("SPAY_INTERNET_CREDIT_CLEARING_ACCT");

                entity.Property(e => e.SpayInternetReturnsAcct).HasColumnName("SPAY_INTERNET_RETURNS_ACCT");

                entity.Property(e => e.SpayInternetRevenueAcct).HasColumnName("SPAY_INTERNET_REVENUE_ACCT");

                entity.HasOne(d => d.AdastraBadDebtCheckAcctNavigation)
                    .WithMany(p => p.GlacctGlobalAdastraBadDebtCheckAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.AdastraBadDebtCheckAcct)
                    .HasConstraintName("FK_GLAcctGlobal_ADASTRA_BAD_DEBT_CHECK_ACCT");

                entity.HasOne(d => d.AdastraCashAndChecksAcctNavigation)
                    .WithMany(p => p.GlacctGlobalAdastraCashAndChecksAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.AdastraCashAndChecksAcct)
                    .HasConstraintName("FK_GLAcctGlobal_ADASTRA_CASH_AND_CHECKS_ACCT");

                entity.HasOne(d => d.AdastraCentralTrustAcctNavigation)
                    .WithMany(p => p.GlacctGlobalAdastraCentralTrustAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.AdastraCentralTrustAcct)
                    .HasConstraintName("FK_GLAcctGlobal_ADASTRA_CENTRAL_TRUST_ACCT");

                entity.HasOne(d => d.AdastraCollectionAgencyReceivableAcctNavigation)
                    .WithMany(p => p.GlacctGlobalAdastraCollectionAgencyReceivableAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.AdastraCollectionAgencyReceivableAcct)
                    .HasConstraintName("FK_GLAcctGlobal_ADASTRA_COLLECTION_AGENCY_RECEIVABLE_ACCT");

                entity.HasOne(d => d.AdastraCommissionsApAcctNavigation)
                    .WithMany(p => p.GlacctGlobalAdastraCommissionsApAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.AdastraCommissionsApAcct)
                    .HasConstraintName("FK_GLAcctGlobal_ADASTRA_COMMISSIONS_AP_ACCT");

                entity.HasOne(d => d.AdastraCommissionsArAcctNavigation)
                    .WithMany(p => p.GlacctGlobalAdastraCommissionsArAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.AdastraCommissionsArAcct)
                    .HasConstraintName("FK_GLAcctGlobal_ADASTRA_COMMISSIONS_AR_ACCT");

                entity.HasOne(d => d.AdastraCommissionsExpenseAcctNavigation)
                    .WithMany(p => p.GlacctGlobalAdastraCommissionsExpenseAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.AdastraCommissionsExpenseAcct)
                    .HasConstraintName("FK_GLAcctGlobal_ADASTRA_COMMISSIONS_EXPENSE_ACCT");

                entity.HasOne(d => d.AdastraCommissionsFeesAcctNavigation)
                    .WithMany(p => p.GlacctGlobalAdastraCommissionsFeesAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.AdastraCommissionsFeesAcct)
                    .HasConstraintName("FK_GLAcctGlobal_ADASTRA_COMMISSIONS_FEES_ACCT");

                entity.HasOne(d => d.AdastraTrustProceedsApAcctNavigation)
                    .WithMany(p => p.GlacctGlobalAdastraTrustProceedsApAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.AdastraTrustProceedsApAcct)
                    .HasConstraintName("FK_GLAcctGlobal_ADASTRA_TRUST_PROCEEDS_AP_ACCT");

                entity.HasOne(d => d.CashInStoreAcctNavigation)
                    .WithMany(p => p.GlacctGlobalCashInStoreAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.CashInStoreAcct)
                    .HasConstraintName("FK_GLAcctGlobal_CASH_IN_STORE_ACCT");

                entity.HasOne(d => d.CashedCheckDiscountAcctNavigation)
                    .WithMany(p => p.GlacctGlobalCashedCheckDiscountAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.CashedCheckDiscountAcct)
                    .HasConstraintName("FK_GLAcctGlobal_CASHED_CHECK_DISCOUNT_ACCT");

                entity.HasOne(d => d.CashedCheckFlatFeesAcctNavigation)
                    .WithMany(p => p.GlacctGlobalCashedCheckFlatFeesAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.CashedCheckFlatFeesAcct)
                    .HasConstraintName("FK_GLAcctGlobal_CASHED_CHECK_FLAT_FEES_ACCT");

                entity.HasOne(d => d.CashedCheckPctFeesAcctNavigation)
                    .WithMany(p => p.GlacctGlobalCashedCheckPctFeesAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.CashedCheckPctFeesAcct)
                    .HasConstraintName("FK_GLAcctGlobal_CASHED_CHECK_PCT_FEES_ACCT");

                entity.HasOne(d => d.CashedCheckPostDatedAcctNavigation)
                    .WithMany(p => p.GlacctGlobalCashedCheckPostDatedAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.CashedCheckPostDatedAcct)
                    .HasConstraintName("FK_GLAcctGlobal_CASHED_CHECK_POST_DATED_ACCT");

                entity.HasOne(d => d.CcardFeeAcctNavigation)
                    .WithMany(p => p.GlacctGlobalCcardFeeAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.CcardFeeAcct)
                    .HasConstraintName("FK_GLAcctGlobal_CCARD_FEE_ACCT");

                entity.HasOne(d => d.CheckCollAcctNavigation)
                    .WithMany(p => p.GlacctGlobalCheckCollAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.CheckCollAcct)
                    .HasConstraintName("FK_GLAcctGlobal_CHECK_COLL_ACCT");

                entity.HasOne(d => d.CheckRiAcctNavigation)
                    .WithMany(p => p.GlacctGlobalCheckRiAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.CheckRiAcct)
                    .HasConstraintName("FK_GLAcctGlobal_CHECK_RI_ACCT");

                entity.HasOne(d => d.CourtesyPayoutAcctNavigation)
                    .WithMany(p => p.GlacctGlobalCourtesyPayoutAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.CourtesyPayoutAcct)
                    .HasConstraintName("FK_GLAcctGlobal_COURTESY_PAYOUT_ACCT");

                entity.HasOne(d => d.CurrencyExchangeFeeAcctNavigation)
                    .WithMany(p => p.GlacctGlobalCurrencyExchangeFeeAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.CurrencyExchangeFeeAcct)
                    .HasConstraintName("FK_GLAcctGlobal_CURRENCY_EXCHANGE_FEE_ACCT");

                entity.HasOne(d => d.CurrencyExchangeGainlossAcctNavigation)
                    .WithMany(p => p.GlacctGlobalCurrencyExchangeGainlossAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.CurrencyExchangeGainlossAcct)
                    .HasConstraintName("FK_GLAcctGlobal_CURRENCY_EXCHANGE_GAINLOSS_ACCT");

                entity.HasOne(d => d.CurrencyExchangeOnCheckAcctNavigation)
                    .WithMany(p => p.GlacctGlobalCurrencyExchangeOnCheckAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.CurrencyExchangeOnCheckAcct)
                    .HasConstraintName("FK_GLAcctGlobal_CURRENCY_EXCHANGE_ON_CHECK_ACCT");

                entity.HasOne(d => d.DepositBagsAcctNavigation)
                    .WithMany(p => p.GlacctGlobalDepositBagsAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.DepositBagsAcct)
                    .HasConstraintName("FK_GLAcctGlobal_DEPOSIT_BAGS_ACCT");

                entity.HasOne(d => d.GoldFeesPaidAcctNavigation)
                    .WithMany(p => p.GlacctGlobalGoldFeesPaidAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.GoldFeesPaidAcct)
                    .HasConstraintName("FK_GLAcctGlobal_GOLD_FEES_PAID_ACCT");

                entity.HasOne(d => d.GoldInvestmentAcctNavigation)
                    .WithMany(p => p.GlacctGlobalGoldInvestmentAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.GoldInvestmentAcct)
                    .HasConstraintName("FK_GLAcctGlobal_GOLD_INVESTMENT_ACCT");

                entity.HasOne(d => d.GoldLossesAcctNavigation)
                    .WithMany(p => p.GlacctGlobalGoldLossesAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.GoldLossesAcct)
                    .HasConstraintName("FK_GLAcctGlobal_GOLD_LOSSES_ACCT");

                entity.HasOne(d => d.GoldProcessFeeAcctNavigation)
                    .WithMany(p => p.GlacctGlobalGoldProcessFeeAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.GoldProcessFeeAcct)
                    .HasConstraintName("FK_GLAcctGlobal_GOLD_PROCESS_FEE_ACCT");

                entity.HasOne(d => d.GoldRevenueAcctNavigation)
                    .WithMany(p => p.GlacctGlobalGoldRevenueAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.GoldRevenueAcct)
                    .HasConstraintName("FK_GLAcctGlobal_GOLD_REVENUE_ACCT");

                entity.HasOne(d => d.GoldTransitAcctNavigation)
                    .WithMany(p => p.GlacctGlobalGoldTransitAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.GoldTransitAcct)
                    .HasConstraintName("FK_GLAcctGlobal_GOLD_TRANSIT_ACCT");

                entity.HasOne(d => d.InternalShortAcctNavigation)
                    .WithMany(p => p.GlacctGlobalInternalShortAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.InternalShortAcct)
                    .HasConstraintName("FK_GLAcctGlobal_INTERNAL_SHORT_ACCT");

                entity.HasOne(d => d.MpayInternetCollectionsAcctNavigation)
                    .WithMany(p => p.GlacctGlobalMpayInternetCollectionsAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayInternetCollectionsAcct)
                    .HasConstraintName("FK_InitGL_MPAY_INTERNET_COLLECTIONS_ACCT");

                entity.HasOne(d => d.MpayInternetCreditClearingAcctNavigation)
                    .WithMany(p => p.GlacctGlobalMpayInternetCreditClearingAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayInternetCreditClearingAcct)
                    .HasConstraintName("FK_InitGL_MPAY_INTERNET_CREDIT_CLEARING_ACCT");

                entity.HasOne(d => d.MpayInternetReturnsAcctNavigation)
                    .WithMany(p => p.GlacctGlobalMpayInternetReturnsAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayInternetReturnsAcct)
                    .HasConstraintName("FK_InitGL_MPAY_INTERNET_RETURNS_ACCT");

                entity.HasOne(d => d.MpayInternetRevenueAcctNavigation)
                    .WithMany(p => p.GlacctGlobalMpayInternetRevenueAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayInternetRevenueAcct)
                    .HasConstraintName("FK_InitGL_MPAY_INTERNET_REVENUE_ACCT");

                entity.HasOne(d => d.OendInternetCollectionsAcctNavigation)
                    .WithMany(p => p.GlacctGlobalOendInternetCollectionsAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.OendInternetCollectionsAcct)
                    .HasConstraintName("FK_InitGL_OEND_INTERNET_COLLECTIONS_ACCT");

                entity.HasOne(d => d.OendInternetCreditClearingAcctNavigation)
                    .WithMany(p => p.GlacctGlobalOendInternetCreditClearingAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.OendInternetCreditClearingAcct)
                    .HasConstraintName("FK_InitGL_OEND_INTERNET_CREDIT_CLEARING_ACCT");

                entity.HasOne(d => d.OendInternetReturnsAcctNavigation)
                    .WithMany(p => p.GlacctGlobalOendInternetReturnsAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.OendInternetReturnsAcct)
                    .HasConstraintName("FK_InitGL_OEND_INTERNET_RETURNS_ACCT");

                entity.HasOne(d => d.OendInternetRevenueAcctNavigation)
                    .WithMany(p => p.GlacctGlobalOendInternetRevenueAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.OendInternetRevenueAcct)
                    .HasConstraintName("FK_InitGL_OEND_INTERNET_REVENUE_ACCT");

                entity.HasOne(d => d.OptplusCollAcctNavigation)
                    .WithMany(p => p.GlacctGlobalOptplusCollAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.OptplusCollAcct)
                    .HasConstraintName("FK_GLAcctGlobal_OPTPLUS_COLL_ACCT");

                entity.HasOne(d => d.OptplusReturnsAcctNavigation)
                    .WithMany(p => p.GlacctGlobalOptplusReturnsAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.OptplusReturnsAcct)
                    .HasConstraintName("FK_GLAcctGlobal_OPTPLUS_RETURNS_ACCT");

                entity.HasOne(d => d.OverShortAcctNavigation)
                    .WithMany(p => p.GlacctGlobalOverShortAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.OverShortAcct)
                    .HasConstraintName("FK_GLAcctGlobal_OVER_SHORT_ACCT");

                entity.HasOne(d => d.SalesTaxAcctNavigation)
                    .WithMany(p => p.GlacctGlobalSalesTaxAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SalesTaxAcct)
                    .HasConstraintName("FK_GLAcctGlobal_SALES_TAX_ACCT");

                entity.HasOne(d => d.SpayInternetCollectionsAcctNavigation)
                    .WithMany(p => p.GlacctGlobalSpayInternetCollectionsAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayInternetCollectionsAcct)
                    .HasConstraintName("FK_InitGL_SPAY_INTERNET_COLLECTIONS_ACCT");

                entity.HasOne(d => d.SpayInternetCreditClearingAcctNavigation)
                    .WithMany(p => p.GlacctGlobalSpayInternetCreditClearingAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayInternetCreditClearingAcct)
                    .HasConstraintName("FK_InitGL_SPAY_INTERNET_CREDIT_CLEARING_ACCT");

                entity.HasOne(d => d.SpayInternetReturnsAcctNavigation)
                    .WithMany(p => p.GlacctGlobalSpayInternetReturnsAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayInternetReturnsAcct)
                    .HasConstraintName("FK_InitGL_SPAY_INTERNET_RETURNS_ACCT");

                entity.HasOne(d => d.SpayInternetRevenueAcctNavigation)
                    .WithMany(p => p.GlacctGlobalSpayInternetRevenueAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayInternetRevenueAcct)
                    .HasConstraintName("FK_InitGL_SPAY_INTERNET_REVENUE_ACCT");
            });

            modelBuilder.Entity<GlacctGroup>(entity =>
            {
                entity.HasKey(e => e.GlAcctGroupKey)
                    .HasName("PK__GLAcctGr__7431497F5EAB403F");

                entity.ToTable("GLAcctGroup");

                entity.Property(e => e.GlAcctGroupKey).HasColumnName("GL_ACCT_GROUP_KEY");

                entity.Property(e => e.AchCollAcct).HasColumnName("ACH_COLL_ACCT");

                entity.Property(e => e.AchSuspenseAcct).HasColumnName("ACH_SUSPENSE_ACCT");

                entity.Property(e => e.CashedCheckCanUsdAcct).HasColumnName("CASHED_CHECK_CAN_USD_ACCT");

                entity.Property(e => e.CcardCollAcct).HasColumnName("CCARD_COLL_ACCT");

                entity.Property(e => e.CcardSuspenseAcct).HasColumnName("CCARD_SUSPENSE_ACCT");

                entity.Property(e => e.ChecksPrimaryBankAcct).HasColumnName("CHECKS_PRIMARY_BANK_ACCT");

                entity.Property(e => e.GroupName)
                    .IsRequired()
                    .HasColumnName("GROUP_NAME")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.LoansPrimaryBankAcct).HasColumnName("LOANS_PRIMARY_BANK_ACCT");

                entity.Property(e => e.MpayBlAdastraBadDebtAcct).HasColumnName("MPAY_BL_ADASTRA_BAD_DEBT_ACCT");

                entity.Property(e => e.MpayBlCabCollAcct).HasColumnName("MPAY_BL_CAB_COLL_ACCT");

                entity.Property(e => e.MpayBlCabCollectedAccruedInterestAcct).HasColumnName("MPAY_BL_CAB_COLLECTED_ACCRUED_INTEREST_ACCT");

                entity.Property(e => e.MpayBlCabDefAcct).HasColumnName("MPAY_BL_CAB_DEF_ACCT");

                entity.Property(e => e.MpayBlCabDueToLenderSuspenseAcct).HasColumnName("MPAY_BL_CAB_DUE_TO_LENDER_SUSPENSE_ACCT");

                entity.Property(e => e.MpayBlCabLenderInterestAcct).HasColumnName("MPAY_BL_CAB_LENDER_INTEREST_ACCT");

                entity.Property(e => e.MpayBlCabLenderRiFeeAcct).HasColumnName("MPAY_BL_CAB_LENDER_RI_FEE_ACCT");

                entity.Property(e => e.MpayBlCabUncollectedAccruedInterestAcct).HasColumnName("MPAY_BL_CAB_UNCOLLECTED_ACCRUED_INTEREST_ACCT");

                entity.Property(e => e.MpayBlCollAcct).HasColumnName("MPAY_BL_COLL_ACCT");

                entity.Property(e => e.MpayBlDecreaseAcct).HasColumnName("MPAY_BL_DECREASE_ACCT");

                entity.Property(e => e.MpayBlDueDatePaymentQueueSuspenseAcct).HasColumnName("MPAY_BL_DUE_DATE_PAYMENT_QUEUE_SUSPENSE_ACCT");

                entity.Property(e => e.MpayBlFasterPaymentsFeeAcct).HasColumnName("MPAY_BL_FASTER_PAYMENTS_FEE_ACCT");

                entity.Property(e => e.MpayBlFeesAcct).HasColumnName("MPAY_BL_FEES_ACCT");

                entity.Property(e => e.MpayBlFundingSuspenseAcct).HasColumnName("MPAY_BL_FUNDING_SUSPENSE_ACCT");

                entity.Property(e => e.MpayBlInsuranceApAcct).HasColumnName("MPAY_BL_INSURANCE_AP_ACCT");

                entity.Property(e => e.MpayBlInsuranceCogsAcct).HasColumnName("MPAY_BL_INSURANCE_COGS_ACCT");

                entity.Property(e => e.MpayBlInsuranceRevenueAcct).HasColumnName("MPAY_BL_INSURANCE_REVENUE_ACCT");

                entity.Property(e => e.MpayBlInsuranceTaxAcct).HasColumnName("MPAY_BL_INSURANCE_TAX_ACCT");

                entity.Property(e => e.MpayBlInterestAcct).HasColumnName("MPAY_BL_INTEREST_ACCT");

                entity.Property(e => e.MpayBlInventoryAcct).HasColumnName("MPAY_BL_INVENTORY_ACCT");

                entity.Property(e => e.MpayBlLegalFeesAcct).HasColumnName("MPAY_BL_LEGAL_FEES_ACCT");

                entity.Property(e => e.MpayBlNsfFeeAcct).HasColumnName("MPAY_BL_NSF_FEE_ACCT");

                entity.Property(e => e.MpayBlRiAcct).HasColumnName("MPAY_BL_RI_ACCT");

                entity.Property(e => e.MpayBlTaxPrepInvAcct).HasColumnName("MPAY_BL_TAX_PREP_INV_ACCT");

                entity.Property(e => e.MpayBlTaxPrepRevAcct).HasColumnName("MPAY_BL_TAX_PREP_REV_ACCT");

                entity.Property(e => e.MpaySigAdastraBadDebtAcct).HasColumnName("MPAY_SIG_ADASTRA_BAD_DEBT_ACCT");

                entity.Property(e => e.MpaySigCabCollAcct).HasColumnName("MPAY_SIG_CAB_COLL_ACCT");

                entity.Property(e => e.MpaySigCabCollectedAccruedInterestAcct).HasColumnName("MPAY_SIG_CAB_COLLECTED_ACCRUED_INTEREST_ACCT");

                entity.Property(e => e.MpaySigCabDefAcct).HasColumnName("MPAY_SIG_CAB_DEF_ACCT");

                entity.Property(e => e.MpaySigCabDueToLenderSuspenseAcct).HasColumnName("MPAY_SIG_CAB_DUE_TO_LENDER_SUSPENSE_ACCT");

                entity.Property(e => e.MpaySigCabUncollectedAccruedInterestAcct).HasColumnName("MPAY_SIG_CAB_UNCOLLECTED_ACCRUED_INTEREST_ACCT");

                entity.Property(e => e.MpaySigCollAcct).HasColumnName("MPAY_SIG_COLL_ACCT");

                entity.Property(e => e.MpaySigDecreaseAcct).HasColumnName("MPAY_SIG_DECREASE_ACCT");

                entity.Property(e => e.MpaySigDefAcct).HasColumnName("MPAY_SIG_DEF_ACCT");

                entity.Property(e => e.MpaySigFasterPaymentsFeeAcct).HasColumnName("MPAY_SIG_FASTER_PAYMENTS_FEE_ACCT");

                entity.Property(e => e.MpaySigFeesAcct).HasColumnName("MPAY_SIG_FEES_ACCT");

                entity.Property(e => e.MpaySigInterestAcct).HasColumnName("MPAY_SIG_INTEREST_ACCT");

                entity.Property(e => e.MpaySigInventoryAcct).HasColumnName("MPAY_SIG_INVENTORY_ACCT");

                entity.Property(e => e.MpaySigLegalFeesAcct).HasColumnName("MPAY_SIG_LEGAL_FEES_ACCT");

                entity.Property(e => e.MpaySigNsfFeeAcct).HasColumnName("MPAY_SIG_NSF_FEE_ACCT");

                entity.Property(e => e.MpaySigTaxAcct).HasColumnName("MPAY_SIG_TAX_ACCT");

                entity.Property(e => e.MpaySigTransAcct).HasColumnName("MPAY_SIG_TRANS_ACCT");

                entity.Property(e => e.MpayTitle2ndCollAcct).HasColumnName("MPAY_TITLE_2ND_COLL_ACCT");

                entity.Property(e => e.MpayTitle2ndDefAcct).HasColumnName("MPAY_TITLE_2ND_DEF_ACCT");

                entity.Property(e => e.MpayTitle2ndFasterPaymentsFeeAcct).HasColumnName("MPAY_TITLE_2ND_FASTER_PAYMENTS_FEE_ACCT");

                entity.Property(e => e.MpayTitle2ndFeesAcct).HasColumnName("MPAY_TITLE_2ND_FEES_ACCT");

                entity.Property(e => e.MpayTitle2ndInterestAcct).HasColumnName("MPAY_TITLE_2ND_INTEREST_ACCT");

                entity.Property(e => e.MpayTitle2ndInventoryAcct).HasColumnName("MPAY_TITLE_2ND_INVENTORY_ACCT");

                entity.Property(e => e.MpayTitle2ndLienAcct).HasColumnName("MPAY_TITLE_2ND_LIEN_ACCT");

                entity.Property(e => e.MpayTitle2ndNsfFeeAcct).HasColumnName("MPAY_TITLE_2ND_NSF_FEE_ACCT");

                entity.Property(e => e.MpayTitle2ndTransAcct).HasColumnName("MPAY_TITLE_2ND_TRANS_ACCT");

                entity.Property(e => e.MpayTitleAdastraBadDebtAcct).HasColumnName("MPAY_TITLE_ADASTRA_BAD_DEBT_ACCT");

                entity.Property(e => e.MpayTitleCabCollAcct).HasColumnName("MPAY_TITLE_CAB_COLL_ACCT");

                entity.Property(e => e.MpayTitleCabCollectedAccruedInterestAcct).HasColumnName("MPAY_TITLE_CAB_COLLECTED_ACCRUED_INTEREST_ACCT");

                entity.Property(e => e.MpayTitleCabDefAcct).HasColumnName("MPAY_TITLE_CAB_DEF_ACCT");

                entity.Property(e => e.MpayTitleCabDueToLenderSuspenseAcct).HasColumnName("MPAY_TITLE_CAB_DUE_TO_LENDER_SUSPENSE_ACCT");

                entity.Property(e => e.MpayTitleCabLenderInterestAcct).HasColumnName("MPAY_TITLE_CAB_LENDER_INTEREST_ACCT");

                entity.Property(e => e.MpayTitleCabLenderRiFeeAcct).HasColumnName("MPAY_TITLE_CAB_LENDER_RI_FEE_ACCT");

                entity.Property(e => e.MpayTitleCabUncollectedAccruedInterestAcct).HasColumnName("MPAY_TITLE_CAB_UNCOLLECTED_ACCRUED_INTEREST_ACCT");

                entity.Property(e => e.MpayTitleCollAcct).HasColumnName("MPAY_TITLE_COLL_ACCT");

                entity.Property(e => e.MpayTitleDecreaseAcct).HasColumnName("MPAY_TITLE_DECREASE_ACCT");

                entity.Property(e => e.MpayTitleDefAcct).HasColumnName("MPAY_TITLE_DEF_ACCT");

                entity.Property(e => e.MpayTitleFasterPaymentsFeeAcct).HasColumnName("MPAY_TITLE_FASTER_PAYMENTS_FEE_ACCT");

                entity.Property(e => e.MpayTitleFeesAcct).HasColumnName("MPAY_TITLE_FEES_ACCT");

                entity.Property(e => e.MpayTitleFundingSuspenseAcct).HasColumnName("MPAY_TITLE_FUNDING_SUSPENSE_ACCT");

                entity.Property(e => e.MpayTitleInterestAcct).HasColumnName("MPAY_TITLE_INTEREST_ACCT");

                entity.Property(e => e.MpayTitleInventoryAcct).HasColumnName("MPAY_TITLE_INVENTORY_ACCT");

                entity.Property(e => e.MpayTitleLegalFeesAcct).HasColumnName("MPAY_TITLE_LEGAL_FEES_ACCT");

                entity.Property(e => e.MpayTitleLienAcct).HasColumnName("MPAY_TITLE_LIEN_ACCT");

                entity.Property(e => e.MpayTitleNsfFeeAcct).HasColumnName("MPAY_TITLE_NSF_FEE_ACCT");

                entity.Property(e => e.MpayTitleTransAcct).HasColumnName("MPAY_TITLE_TRANS_ACCT");

                entity.Property(e => e.OendBlActivityFeeAcct).HasColumnName("OEND_BL_ACTIVITY_FEE_ACCT");

                entity.Property(e => e.OendBlAdastraBadDebtAcct).HasColumnName("OEND_BL_ADASTRA_BAD_DEBT_ACCT");

                entity.Property(e => e.OendBlCabCollAcct).HasColumnName("OEND_BL_CAB_COLL_ACCT");

                entity.Property(e => e.OendBlCabCollectedAccruedInterestAcct).HasColumnName("OEND_BL_CAB_COLLECTED_ACCRUED_INTEREST_ACCT");

                entity.Property(e => e.OendBlCabDueToLenderSuspenseAcct).HasColumnName("OEND_BL_CAB_DUE_TO_LENDER_SUSPENSE_ACCT");

                entity.Property(e => e.OendBlCabFeeReceivableAcct).HasColumnName("OEND_BL_CAB_FEE_RECEIVABLE_ACCT");

                entity.Property(e => e.OendBlCabLenderInterestAcct).HasColumnName("OEND_BL_CAB_LENDER_INTEREST_ACCT");

                entity.Property(e => e.OendBlCabLenderRiFeeAcct).HasColumnName("OEND_BL_CAB_LENDER_RI_FEE_ACCT");

                entity.Property(e => e.OendBlCabRiAcct).HasColumnName("OEND_BL_CAB_RI_ACCT");

                entity.Property(e => e.OendBlCabUncollectedAccruedInterestAcct).HasColumnName("OEND_BL_CAB_UNCOLLECTED_ACCRUED_INTEREST_ACCT");

                entity.Property(e => e.OendBlCollAcct).HasColumnName("OEND_BL_COLL_ACCT");

                entity.Property(e => e.OendBlDecreaseAcct).HasColumnName("OEND_BL_DECREASE_ACCT");

                entity.Property(e => e.OendBlDiscountAcct).HasColumnName("OEND_BL_DISCOUNT_ACCT");

                entity.Property(e => e.OendBlInterestAcct).HasColumnName("OEND_BL_INTEREST_ACCT");

                entity.Property(e => e.OendBlInventoryAcct).HasColumnName("OEND_BL_INVENTORY_ACCT");

                entity.Property(e => e.OendBlRiAcct).HasColumnName("OEND_BL_RI_ACCT");

                entity.Property(e => e.OendBlTransFeeAcct).HasColumnName("OEND_BL_TRANS_FEE_ACCT");

                entity.Property(e => e.OendTitle2ndCabCollAcct).HasColumnName("OEND_TITLE_2ND_CAB_COLL_ACCT");

                entity.Property(e => e.OendTitle2ndCabCollectedAccruedInterestAcct).HasColumnName("OEND_TITLE_2ND_CAB_COLLECTED_ACCRUED_INTEREST_ACCT");

                entity.Property(e => e.OendTitle2ndCabDefAcct).HasColumnName("OEND_TITLE_2ND_CAB_DEF_ACCT");

                entity.Property(e => e.OendTitle2ndCabDueToLenderSuspenseAcct).HasColumnName("OEND_TITLE_2ND_CAB_DUE_TO_LENDER_SUSPENSE_ACCT");

                entity.Property(e => e.OendTitle2ndCabFeeReceivableAcct).HasColumnName("OEND_TITLE_2ND_CAB_FEE_RECEIVABLE_ACCT");

                entity.Property(e => e.OendTitle2ndCabUncollectedAccruedInterestAcct).HasColumnName("OEND_TITLE_2ND_CAB_UNCOLLECTED_ACCRUED_INTEREST_ACCT");

                entity.Property(e => e.OendTitle2ndCollAcct).HasColumnName("OEND_TITLE_2ND_COLL_ACCT");

                entity.Property(e => e.OendTitle2ndDefAcct).HasColumnName("OEND_TITLE_2ND_DEF_ACCT");

                entity.Property(e => e.OendTitle2ndDiscountAcct).HasColumnName("OEND_TITLE_2ND_DISCOUNT_ACCT");

                entity.Property(e => e.OendTitle2ndFeesAcct).HasColumnName("OEND_TITLE_2ND_FEES_ACCT");

                entity.Property(e => e.OendTitle2ndInventoryAcct).HasColumnName("OEND_TITLE_2ND_INVENTORY_ACCT");

                entity.Property(e => e.OendTitle2ndLienAcct).HasColumnName("OEND_TITLE_2ND_LIEN_ACCT");

                entity.Property(e => e.OendTitle2ndTransAcct).HasColumnName("OEND_TITLE_2ND_TRANS_ACCT");

                entity.Property(e => e.OendTitleAdastraBadDebtAcct).HasColumnName("OEND_TITLE_ADASTRA_BAD_DEBT_ACCT");

                entity.Property(e => e.OendTitleCabCollAcct).HasColumnName("OEND_TITLE_CAB_COLL_ACCT");

                entity.Property(e => e.OendTitleCabCollectedAccruedInterestAcct).HasColumnName("OEND_TITLE_CAB_COLLECTED_ACCRUED_INTEREST_ACCT");

                entity.Property(e => e.OendTitleCabDefAcct).HasColumnName("OEND_TITLE_CAB_DEF_ACCT");

                entity.Property(e => e.OendTitleCabDueToLenderSuspenseAcct).HasColumnName("OEND_TITLE_CAB_DUE_TO_LENDER_SUSPENSE_ACCT");

                entity.Property(e => e.OendTitleCabFeeReceivableAcct).HasColumnName("OEND_TITLE_CAB_FEE_RECEIVABLE_ACCT");

                entity.Property(e => e.OendTitleCabLenderInterestAcct).HasColumnName("OEND_TITLE_CAB_LENDER_INTEREST_ACCT");

                entity.Property(e => e.OendTitleCabLenderRiFeeAcct).HasColumnName("OEND_TITLE_CAB_LENDER_RI_FEE_ACCT");

                entity.Property(e => e.OendTitleCabUncollectedAccruedInterestAcct).HasColumnName("OEND_TITLE_CAB_UNCOLLECTED_ACCRUED_INTEREST_ACCT");

                entity.Property(e => e.OendTitleCollAcct).HasColumnName("OEND_TITLE_COLL_ACCT");

                entity.Property(e => e.OendTitleDecreaseAcct).HasColumnName("OEND_TITLE_DECREASE_ACCT");

                entity.Property(e => e.OendTitleDefAcct).HasColumnName("OEND_TITLE_DEF_ACCT");

                entity.Property(e => e.OendTitleDiscountAcct).HasColumnName("OEND_TITLE_DISCOUNT_ACCT");

                entity.Property(e => e.OendTitleFeesAcct).HasColumnName("OEND_TITLE_FEES_ACCT");

                entity.Property(e => e.OendTitleInventoryAcct).HasColumnName("OEND_TITLE_INVENTORY_ACCT");

                entity.Property(e => e.OendTitleLienAcct).HasColumnName("OEND_TITLE_LIEN_ACCT");

                entity.Property(e => e.OendTitleTransAcct).HasColumnName("OEND_TITLE_TRANS_ACCT");

                entity.Property(e => e.ReturnCheckCashedChecksAcct).HasColumnName("RETURN_CHECK_CASHED_CHECKS_ACCT");

                entity.Property(e => e.ReturnCheckPaydayChecksAcct).HasColumnName("RETURN_CHECK_PAYDAY_CHECKS_ACCT");

                entity.Property(e => e.SpayPaydayAdastraBadDebtAcct).HasColumnName("SPAY_PAYDAY_ADASTRA_BAD_DEBT_ACCT");

                entity.Property(e => e.SpayPaydayBadDebtAcct).HasColumnName("SPAY_PAYDAY_BAD_DEBT_ACCT");

                entity.Property(e => e.SpayPaydayChecksCabCollAcct).HasColumnName("SPAY_PAYDAY_CHECKS_CAB_COLL_ACCT");

                entity.Property(e => e.SpayPaydayChecksCabFeeRecvAcct).HasColumnName("SPAY_PAYDAY_CHECKS_CAB_FEE_RECV_ACCT");

                entity.Property(e => e.SpayPaydayChecksCabLenderInterestAcct).HasColumnName("SPAY_PAYDAY_CHECKS_CAB_LENDER_INTEREST_ACCT");

                entity.Property(e => e.SpayPaydayChecksCabRiAcct).HasColumnName("SPAY_PAYDAY_CHECKS_CAB_RI_ACCT");

                entity.Property(e => e.SpayPaydayChecksCollAcct).HasColumnName("SPAY_PAYDAY_CHECKS_COLL_ACCT");

                entity.Property(e => e.SpayPaydayChecksDiscountAcct).HasColumnName("SPAY_PAYDAY_CHECKS_DISCOUNT_ACCT");

                entity.Property(e => e.SpayPaydayChecksFasterPaymentsFeeAcct).HasColumnName("SPAY_PAYDAY_CHECKS_FASTER_PAYMENTS_FEE_ACCT");

                entity.Property(e => e.SpayPaydayChecksFeesAcct).HasColumnName("SPAY_PAYDAY_CHECKS_FEES_ACCT");

                entity.Property(e => e.SpayPaydayChecksInterestAcct).HasColumnName("SPAY_PAYDAY_CHECKS_INTEREST_ACCT");

                entity.Property(e => e.SpayPaydayChecksInventoryAcct).HasColumnName("SPAY_PAYDAY_CHECKS_INVENTORY_ACCT");

                entity.Property(e => e.SpayPaydayChecksLegalFeeAcct).HasColumnName("SPAY_PAYDAY_CHECKS_LEGAL_FEE_ACCT");

                entity.Property(e => e.SpayPaydayChecksNsfFeeAcct).HasColumnName("SPAY_PAYDAY_CHECKS_NSF_FEE_ACCT");

                entity.Property(e => e.SpayPaydayChecksRebateAcct).HasColumnName("SPAY_PAYDAY_CHECKS_REBATE_ACCT");

                entity.Property(e => e.SpayPaydayChecksRiAcct).HasColumnName("SPAY_PAYDAY_CHECKS_RI_ACCT");

                entity.Property(e => e.SpayPaydayChecksRolloverFeeAcct).HasColumnName("SPAY_PAYDAY_CHECKS_ROLLOVER_FEE_ACCT");

                entity.Property(e => e.SpayPaydayDebitCardsCabCollAcct).HasColumnName("SPAY_PAYDAY_DEBIT_CARDS_CAB_COLL_ACCT");

                entity.Property(e => e.SpayPaydayDebitCardsCabFeeRecvAcct).HasColumnName("SPAY_PAYDAY_DEBIT_CARDS_CAB_FEE_RECV_ACCT");

                entity.Property(e => e.SpayPaydayDebitCardsCabLenderInterestAcct).HasColumnName("SPAY_PAYDAY_DEBIT_CARDS_CAB_LENDER_INTEREST_ACCT");

                entity.Property(e => e.SpayPaydayDebitCardsCabRiAcct).HasColumnName("SPAY_PAYDAY_DEBIT_CARDS_CAB_RI_ACCT");

                entity.Property(e => e.SpayPaydayDebitCardsCollAcct).HasColumnName("SPAY_PAYDAY_DEBIT_CARDS_COLL_ACCT");

                entity.Property(e => e.SpayPaydayDebitCardsDiscountAcct).HasColumnName("SPAY_PAYDAY_DEBIT_CARDS_DISCOUNT_ACCT");

                entity.Property(e => e.SpayPaydayDebitCardsFasterPaymentsFeeAcct).HasColumnName("SPAY_PAYDAY_DEBIT_CARDS_FASTER_PAYMENTS_FEE_ACCT");

                entity.Property(e => e.SpayPaydayDebitCardsFeesAcct).HasColumnName("SPAY_PAYDAY_DEBIT_CARDS_FEES_ACCT");

                entity.Property(e => e.SpayPaydayDebitCardsFundingSuspenseAcct).HasColumnName("SPAY_PAYDAY_DEBIT_CARDS_FUNDING_SUSPENSE_ACCT");

                entity.Property(e => e.SpayPaydayDebitCardsInterestAcct).HasColumnName("SPAY_PAYDAY_DEBIT_CARDS_INTEREST_ACCT");

                entity.Property(e => e.SpayPaydayDebitCardsInventoryAcct).HasColumnName("SPAY_PAYDAY_DEBIT_CARDS_INVENTORY_ACCT");

                entity.Property(e => e.SpayPaydayDebitCardsLegalFeeAcct).HasColumnName("SPAY_PAYDAY_DEBIT_CARDS_LEGAL_FEE_ACCT");

                entity.Property(e => e.SpayPaydayDebitCardsNsfFeeAcct).HasColumnName("SPAY_PAYDAY_DEBIT_CARDS_NSF_FEE_ACCT");

                entity.Property(e => e.SpayPaydayDebitCardsRebateAcct).HasColumnName("SPAY_PAYDAY_DEBIT_CARDS_REBATE_ACCT");

                entity.Property(e => e.SpayPaydayDebitCardsRiAcct).HasColumnName("SPAY_PAYDAY_DEBIT_CARDS_RI_ACCT");

                entity.Property(e => e.SpayPaydayDebitCardsRolloverFeeAcct).HasColumnName("SPAY_PAYDAY_DEBIT_CARDS_ROLLOVER_FEE_ACCT");

                entity.Property(e => e.SpayPaydayDecreaseAcct).HasColumnName("SPAY_PAYDAY_DECREASE_ACCT");

                entity.Property(e => e.SpayPaydayEftCollectionsClearingAcct).HasColumnName("SPAY_PAYDAY_EFT_COLLECTIONS_CLEARING_ACCT");

                entity.Property(e => e.SpayPaydayPadBankClearingAcct).HasColumnName("SPAY_PAYDAY_PAD_BANK_CLEARING_ACCT");

                entity.Property(e => e.SpayPaydayRolloverSuspenseAcct).HasColumnName("SPAY_PAYDAY_ROLLOVER_SUSPENSE_ACCT");

                entity.Property(e => e.SpaySigAdastraBadDebtAcct).HasColumnName("SPAY_SIG_ADASTRA_BAD_DEBT_ACCT");

                entity.Property(e => e.SpaySigCabCollAcct).HasColumnName("SPAY_SIG_CAB_COLL_ACCT");

                entity.Property(e => e.SpaySigCabDefAcct).HasColumnName("SPAY_SIG_CAB_DEF_ACCT");

                entity.Property(e => e.SpaySigCabFeeRecvAcct).HasColumnName("SPAY_SIG_CAB_FEE_RECV_ACCT");

                entity.Property(e => e.SpaySigCabLenderInterestAcct).HasColumnName("SPAY_SIG_CAB_LENDER_INTEREST_ACCT");

                entity.Property(e => e.SpaySigCollAcct).HasColumnName("SPAY_SIG_COLL_ACCT");

                entity.Property(e => e.SpaySigDefAcct).HasColumnName("SPAY_SIG_DEF_ACCT");

                entity.Property(e => e.SpaySigFasterPaymentsFeeAcct).HasColumnName("SPAY_SIG_FASTER_PAYMENTS_FEE_ACCT");

                entity.Property(e => e.SpaySigFeesAcct).HasColumnName("SPAY_SIG_FEES_ACCT");

                entity.Property(e => e.SpaySigInterestAcct).HasColumnName("SPAY_SIG_INTEREST_ACCT");

                entity.Property(e => e.SpaySigInventoryAcct).HasColumnName("SPAY_SIG_INVENTORY_ACCT");

                entity.Property(e => e.SpaySigLegalFeeAcct).HasColumnName("SPAY_SIG_LEGAL_FEE_ACCT");

                entity.Property(e => e.SpaySigNsfFeeAcct).HasColumnName("SPAY_SIG_NSF_FEE_ACCT");

                entity.Property(e => e.SpaySigRolloverFeeAcct).HasColumnName("SPAY_SIG_ROLLOVER_FEE_ACCT");

                entity.Property(e => e.SpaySigTransAcct).HasColumnName("SPAY_SIG_TRANS_ACCT");

                entity.Property(e => e.SpayTitle2ndCabCollAcct).HasColumnName("SPAY_TITLE_2ND_CAB_COLL_ACCT");

                entity.Property(e => e.SpayTitle2ndCabDefAcct).HasColumnName("SPAY_TITLE_2ND_CAB_DEF_ACCT");

                entity.Property(e => e.SpayTitle2ndCabFeeRecvAcct).HasColumnName("SPAY_TITLE_2ND_CAB_FEE_RECV_ACCT");

                entity.Property(e => e.SpayTitle2ndCabLenderInterestAcct).HasColumnName("SPAY_TITLE_2ND_CAB_LENDER_INTEREST_ACCT");

                entity.Property(e => e.SpayTitle2ndCollAcct).HasColumnName("SPAY_TITLE_2ND_COLL_ACCT");

                entity.Property(e => e.SpayTitle2ndDefAcct).HasColumnName("SPAY_TITLE_2ND_DEF_ACCT");

                entity.Property(e => e.SpayTitle2ndFasterPaymentsFeeAcct).HasColumnName("SPAY_TITLE_2ND_FASTER_PAYMENTS_FEE_ACCT");

                entity.Property(e => e.SpayTitle2ndFeesAcct).HasColumnName("SPAY_TITLE_2ND_FEES_ACCT");

                entity.Property(e => e.SpayTitle2ndInterestAcct).HasColumnName("SPAY_TITLE_2ND_INTEREST_ACCT");

                entity.Property(e => e.SpayTitle2ndInventoryAcct).HasColumnName("SPAY_TITLE_2ND_INVENTORY_ACCT");

                entity.Property(e => e.SpayTitle2ndLegalFeeAcct).HasColumnName("SPAY_TITLE_2ND_LEGAL_FEE_ACCT");

                entity.Property(e => e.SpayTitle2ndLienAcct).HasColumnName("SPAY_TITLE_2ND_LIEN_ACCT");

                entity.Property(e => e.SpayTitle2ndNsfFeeAcct).HasColumnName("SPAY_TITLE_2ND_NSF_FEE_ACCT");

                entity.Property(e => e.SpayTitle2ndRolloverFeeAcct).HasColumnName("SPAY_TITLE_2ND_ROLLOVER_FEE_ACCT");

                entity.Property(e => e.SpayTitle2ndSurchAcct).HasColumnName("SPAY_TITLE_2ND_SURCH_ACCT");

                entity.Property(e => e.SpayTitle2ndTransAcct).HasColumnName("SPAY_TITLE_2ND_TRANS_ACCT");

                entity.Property(e => e.SpayTitleAdastraBadDebtAcct).HasColumnName("SPAY_TITLE_ADASTRA_BAD_DEBT_ACCT");

                entity.Property(e => e.SpayTitleCabCollAcct).HasColumnName("SPAY_TITLE_CAB_COLL_ACCT");

                entity.Property(e => e.SpayTitleCabDefAcct).HasColumnName("SPAY_TITLE_CAB_DEF_ACCT");

                entity.Property(e => e.SpayTitleCabFeeRecvAcct).HasColumnName("SPAY_TITLE_CAB_FEE_RECV_ACCT");

                entity.Property(e => e.SpayTitleCabLenderInterestAcct).HasColumnName("SPAY_TITLE_CAB_LENDER_INTEREST_ACCT");

                entity.Property(e => e.SpayTitleCollAcct).HasColumnName("SPAY_TITLE_COLL_ACCT");

                entity.Property(e => e.SpayTitleDecreaseAcct).HasColumnName("SPAY_TITLE_DECREASE_ACCT");

                entity.Property(e => e.SpayTitleDefAcct).HasColumnName("SPAY_TITLE_DEF_ACCT");

                entity.Property(e => e.SpayTitleFasterPaymentsFeeAcct).HasColumnName("SPAY_TITLE_FASTER_PAYMENTS_FEE_ACCT");

                entity.Property(e => e.SpayTitleFeesAcct).HasColumnName("SPAY_TITLE_FEES_ACCT");

                entity.Property(e => e.SpayTitleInterestAcct).HasColumnName("SPAY_TITLE_INTEREST_ACCT");

                entity.Property(e => e.SpayTitleInventoryAcct).HasColumnName("SPAY_TITLE_INVENTORY_ACCT");

                entity.Property(e => e.SpayTitleLegalFeeAcct).HasColumnName("SPAY_TITLE_LEGAL_FEE_ACCT");

                entity.Property(e => e.SpayTitleLienAcct).HasColumnName("SPAY_TITLE_LIEN_ACCT");

                entity.Property(e => e.SpayTitleNsfFeeAcct).HasColumnName("SPAY_TITLE_NSF_FEE_ACCT");

                entity.Property(e => e.SpayTitleRolloverFeeAcct).HasColumnName("SPAY_TITLE_ROLLOVER_FEE_ACCT");

                entity.Property(e => e.SpayTitleSurchAcct).HasColumnName("SPAY_TITLE_SURCH_ACCT");

                entity.Property(e => e.SpayTitleTransAcct).HasColumnName("SPAY_TITLE_TRANS_ACCT");

                entity.HasOne(d => d.AchCollAcctNavigation)
                    .WithMany(p => p.GlacctGroupAchCollAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.AchCollAcct)
                    .HasConstraintName("FK_GLAcctGroup_ACH_COLL_ACCT");

                entity.HasOne(d => d.AchSuspenseAcctNavigation)
                    .WithMany(p => p.GlacctGroupAchSuspenseAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.AchSuspenseAcct)
                    .HasConstraintName("FK_GLAcctGroup_ACH_SUSPENSE_ACCT");

                entity.HasOne(d => d.CashedCheckCanUsdAcctNavigation)
                    .WithMany(p => p.GlacctGroupCashedCheckCanUsdAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.CashedCheckCanUsdAcct)
                    .HasConstraintName("FK_GLAcctGroup_CASHED_CHECK_CAN_USD_ACCT");

                entity.HasOne(d => d.CcardCollAcctNavigation)
                    .WithMany(p => p.GlacctGroupCcardCollAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.CcardCollAcct)
                    .HasConstraintName("FK_GLAcctGroup_CCARD_COLL_ACCT");

                entity.HasOne(d => d.CcardSuspenseAcctNavigation)
                    .WithMany(p => p.GlacctGroupCcardSuspenseAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.CcardSuspenseAcct)
                    .HasConstraintName("FK_GLAcctGroup_CCARD_SUSPENSE_ACCT");

                entity.HasOne(d => d.ChecksPrimaryBankAcctNavigation)
                    .WithMany(p => p.GlacctGroupChecksPrimaryBankAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.ChecksPrimaryBankAcct)
                    .HasConstraintName("FK_GLAcctGroup_CHECKS_PRIMARY_BANK_ACCT");

                entity.HasOne(d => d.LoansPrimaryBankAcctNavigation)
                    .WithMany(p => p.GlacctGroupLoansPrimaryBankAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.LoansPrimaryBankAcct)
                    .HasConstraintName("FK_GLAcctGroup_LOANS_PRIMARY_BANK_ACCT");

                entity.HasOne(d => d.MpayBlAdastraBadDebtAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpayBlAdastraBadDebtAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayBlAdastraBadDebtAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_BL_ADASTRA_BAD_DEBT_ACCT");

                entity.HasOne(d => d.MpayBlCabCollAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpayBlCabCollAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayBlCabCollAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_BL_CAB_COLL_ACCT");

                entity.HasOne(d => d.MpayBlCabCollectedAccruedInterestAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpayBlCabCollectedAccruedInterestAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayBlCabCollectedAccruedInterestAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_BL_CAB_COLLECTED_ACCRUED_INTEREST_ACCT");

                entity.HasOne(d => d.MpayBlCabDefAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpayBlCabDefAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayBlCabDefAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_BL_CAB_DEF_ACCT");

                entity.HasOne(d => d.MpayBlCabDueToLenderSuspenseAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpayBlCabDueToLenderSuspenseAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayBlCabDueToLenderSuspenseAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_BL_CAB_DUE_TO_LENDER_SUSPENSE_ACCT");

                entity.HasOne(d => d.MpayBlCabLenderInterestAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpayBlCabLenderInterestAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayBlCabLenderInterestAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_BL_CAB_LENDER_INTEREST_ACCT");

                entity.HasOne(d => d.MpayBlCabLenderRiFeeAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpayBlCabLenderRiFeeAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayBlCabLenderRiFeeAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_BL_CAB_LENDER_RI_FEE_ACCT");

                entity.HasOne(d => d.MpayBlCabUncollectedAccruedInterestAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpayBlCabUncollectedAccruedInterestAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayBlCabUncollectedAccruedInterestAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_BL_CAB_UNCOLLECTED_ACCRUED_INTEREST_ACCT");

                entity.HasOne(d => d.MpayBlCollAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpayBlCollAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayBlCollAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_BL_COLL_ACCT");

                entity.HasOne(d => d.MpayBlDecreaseAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpayBlDecreaseAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayBlDecreaseAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_BL_DECREASE_ACCT");

                entity.HasOne(d => d.MpayBlDueDatePaymentQueueSuspenseAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpayBlDueDatePaymentQueueSuspenseAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayBlDueDatePaymentQueueSuspenseAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_BL_DUE_DATE_PAYMENT_QUEUE_SUSPENSE_ACCT");

                entity.HasOne(d => d.MpayBlFasterPaymentsFeeAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpayBlFasterPaymentsFeeAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayBlFasterPaymentsFeeAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_BL_FASTER_PAYMENTS_FEE_ACCT");

                entity.HasOne(d => d.MpayBlFeesAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpayBlFeesAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayBlFeesAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_BL_FEES_ACCT");

                entity.HasOne(d => d.MpayBlFundingSuspenseAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpayBlFundingSuspenseAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayBlFundingSuspenseAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_BL_FUNDING_SUSPENSE_ACCT");

                entity.HasOne(d => d.MpayBlInsuranceApAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpayBlInsuranceApAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayBlInsuranceApAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_BL_INSURANCE_AP_ACCT");

                entity.HasOne(d => d.MpayBlInsuranceCogsAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpayBlInsuranceCogsAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayBlInsuranceCogsAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_BL_INSURANCE_COGS_ACCT");

                entity.HasOne(d => d.MpayBlInsuranceRevenueAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpayBlInsuranceRevenueAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayBlInsuranceRevenueAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_BL_INSURANCE_REVENUE_ACCT");

                entity.HasOne(d => d.MpayBlInsuranceTaxAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpayBlInsuranceTaxAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayBlInsuranceTaxAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_BL_INSURANCE_TAX_ACCT");

                entity.HasOne(d => d.MpayBlInterestAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpayBlInterestAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayBlInterestAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_BL_INTEREST_ACCT");

                entity.HasOne(d => d.MpayBlInventoryAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpayBlInventoryAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayBlInventoryAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_BL_INVENTORY_ACCT");

                entity.HasOne(d => d.MpayBlLegalFeesAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpayBlLegalFeesAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayBlLegalFeesAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_BL_LEGAL_FEES_ACCT");

                entity.HasOne(d => d.MpayBlNsfFeeAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpayBlNsfFeeAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayBlNsfFeeAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_BL_NSF_FEE_ACCT");

                entity.HasOne(d => d.MpayBlRiAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpayBlRiAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayBlRiAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_BL_RI_ACCT");

                entity.HasOne(d => d.MpayBlTaxPrepInvAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpayBlTaxPrepInvAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayBlTaxPrepInvAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_BL_TAX_PREP_INV_ACCT");

                entity.HasOne(d => d.MpayBlTaxPrepRevAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpayBlTaxPrepRevAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayBlTaxPrepRevAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_BL_TAX_PREP_REV_ACCT");

                entity.HasOne(d => d.MpaySigAdastraBadDebtAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpaySigAdastraBadDebtAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpaySigAdastraBadDebtAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_SIG_ADASTRA_BAD_DEBT_ACCT");

                entity.HasOne(d => d.MpaySigCabCollAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpaySigCabCollAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpaySigCabCollAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_SIG_CAB_COLL_ACCT");

                entity.HasOne(d => d.MpaySigCabCollectedAccruedInterestAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpaySigCabCollectedAccruedInterestAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpaySigCabCollectedAccruedInterestAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_SIG_CAB_COLLECTED_ACCRUED_INTEREST_ACCT");

                entity.HasOne(d => d.MpaySigCabDefAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpaySigCabDefAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpaySigCabDefAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_SIG_CAB_DEF_ACCT");

                entity.HasOne(d => d.MpaySigCabDueToLenderSuspenseAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpaySigCabDueToLenderSuspenseAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpaySigCabDueToLenderSuspenseAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_SIG_CAB_DUE_TO_LENDER_SUSPENSE_ACCT");

                entity.HasOne(d => d.MpaySigCabUncollectedAccruedInterestAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpaySigCabUncollectedAccruedInterestAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpaySigCabUncollectedAccruedInterestAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_SIG_CAB_UNCOLLECTED_ACCRUED_INTEREST_ACCT");

                entity.HasOne(d => d.MpaySigCollAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpaySigCollAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpaySigCollAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_SIG_COLL_ACCT");

                entity.HasOne(d => d.MpaySigDecreaseAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpaySigDecreaseAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpaySigDecreaseAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_SIG_DECREASE_ACCT");

                entity.HasOne(d => d.MpaySigDefAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpaySigDefAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpaySigDefAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_SIG_DEF_ACCT");

                entity.HasOne(d => d.MpaySigFasterPaymentsFeeAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpaySigFasterPaymentsFeeAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpaySigFasterPaymentsFeeAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_SIG_FASTER_PAYMENTS_FEE_ACCT");

                entity.HasOne(d => d.MpaySigFeesAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpaySigFeesAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpaySigFeesAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_SIG_FEES_ACCT");

                entity.HasOne(d => d.MpaySigInterestAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpaySigInterestAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpaySigInterestAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_SIG_INTEREST_ACCT");

                entity.HasOne(d => d.MpaySigInventoryAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpaySigInventoryAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpaySigInventoryAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_SIG_INVENTORY_ACCT");

                entity.HasOne(d => d.MpaySigLegalFeesAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpaySigLegalFeesAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpaySigLegalFeesAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_SIG_LEGAL_FEES_ACCT");

                entity.HasOne(d => d.MpaySigNsfFeeAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpaySigNsfFeeAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpaySigNsfFeeAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_SIG_NSF_FEE_ACCT");

                entity.HasOne(d => d.MpaySigTaxAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpaySigTaxAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpaySigTaxAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_SIG_TAX_ACCT");

                entity.HasOne(d => d.MpaySigTransAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpaySigTransAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpaySigTransAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_SIG_TRANS_ACCT");

                entity.HasOne(d => d.MpayTitle2ndCollAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpayTitle2ndCollAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayTitle2ndCollAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_TITLE_2ND_COLL_ACCT");

                entity.HasOne(d => d.MpayTitle2ndDefAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpayTitle2ndDefAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayTitle2ndDefAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_TITLE_2ND_DEF_ACCT");

                entity.HasOne(d => d.MpayTitle2ndFasterPaymentsFeeAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpayTitle2ndFasterPaymentsFeeAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayTitle2ndFasterPaymentsFeeAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_TITLE_2ND_FASTER_PAYMENTS_FEE_ACCT");

                entity.HasOne(d => d.MpayTitle2ndFeesAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpayTitle2ndFeesAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayTitle2ndFeesAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_TITLE_2ND_FEES_ACCT");

                entity.HasOne(d => d.MpayTitle2ndInterestAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpayTitle2ndInterestAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayTitle2ndInterestAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_TITLE_2ND_INTEREST_ACCT");

                entity.HasOne(d => d.MpayTitle2ndInventoryAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpayTitle2ndInventoryAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayTitle2ndInventoryAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_TITLE_2ND_INVENTORY_ACCT");

                entity.HasOne(d => d.MpayTitle2ndLienAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpayTitle2ndLienAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayTitle2ndLienAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_TITLE_2ND_LIEN_ACCT");

                entity.HasOne(d => d.MpayTitle2ndNsfFeeAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpayTitle2ndNsfFeeAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayTitle2ndNsfFeeAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_TITLE_2ND_NSF_FEE_ACCT");

                entity.HasOne(d => d.MpayTitle2ndTransAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpayTitle2ndTransAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayTitle2ndTransAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_TITLE_2ND_TRANS_ACCT");

                entity.HasOne(d => d.MpayTitleAdastraBadDebtAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpayTitleAdastraBadDebtAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayTitleAdastraBadDebtAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_TITLE_ADASTRA_BAD_DEBT_ACCT");

                entity.HasOne(d => d.MpayTitleCabCollAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpayTitleCabCollAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayTitleCabCollAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_TITLE_CAB_COLL_ACCT");

                entity.HasOne(d => d.MpayTitleCabCollectedAccruedInterestAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpayTitleCabCollectedAccruedInterestAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayTitleCabCollectedAccruedInterestAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_TITLE_CAB_COLLECTED_ACCRUED_INTEREST_ACCT");

                entity.HasOne(d => d.MpayTitleCabDefAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpayTitleCabDefAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayTitleCabDefAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_TITLE_CAB_DEF_ACCT");

                entity.HasOne(d => d.MpayTitleCabDueToLenderSuspenseAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpayTitleCabDueToLenderSuspenseAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayTitleCabDueToLenderSuspenseAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_TITLE_CAB_DUE_TO_LENDER_SUSPENSE_ACCT");

                entity.HasOne(d => d.MpayTitleCabLenderInterestAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpayTitleCabLenderInterestAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayTitleCabLenderInterestAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_TITLE_CAB_LENDER_INTEREST_ACCT");

                entity.HasOne(d => d.MpayTitleCabLenderRiFeeAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpayTitleCabLenderRiFeeAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayTitleCabLenderRiFeeAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_TITLE_CAB_LENDER_RI_FEE_ACCT");

                entity.HasOne(d => d.MpayTitleCabUncollectedAccruedInterestAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpayTitleCabUncollectedAccruedInterestAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayTitleCabUncollectedAccruedInterestAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_TITLE_CAB_UNCOLLECTED_ACCRUED_INTEREST_ACCT");

                entity.HasOne(d => d.MpayTitleCollAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpayTitleCollAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayTitleCollAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_TITLE_COLL_ACCT");

                entity.HasOne(d => d.MpayTitleDecreaseAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpayTitleDecreaseAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayTitleDecreaseAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_TITLE_DECREASE_ACCT");

                entity.HasOne(d => d.MpayTitleDefAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpayTitleDefAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayTitleDefAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_TITLE_DEF_ACCT");

                entity.HasOne(d => d.MpayTitleFasterPaymentsFeeAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpayTitleFasterPaymentsFeeAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayTitleFasterPaymentsFeeAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_TITLE_FASTER_PAYMENTS_FEE_ACCT");

                entity.HasOne(d => d.MpayTitleFeesAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpayTitleFeesAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayTitleFeesAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_TITLE_FEES_ACCT");

                entity.HasOne(d => d.MpayTitleFundingSuspenseAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpayTitleFundingSuspenseAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayTitleFundingSuspenseAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_TITLE_FUNDING_SUSPENSE_ACCT");

                entity.HasOne(d => d.MpayTitleInterestAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpayTitleInterestAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayTitleInterestAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_TITLE_INTEREST_ACCT");

                entity.HasOne(d => d.MpayTitleInventoryAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpayTitleInventoryAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayTitleInventoryAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_TITLE_INVENTORY_ACCT");

                entity.HasOne(d => d.MpayTitleLegalFeesAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpayTitleLegalFeesAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayTitleLegalFeesAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_TITLE_LEGAL_FEES_ACCT");

                entity.HasOne(d => d.MpayTitleLienAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpayTitleLienAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayTitleLienAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_TITLE_LIEN_ACCT");

                entity.HasOne(d => d.MpayTitleNsfFeeAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpayTitleNsfFeeAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayTitleNsfFeeAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_TITLE_NSF_FEE_ACCT");

                entity.HasOne(d => d.MpayTitleTransAcctNavigation)
                    .WithMany(p => p.GlacctGroupMpayTitleTransAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.MpayTitleTransAcct)
                    .HasConstraintName("FK_GLAcctGroup_MPAY_TITLE_TRANS_ACCT");

                entity.HasOne(d => d.OendBlActivityFeeAcctNavigation)
                    .WithMany(p => p.GlacctGroupOendBlActivityFeeAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.OendBlActivityFeeAcct)
                    .HasConstraintName("FK_GLAcctGroup_OEND_BL_ACTIVITY_FEE_ACCT");

                entity.HasOne(d => d.OendBlAdastraBadDebtAcctNavigation)
                    .WithMany(p => p.GlacctGroupOendBlAdastraBadDebtAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.OendBlAdastraBadDebtAcct)
                    .HasConstraintName("FK_GLAcctGroup_OEND_BL_ADASTRA_BAD_DEBT_ACCT");

                entity.HasOne(d => d.OendBlCabCollAcctNavigation)
                    .WithMany(p => p.GlacctGroupOendBlCabCollAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.OendBlCabCollAcct)
                    .HasConstraintName("FK_GLAcctGroup_OEND_BL_CAB_COLL_ACCT");

                entity.HasOne(d => d.OendBlCabCollectedAccruedInterestAcctNavigation)
                    .WithMany(p => p.GlacctGroupOendBlCabCollectedAccruedInterestAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.OendBlCabCollectedAccruedInterestAcct)
                    .HasConstraintName("FK_GLAcctGroup_OEND_BL_CAB_COLLECTED_ACCRUED_INTEREST_ACCT");

                entity.HasOne(d => d.OendBlCabDueToLenderSuspenseAcctNavigation)
                    .WithMany(p => p.GlacctGroupOendBlCabDueToLenderSuspenseAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.OendBlCabDueToLenderSuspenseAcct)
                    .HasConstraintName("FK_GLAcctGroup_OEND_BL_CAB_DUE_TO_LENDER_SUSPENSE_ACCT");

                entity.HasOne(d => d.OendBlCabFeeReceivableAcctNavigation)
                    .WithMany(p => p.GlacctGroupOendBlCabFeeReceivableAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.OendBlCabFeeReceivableAcct)
                    .HasConstraintName("FK_GLAcctGroup_OEND_BL_CAB_FEE_RECEIVABLE_ACCT");

                entity.HasOne(d => d.OendBlCabLenderInterestAcctNavigation)
                    .WithMany(p => p.GlacctGroupOendBlCabLenderInterestAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.OendBlCabLenderInterestAcct)
                    .HasConstraintName("FK_GLAcctGroup_OEND_BL_CAB_LENDER_INTEREST_ACCT");

                entity.HasOne(d => d.OendBlCabLenderRiFeeAcctNavigation)
                    .WithMany(p => p.GlacctGroupOendBlCabLenderRiFeeAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.OendBlCabLenderRiFeeAcct)
                    .HasConstraintName("FK_GLAcctGroup_OEND_BL_CAB_LENDER_RI_FEE_ACCT");

                entity.HasOne(d => d.OendBlCabRiAcctNavigation)
                    .WithMany(p => p.GlacctGroupOendBlCabRiAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.OendBlCabRiAcct)
                    .HasConstraintName("FK_GLAcctGroup_OEND_BL_CAB_RI_ACCT");

                entity.HasOne(d => d.OendBlCabUncollectedAccruedInterestAcctNavigation)
                    .WithMany(p => p.GlacctGroupOendBlCabUncollectedAccruedInterestAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.OendBlCabUncollectedAccruedInterestAcct)
                    .HasConstraintName("FK_GLAcctGroup_OEND_BL_CAB_UNCOLLECTED_ACCRUED_INTEREST_ACCT");

                entity.HasOne(d => d.OendBlCollAcctNavigation)
                    .WithMany(p => p.GlacctGroupOendBlCollAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.OendBlCollAcct)
                    .HasConstraintName("FK_GLAcctGroup_OEND_BL_COLL_ACCT");

                entity.HasOne(d => d.OendBlDecreaseAcctNavigation)
                    .WithMany(p => p.GlacctGroupOendBlDecreaseAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.OendBlDecreaseAcct)
                    .HasConstraintName("FK_GLAcctGroup_OEND_BL_DECREASE_ACCT");

                entity.HasOne(d => d.OendBlDiscountAcctNavigation)
                    .WithMany(p => p.GlacctGroupOendBlDiscountAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.OendBlDiscountAcct)
                    .HasConstraintName("FK_GLAcctGroup_OEND_BL_DISCOUNT_ACCT");

                entity.HasOne(d => d.OendBlInterestAcctNavigation)
                    .WithMany(p => p.GlacctGroupOendBlInterestAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.OendBlInterestAcct)
                    .HasConstraintName("FK_GLAcctGroup_OEND_BL_INTEREST_ACCT");

                entity.HasOne(d => d.OendBlInventoryAcctNavigation)
                    .WithMany(p => p.GlacctGroupOendBlInventoryAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.OendBlInventoryAcct)
                    .HasConstraintName("FK_GLAcctGroup_OEND_BL_INVENTORY_ACCT");

                entity.HasOne(d => d.OendBlRiAcctNavigation)
                    .WithMany(p => p.GlacctGroupOendBlRiAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.OendBlRiAcct)
                    .HasConstraintName("FK_GLAcctGroup_OEND_BL_RI_ACCT");

                entity.HasOne(d => d.OendBlTransFeeAcctNavigation)
                    .WithMany(p => p.GlacctGroupOendBlTransFeeAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.OendBlTransFeeAcct)
                    .HasConstraintName("FK_GLAcctGroup_OEND_BL_TRANS_FEE_ACCT");

                entity.HasOne(d => d.OendTitle2ndCabCollAcctNavigation)
                    .WithMany(p => p.GlacctGroupOendTitle2ndCabCollAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.OendTitle2ndCabCollAcct)
                    .HasConstraintName("FK_GLAcctGroup_OEND_TITLE_2ND_CAB_COLL_ACCT");

                entity.HasOne(d => d.OendTitle2ndCabCollectedAccruedInterestAcctNavigation)
                    .WithMany(p => p.GlacctGroupOendTitle2ndCabCollectedAccruedInterestAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.OendTitle2ndCabCollectedAccruedInterestAcct)
                    .HasConstraintName("FK_GLAcctGroup_OEND_TITLE_2ND_CAB_COLLECTED_ACCRUED_INTEREST_ACCT");

                entity.HasOne(d => d.OendTitle2ndCabDefAcctNavigation)
                    .WithMany(p => p.GlacctGroupOendTitle2ndCabDefAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.OendTitle2ndCabDefAcct)
                    .HasConstraintName("FK_GLAcctGroup_OEND_TITLE_2ND_CAB_DEF_ACCT");

                entity.HasOne(d => d.OendTitle2ndCabDueToLenderSuspenseAcctNavigation)
                    .WithMany(p => p.GlacctGroupOendTitle2ndCabDueToLenderSuspenseAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.OendTitle2ndCabDueToLenderSuspenseAcct)
                    .HasConstraintName("FK_GLAcctGroup_OEND_TITLE_2ND_CAB_DUE_TO_LENDER_SUSPENSE_ACCT");

                entity.HasOne(d => d.OendTitle2ndCabFeeReceivableAcctNavigation)
                    .WithMany(p => p.GlacctGroupOendTitle2ndCabFeeReceivableAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.OendTitle2ndCabFeeReceivableAcct)
                    .HasConstraintName("FK_GLAcctGroup_OEND_TITLE_2ND_CAB_FEE_RECEIVABLE_ACCT");

                entity.HasOne(d => d.OendTitle2ndCabUncollectedAccruedInterestAcctNavigation)
                    .WithMany(p => p.GlacctGroupOendTitle2ndCabUncollectedAccruedInterestAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.OendTitle2ndCabUncollectedAccruedInterestAcct)
                    .HasConstraintName("FK_GLAcctGroup_OEND_TITLE_2ND_CAB_UNCOLLECTED_ACCRUED_INTEREST_ACCT");

                entity.HasOne(d => d.OendTitle2ndCollAcctNavigation)
                    .WithMany(p => p.GlacctGroupOendTitle2ndCollAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.OendTitle2ndCollAcct)
                    .HasConstraintName("FK_GLAcctGroup_OEND_TITLE_2ND_COLL_ACCT");

                entity.HasOne(d => d.OendTitle2ndDefAcctNavigation)
                    .WithMany(p => p.GlacctGroupOendTitle2ndDefAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.OendTitle2ndDefAcct)
                    .HasConstraintName("FK_GLAcctGroup_OEND_TITLE_2ND_DEF_ACCT");

                entity.HasOne(d => d.OendTitle2ndDiscountAcctNavigation)
                    .WithMany(p => p.GlacctGroupOendTitle2ndDiscountAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.OendTitle2ndDiscountAcct)
                    .HasConstraintName("FK_GLAcctGroup_OEND_TITLE_2ND_DISCOUNT_ACCT");

                entity.HasOne(d => d.OendTitle2ndFeesAcctNavigation)
                    .WithMany(p => p.GlacctGroupOendTitle2ndFeesAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.OendTitle2ndFeesAcct)
                    .HasConstraintName("FK_GLAcctGroup_OEND_TITLE_2ND_FEES_ACCT");

                entity.HasOne(d => d.OendTitle2ndInventoryAcctNavigation)
                    .WithMany(p => p.GlacctGroupOendTitle2ndInventoryAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.OendTitle2ndInventoryAcct)
                    .HasConstraintName("FK_GLAcctGroup_OEND_TITLE_2ND_INVENTORY_ACCT");

                entity.HasOne(d => d.OendTitle2ndLienAcctNavigation)
                    .WithMany(p => p.GlacctGroupOendTitle2ndLienAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.OendTitle2ndLienAcct)
                    .HasConstraintName("FK_GLAcctGroup_OEND_TITLE_2ND_LIEN_ACCT");

                entity.HasOne(d => d.OendTitle2ndTransAcctNavigation)
                    .WithMany(p => p.GlacctGroupOendTitle2ndTransAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.OendTitle2ndTransAcct)
                    .HasConstraintName("FK_GLAcctGroup_OEND_TITLE_2ND_TRANS_ACCT");

                entity.HasOne(d => d.OendTitleAdastraBadDebtAcctNavigation)
                    .WithMany(p => p.GlacctGroupOendTitleAdastraBadDebtAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.OendTitleAdastraBadDebtAcct)
                    .HasConstraintName("FK_GLAcctGroup_OEND_TITLE_ADASTRA_BAD_DEBT_ACCT");

                entity.HasOne(d => d.OendTitleCabCollAcctNavigation)
                    .WithMany(p => p.GlacctGroupOendTitleCabCollAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.OendTitleCabCollAcct)
                    .HasConstraintName("FK_GLAcctGroup_OEND_TITLE_CAB_COLL_ACCT");

                entity.HasOne(d => d.OendTitleCabCollectedAccruedInterestAcctNavigation)
                    .WithMany(p => p.GlacctGroupOendTitleCabCollectedAccruedInterestAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.OendTitleCabCollectedAccruedInterestAcct)
                    .HasConstraintName("FK_GLAcctGroup_OEND_TITLE_CAB_COLLECTED_ACCRUED_INTEREST_ACCT");

                entity.HasOne(d => d.OendTitleCabDefAcctNavigation)
                    .WithMany(p => p.GlacctGroupOendTitleCabDefAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.OendTitleCabDefAcct)
                    .HasConstraintName("FK_GLAcctGroup_OEND_TITLE_CAB_DEF_ACCT");

                entity.HasOne(d => d.OendTitleCabDueToLenderSuspenseAcctNavigation)
                    .WithMany(p => p.GlacctGroupOendTitleCabDueToLenderSuspenseAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.OendTitleCabDueToLenderSuspenseAcct)
                    .HasConstraintName("FK_GLAcctGroup_OEND_TITLE_CAB_DUE_TO_LENDER_SUSPENSE_ACCT");

                entity.HasOne(d => d.OendTitleCabFeeReceivableAcctNavigation)
                    .WithMany(p => p.GlacctGroupOendTitleCabFeeReceivableAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.OendTitleCabFeeReceivableAcct)
                    .HasConstraintName("FK_GLAcctGroup_OEND_TITLE_CAB_FEE_RECEIVABLE_ACCT");

                entity.HasOne(d => d.OendTitleCabLenderInterestAcctNavigation)
                    .WithMany(p => p.GlacctGroupOendTitleCabLenderInterestAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.OendTitleCabLenderInterestAcct)
                    .HasConstraintName("FK_GLAcctGroup_OEND_TITLE_CAB_LENDER_INTEREST_ACCT");

                entity.HasOne(d => d.OendTitleCabLenderRiFeeAcctNavigation)
                    .WithMany(p => p.GlacctGroupOendTitleCabLenderRiFeeAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.OendTitleCabLenderRiFeeAcct)
                    .HasConstraintName("FK_GLAcctGroup_OEND_TITLE_CAB_LENDER_RI_FEE_ACCT");

                entity.HasOne(d => d.OendTitleCabUncollectedAccruedInterestAcctNavigation)
                    .WithMany(p => p.GlacctGroupOendTitleCabUncollectedAccruedInterestAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.OendTitleCabUncollectedAccruedInterestAcct)
                    .HasConstraintName("FK_GLAcctGroup_OEND_TITLE_CAB_UNCOLLECTED_ACCRUED_INTEREST_ACCT");

                entity.HasOne(d => d.OendTitleCollAcctNavigation)
                    .WithMany(p => p.GlacctGroupOendTitleCollAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.OendTitleCollAcct)
                    .HasConstraintName("FK_GLAcctGroup_OEND_TITLE_COLL_ACCT");

                entity.HasOne(d => d.OendTitleDecreaseAcctNavigation)
                    .WithMany(p => p.GlacctGroupOendTitleDecreaseAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.OendTitleDecreaseAcct)
                    .HasConstraintName("FK_GLAcctGroup_OEND_TITLE_DECREASE_ACCT");

                entity.HasOne(d => d.OendTitleDefAcctNavigation)
                    .WithMany(p => p.GlacctGroupOendTitleDefAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.OendTitleDefAcct)
                    .HasConstraintName("FK_GLAcctGroup_OEND_TITLE_DEF_ACCT");

                entity.HasOne(d => d.OendTitleDiscountAcctNavigation)
                    .WithMany(p => p.GlacctGroupOendTitleDiscountAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.OendTitleDiscountAcct)
                    .HasConstraintName("FK_GLAcctGroup_OEND_TITLE_DISCOUNT_ACCT");

                entity.HasOne(d => d.OendTitleFeesAcctNavigation)
                    .WithMany(p => p.GlacctGroupOendTitleFeesAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.OendTitleFeesAcct)
                    .HasConstraintName("FK_GLAcctGroup_OEND_TITLE_FEES_ACCT");

                entity.HasOne(d => d.OendTitleInventoryAcctNavigation)
                    .WithMany(p => p.GlacctGroupOendTitleInventoryAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.OendTitleInventoryAcct)
                    .HasConstraintName("FK_GLAcctGroup_OEND_TITLE_INVENTORY_ACCT");

                entity.HasOne(d => d.OendTitleLienAcctNavigation)
                    .WithMany(p => p.GlacctGroupOendTitleLienAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.OendTitleLienAcct)
                    .HasConstraintName("FK_GLAcctGroup_OEND_TITLE_LIEN_ACCT");

                entity.HasOne(d => d.OendTitleTransAcctNavigation)
                    .WithMany(p => p.GlacctGroupOendTitleTransAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.OendTitleTransAcct)
                    .HasConstraintName("FK_GLAcctGroup_OEND_TITLE_TRANS_ACCT");

                entity.HasOne(d => d.ReturnCheckCashedChecksAcctNavigation)
                    .WithMany(p => p.GlacctGroupReturnCheckCashedChecksAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.ReturnCheckCashedChecksAcct)
                    .HasConstraintName("FK_GLAcctGroup_RETURN_CHECK_CASHED_CHECKS_ACCT");

                entity.HasOne(d => d.ReturnCheckPaydayChecksAcctNavigation)
                    .WithMany(p => p.GlacctGroupReturnCheckPaydayChecksAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.ReturnCheckPaydayChecksAcct)
                    .HasConstraintName("FK_GLAcctGroup_RETURN_CHECK_PAYDAY_CHECKS_ACCT");

                entity.HasOne(d => d.SpayPaydayAdastraBadDebtAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayPaydayAdastraBadDebtAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayPaydayAdastraBadDebtAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_PAYDAY_ADASTRA_BAD_DEBT_ACCT");

                entity.HasOne(d => d.SpayPaydayBadDebtAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayPaydayBadDebtAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayPaydayBadDebtAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_PAYDAY_BAD_DEBT_ACCT");

                entity.HasOne(d => d.SpayPaydayChecksCabCollAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayPaydayChecksCabCollAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayPaydayChecksCabCollAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_PAYDAY_CHECKS_CAB_COLL_ACCT");

                entity.HasOne(d => d.SpayPaydayChecksCabFeeRecvAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayPaydayChecksCabFeeRecvAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayPaydayChecksCabFeeRecvAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_PAYDAY_CHECKS_CAB_FEE_RECV_ACCT");

                entity.HasOne(d => d.SpayPaydayChecksCabLenderInterestAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayPaydayChecksCabLenderInterestAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayPaydayChecksCabLenderInterestAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_PAYDAY_CHECKS_CAB_LENDER_INTEREST_ACCT");

                entity.HasOne(d => d.SpayPaydayChecksCabRiAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayPaydayChecksCabRiAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayPaydayChecksCabRiAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_PAYDAY_CHECKS_CAB_RI_ACCT");

                entity.HasOne(d => d.SpayPaydayChecksCollAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayPaydayChecksCollAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayPaydayChecksCollAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_PAYDAY_CHECKS_COLL_ACCT");

                entity.HasOne(d => d.SpayPaydayChecksDiscountAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayPaydayChecksDiscountAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayPaydayChecksDiscountAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_PAYDAY_CHECKS_DISCOUNT_ACCT");

                entity.HasOne(d => d.SpayPaydayChecksFasterPaymentsFeeAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayPaydayChecksFasterPaymentsFeeAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayPaydayChecksFasterPaymentsFeeAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_PAYDAY_CHECKS_FASTER_PAYMENTS_FEE_ACCT");

                entity.HasOne(d => d.SpayPaydayChecksFeesAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayPaydayChecksFeesAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayPaydayChecksFeesAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_PAYDAY_CHECKS_FEES_ACCT");

                entity.HasOne(d => d.SpayPaydayChecksInterestAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayPaydayChecksInterestAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayPaydayChecksInterestAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_PAYDAY_CHECKS_INTEREST_ACCT");

                entity.HasOne(d => d.SpayPaydayChecksInventoryAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayPaydayChecksInventoryAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayPaydayChecksInventoryAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_PAYDAY_CHECKS_INVENTORY_ACCT");

                entity.HasOne(d => d.SpayPaydayChecksLegalFeeAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayPaydayChecksLegalFeeAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayPaydayChecksLegalFeeAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_PAYDAY_CHECKS_LEGAL_FEE_ACCT");

                entity.HasOne(d => d.SpayPaydayChecksNsfFeeAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayPaydayChecksNsfFeeAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayPaydayChecksNsfFeeAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_PAYDAY_CHECKS_NSF_FEE_ACCT");

                entity.HasOne(d => d.SpayPaydayChecksRebateAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayPaydayChecksRebateAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayPaydayChecksRebateAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_PAYDAY_CHECKS_REBATE_ACCT");

                entity.HasOne(d => d.SpayPaydayChecksRiAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayPaydayChecksRiAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayPaydayChecksRiAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_PAYDAY_CHECKS_RI_ACCT");

                entity.HasOne(d => d.SpayPaydayChecksRolloverFeeAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayPaydayChecksRolloverFeeAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayPaydayChecksRolloverFeeAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_PAYDAY_CHECKS_ROLLOVER_FEE_ACCT");

                entity.HasOne(d => d.SpayPaydayDebitCardsCabCollAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayPaydayDebitCardsCabCollAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayPaydayDebitCardsCabCollAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_PAYDAY_DEBIT_CARDS_CAB_COLL_ACCT");

                entity.HasOne(d => d.SpayPaydayDebitCardsCabFeeRecvAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayPaydayDebitCardsCabFeeRecvAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayPaydayDebitCardsCabFeeRecvAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_PAYDAY_DEBIT_CARDS_CAB_FEE_RECV_ACCT");

                entity.HasOne(d => d.SpayPaydayDebitCardsCabLenderInterestAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayPaydayDebitCardsCabLenderInterestAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayPaydayDebitCardsCabLenderInterestAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_PAYDAY_DEBIT_CARDS_CAB_LENDER_INTEREST_ACCT");

                entity.HasOne(d => d.SpayPaydayDebitCardsCabRiAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayPaydayDebitCardsCabRiAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayPaydayDebitCardsCabRiAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_PAYDAY_DEBIT_CARDS_CAB_RI_ACCT");

                entity.HasOne(d => d.SpayPaydayDebitCardsCollAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayPaydayDebitCardsCollAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayPaydayDebitCardsCollAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_PAYDAY_DEBIT_CARDS_COLL_ACCT");

                entity.HasOne(d => d.SpayPaydayDebitCardsDiscountAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayPaydayDebitCardsDiscountAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayPaydayDebitCardsDiscountAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_PAYDAY_DEBIT_CARDS_DISCOUNT_ACCT");

                entity.HasOne(d => d.SpayPaydayDebitCardsFasterPaymentsFeeAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayPaydayDebitCardsFasterPaymentsFeeAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayPaydayDebitCardsFasterPaymentsFeeAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_PAYDAY_DEBIT_CARDS_FASTER_PAYMENTS_FEE_ACCT");

                entity.HasOne(d => d.SpayPaydayDebitCardsFeesAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayPaydayDebitCardsFeesAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayPaydayDebitCardsFeesAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_PAYDAY_DEBIT_CARDS_FEES_ACCT");

                entity.HasOne(d => d.SpayPaydayDebitCardsFundingSuspenseAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayPaydayDebitCardsFundingSuspenseAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayPaydayDebitCardsFundingSuspenseAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_PAYDAY_DEBIT_CARDS_FUNDING_SUSPENSE_ACCT");

                entity.HasOne(d => d.SpayPaydayDebitCardsInterestAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayPaydayDebitCardsInterestAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayPaydayDebitCardsInterestAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_PAYDAY_DEBIT_CARDS_INTEREST_ACCT");

                entity.HasOne(d => d.SpayPaydayDebitCardsInventoryAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayPaydayDebitCardsInventoryAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayPaydayDebitCardsInventoryAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_PAYDAY_DEBIT_CARDS_INVENTORY_ACCT");

                entity.HasOne(d => d.SpayPaydayDebitCardsLegalFeeAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayPaydayDebitCardsLegalFeeAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayPaydayDebitCardsLegalFeeAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_PAYDAY_DEBIT_CARDS_LEGAL_FEE_ACCT");

                entity.HasOne(d => d.SpayPaydayDebitCardsNsfFeeAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayPaydayDebitCardsNsfFeeAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayPaydayDebitCardsNsfFeeAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_PAYDAY_DEBIT_CARDS_NSF_FEE_ACCT");

                entity.HasOne(d => d.SpayPaydayDebitCardsRebateAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayPaydayDebitCardsRebateAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayPaydayDebitCardsRebateAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_PAYDAY_DEBIT_CARDS_REBATE_ACCT");

                entity.HasOne(d => d.SpayPaydayDebitCardsRiAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayPaydayDebitCardsRiAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayPaydayDebitCardsRiAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_PAYDAY_DEBIT_CARDS_RI_ACCT");

                entity.HasOne(d => d.SpayPaydayDebitCardsRolloverFeeAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayPaydayDebitCardsRolloverFeeAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayPaydayDebitCardsRolloverFeeAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_PAYDAY_DEBIT_CARDS_ROLLOVER_FEE_ACCT");

                entity.HasOne(d => d.SpayPaydayDecreaseAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayPaydayDecreaseAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayPaydayDecreaseAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_PAYDAY_DECREASE_ACCT");

                entity.HasOne(d => d.SpayPaydayEftCollectionsClearingAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayPaydayEftCollectionsClearingAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayPaydayEftCollectionsClearingAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_PAYDAY_EFT_COLLECTIONS_CLEARING_ACCT");

                entity.HasOne(d => d.SpayPaydayPadBankClearingAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayPaydayPadBankClearingAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayPaydayPadBankClearingAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_PAYDAY_PAD_BANK_CLEARING_ACCT");

                entity.HasOne(d => d.SpayPaydayRolloverSuspenseAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayPaydayRolloverSuspenseAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayPaydayRolloverSuspenseAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_PAYDAY_ROLLOVER_SUSPENSE_ACCT");

                entity.HasOne(d => d.SpaySigAdastraBadDebtAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpaySigAdastraBadDebtAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpaySigAdastraBadDebtAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_SIG_ADASTRA_BAD_DEBT_ACCT");

                entity.HasOne(d => d.SpaySigCabCollAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpaySigCabCollAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpaySigCabCollAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_SIG_CAB_COLL_ACCT");

                entity.HasOne(d => d.SpaySigCabDefAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpaySigCabDefAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpaySigCabDefAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_SIG_CAB_DEF_ACCT");

                entity.HasOne(d => d.SpaySigCabFeeRecvAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpaySigCabFeeRecvAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpaySigCabFeeRecvAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_SIG_CAB_FEE_RECV_ACCT");

                entity.HasOne(d => d.SpaySigCabLenderInterestAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpaySigCabLenderInterestAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpaySigCabLenderInterestAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_SIG_CAB_LENDER_INTEREST_ACCT");

                entity.HasOne(d => d.SpaySigCollAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpaySigCollAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpaySigCollAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_SIG_COLL_ACCT");

                entity.HasOne(d => d.SpaySigDefAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpaySigDefAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpaySigDefAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_SIG_DEF_ACCT");

                entity.HasOne(d => d.SpaySigFasterPaymentsFeeAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpaySigFasterPaymentsFeeAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpaySigFasterPaymentsFeeAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_SIG_FASTER_PAYMENTS_FEE_ACCT");

                entity.HasOne(d => d.SpaySigFeesAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpaySigFeesAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpaySigFeesAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_SIG_FEES_ACCT");

                entity.HasOne(d => d.SpaySigInterestAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpaySigInterestAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpaySigInterestAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_SIG_INTEREST_ACCT");

                entity.HasOne(d => d.SpaySigInventoryAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpaySigInventoryAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpaySigInventoryAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_SIG_INVENTORY_ACCT");

                entity.HasOne(d => d.SpaySigLegalFeeAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpaySigLegalFeeAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpaySigLegalFeeAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_SIG_LEGAL_FEE_ACCT");

                entity.HasOne(d => d.SpaySigNsfFeeAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpaySigNsfFeeAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpaySigNsfFeeAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_SIG_NSF_FEE_ACCT");

                entity.HasOne(d => d.SpaySigRolloverFeeAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpaySigRolloverFeeAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpaySigRolloverFeeAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_SIG_ROLLOVER_FEE_ACCT");

                entity.HasOne(d => d.SpaySigTransAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpaySigTransAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpaySigTransAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_SIG_TRANS_ACCT");

                entity.HasOne(d => d.SpayTitle2ndCabCollAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayTitle2ndCabCollAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayTitle2ndCabCollAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_TITLE_2ND_CAB_COLL_ACCT");

                entity.HasOne(d => d.SpayTitle2ndCabDefAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayTitle2ndCabDefAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayTitle2ndCabDefAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_TITLE_2ND_CAB_DEF_ACCT");

                entity.HasOne(d => d.SpayTitle2ndCabFeeRecvAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayTitle2ndCabFeeRecvAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayTitle2ndCabFeeRecvAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_TITLE_2ND_CAB_FEE_RECV_ACCT");

                entity.HasOne(d => d.SpayTitle2ndCabLenderInterestAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayTitle2ndCabLenderInterestAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayTitle2ndCabLenderInterestAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_TITLE_2ND_CAB_LENDER_INTEREST_ACCT");

                entity.HasOne(d => d.SpayTitle2ndCollAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayTitle2ndCollAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayTitle2ndCollAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_TITLE_2ND_COLL_ACCT");

                entity.HasOne(d => d.SpayTitle2ndDefAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayTitle2ndDefAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayTitle2ndDefAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_TITLE_2ND_DEF_ACCT");

                entity.HasOne(d => d.SpayTitle2ndFasterPaymentsFeeAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayTitle2ndFasterPaymentsFeeAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayTitle2ndFasterPaymentsFeeAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_TITLE_2ND_FASTER_PAYMENTS_FEE_ACCT");

                entity.HasOne(d => d.SpayTitle2ndFeesAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayTitle2ndFeesAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayTitle2ndFeesAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_TITLE_2ND_FEES_ACCT");

                entity.HasOne(d => d.SpayTitle2ndInterestAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayTitle2ndInterestAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayTitle2ndInterestAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_TITLE_2ND_INTEREST_ACCT");

                entity.HasOne(d => d.SpayTitle2ndInventoryAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayTitle2ndInventoryAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayTitle2ndInventoryAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_TITLE_2ND_INVENTORY_ACCT");

                entity.HasOne(d => d.SpayTitle2ndLegalFeeAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayTitle2ndLegalFeeAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayTitle2ndLegalFeeAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_TITLE_2ND_LEGAL_FEE_ACCT");

                entity.HasOne(d => d.SpayTitle2ndLienAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayTitle2ndLienAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayTitle2ndLienAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_TITLE_2ND_LIEN_ACCT");

                entity.HasOne(d => d.SpayTitle2ndNsfFeeAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayTitle2ndNsfFeeAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayTitle2ndNsfFeeAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_TITLE_2ND_NSF_FEE_ACCT");

                entity.HasOne(d => d.SpayTitle2ndRolloverFeeAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayTitle2ndRolloverFeeAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayTitle2ndRolloverFeeAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_TITLE_2ND_ROLLOVER_FEE_ACCT");

                entity.HasOne(d => d.SpayTitle2ndSurchAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayTitle2ndSurchAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayTitle2ndSurchAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_TITLE_2ND_SURCH_ACCT");

                entity.HasOne(d => d.SpayTitle2ndTransAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayTitle2ndTransAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayTitle2ndTransAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_TITLE_2ND_TRANS_ACCT");

                entity.HasOne(d => d.SpayTitleAdastraBadDebtAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayTitleAdastraBadDebtAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayTitleAdastraBadDebtAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_TITLE_ADASTRA_BAD_DEBT_ACCT");

                entity.HasOne(d => d.SpayTitleCabCollAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayTitleCabCollAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayTitleCabCollAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_TITLE_CAB_COLL_ACCT");

                entity.HasOne(d => d.SpayTitleCabDefAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayTitleCabDefAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayTitleCabDefAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_TITLE_CAB_DEF_ACCT");

                entity.HasOne(d => d.SpayTitleCabFeeRecvAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayTitleCabFeeRecvAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayTitleCabFeeRecvAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_TITLE_CAB_FEE_RECV_ACCT");

                entity.HasOne(d => d.SpayTitleCabLenderInterestAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayTitleCabLenderInterestAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayTitleCabLenderInterestAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_TITLE_CAB_LENDER_INTEREST_ACCT");

                entity.HasOne(d => d.SpayTitleCollAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayTitleCollAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayTitleCollAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_TITLE_COLL_ACCT");

                entity.HasOne(d => d.SpayTitleDecreaseAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayTitleDecreaseAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayTitleDecreaseAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_TITLE_DECREASE_ACCT");

                entity.HasOne(d => d.SpayTitleDefAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayTitleDefAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayTitleDefAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_TITLE_DEF_ACCT");

                entity.HasOne(d => d.SpayTitleFasterPaymentsFeeAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayTitleFasterPaymentsFeeAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayTitleFasterPaymentsFeeAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_TITLE_FASTER_PAYMENTS_FEE_ACCT");

                entity.HasOne(d => d.SpayTitleFeesAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayTitleFeesAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayTitleFeesAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_TITLE_FEES_ACCT");

                entity.HasOne(d => d.SpayTitleInterestAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayTitleInterestAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayTitleInterestAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_TITLE_INTEREST_ACCT");

                entity.HasOne(d => d.SpayTitleInventoryAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayTitleInventoryAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayTitleInventoryAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_TITLE_INVENTORY_ACCT");

                entity.HasOne(d => d.SpayTitleLegalFeeAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayTitleLegalFeeAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayTitleLegalFeeAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_TITLE_LEGAL_FEE_ACCT");

                entity.HasOne(d => d.SpayTitleLienAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayTitleLienAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayTitleLienAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_TITLE_LIEN_ACCT");

                entity.HasOne(d => d.SpayTitleNsfFeeAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayTitleNsfFeeAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayTitleNsfFeeAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_TITLE_NSF_FEE_ACCT");

                entity.HasOne(d => d.SpayTitleRolloverFeeAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayTitleRolloverFeeAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayTitleRolloverFeeAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_TITLE_ROLLOVER_FEE_ACCT");

                entity.HasOne(d => d.SpayTitleSurchAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayTitleSurchAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayTitleSurchAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_TITLE_SURCH_ACCT");

                entity.HasOne(d => d.SpayTitleTransAcctNavigation)
                    .WithMany(p => p.GlacctGroupSpayTitleTransAcctNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.SpayTitleTransAcct)
                    .HasConstraintName("FK_GLAcctGroup_SPAY_TITLE_TRANS_ACCT");
            });

            modelBuilder.Entity<Global>(entity =>
            {
                entity.HasKey(e => e.GlobalKey)
                    .HasName("PK__Global__59BBFE0C");

                entity.Property(e => e.GlobalKey)
                    .HasColumnName("GLOBAL_KEY")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.AccountVerificationValidForXDays).HasColumnName("ACCOUNT_VERIFICATION_VALID_FOR_X_DAYS");

                entity.Property(e => e.AdAstraCommissionPct).HasColumnName("AD_ASTRA_COMMISSION_PCT");

                entity.Property(e => e.AdAstraNpaEppKey)
                    .IsRequired()
                    .HasColumnName("AD_ASTRA_NPA_EPP_KEY")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.AppName)
                    .IsRequired()
                    .HasColumnName("APP_NAME")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.AppVersion)
                    .HasColumnName("APP_VERSION")
                    .HasColumnType("decimal");

                entity.Property(e => e.AvsValidationCoolOffHours).HasColumnName("AVS_VALIDATION_COOL_OFF_HOURS");

                entity.Property(e => e.BreakingOutOfCollectionsAndFeeAttemptsEnabled).HasColumnName("BREAKING_OUT_OF_COLLECTIONS_AND_FEE_ATTEMPTS_ENABLED");

                entity.Property(e => e.CapsCcMaxattemptMpay).HasColumnName("CAPS_CC_MAXATTEMPT_MPAY");

                entity.Property(e => e.CapsCcMaxattemptOend).HasColumnName("CAPS_CC_MAXATTEMPT_OEND");

                entity.Property(e => e.CapsCcMaxattemptSpay).HasColumnName("CAPS_CC_MAXATTEMPT_SPAY");

                entity.Property(e => e.CheckagainDefaultedDays).HasColumnName("CHECKAGAIN_DEFAULTED_DAYS");

                entity.Property(e => e.ChiefExecutiveOfficer)
                    .IsRequired()
                    .HasColumnName("CHIEF_EXECUTIVE_OFFICER")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.CompanyNum)
                    .IsRequired()
                    .HasColumnName("COMPANY_NUM")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.ConversionSqlFilename)
                    .IsRequired()
                    .HasColumnName("CONVERSION_SQL_FILENAME")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.ConversionSqlUpdated).HasColumnName("CONVERSION_SQL_UPDATED");

                entity.Property(e => e.CustomerFeedbackEnabled).HasColumnName("CUSTOMER_FEEDBACK_ENABLED");

                entity.Property(e => e.DataProtectionRegistrationNum)
                    .IsRequired()
                    .HasColumnName("DATA_PROTECTION_REGISTRATION_NUM")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.DaysChecksNotRereturnable).HasColumnName("DAYS_CHECKS_NOT_RERETURNABLE");

                entity.Property(e => e.DeclineCoolingOffMin).HasColumnName("DECLINE_COOLING_OFF_MIN");

                entity.Property(e => e.DocStatusStartDate)
                    .HasColumnName("DOC_STATUS_START_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DocTrackStartDate)
                    .HasColumnName("DOC_TRACK_START_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EnableAmlReporting).HasColumnName("ENABLE_AML_REPORTING");

                entity.Property(e => e.EnableDeclineCoolingOff).HasColumnName("ENABLE_DECLINE_COOLING_OFF");

                entity.Property(e => e.FieldSolutionsPassword)
                    .IsRequired()
                    .HasColumnName("FIELD_SOLUTIONS_PASSWORD")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.GoldLastUpdate)
                    .HasColumnName("GOLD_LAST_UPDATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.GoldPricePerGram)
                    .HasColumnName("GOLD_PRICE_PER_GRAM")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.GreaterTargetVariance)
                    .HasColumnName("GREATER_TARGET_VARIANCE")
                    .HasColumnType("decimal");

                entity.Property(e => e.IncludePreAuthInMaxAttemptsCnt).HasColumnName("INCLUDE_PRE_AUTH_IN_MAX_ATTEMPTS_CNT");

                entity.Property(e => e.IncomeGrossLowerLimit)
                    .HasColumnName("INCOME_GROSS_LOWER_LIMIT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.IncomeGrossUpperLimit)
                    .HasColumnName("INCOME_GROSS_UPPER_LIMIT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.IncomeNetLowerLimit)
                    .HasColumnName("INCOME_NET_LOWER_LIMIT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.IncomeNetUpperLimit)
                    .HasColumnName("INCOME_NET_UPPER_LIMIT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.InterimPermissionNum)
                    .IsRequired()
                    .HasColumnName("INTERIM_PERMISSION_NUM")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.KarpowerPassword)
                    .IsRequired()
                    .HasColumnName("KARPOWER_PASSWORD")
                    .HasColumnType("varchar(16)");

                entity.Property(e => e.KbbMileageThreshold).HasColumnName("KBB_MILEAGE_THRESHOLD");

                entity.Property(e => e.KbbPassword)
                    .IsRequired()
                    .HasColumnName("KBB_PASSWORD")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.KbbUsername)
                    .IsRequired()
                    .HasColumnName("KBB_USERNAME")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.LastDialerImport)
                    .HasColumnName("LAST_DIALER_IMPORT")
                    .HasColumnType("datetime");

                entity.Property(e => e.LastRelease)
                    .HasColumnName("Last_Release")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.LastTdKeyIntShort).HasColumnName("LAST_TD_KEY_INT_SHORT");

                entity.Property(e => e.LastUsedTelpaySequenceNbr).HasColumnName("LAST_USED_TELPAY_SEQUENCE_NBR");

                entity.Property(e => e.LessTargetVariance)
                    .HasColumnName("LESS_TARGET_VARIANCE")
                    .HasColumnType("decimal");

                entity.Property(e => e.LoanDocSyncIgnoreExt1).HasColumnName("LOAN_DOC_SYNC_IGNORE_EXT_1");

                entity.Property(e => e.LoanDocSyncIgnoreExt2).HasColumnName("LOAN_DOC_SYNC_IGNORE_EXT_2");

                entity.Property(e => e.LoanDocSyncIgnoreExt3).HasColumnName("LOAN_DOC_SYNC_IGNORE_EXT_3");

                entity.Property(e => e.LoanDocSyncIgnoreExt4).HasColumnName("LOAN_DOC_SYNC_IGNORE_EXT_4");

                entity.Property(e => e.LoanDocSyncIncRev1).HasColumnName("LOAN_DOC_SYNC_INC_REV_1");

                entity.Property(e => e.LoanDocSyncIncRev2).HasColumnName("LOAN_DOC_SYNC_INC_REV_2");

                entity.Property(e => e.LoanDocSyncIncRev3).HasColumnName("LOAN_DOC_SYNC_INC_REV_3");

                entity.Property(e => e.LoanDocSyncIncRev4).HasColumnName("LOAN_DOC_SYNC_INC_REV_4");

                entity.Property(e => e.LoanDocSyncPath1)
                    .IsRequired()
                    .HasColumnName("LOAN_DOC_SYNC_PATH_1")
                    .HasColumnType("varchar(255)");

                entity.Property(e => e.LoanDocSyncPath2)
                    .IsRequired()
                    .HasColumnName("LOAN_DOC_SYNC_PATH_2")
                    .HasColumnType("varchar(255)");

                entity.Property(e => e.LoanDocSyncPath3)
                    .IsRequired()
                    .HasColumnName("LOAN_DOC_SYNC_PATH_3")
                    .HasColumnType("varchar(255)");

                entity.Property(e => e.LoanDocSyncPath4)
                    .IsRequired()
                    .HasColumnName("LOAN_DOC_SYNC_PATH_4")
                    .HasColumnType("varchar(255)");

                entity.Property(e => e.MaxAchPaymentAmountPct).HasColumnName("MAX_ACH_PAYMENT_AMOUNT_PCT");

                entity.Property(e => e.MaxAvsValidationDeclines).HasColumnName("MAX_AVS_VALIDATION_DECLINES");

                entity.Property(e => e.MaxCcAttemptsPerDay).HasColumnName("MAX_CC_ATTEMPTS_PER_DAY");

                entity.Property(e => e.MaxCcAttemptsPerMonth).HasColumnName("MAX_CC_ATTEMPTS_PER_MONTH");

                entity.Property(e => e.MaxCcAttemptsWithinXdays).HasColumnName("MAX_CC_ATTEMPTS_WITHIN_XDAYS");

                entity.Property(e => e.MaxCcDaysForAttemptsWithinXdays).HasColumnName("MAX_CC_DAYS_FOR_ATTEMPTS_WITHIN_XDAYS");

                entity.Property(e => e.MaxChk)
                    .HasColumnName("MAX_CHK")
                    .HasDefaultValueSql("500");

                entity.Property(e => e.MaxDaysForAchRepresentment).HasColumnName("MAX_DAYS_FOR_ACH_REPRESENTMENT");

                entity.Property(e => e.MaxDrawerCloseAmt)
                    .HasColumnName("MAX_DRAWER_CLOSE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.MaxSvc)
                    .HasColumnName("MAX_SVC")
                    .HasDefaultValueSql("500");

                entity.Property(e => e.MinAchPaymentAmountPct).HasColumnName("MIN_ACH_PAYMENT_AMOUNT_PCT");

                entity.Property(e => e.MinNbrBlockedAddressFieldsToMatch).HasColumnName("MIN_NBR_BLOCKED_ADDRESS_FIELDS_TO_MATCH");

                entity.Property(e => e.NetspendPassword)
                    .IsRequired()
                    .HasColumnName("NETSPEND_PASSWORD")
                    .HasColumnType("varchar(15)");

                entity.Property(e => e.NetspendPortNum).HasColumnName("NETSPEND_PORT_NUM");

                entity.Property(e => e.NetspendServerIp)
                    .IsRequired()
                    .HasColumnName("NETSPEND_SERVER_IP")
                    .HasColumnType("varchar(15)");

                entity.Property(e => e.NetspendUserId)
                    .IsRequired()
                    .HasColumnName("NETSPEND_USER_ID")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.NextRiccMastercardDate)
                    .HasColumnName("NEXT_RICC_MASTERCARD_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.OeStatementEmail)
                    .HasColumnName("OE_STATEMENT_EMAIL")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.PrintCustomerRegistration).HasColumnName("PRINT_CUSTOMER_REGISTRATION");

                entity.Property(e => e.RestartMaxCcAttempsAfterPaid).HasColumnName("RESTART_MAX_CC_ATTEMPS_AFTER_PAID");

                entity.Property(e => e.RestoreDate)
                    .HasColumnName("RESTORE_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.SdnListLastUpdate)
                    .HasColumnName("SDN_LIST_LAST_UPDATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.SprocLiveConn1)
                    .IsRequired()
                    .HasColumnName("SPROC_LIVE_CONN1")
                    .HasColumnType("varchar(500)");

                entity.Property(e => e.SprocLiveConn2)
                    .IsRequired()
                    .HasColumnName("SPROC_LIVE_CONN2")
                    .HasColumnType("varchar(500)");

                entity.Property(e => e.SprocLiveConn3)
                    .IsRequired()
                    .HasColumnName("SPROC_LIVE_CONN3")
                    .HasColumnType("varchar(500)");

                entity.Property(e => e.SprocName1)
                    .IsRequired()
                    .HasColumnName("SPROC_NAME1")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.SprocName2)
                    .IsRequired()
                    .HasColumnName("SPROC_NAME2")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.SprocName3)
                    .IsRequired()
                    .HasColumnName("SPROC_NAME3")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.SprocTestConn1)
                    .IsRequired()
                    .HasColumnName("SPROC_TEST_CONN1")
                    .HasColumnType("varchar(500)");

                entity.Property(e => e.SprocTestConn2)
                    .IsRequired()
                    .HasColumnName("SPROC_TEST_CONN2")
                    .HasColumnType("varchar(500)");

                entity.Property(e => e.SprocTestConn3)
                    .IsRequired()
                    .HasColumnName("SPROC_TEST_CONN3")
                    .HasColumnType("varchar(500)");

                entity.Property(e => e.TmpBsFlag).HasColumnName("TMP_BS_FLAG");

                entity.Property(e => e.UseRecurringInMaxAttemptsCnt).HasColumnName("USE_RECURRING_IN_MAX_ATTEMPTS_CNT");

                entity.Property(e => e.VaultMgrSgValues)
                    .IsRequired()
                    .HasColumnName("VAULT_MGR_SG_VALUES")
                    .HasColumnType("varchar(120)")
                    .HasDefaultValueSql("''");

                entity.Property(e => e.WebEodStart)
                    .HasColumnName("WEB_EOD_START")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<GlobalStates>(entity =>
            {
                entity.HasKey(e => e.GlobalStatesKey)
                    .HasName("PK_GlobalStates");

                entity.HasIndex(e => e.StateAbbrv)
                    .HasName("IX_GlobalStates")
                    .IsUnique();

                entity.Property(e => e.GlobalStatesKey).HasColumnName("GLOBAL_STATES_KEY");

                entity.Property(e => e.DueDatePaymentsThreadCount)
                    .HasColumnName("DUE_DATE_PAYMENTS_THREAD_COUNT")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.EnableCustMilitaryStatus)
                    .HasColumnName("ENABLE_CUST_MILITARY_STATUS")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.EnableLoanMaintOtherStates).HasColumnName("ENABLE_LOAN_MAINT_OTHER_STATES");

                entity.Property(e => e.EnableMarketingInvitations).HasColumnName("ENABLE_MARKETING_INVITATIONS");

                entity.Property(e => e.EnableNotifyRepoCompanyMsg).HasColumnName("ENABLE_NOTIFY_REPO_COMPANY_MSG");

                entity.Property(e => e.EnableSingleOpenLoanType).HasColumnName("ENABLE_SINGLE_OPEN_LOAN_TYPE");

                entity.Property(e => e.MarketingInvitationIncomePct).HasColumnName("MARKETING_INVITATION_INCOME_PCT");

                entity.Property(e => e.MarketingInvitationOverridesType)
                    .IsRequired()
                    .HasColumnName("MARKETING_INVITATION_OVERRIDES_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.MinLoanAge).HasColumnName("MIN_LOAN_AGE");

                entity.Property(e => e.RequireCustIdScan).HasColumnName("REQUIRE_CUST_ID_SCAN");

                entity.Property(e => e.ShowAccessKey).HasColumnName("SHOW_ACCESS_KEY");

                entity.Property(e => e.StateAbbrv)
                    .IsRequired()
                    .HasColumnName("STATE_ABBRV")
                    .HasColumnType("char(2)");

                entity.Property(e => e.StateFull)
                    .IsRequired()
                    .HasColumnName("STATE_FULL")
                    .HasColumnType("char(20)");

                entity.Property(e => e.TlAprDays).HasColumnName("TL_APR_DAYS");

                entity.Property(e => e.TlLienFee)
                    .HasColumnName("TL_LIEN_FEE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TlNoLienFeeForLoansUpTo)
                    .HasColumnName("TL_NO_LIEN_FEE_FOR_LOANS_UP_TO")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TlNoticeOfLienFee)
                    .HasColumnName("TL_NOTICE_OF_LIEN_FEE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TlQuickTitleFee)
                    .HasColumnName("TL_QUICK_TITLE_FEE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TlTitleFee)
                    .HasColumnName("TL_TITLE_FEE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TlTitleProcFee)
                    .HasColumnName("TL_TITLE_PROC_FEE")
                    .HasColumnType("smallmoney");
            });

            modelBuilder.Entity<GoldConfig>(entity =>
            {
                entity.HasKey(e => e.GoldConfigKey)
                    .HasName("PK_GoldConfigKey");

                entity.Property(e => e.GoldConfigKey).HasColumnName("GOLD_CONFIG_KEY");

                entity.Property(e => e.CompanyName)
                    .IsRequired()
                    .HasColumnName("COMPANY_NAME")
                    .HasColumnType("varchar(75)");

                entity.Property(e => e.DiamondOfferMax)
                    .HasColumnName("DIAMOND_OFFER_MAX")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.EnableAdditionalForms).HasColumnName("ENABLE_ADDITIONAL_FORMS");

                entity.Property(e => e.EnableDiamond).HasColumnName("ENABLE_DIAMOND");

                entity.Property(e => e.EnableGold).HasColumnName("ENABLE_GOLD");

                entity.Property(e => e.EnableQuickQuote).HasColumnName("ENABLE_QUICK_QUOTE");

                entity.Property(e => e.EnableReceiptDetails).HasColumnName("ENABLE_RECEIPT_DETAILS");

                entity.Property(e => e.EnableSpanishDocs).HasColumnName("ENABLE_SPANISH_DOCS");

                entity.Property(e => e.Gold09kLossPct)
                    .HasColumnName("GOLD_09K_LOSS_PCT")
                    .HasColumnType("numeric");

                entity.Property(e => e.Gold10kLossPct)
                    .HasColumnName("GOLD_10K_LOSS_PCT")
                    .HasColumnType("numeric");

                entity.Property(e => e.Gold14kLossPct)
                    .HasColumnName("GOLD_14K_LOSS_PCT")
                    .HasColumnType("numeric");

                entity.Property(e => e.Gold18kLossPct)
                    .HasColumnName("GOLD_18K_LOSS_PCT")
                    .HasColumnType("numeric");

                entity.Property(e => e.Gold22kLossPct)
                    .HasColumnName("GOLD_22K_LOSS_PCT")
                    .HasColumnType("numeric");

                entity.Property(e => e.Gold24kLossPct)
                    .HasColumnName("GOLD_24K_LOSS_PCT")
                    .HasColumnType("numeric");

                entity.Property(e => e.GoldModBasePct).HasColumnName("GOLD_MOD_BASE_PCT");

                entity.Property(e => e.GoldModHighPct).HasColumnName("GOLD_MOD_HIGH_PCT");

                entity.Property(e => e.GoldModMidPct).HasColumnName("GOLD_MOD_MID_PCT");

                entity.Property(e => e.GoldModOverridePct).HasColumnName("GOLD_MOD_OVERRIDE_PCT");

                entity.Property(e => e.GoldTellerPct).HasColumnName("GOLD_TELLER_PCT");

                entity.Property(e => e.GovtIdRequired).HasColumnName("GOVT_ID_REQUIRED");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.MaturityLengthDays).HasColumnName("MATURITY_LENGTH_DAYS");

                entity.Property(e => e.MaxDiamondSize)
                    .HasColumnName("MAX_DIAMOND_SIZE")
                    .HasColumnType("numeric");

                entity.Property(e => e.MaxDiamondsPerItem).HasColumnName("MAX_DIAMONDS_PER_ITEM");

                entity.Property(e => e.MaxDiamondsPerTrans).HasColumnName("MAX_DIAMONDS_PER_TRANS");

                entity.Property(e => e.MinDiamondSize)
                    .HasColumnName("MIN_DIAMOND_SIZE")
                    .HasColumnType("numeric");

                entity.Property(e => e.PlatinumLossPct)
                    .HasColumnName("PLATINUM_LOSS_PCT")
                    .HasColumnType("numeric");

                entity.Property(e => e.PoliceStoreId)
                    .IsRequired()
                    .HasColumnName("POLICE_STORE_ID")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.RequireAgeValue).HasColumnName("REQUIRE_AGE_VALUE");

                entity.Property(e => e.RequireAuthTransAmt)
                    .HasColumnName("REQUIRE_AUTH_TRANS_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.RequireEmployerName).HasColumnName("REQUIRE_EMPLOYER_NAME");

                entity.Property(e => e.RequireEyeColor).HasColumnName("REQUIRE_EYE_COLOR");

                entity.Property(e => e.RequireGender).HasColumnName("REQUIRE_GENDER");

                entity.Property(e => e.RequireHairColor).HasColumnName("REQUIRE_HAIR_COLOR");

                entity.Property(e => e.RequireHeight).HasColumnName("REQUIRE_HEIGHT");

                entity.Property(e => e.RequireHomePhone).HasColumnName("REQUIRE_HOME_PHONE");

                entity.Property(e => e.RequireItemSize).HasColumnName("REQUIRE_ITEM_SIZE");

                entity.Property(e => e.RequireMidName).HasColumnName("REQUIRE_MID_NAME");

                entity.Property(e => e.RequireMinAge).HasColumnName("REQUIRE_MIN_AGE");

                entity.Property(e => e.RequirePlateNumber).HasColumnName("REQUIRE_PLATE_NUMBER");

                entity.Property(e => e.RequirePlateState).HasColumnName("REQUIRE_PLATE_STATE");

                entity.Property(e => e.RequireRace).HasColumnName("REQUIRE_RACE");

                entity.Property(e => e.RequireWeight).HasColumnName("REQUIRE_WEIGHT");

                entity.Property(e => e.TransFeeAmt)
                    .HasColumnName("TRANS_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.HasOne(d => d.LocationNavigation)
                    .WithMany(p => p.GoldConfig)
                    .HasForeignKey(d => d.Location)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_GoldConfig_Company");
            });

            modelBuilder.Entity<GoldConfigItem>(entity =>
            {
                entity.HasKey(e => new { e.GoldItemKey, e.GoldConfigKey })
                    .HasName("PK_GoldConfigItem");

                entity.Property(e => e.GoldItemKey).HasColumnName("GOLD_ITEM_KEY");

                entity.Property(e => e.GoldConfigKey).HasColumnName("GOLD_CONFIG_KEY");

                entity.HasOne(d => d.GoldConfigKeyNavigation)
                    .WithMany(p => p.GoldConfigItem)
                    .HasForeignKey(d => d.GoldConfigKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_GoldConfigItem_GOLD_CONFIG_KEY");

                entity.HasOne(d => d.GoldItemKeyNavigation)
                    .WithMany(p => p.GoldConfigItem)
                    .HasForeignKey(d => d.GoldItemKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_GoldConfigItem_GOLD_ITEM_KEY");
            });

            modelBuilder.Entity<GoldDailyBag>(entity =>
            {
                entity.HasKey(e => e.GoldDailyBagKey)
                    .HasName("PK_GoldDailyBag");

                entity.HasIndex(e => e.TransDetailKey)
                    .HasName("IX_GoldDailyBag_TRANS_DETAIL_KEY");

                entity.HasIndex(e => new { e.Location, e.DateEntered })
                    .HasName("IX_GoldDailyBag_LOCATION_DATE_ENTERED");

                entity.HasIndex(e => new { e.GoldDailyBagKey, e.GbBagTotal, e.Location, e.Reversed })
                    .HasName("IX_GoldDailyBag_LOCATION_REVERSED");

                entity.Property(e => e.GoldDailyBagKey).HasColumnName("GOLD_DAILY_BAG_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.GbBagCount).HasColumnName("GB_BAG_COUNT");

                entity.Property(e => e.GbBagNum).HasColumnName("GB_BAG_NUM");

                entity.Property(e => e.GbBagTotal)
                    .HasColumnName("GB_BAG_TOTAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.GbGlAcct).HasColumnName("GB_GL_ACCT");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.Reversed).HasColumnName("REVERSED");

                entity.Property(e => e.ReversedTransDetailKey).HasColumnName("REVERSED_TRANS_DETAIL_KEY");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");

                entity.HasOne(d => d.GbGlAcctNavigation)
                    .WithMany(p => p.GoldDailyBag)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.GbGlAcct)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_GoldDailyBag_GB_GL_ACCT");
            });

            modelBuilder.Entity<GoldDailyBagDetail>(entity =>
            {
                entity.HasKey(e => e.GoldDailyBagDetailKey)
                    .HasName("PK_GoldDailyBagDetail");

                entity.HasIndex(e => e.GoldDailyBagKey)
                    .HasName("IX_GoldDailyBagDetail_GoldDailyBag");

                entity.Property(e => e.GoldDailyBagDetailKey).HasColumnName("GOLD_DAILY_BAG_DETAIL_KEY");

                entity.Property(e => e.GoldDailyBagKey).HasColumnName("GOLD_DAILY_BAG_KEY");

                entity.Property(e => e.GoldTransKey).HasColumnName("GOLD_TRANS_KEY");

                entity.HasOne(d => d.GoldDailyBagKeyNavigation)
                    .WithMany(p => p.GoldDailyBagDetail)
                    .HasForeignKey(d => d.GoldDailyBagKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_GoldDailyBag_GoldDailyBagDetail");
            });

            modelBuilder.Entity<GoldItem>(entity =>
            {
                entity.HasKey(e => e.GoldItemKey)
                    .HasName("PK_GoldItemKey");

                entity.Property(e => e.GoldItemKey).HasColumnName("GOLD_ITEM_KEY");

                entity.Property(e => e.IsActive).HasColumnName("IS_ACTIVE");

                entity.Property(e => e.ItemDescription)
                    .IsRequired()
                    .HasColumnName("ITEM_DESCRIPTION")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.ItemType)
                    .IsRequired()
                    .HasColumnName("ITEM_TYPE")
                    .HasColumnType("char(1)");
            });

            modelBuilder.Entity<GoldTrans>(entity =>
            {
                entity.HasKey(e => e.GoldTransKey)
                    .HasName("PK_GoldTrans");

                entity.HasIndex(e => e.TransDetailKey)
                    .HasName("IX_GoldTrans_TRANS_DETAIL_KEY");

                entity.HasIndex(e => new { e.Location, e.DateEntered })
                    .HasName("IX_GoldTrans_LOCATION_DATE_ENTERED");

                entity.Property(e => e.GoldTransKey).HasColumnName("GOLD_TRANS_KEY");

                entity.Property(e => e.AcceptedOfferLevel).HasColumnName("ACCEPTED_OFFER_LEVEL");

                entity.Property(e => e.BagNum).HasColumnName("BAG_NUM");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DrawerKey).HasColumnName("DRAWER_KEY");

                entity.Property(e => e.GoldLoss09k)
                    .HasColumnName("GOLD_LOSS_09K")
                    .HasColumnType("numeric");

                entity.Property(e => e.GoldLoss10k)
                    .HasColumnName("GOLD_LOSS_10K")
                    .HasColumnType("numeric");

                entity.Property(e => e.GoldLoss14k)
                    .HasColumnName("GOLD_LOSS_14K")
                    .HasColumnType("numeric");

                entity.Property(e => e.GoldLoss18k)
                    .HasColumnName("GOLD_LOSS_18K")
                    .HasColumnType("numeric");

                entity.Property(e => e.GoldLoss22k)
                    .HasColumnName("GOLD_LOSS_22K")
                    .HasColumnType("numeric");

                entity.Property(e => e.GoldLoss24k)
                    .HasColumnName("GOLD_LOSS_24K")
                    .HasColumnType("numeric");

                entity.Property(e => e.GoldPrice)
                    .HasColumnName("GOLD_PRICE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.GoldPrice09k)
                    .HasColumnName("GOLD_PRICE_09K")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.GoldPrice10k)
                    .HasColumnName("GOLD_PRICE_10K")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.GoldPrice14k)
                    .HasColumnName("GOLD_PRICE_14K")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.GoldPrice18k)
                    .HasColumnName("GOLD_PRICE_18K")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.GoldPrice22k)
                    .HasColumnName("GOLD_PRICE_22K")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.GoldPrice24k)
                    .HasColumnName("GOLD_PRICE_24K")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.GoldWeight09k)
                    .HasColumnName("GOLD_WEIGHT_09K")
                    .HasColumnType("numeric");

                entity.Property(e => e.GoldWeight10k)
                    .HasColumnName("GOLD_WEIGHT_10K")
                    .HasColumnType("numeric");

                entity.Property(e => e.GoldWeight14k)
                    .HasColumnName("GOLD_WEIGHT_14K")
                    .HasColumnType("numeric");

                entity.Property(e => e.GoldWeight18k)
                    .HasColumnName("GOLD_WEIGHT_18K")
                    .HasColumnType("numeric");

                entity.Property(e => e.GoldWeight22k)
                    .HasColumnName("GOLD_WEIGHT_22K")
                    .HasColumnType("numeric");

                entity.Property(e => e.GoldWeight24k)
                    .HasColumnName("GOLD_WEIGHT_24K")
                    .HasColumnType("numeric");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.LocationTransNum).HasColumnName("LOCATION_TRANS_NUM");

                entity.Property(e => e.MaturityDate)
                    .HasColumnName("MATURITY_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.ModOverride)
                    .IsRequired()
                    .HasColumnName("MOD_OVERRIDE")
                    .HasColumnType("char(3)");

                entity.Property(e => e.OfferDiamondAmt)
                    .HasColumnName("OFFER_DIAMOND_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.OfferGoldAmt)
                    .HasColumnName("OFFER_GOLD_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.OfferLevelCode).HasColumnName("OFFER_LEVEL_CODE");

                entity.Property(e => e.PlatinumLoss)
                    .HasColumnName("PLATINUM_LOSS")
                    .HasColumnType("numeric");

                entity.Property(e => e.PlatinumPrice)
                    .HasColumnName("PLATINUM_PRICE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PlatinumWeight)
                    .HasColumnName("PLATINUM_WEIGHT")
                    .HasColumnType("numeric");

                entity.Property(e => e.Reversed).HasColumnName("REVERSED");

                entity.Property(e => e.ReversedTransDetailKey).HasColumnName("REVERSED_TRANS_DETAIL_KEY");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.TotalAcceptedAmt)
                    .HasColumnName("TOTAL_ACCEPTED_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TotalBaseModOffer)
                    .HasColumnName("TOTAL_BASE_MOD_OFFER")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TotalDiamonds).HasColumnName("TOTAL_DIAMONDS");

                entity.Property(e => e.TotalGoldWeight)
                    .HasColumnName("TOTAL_GOLD_WEIGHT")
                    .HasColumnType("numeric");

                entity.Property(e => e.TotalHighModOffer)
                    .HasColumnName("TOTAL_HIGH_MOD_OFFER")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TotalMidModOffer)
                    .HasColumnName("TOTAL_MID_MOD_OFFER")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TotalOfferAmt)
                    .HasColumnName("TOTAL_OFFER_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TotalOverrideModOffer)
                    .HasColumnName("TOTAL_OVERRIDE_MOD_OFFER")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TotalStones).HasColumnName("TOTAL_STONES");

                entity.Property(e => e.TotalTellerOffer)
                    .HasColumnName("TOTAL_TELLER_OFFER")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");

                entity.Property(e => e.TransHandlingFee)
                    .HasColumnName("TRANS_HANDLING_FEE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TransPosKey).HasColumnName("TRANS_POS_KEY");

                entity.HasOne(d => d.LocationNavigation)
                    .WithMany(p => p.GoldTrans)
                    .HasForeignKey(d => d.Location)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_GoldTrans_Company");
            });

            modelBuilder.Entity<GoldTransCustomer>(entity =>
            {
                entity.HasKey(e => e.GoldTransCustomerKey)
                    .HasName("PK_GoldTransCustomer");

                entity.HasIndex(e => new { e.CustomerKey, e.DateEntered })
                    .HasName("IX_GoldTransCustomer_CustomerDateEntered");

                entity.Property(e => e.GoldTransCustomerKey).HasColumnName("GOLD_TRANS_CUSTOMER_KEY");

                entity.Property(e => e.CustMidName)
                    .IsRequired()
                    .HasColumnName("CUST_MID_NAME")
                    .HasColumnType("varchar(15)");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EmployerName)
                    .IsRequired()
                    .HasColumnName("EMPLOYER_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.EyeColor).HasColumnName("EYE_COLOR");

                entity.Property(e => e.Gender)
                    .IsRequired()
                    .HasColumnName("GENDER")
                    .HasColumnType("char(1)");

                entity.Property(e => e.GoldTransKey).HasColumnName("GOLD_TRANS_KEY");

                entity.Property(e => e.HairColor).HasColumnName("HAIR_COLOR");

                entity.Property(e => e.HeightFeet).HasColumnName("HEIGHT_FEET");

                entity.Property(e => e.HeightInches).HasColumnName("HEIGHT_INCHES");

                entity.Property(e => e.HomePhone)
                    .HasColumnName("HOME_PHONE")
                    .HasColumnType("varchar(12)");

                entity.Property(e => e.PlateNumber)
                    .IsRequired()
                    .HasColumnName("PLATE_NUMBER")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.PlateState)
                    .IsRequired()
                    .HasColumnName("PLATE_STATE")
                    .HasColumnType("char(2)");

                entity.Property(e => e.Race).HasColumnName("RACE");

                entity.Property(e => e.RequireAgeValue).HasColumnName("REQUIRE_AGE_VALUE");

                entity.Property(e => e.RequireEmployerName).HasColumnName("REQUIRE_EMPLOYER_NAME");

                entity.Property(e => e.RequireEyeColor).HasColumnName("REQUIRE_EYE_COLOR");

                entity.Property(e => e.RequireGender).HasColumnName("REQUIRE_GENDER");

                entity.Property(e => e.RequireHairColor).HasColumnName("REQUIRE_HAIR_COLOR");

                entity.Property(e => e.RequireHeight).HasColumnName("REQUIRE_HEIGHT");

                entity.Property(e => e.RequireHomePhone).HasColumnName("REQUIRE_HOME_PHONE");

                entity.Property(e => e.RequireMidName).HasColumnName("REQUIRE_MID_NAME");

                entity.Property(e => e.RequireMinAge).HasColumnName("REQUIRE_MIN_AGE");

                entity.Property(e => e.RequireNothing).HasColumnName("REQUIRE_NOTHING");

                entity.Property(e => e.RequirePlateNumber).HasColumnName("REQUIRE_PLATE_NUMBER");

                entity.Property(e => e.RequirePlateState).HasColumnName("REQUIRE_PLATE_STATE");

                entity.Property(e => e.RequireRace).HasColumnName("REQUIRE_RACE");

                entity.Property(e => e.RequireWeight).HasColumnName("REQUIRE_WEIGHT");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.Weight).HasColumnName("WEIGHT");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.GoldTransCustomer)
                    .HasForeignKey(d => d.CustomerKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_GoldTransCustomer_Customer");

                entity.HasOne(d => d.GoldTransKeyNavigation)
                    .WithMany(p => p.GoldTransCustomer)
                    .HasForeignKey(d => d.GoldTransKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_GoldTransCustomer_GOLD_TRANS_KEY");
            });

            modelBuilder.Entity<GoldTransDetail>(entity =>
            {
                entity.HasKey(e => e.GoldTransDetailKey)
                    .HasName("PK_GoldTransDetail");

                entity.HasIndex(e => e.GoldTransKey)
                    .HasName("IX_GoldTransDetail_GoldTrans");

                entity.Property(e => e.GoldTransDetailKey).HasColumnName("GOLD_TRANS_DETAIL_KEY");

                entity.Property(e => e.GemDescription)
                    .IsRequired()
                    .HasColumnName("GEM_DESCRIPTION")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.GoldItemKey).HasColumnName("GOLD_ITEM_KEY");

                entity.Property(e => e.GoldTransKey).HasColumnName("GOLD_TRANS_KEY");

                entity.Property(e => e.ItemSize)
                    .IsRequired()
                    .HasColumnName("ITEM_SIZE")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.Markings)
                    .IsRequired()
                    .HasColumnName("MARKINGS")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.MetalTypeCode).HasColumnName("METAL_TYPE_CODE");

                entity.Property(e => e.NumDiamonds).HasColumnName("NUM_DIAMONDS");

                entity.Property(e => e.NumGemstones).HasColumnName("NUM_GEMSTONES");

                entity.Property(e => e.RequireItemSize).HasColumnName("REQUIRE_ITEM_SIZE");

                entity.Property(e => e.Reversed).HasColumnName("REVERSED");

                entity.Property(e => e.ReversedTransDetailKey).HasColumnName("REVERSED_TRANS_DETAIL_KEY");

                entity.Property(e => e.ReversedWeight)
                    .HasColumnName("REVERSED_WEIGHT")
                    .HasColumnType("numeric");

                entity.HasOne(d => d.GoldItemKeyNavigation)
                    .WithMany(p => p.GoldTransDetail)
                    .HasForeignKey(d => d.GoldItemKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_GoldTransDetail_GoldItem");

                entity.HasOne(d => d.GoldTransKeyNavigation)
                    .WithMany(p => p.GoldTransDetail)
                    .HasForeignKey(d => d.GoldTransKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_GoldTransDetail_GoldTrans");
            });

            modelBuilder.Entity<GoldTransStoneDetail>(entity =>
            {
                entity.HasKey(e => e.GoldTransStoneDetailKey)
                    .HasName("PK_GoldTransStoneDetail");

                entity.Property(e => e.GoldTransStoneDetailKey).HasColumnName("GOLD_TRANS_STONE_DETAIL_KEY");

                entity.Property(e => e.GoldTransDetailKey).HasColumnName("GOLD_TRANS_DETAIL_KEY");

                entity.Property(e => e.StoneCount).HasColumnName("STONE_COUNT");

                entity.Property(e => e.StoneSize)
                    .HasColumnName("STONE_SIZE")
                    .HasColumnType("numeric");

                entity.Property(e => e.StoneType).HasColumnName("STONE_TYPE");

                entity.HasOne(d => d.GoldTransDetailKeyNavigation)
                    .WithMany(p => p.GoldTransStoneDetail)
                    .HasForeignKey(d => d.GoldTransDetailKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_GoldTransStoneDetail_GoldTransDetail");
            });

            modelBuilder.Entity<GoldTransfer>(entity =>
            {
                entity.HasKey(e => e.GoldTransferKey)
                    .HasName("PK_GoldTransfer");

                entity.Property(e => e.GoldTransferKey).HasColumnName("GOLD_TRANSFER_KEY");

                entity.Property(e => e.CourierName)
                    .IsRequired()
                    .HasColumnName("COURIER_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.CourierTrackingNum)
                    .IsRequired()
                    .HasColumnName("COURIER_TRACKING_NUM")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.RecvBy)
                    .HasColumnName("RECV_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.RecvDailyBagAmt)
                    .HasColumnName("RECV_DAILY_BAG_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.RecvDailyBagCnt).HasColumnName("RECV_DAILY_BAG_CNT");

                entity.Property(e => e.RecvDate)
                    .HasColumnName("RECV_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.SentBy)
                    .IsRequired()
                    .HasColumnName("SENT_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.SentDailyBagAmt)
                    .HasColumnName("SENT_DAILY_BAG_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.SentDailyBagCnt).HasColumnName("SENT_DAILY_BAG_CNT");

                entity.Property(e => e.SentDate)
                    .HasColumnName("SENT_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");
            });

            modelBuilder.Entity<GoldTransferDetail>(entity =>
            {
                entity.HasKey(e => e.GoldTransferDetailKey)
                    .HasName("PK_GoldTransferDetail");

                entity.Property(e => e.GoldTransferDetailKey).HasColumnName("GOLD_TRANSFER_DETAIL_KEY");

                entity.Property(e => e.GoldDailyBagKey).HasColumnName("GOLD_DAILY_BAG_KEY");

                entity.Property(e => e.GoldTransferKey).HasColumnName("GOLD_TRANSFER_KEY");

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");

                entity.HasOne(d => d.GoldDailyBagKeyNavigation)
                    .WithMany(p => p.GoldTransferDetail)
                    .HasForeignKey(d => d.GoldDailyBagKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_GoldTransferDetail_GoldDailyBag");

                entity.HasOne(d => d.GoldTransferKeyNavigation)
                    .WithMany(p => p.GoldTransferDetail)
                    .HasForeignKey(d => d.GoldTransferKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_GoldTransferDetail_GoldTransfer");
            });

            modelBuilder.Entity<GoodCustomerStudy>(entity =>
            {
                entity.HasKey(e => e.GoodCustomerStudyKey)
                    .HasName("PK_GoodCustomerStudy");

                entity.HasIndex(e => e.CustomerKey)
                    .HasName("IX_GoodCustomerStudy_CUSTOMER_KEY");

                entity.Property(e => e.GoodCustomerStudyKey).HasColumnName("GOOD_CUSTOMER_STUDY_KEY");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IncreaseAmt)
                    .HasColumnName("INCREASE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.InitialApprovedAmt)
                    .HasColumnName("INITIAL_APPROVED_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanTakenAmt)
                    .HasColumnName("LOAN_TAKEN_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.StateMaxAmt)
                    .HasColumnName("STATE_MAX_AMT")
                    .HasColumnType("smallmoney");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.GoodCustomerStudy)
                    .HasForeignKey(d => d.CustomerKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_GoodCustomer_Customer");
            });

            modelBuilder.Entity<IatDialerResults>(entity =>
            {
                entity.HasKey(e => e.HostCode)
                    .HasName("PK_IatDialerResults");

                entity.Property(e => e.HostCode).ValueGeneratedNever();

                entity.Property(e => e.AgentActionKey).HasColumnName("AGENT_ACTION_KEY");

                entity.Property(e => e.AgentResultKey1).HasColumnName("AGENT_RESULT_KEY1");

                entity.Property(e => e.CuroNote)
                    .HasColumnName("CURO_Note")
                    .HasColumnType("varchar(60)");

                entity.Property(e => e.Description).HasColumnType("varchar(50)");

                entity.Property(e => e.RisTaskId)
                    .HasColumnName("Ris_Task_id")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Status).HasColumnType("varchar(50)");

                entity.Property(e => e.TaskActionResultKey).HasColumnName("TASK_ACTION_RESULT_KEY");
            });

            modelBuilder.Entity<IdentificationType>(entity =>
            {
                entity.HasKey(e => e.IdentificationTypeKey)
                    .HasName("PK_IdentificationType");

                entity.Property(e => e.IdentificationTypeKey).HasColumnName("IDENTIFICATION_TYPE_KEY");

                entity.Property(e => e.AmlPrimary).HasColumnName("AML_PRIMARY");

                entity.Property(e => e.AmlSecondary).HasColumnName("AML_SECONDARY");

                entity.Property(e => e.CountryRequired).HasColumnName("COUNTRY_REQUIRED");

                entity.Property(e => e.CtrReporting).HasColumnName("CTR_REPORTING");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateUpdated)
                    .HasColumnName("DATE_UPDATED")
                    .HasColumnType("datetime");

                entity.Property(e => e.GovtIssued).HasColumnName("GOVT_ISSUED");

                entity.Property(e => e.IdTypeCategory).HasColumnName("ID_TYPE_CATEGORY");

                entity.Property(e => e.IdTypeDescription)
                    .IsRequired()
                    .HasColumnName("ID_TYPE_DESCRIPTION")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.IdentificationTypeAmlKey).HasColumnName("IDENTIFICATION_TYPE_AML_KEY");

                entity.Property(e => e.IsActive).HasColumnName("IS_ACTIVE");

                entity.Property(e => e.MaxAllowedIdType).HasColumnName("MAX_ALLOWED_ID_TYPE");

                entity.Property(e => e.NumberRequired).HasColumnName("NUMBER_REQUIRED");

                entity.Property(e => e.StateRequired).HasColumnName("STATE_REQUIRED");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasColumnName("UPDATED_BY")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.IdentificationTypeAmlKeyNavigation)
                    .WithMany(p => p.IdentificationType)
                    .HasForeignKey(d => d.IdentificationTypeAmlKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_IdentificationType_IDENTIFICATION_TYPE_AML_KEY");
            });

            modelBuilder.Entity<IdentificationTypeAml>(entity =>
            {
                entity.HasKey(e => e.IdentificationTypeAmlKey)
                    .HasName("PK_IdentificationTypeAmlKey");

                entity.ToTable("IdentificationTypeAML");

                entity.Property(e => e.IdentificationTypeAmlKey)
                    .HasColumnName("IDENTIFICATION_TYPE_AML_KEY")
                    .ValueGeneratedNever();

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(50)");
            });

            modelBuilder.Entity<IdentificationTypeRule>(entity =>
            {
                entity.HasKey(e => e.IdentificationTypeRuleKey)
                    .HasName("PK_IdentificationTypeRule");

                entity.Property(e => e.IdentificationTypeRuleKey).HasColumnName("IDENTIFICATION_TYPE_RULE_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IsActive).HasColumnName("IS_ACTIVE");

                entity.Property(e => e.RuleDefinition)
                    .IsRequired()
                    .HasColumnName("RULE_DEFINITION")
                    .HasColumnType("varchar(250)");

                entity.Property(e => e.RuleDescription)
                    .IsRequired()
                    .HasColumnName("RULE_DESCRIPTION")
                    .HasColumnType("varchar(500)");

                entity.Property(e => e.RuleDirectives)
                    .HasColumnName("RULE_DIRECTIVES")
                    .HasColumnType("varchar(250)");

                entity.Property(e => e.RuleMessage)
                    .IsRequired()
                    .HasColumnName("RULE_MESSAGE")
                    .HasColumnType("varchar(500)");

                entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");
            });

            modelBuilder.Entity<IdentificationTypeRuleXref>(entity =>
            {
                entity.HasKey(e => e.IdentificationTypeRuleXrefKey)
                    .HasName("PK_IdentificationTypeRuleXRef");

                entity.ToTable("IdentificationTypeRuleXRef");

                entity.HasIndex(e => new { e.IdentificationTypeRuleKey, e.IdentificationTypeKey, e.State })
                    .HasName("IX_IdentificationTypeRuleXRef")
                    .IsUnique();

                entity.Property(e => e.IdentificationTypeRuleXrefKey).HasColumnName("IDENTIFICATION_TYPE_RULE_XREF_KEY");

                entity.Property(e => e.IdentificationTypeKey).HasColumnName("IDENTIFICATION_TYPE_KEY");

                entity.Property(e => e.IdentificationTypeRuleKey).HasColumnName("IDENTIFICATION_TYPE_RULE_KEY");

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasColumnName("STATE")
                    .HasColumnType("char(2)");
            });

            modelBuilder.Entity<IdentificationTypeState>(entity =>
            {
                entity.HasKey(e => e.IdentificationTypeStateKey)
                    .HasName("PK_IdentificationTypeState");

                entity.Property(e => e.IdentificationTypeStateKey).HasColumnName("IDENTIFICATION_TYPE_STATE_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateUpdated)
                    .HasColumnName("DATE_UPDATED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdState)
                    .IsRequired()
                    .HasColumnName("ID_STATE")
                    .HasColumnType("char(2)");

                entity.Property(e => e.IdentificationTypeKey).HasColumnName("IDENTIFICATION_TYPE_KEY");

                entity.Property(e => e.IsActive).HasColumnName("IS_ACTIVE");

                entity.Property(e => e.StoreAcceptableForNewLoan).HasColumnName("STORE_ACCEPTABLE_FOR_NEW_LOAN");

                entity.Property(e => e.StoreExpirationRequired).HasColumnName("STORE_EXPIRATION_REQUIRED");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.UpdatedBy)
                    .HasColumnName("UPDATED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.WebAcceptableForNewLoan).HasColumnName("WEB_ACCEPTABLE_FOR_NEW_LOAN");

                entity.Property(e => e.WebExpirationRequired).HasColumnName("WEB_EXPIRATION_REQUIRED");
            });

            modelBuilder.Entity<IdentificationTypeVerify>(entity =>
            {
                entity.HasKey(e => e.IdentificationTypeVerifyKey)
                    .HasName("PK_IdentificationTypeVerify");

                entity.HasIndex(e => new { e.VerifyCode, e.IsActive })
                    .HasName("IX_IdentificationTypeVerify_VERIFY_CODE_ID_VERIFY_ACTIVE")
                    .IsUnique();

                entity.Property(e => e.IdentificationTypeVerifyKey).HasColumnName("IDENTIFICATION_TYPE_VERIFY_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IdVerifyDescription)
                    .IsRequired()
                    .HasColumnName("ID_VERIFY_DESCRIPTION")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.IsActive).HasColumnName("IS_ACTIVE");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.VerifyCode)
                    .IsRequired()
                    .HasColumnName("VERIFY_CODE")
                    .HasColumnType("char(1)");
            });

            modelBuilder.Entity<Iinrange>(entity =>
            {
                entity.ToTable("IINRange");

                entity.Property(e => e.IinrangeId)
                    .HasColumnName("IINRangeId")
                    .ValueGeneratedNever();

                entity.Property(e => e.CscLen2)
                    .IsRequired()
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.Epurch).HasColumnName("EPurch");

                entity.Property(e => e.Eref).HasColumnName("ERef");

                entity.Property(e => e.Mask)
                    .IsRequired()
                    .HasColumnType("varchar(19)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.NcpcCsId).HasColumnName("NCpcCsId");

                entity.Property(e => e.PanLen)
                    .IsRequired()
                    .HasColumnType("varchar(50)");
            });

            modelBuilder.Entity<ImageCashLetter>(entity =>
            {
                entity.HasKey(e => e.ImageCashLetterKey)
                    .HasName("PK_ImageCashLetter");

                entity.Property(e => e.ImageCashLetterKey).HasColumnName("IMAGE_CASH_LETTER_KEY");

                entity.Property(e => e.AdjustmentDollars)
                    .HasColumnName("ADJUSTMENT_DOLLARS")
                    .HasColumnType("numeric");

                entity.Property(e => e.CashLetterCount).HasColumnName("CASH_LETTER_COUNT");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.FileCreationDatetime)
                    .HasColumnName("FILE_CREATION_DATETIME")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.FileProcessedDatetime)
                    .HasColumnName("FILE_PROCESSED_DATETIME")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.FileValidationStatus)
                    .IsRequired()
                    .HasColumnName("FILE_VALIDATION_STATUS")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.FirstFileStatusDatetime)
                    .HasColumnName("FIRST_FILE_STATUS_DATETIME")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IclFilename)
                    .IsRequired()
                    .HasColumnName("ICL_FILENAME")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.ItemCount).HasColumnName("ITEM_COUNT");

                entity.Property(e => e.NumberRejected).HasColumnName("NUMBER_REJECTED");

                entity.Property(e => e.OriginalSubmissionAmount)
                    .HasColumnName("ORIGINAL_SUBMISSION_AMOUNT")
                    .HasColumnType("numeric");

                entity.Property(e => e.RecordCount).HasColumnName("RECORD_COUNT");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");
            });

            modelBuilder.Entity<ImageCashLetterBundle>(entity =>
            {
                entity.HasKey(e => e.ImageCashLetterBundleKey)
                    .HasName("PK_ImageCashLetterBundle");

                entity.HasIndex(e => e.ImageCashLetterDetailKey)
                    .HasName("IX_ImageCashLetterBundle_IMAGE_CASH_LETTER_DETAIL_KEY");

                entity.Property(e => e.ImageCashLetterBundleKey).HasColumnName("IMAGE_CASH_LETTER_BUNDLE_KEY");

                entity.Property(e => e.BundleSeq).HasColumnName("BUNDLE_SEQ");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ImageCashLetterDetailKey).HasColumnName("IMAGE_CASH_LETTER_DETAIL_KEY");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.WsResponseKey).HasColumnName("WS_RESPONSE_KEY");

                entity.HasOne(d => d.ImageCashLetterDetailKeyNavigation)
                    .WithMany(p => p.ImageCashLetterBundle)
                    .HasForeignKey(d => d.ImageCashLetterDetailKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_ImageCashLetterBundle_ImageCashLetterDetail");
            });

            modelBuilder.Entity<ImageCashLetterDetail>(entity =>
            {
                entity.HasKey(e => e.ImageCashLetterDetailKey)
                    .HasName("PK_ImageCashLetterDetail");

                entity.HasIndex(e => e.ImageCashLetterKey)
                    .HasName("IX_ImageCashLetterDetail_IMAGE_CASH_LETTER_KEY");

                entity.Property(e => e.ImageCashLetterDetailKey).HasColumnName("IMAGE_CASH_LETTER_DETAIL_KEY");

                entity.Property(e => e.CashLetterStatus)
                    .IsRequired()
                    .HasColumnName("CASH_LETTER_STATUS")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ImageCashLetterKey).HasColumnName("IMAGE_CASH_LETTER_KEY");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.RejectedDollars)
                    .HasColumnName("REJECTED_DOLLARS")
                    .HasColumnType("numeric");

                entity.Property(e => e.RejectedItemCount).HasColumnName("REJECTED_ITEM_COUNT");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.ImageCashLetterKeyNavigation)
                    .WithMany(p => p.ImageCashLetterDetail)
                    .HasForeignKey(d => d.ImageCashLetterKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_ImageCashLetterDetail_ImageCashLetter");

                entity.HasOne(d => d.LocationNavigation)
                    .WithMany(p => p.ImageCashLetterDetail)
                    .HasForeignKey(d => d.Location)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_ImageCashLetterDetail_Company");
            });

            modelBuilder.Entity<IncomeJobType>(entity =>
            {
                entity.HasKey(e => e.IncomeJobTypeKey)
                    .HasName("PK_IncomeJobType");

                entity.Property(e => e.IncomeJobTypeKey).HasColumnName("INCOME_JOB_TYPE_KEY");

                entity.Property(e => e.DaysToRerequest).HasColumnName("DAYS_TO_REREQUEST");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.IsActive).HasColumnName("IS_ACTIVE");

                entity.Property(e => e.LastUpdatedBy)
                    .IsRequired()
                    .HasColumnName("LAST_UPDATED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnName("LAST_UPDATED_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.WageLimit)
                    .HasColumnName("WAGE_LIMIT")
                    .HasColumnType("smallmoney")
                    .HasDefaultValueSql("0.0");
            });

            modelBuilder.Entity<IncomeSource>(entity =>
            {
                entity.HasKey(e => e.IncomeSourceKey)
                    .HasName("PK_IncomeSource");

                entity.HasIndex(e => e.IncomeTypeKey)
                    .HasName("IX_IncomeSource_IncomeType");

                entity.Property(e => e.IncomeSourceKey).HasColumnName("INCOME_SOURCE_KEY");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.IncomeTypeKey).HasColumnName("INCOME_TYPE_KEY");

                entity.Property(e => e.IsActive).HasColumnName("IS_ACTIVE");

                entity.Property(e => e.LastUpdatedBy)
                    .IsRequired()
                    .HasColumnName("LAST_UPDATED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnName("LAST_UPDATED_DATE")
                    .HasColumnType("smalldatetime");

                entity.HasOne(d => d.IncomeTypeKeyNavigation)
                    .WithMany(p => p.IncomeSource)
                    .HasForeignKey(d => d.IncomeTypeKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_IncomeSource_IncomeType");
            });

            modelBuilder.Entity<IncomeType>(entity =>
            {
                entity.HasKey(e => e.IncomeTypeKey)
                    .HasName("PK_IncomeType");

                entity.Property(e => e.IncomeTypeKey).HasColumnName("INCOME_TYPE_KEY");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.IncomeTypeCode)
                    .IsRequired()
                    .HasColumnName("INCOME_TYPE_CODE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.IsActive).HasColumnName("IS_ACTIVE");

                entity.Property(e => e.LastUpdatedBy)
                    .IsRequired()
                    .HasColumnName("LAST_UPDATED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnName("LAST_UPDATED_DATE")
                    .HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<IncomeTypeLocation>(entity =>
            {
                entity.HasKey(e => e.IncomeTypeLocKey)
                    .HasName("PK_IncomeTypeLocation");

                entity.HasIndex(e => e.IncomeTypeKey)
                    .HasName("IX_IncomeTypeLocation_IncomeTypeKey");

                entity.HasIndex(e => e.Location)
                    .HasName("IX_IncomeTypeLocation_Location");

                entity.Property(e => e.IncomeTypeLocKey).HasColumnName("INCOME_TYPE_LOC_KEY");

                entity.Property(e => e.EnumListForIncomeMaintRequiredFields)
                    .IsRequired()
                    .HasColumnName("ENUM_LIST_FOR_INCOME_MAINT_REQUIRED_FIELDS")
                    .HasColumnType("varchar(200)");

                entity.Property(e => e.IncomeTypeKey).HasColumnName("INCOME_TYPE_KEY");

                entity.Property(e => e.IsActive).HasColumnName("IS_ACTIVE");

                entity.Property(e => e.LastUpdatedBy)
                    .IsRequired()
                    .HasColumnName("LAST_UPDATED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnName("LAST_UPDATED_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.HasOne(d => d.IncomeTypeKeyNavigation)
                    .WithMany(p => p.IncomeTypeLocation)
                    .HasForeignKey(d => d.IncomeTypeKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_IncomeTypeLocation_IncomeType");

                entity.HasOne(d => d.LocationNavigation)
                    .WithMany(p => p.IncomeTypeLocation)
                    .HasForeignKey(d => d.Location)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_IncomeTypeLocation_Company");
            });

            modelBuilder.Entity<IncomeVerificationMessage>(entity =>
            {
                entity.HasKey(e => e.IncomeVerificationMessageKey)
                    .HasName("PK_IncomeVerificationMessage");

                entity.HasIndex(e => new { e.State, e.IsActive })
                    .HasName("UX_IncomeVerificationMessage")
                    .IsUnique();

                entity.Property(e => e.IncomeVerificationMessageKey).HasColumnName("INCOME_VERIFICATION_MESSAGE_KEY");

                entity.Property(e => e.IsActive).HasColumnName("IS_ACTIVE");

                entity.Property(e => e.MessageText)
                    .HasColumnName("MESSAGE_TEXT")
                    .HasColumnType("varchar(4000)");

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasColumnName("STATE")
                    .HasColumnType("char(2)");

                entity.HasOne(d => d.StateNavigation)
                    .WithMany(p => p.IncomeVerificationMessage)
                    .HasPrincipalKey(p => p.StateAbbrv)
                    .HasForeignKey(d => d.State)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_IncomeVerificationMessage_GlobalStates");
            });

            modelBuilder.Entity<IncomeVerifyMethod>(entity =>
            {
                entity.HasKey(e => e.IncomeVerifyMethodKey)
                    .HasName("PK_IncomeVerifyMethod");

                entity.Property(e => e.IncomeVerifyMethodKey).HasColumnName("INCOME_VERIFY_METHOD_KEY");

                entity.Property(e => e.IsActive).HasColumnName("IS_ACTIVE");

                entity.Property(e => e.LastUpdatedBy)
                    .IsRequired()
                    .HasColumnName("LAST_UPDATED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnName("LAST_UPDATED_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ValidatesSteadyIncome).HasColumnName("VALIDATES_STEADY_INCOME");

                entity.Property(e => e.VerifyMethod)
                    .IsRequired()
                    .HasColumnName("VERIFY_METHOD")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.VerifyType)
                    .IsRequired()
                    .HasColumnName("VERIFY_TYPE")
                    .HasColumnType("char(1)");
            });

            modelBuilder.Entity<IncomeVerifyMethodLocation>(entity =>
            {
                entity.HasKey(e => e.IncomeVerifyMethodLocKey)
                    .HasName("PK_IncomeVerifyMethodLocation");

                entity.HasIndex(e => e.IncomeVerifyMethodKey)
                    .HasName("IX_IncomeVerifyMethodLocation_IncomeVerifyMethodKey");

                entity.HasIndex(e => e.Location)
                    .HasName("IX_IncomeVerifyMethodLocation_Location");

                entity.Property(e => e.IncomeVerifyMethodLocKey).HasColumnName("INCOME_VERIFY_METHOD_LOC_KEY");

                entity.Property(e => e.IncomeVerifyMethodKey).HasColumnName("INCOME_VERIFY_METHOD_KEY");

                entity.Property(e => e.IsActive).HasColumnName("IS_ACTIVE");

                entity.Property(e => e.LastUpdatedBy)
                    .IsRequired()
                    .HasColumnName("LAST_UPDATED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnName("LAST_UPDATED_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.HasOne(d => d.IncomeVerifyMethodKeyNavigation)
                    .WithMany(p => p.IncomeVerifyMethodLocation)
                    .HasForeignKey(d => d.IncomeVerifyMethodKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_IncomeVerifyMethodLocation_IncomeVerifyMethod");

                entity.HasOne(d => d.LocationNavigation)
                    .WithMany(p => p.IncomeVerifyMethodLocation)
                    .HasForeignKey(d => d.Location)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_IncomeVerifyMethodLocation_Company");
            });

            modelBuilder.Entity<InitGllist>(entity =>
            {
                entity.HasKey(e => e.InitGlListKey)
                    .HasName("PK_InitGLList");

                entity.ToTable("InitGLList");

                entity.HasIndex(e => new { e.Location, e.TransCode })
                    .HasName("IX_InitGLList_LOCATION_TRANS_CODE");

                entity.Property(e => e.InitGlListKey).HasColumnName("INIT_GL_LIST_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.GlAcct).HasColumnName("GL_ACCT");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.TransCode).HasColumnName("TRANS_CODE");

                entity.HasOne(d => d.GlAcctNavigation)
                    .WithMany(p => p.InitGllist)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.GlAcct)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_InitGLlist_Accounts");
            });

            modelBuilder.Entity<InsuranceClaim>(entity =>
            {
                entity.HasKey(e => e.InsuranceClaimKey)
                    .HasName("PK_InsuranceClaim");

                entity.Property(e => e.InsuranceClaimKey).HasColumnName("INSURANCE_CLAIM_KEY");

                entity.Property(e => e.ClaimNote)
                    .IsRequired()
                    .HasColumnName("CLAIM_NOTE")
                    .HasColumnType("varchar(2000)");

                entity.Property(e => e.ClaimNum)
                    .IsRequired()
                    .HasColumnName("CLAIM_NUM")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.ClaimReasonId).HasColumnName("CLAIM_REASON_ID");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateUpdated)
                    .HasColumnName("DATE_UPDATED")
                    .HasColumnType("datetime");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.FollowUpDate)
                    .HasColumnName("FOLLOW_UP_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.InsuranceStatusKey).HasColumnName("INSURANCE_STATUS_KEY");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.SubmittedDate)
                    .HasColumnName("SUBMITTED_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.UpdatedBy)
                    .HasColumnName("UPDATED_BY")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.InsuranceStatusKeyNavigation)
                    .WithMany(p => p.InsuranceClaim)
                    .HasForeignKey(d => d.InsuranceStatusKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_InsuranceClaim_INSURANCE_STATUS_KEY");

                entity.HasOne(d => d.LoanKeyNavigation)
                    .WithMany(p => p.InsuranceClaim)
                    .HasForeignKey(d => d.LoanKey)
                    .HasConstraintName("FK_InsuranceClaim_LOAN_KEY");
            });

            modelBuilder.Entity<InsuranceClaimEdit>(entity =>
            {
                entity.HasKey(e => e.InsuranceClaimEditKey)
                    .HasName("PK_InsuranceClaimEdit");

                entity.Property(e => e.InsuranceClaimEditKey).HasColumnName("INSURANCE_CLAIM_EDIT_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.FieldName)
                    .IsRequired()
                    .HasColumnName("FIELD_NAME")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.InsuranceClaimKey).HasColumnName("INSURANCE_CLAIM_KEY");

                entity.Property(e => e.InsuranceClaimStatusKey).HasColumnName("INSURANCE_CLAIM_STATUS_KEY");

                entity.Property(e => e.NewValue)
                    .IsRequired()
                    .HasColumnName("NEW_VALUE")
                    .HasColumnType("varchar(2000)");

                entity.Property(e => e.OldValue)
                    .IsRequired()
                    .HasColumnName("OLD_VALUE")
                    .HasColumnType("varchar(2000)");

                entity.HasOne(d => d.InsuranceClaimKeyNavigation)
                    .WithMany(p => p.InsuranceClaimEdit)
                    .HasForeignKey(d => d.InsuranceClaimKey)
                    .HasConstraintName("FK_InsuranceClaimEdit_INSURANCE_CLAIM_KEY");

                entity.HasOne(d => d.InsuranceClaimStatusKeyNavigation)
                    .WithMany(p => p.InsuranceClaimEdit)
                    .HasForeignKey(d => d.InsuranceClaimStatusKey)
                    .HasConstraintName("FK_InsuranceClaimEdit_INSURANCE_CLAIM_STATUS_KEY");
            });

            modelBuilder.Entity<InsuranceClaimStatus>(entity =>
            {
                entity.HasKey(e => e.InsuranceClaimStatusKey)
                    .HasName("PK_InsuranceClaimStatus");

                entity.Property(e => e.InsuranceClaimStatusKey).HasColumnName("INSURANCE_CLAIM_STATUS_KEY");

                entity.Property(e => e.ClaimStatusNote)
                    .IsRequired()
                    .HasColumnName("CLAIM_STATUS_NOTE")
                    .HasColumnType("varchar(2000)");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateUpdated)
                    .HasColumnName("DATE_UPDATED")
                    .HasColumnType("datetime");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.FollowUpDate)
                    .HasColumnName("FOLLOW_UP_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.InsuranceClaimKey).HasColumnName("INSURANCE_CLAIM_KEY");

                entity.Property(e => e.InsuranceStatusKey).HasColumnName("INSURANCE_STATUS_KEY");

                entity.Property(e => e.UpdatedBy)
                    .HasColumnName("UPDATED_BY")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.InsuranceClaimKeyNavigation)
                    .WithMany(p => p.InsuranceClaimStatus)
                    .HasForeignKey(d => d.InsuranceClaimKey)
                    .HasConstraintName("FK_InsuranceClaimStatus_INSURANCE_CLAIM_KEY");

                entity.HasOne(d => d.InsuranceStatusKeyNavigation)
                    .WithMany(p => p.InsuranceClaimStatus)
                    .HasForeignKey(d => d.InsuranceStatusKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_InsuranceClaimStatus_INSURANCE_STATUS_KEY");
            });

            modelBuilder.Entity<InsurancePayment>(entity =>
            {
                entity.HasKey(e => e.InsurancePaymentKey)
                    .HasName("PK_InsurancePayment");

                entity.Property(e => e.InsurancePaymentKey).HasColumnName("INSURANCE_PAYMENT_KEY");

                entity.Property(e => e.InsuranceClaimKey).HasColumnName("INSURANCE_CLAIM_KEY");

                entity.Property(e => e.InsurancePaymentBatchKey).HasColumnName("INSURANCE_PAYMENT_BATCH_KEY");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.PaidAmt)
                    .HasColumnName("PAID_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PastDueBalWaived).HasColumnName("PAST_DUE_BAL_WAIVED");

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");

                entity.HasOne(d => d.InsuranceClaimKeyNavigation)
                    .WithMany(p => p.InsurancePayment)
                    .HasForeignKey(d => d.InsuranceClaimKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_InsurancePayment_INSURANCE_CLAIM_KEY");

                entity.HasOne(d => d.InsurancePaymentBatchKeyNavigation)
                    .WithMany(p => p.InsurancePayment)
                    .HasForeignKey(d => d.InsurancePaymentBatchKey)
                    .HasConstraintName("FK_InsurancePayment_INSURANCE_PAYMENT_BATCH_KEY");

                entity.HasOne(d => d.LoanKeyNavigation)
                    .WithMany(p => p.InsurancePayment)
                    .HasForeignKey(d => d.LoanKey)
                    .HasConstraintName("FK_InsurancePayment_LOAN_KEY");

                entity.HasOne(d => d.TransDetailKeyNavigation)
                    .WithMany(p => p.InsurancePayment)
                    .HasForeignKey(d => d.TransDetailKey)
                    .HasConstraintName("FK_InsurancePayment_TRANS_DETAIL_KEY");
            });

            modelBuilder.Entity<InsurancePaymentBatch>(entity =>
            {
                entity.HasKey(e => e.InsurancePaymentBatchKey)
                    .HasName("PK_InsurancePaymentBatch");

                entity.Property(e => e.InsurancePaymentBatchKey).HasColumnName("INSURANCE_PAYMENT_BATCH_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.ErrorCnt).HasColumnName("ERROR_CNT");

                entity.Property(e => e.InsuranceFileName)
                    .IsRequired()
                    .HasColumnName("INSURANCE_FILE_NAME")
                    .HasColumnType("varchar(255)");

                entity.Property(e => e.ProcessedCnt).HasColumnName("PROCESSED_CNT");
            });

            modelBuilder.Entity<InsuranceStatus>(entity =>
            {
                entity.HasKey(e => e.InsuranceStatusKey)
                    .HasName("PK_InsuranceStatus");

                entity.Property(e => e.InsuranceStatusKey).HasColumnName("INSURANCE_STATUS_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateUpdated)
                    .HasColumnName("DATE_UPDATED")
                    .HasColumnType("datetime");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.FullDescription)
                    .IsRequired()
                    .HasColumnName("FULL_DESCRIPTION")
                    .HasColumnType("varchar(500)");

                entity.Property(e => e.IsOpenClaim).HasColumnName("IS_OPEN_CLAIM");

                entity.Property(e => e.ShortDescription)
                    .IsRequired()
                    .HasColumnName("SHORT_DESCRIPTION")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.UpdatedBy)
                    .HasColumnName("UPDATED_BY")
                    .HasColumnType("char(3)");
            });

            modelBuilder.Entity<InternalProcessEmail>(entity =>
            {
                entity.HasKey(e => e.InternalProcessEmailKey)
                    .HasName("PK_InternalProcessEmail");

                entity.Property(e => e.InternalProcessEmailKey).HasColumnName("INTERNAL_PROCESS_EMAIL_KEY");

                entity.Property(e => e.InternalProcessEmailTypeKey).HasColumnName("INTERNAL_PROCESS_EMAIL_TYPE_KEY");

                entity.Property(e => e.Processed).HasColumnName("PROCESSED");

                entity.Property(e => e.Recipients)
                    .IsRequired()
                    .HasColumnName("RECIPIENTS")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Subject)
                    .IsRequired()
                    .HasColumnName("SUBJECT")
                    .HasColumnType("varchar(100)");
            });

            modelBuilder.Entity<InvalidCustomerAddress>(entity =>
            {
                entity.HasKey(e => e.IcaKey)
                    .HasName("PK_InvalidCustomerAddress");

                entity.HasIndex(e => e.CustomerAddressKey)
                    .HasName("IX_InvalidCustomerAddress_CUSTOMER_ADDRESS_KEY");

                entity.HasIndex(e => e.CustomerKey)
                    .HasName("IX_InvalidCustomerAddress_CUSTOMER_KEY");

                entity.Property(e => e.IcaKey).HasColumnName("ICA_KEY");

                entity.Property(e => e.CustomerAddressKey).HasColumnName("CUSTOMER_ADDRESS_KEY");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.HomeAddrNum)
                    .IsRequired()
                    .HasColumnName("HOME_ADDR_NUM")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.HomeAddrPostDir)
                    .IsRequired()
                    .HasColumnName("HOME_ADDR_POST_DIR")
                    .HasColumnType("varchar(2)");

                entity.Property(e => e.HomeAddrPreDir)
                    .IsRequired()
                    .HasColumnName("HOME_ADDR_PRE_DIR")
                    .HasColumnType("varchar(2)");

                entity.Property(e => e.HomeAddrStreet)
                    .IsRequired()
                    .HasColumnName("HOME_ADDR_STREET")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.HomeAddrSuffix)
                    .IsRequired()
                    .HasColumnName("HOME_ADDR_SUFFIX")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.HomeAddrSuite)
                    .IsRequired()
                    .HasColumnName("HOME_ADDR_SUITE")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.HomeAddrSuiteNum)
                    .IsRequired()
                    .HasColumnName("HOME_ADDR_SUITE_NUM")
                    .HasColumnType("varchar(15)");

                entity.Property(e => e.HomeAddress)
                    .HasColumnName("HOME_ADDRESS")
                    .HasColumnType("varchar(95)")
                    .HasComputedColumnSql("ltrim(((((([HOME_ADDR_NUM]+rtrim(' '+[HOME_ADDR_PRE_DIR]))+rtrim(' '+[HOME_ADDR_STREET]))+rtrim(' '+[HOME_ADDR_SUFFIX]))+rtrim(' '+[HOME_ADDR_POST_DIR]))+rtrim(' '+[HOME_ADDR_SUITE]))+rtrim(' '+[HOME_ADDR_SUITE_NUM]))")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.HomeCity)
                    .IsRequired()
                    .HasColumnName("HOME_CITY")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.HomeState)
                    .IsRequired()
                    .HasColumnName("HOME_STATE")
                    .HasColumnType("char(2)");

                entity.Property(e => e.HomeZipcode)
                    .IsRequired()
                    .HasColumnName("HOME_ZIPCODE")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.Reason).HasColumnName("REASON");
            });

            modelBuilder.Entity<IpToCountry>(entity =>
            {
                entity.HasKey(e => e.IptocountryKey)
                    .HasName("PK_IPTOCOUNTRY");

                entity.Property(e => e.IptocountryKey).HasColumnName("IPTOCOUNTRY_KEY");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasColumnType("char(2)");

                entity.Property(e => e.FromIp).HasColumnName("FromIP");

                entity.Property(e => e.ToIp).HasColumnName("ToIP");
            });

            modelBuilder.Entity<Ipblock>(entity =>
            {
                entity.HasKey(e => e.IpBlockKey)
                    .HasName("PK_IPBlock");

                entity.ToTable("IPBlock");

                entity.Property(e => e.IpBlockKey).HasColumnName("IP_Block_Key");

                entity.Property(e => e.BlockChangeDate).HasColumnType("smalldatetime");

                entity.Property(e => e.DateAdded)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.Description).HasColumnType("varchar(max)");

                entity.Property(e => e.Hits).HasDefaultValueSql("0");

                entity.Property(e => e.IsBlocked).HasDefaultValueSql("1");

                entity.Property(e => e.Notes).HasColumnType("varchar(250)");

                entity.Property(e => e.NumericIp).HasColumnName("NumericIP");
            });

            modelBuilder.Entity<Issuer>(entity =>
            {
                entity.HasKey(e => e.IssuerKey)
                    .HasName("PK_Issuer");

                entity.HasIndex(e => e.AcctNo)
                    .HasName("IX_Issuer_ACCT_NO");

                entity.HasIndex(e => e.AcctNoNum)
                    .HasName("IX_Issuer_ACCT_NO_NUM");

                entity.HasIndex(e => e.BankId)
                    .HasName("IX_Issuer_BANK_ID");

                entity.HasIndex(e => e.CustomerKey)
                    .HasName("IX_Issuer_CUSTOMER_KEY");

                entity.HasIndex(e => e.Issuer1)
                    .HasName("IX_Issuer_ISSUER");

                entity.HasIndex(e => e.Location)
                    .HasName("IX_Issuer_LOCATION");

                entity.HasIndex(e => new { e.BankId, e.Bounced })
                    .HasName("IX_Issuer_BOUNCED");

                entity.HasIndex(e => new { e.IssuerKey, e.Issuer1, e.AcctNo, e.BankId, e.BankStatusId })
                    .HasName("IX_Issuer_BANK_STATUS_ID");

                entity.Property(e => e.IssuerKey).HasColumnName("ISSUER_KEY");

                entity.Property(e => e.AcctNo)
                    .IsRequired()
                    .HasColumnName("ACCT_NO")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.AcctNoNum)
                    .HasColumnName("ACCT_NO_NUM")
                    .HasComputedColumnSql("CONVERT([bigint],isnull([ACCT_NO],(0)),(0))")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AchBlock).HasColumnName("ACH_BLOCK");

                entity.Property(e => e.AddrStreet)
                    .IsRequired()
                    .HasColumnName("ADDR_STREET")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.Address1)
                    .IsRequired()
                    .HasColumnName("ADDRESS1")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.AddressCsz)
                    .HasColumnName("ADDRESS_CSZ")
                    .HasColumnType("varchar(100)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_CSZ]([ADDRESS_FORMAT],[CITY],[STATE],[ZIPCODE])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressFormat)
                    .IsRequired()
                    .HasColumnName("ADDRESS_FORMAT")
                    .HasColumnType("char(3)");

                entity.Property(e => e.AddressLine)
                    .HasColumnName("ADDRESS_LINE")
                    .HasColumnType("varchar(100)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE]([ADDRESS_FORMAT],[ADDRESS1],'','',[ADDR_STREET],'','','','',[FLAT_NUM],[BUILDING_NAME],[BUILDING_NUM])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressLine1)
                    .HasColumnName("ADDRESS_LINE_1")
                    .HasColumnType("varchar(100)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE_1]([ADDRESS_FORMAT],[ADDRESS1],'','',[ADDR_STREET],'','',[FLAT_NUM],[BUILDING_NAME],'','')")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressLine2)
                    .HasColumnName("ADDRESS_LINE_2")
                    .HasColumnType("varchar(150)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE_2]([ADDRESS_FORMAT],'','',[CITY],[STATE],[ZIPCODE],[BUILDING_NUM],[ADDR_STREET],[ADDRESS1],'','','','')")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressLine3)
                    .HasColumnName("ADDRESS_LINE_3")
                    .HasColumnType("varchar(150)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE_3]([ADDRESS_FORMAT],'','',[CITY],[STATE],[ZIPCODE])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.BankFundingMethod).HasColumnName("BANK_FUNDING_METHOD");

                entity.Property(e => e.BankId)
                    .IsRequired()
                    .HasColumnName("BANK_ID")
                    .HasColumnType("varchar(9)");

                entity.Property(e => e.BankStatusId).HasColumnName("BANK_STATUS_ID");

                entity.Property(e => e.BlockCheck).HasColumnName("BLOCK_CHECK");

                entity.Property(e => e.BlockReasonKey).HasColumnName("BLOCK_REASON_KEY");

                entity.Property(e => e.Bounced).HasColumnName("BOUNCED");

                entity.Property(e => e.BuildingName)
                    .IsRequired()
                    .HasColumnName("BUILDING_NAME")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.BuildingNum)
                    .IsRequired()
                    .HasColumnName("BUILDING_NUM")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasColumnName("CITY")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasColumnName("COUNTRY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.County)
                    .IsRequired()
                    .HasColumnName("COUNTY")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.Date)
                    .HasColumnName("DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Flash).HasColumnName("FLASH");

                entity.Property(e => e.FlatNum)
                    .IsRequired()
                    .HasColumnName("FLAT_NUM")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Issuer1)
                    .IsRequired()
                    .HasColumnName("ISSUER")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Limit)
                    .HasColumnName("LIMIT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasColumnType("varchar(2000)");

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasColumnName("PHONE")
                    .HasColumnType("varchar(12)");

                entity.Property(e => e.PhoneExt)
                    .HasColumnName("PHONE_EXT")
                    .HasColumnType("varchar(6)");

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasColumnName("STATE")
                    .HasColumnType("char(2)");

                entity.Property(e => e.SystemBlock).HasColumnName("SYSTEM_BLOCK");

                entity.Property(e => e.Tloc).HasColumnName("TLOC");

                entity.Property(e => e.Tlr)
                    .IsRequired()
                    .HasColumnName("TLR")
                    .HasColumnType("char(3)");

                entity.Property(e => e.Tupd)
                    .HasColumnName("TUPD")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Tupt)
                    .HasColumnName("TUPT")
                    .HasColumnType("char(3)");

                entity.Property(e => e.Type)
                    .HasColumnName("TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.Zipcode)
                    .IsRequired()
                    .HasColumnName("ZIPCODE")
                    .HasColumnType("varchar(10)");

                entity.HasOne(d => d.Bank)
                    .WithMany(p => p.Issuer)
                    .HasForeignKey(d => d.BankId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_Issuer_BANK_ID");

                entity.HasOne(d => d.BankStatus)
                    .WithMany(p => p.Issuer)
                    .HasForeignKey(d => d.BankStatusId)
                    .HasConstraintName("FK_Issuer_BANK_STATUS_ID");

                entity.HasOne(d => d.BlockReasonKeyNavigation)
                    .WithMany(p => p.Issuer)
                    .HasForeignKey(d => d.BlockReasonKey)
                    .HasConstraintName("FK_Issuer_BlockReason");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.Issuer)
                    .HasForeignKey(d => d.CustomerKey)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Issuer_CUSTOMER_KEY");

                entity.HasOne(d => d.LocationNavigation)
                    .WithMany(p => p.IssuerLocationNavigation)
                    .HasForeignKey(d => d.Location)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_Issuer_Company");

                entity.HasOne(d => d.StateNavigation)
                    .WithMany(p => p.Issuer)
                    .HasForeignKey(d => d.State)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_Issuer_US_States");

                entity.HasOne(d => d.TlocNavigation)
                    .WithMany(p => p.IssuerTlocNavigation)
                    .HasForeignKey(d => d.Tloc)
                    .HasConstraintName("FK_Issuer_Company1");

                entity.HasOne(d => d.TlrNavigation)
                    .WithMany(p => p.IssuerTlrNavigation)
                    .HasPrincipalKey(p => p.Teller)
                    .HasForeignKey(d => d.Tlr)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_Issuer_TLR");

                entity.HasOne(d => d.TuptNavigation)
                    .WithMany(p => p.IssuerTuptNavigation)
                    .HasPrincipalKey(p => p.Teller)
                    .HasForeignKey(d => d.Tupt)
                    .HasConstraintName("FK_Issuer_TUPT");
            });

            modelBuilder.Entity<IssuerEdit>(entity =>
            {
                entity.HasKey(e => e.IssuerEditKey)
                    .HasName("PK_IssuerEdit");

                entity.HasIndex(e => e.IssuerKey)
                    .HasName("IX_IssuerEdit_ISSUER_KEY");

                entity.Property(e => e.IssuerEditKey).HasColumnName("ISSUER_EDIT_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.FieldName)
                    .IsRequired()
                    .HasColumnName("FIELD_NAME")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.IssuerKey).HasColumnName("ISSUER_KEY");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.NewValue)
                    .HasColumnName("NEW_VALUE")
                    .HasColumnType("varchar(150)");

                entity.Property(e => e.OldValue)
                    .HasColumnName("OLD_VALUE")
                    .HasColumnType("varchar(150)");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.IssuerKeyNavigation)
                    .WithMany(p => p.IssuerEdit)
                    .HasForeignKey(d => d.IssuerKey)
                    .HasConstraintName("FK_IssuerEdit_Issuer");
            });

            modelBuilder.Entity<LegalVerification>(entity =>
            {
                entity.HasKey(e => e.LegalVerificationKey)
                    .HasName("PK_LegalVerification");

                entity.HasIndex(e => e.RisreptKey)
                    .HasName("IX_LegalVerification_RISREPT_KEY");

                entity.Property(e => e.LegalVerificationKey).HasColumnName("LEGAL_VERIFICATION_KEY");

                entity.Property(e => e.AttorneyCurrentBalDue)
                    .HasColumnName("ATTORNEY_CURRENT_BAL_DUE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.AttorneyFees)
                    .HasColumnName("ATTORNEY_FEES")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.AttorneyPostJudgeDue)
                    .HasColumnName("ATTORNEY_POST_JUDGE_DUE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.AttorneyTitleLoanBalDue)
                    .HasColumnName("ATTORNEY_TITLE_LOAN_BAL_DUE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CourtCosts)
                    .HasColumnName("COURT_COSTS")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CustomerBalanceDue)
                    .HasColumnName("CUSTOMER_BALANCE_DUE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DebtorNumber)
                    .IsRequired()
                    .HasColumnName("DEBTOR_NUMBER")
                    .HasColumnType("varchar(15)");

                entity.Property(e => e.DefendantAddressCsz)
                    .IsRequired()
                    .HasColumnName("DEFENDANT_ADDRESS_CSZ")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.DefendantAddressLine)
                    .IsRequired()
                    .HasColumnName("DEFENDANT_ADDRESS_LINE")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.DefendantFullname)
                    .IsRequired()
                    .HasColumnName("DEFENDANT_FULLNAME")
                    .HasColumnType("varchar(60)");

                entity.Property(e => e.DefendantMaskedSsn)
                    .IsRequired()
                    .HasColumnName("DEFENDANT_MASKED_SSN")
                    .HasColumnType("varchar(11)");

                entity.Property(e => e.DefendantTotalDue)
                    .HasColumnName("DEFENDANT_TOTAL_DUE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.ExceptionReportStatus).HasColumnName("EXCEPTION_REPORT_STATUS");

                entity.Property(e => e.ExceptionStatusLastUpdated)
                    .HasColumnName("EXCEPTION_STATUS_LAST_UPDATED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ImportFilename)
                    .IsRequired()
                    .HasColumnName("IMPORT_FILENAME")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.Plaintiff1)
                    .IsRequired()
                    .HasColumnName("PLAINTIFF1")
                    .HasColumnType("varchar(255)");

                entity.Property(e => e.Plaintiff2)
                    .IsRequired()
                    .HasColumnName("PLAINTIFF2")
                    .HasColumnType("varchar(255)");

                entity.Property(e => e.PrincipleDue)
                    .HasColumnName("PRINCIPLE_DUE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.ReportType).HasColumnName("REPORT_TYPE");

                entity.Property(e => e.RiReference)
                    .IsRequired()
                    .HasColumnName("RI_REFERENCE")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.RisreptKey).HasColumnName("RISREPT_KEY");

                entity.Property(e => e.VerifiedDate)
                    .HasColumnName("VERIFIED_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VerifiedTeller)
                    .HasColumnName("VERIFIED_TELLER")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.RisreptKeyNavigation)
                    .WithMany(p => p.LegalVerification)
                    .HasForeignKey(d => d.RisreptKey)
                    .HasConstraintName("FK_LegalVerification_RisRept");
            });

            modelBuilder.Entity<Lender>(entity =>
            {
                entity.HasKey(e => e.LenderKey)
                    .HasName("PK_Lender");

                entity.HasIndex(e => e.LenderId)
                    .HasName("IX_Lender_LENDER_ID")
                    .IsUnique();

                entity.HasIndex(e => e.LenderName)
                    .HasName("IX_Lender_LENDER_NAME")
                    .IsUnique();

                entity.Property(e => e.LenderKey).HasColumnName("LENDER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Enabled).HasColumnName("ENABLED");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.LastUpdated)
                    .HasColumnName("LAST_UPDATED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.LenderId)
                    .IsRequired()
                    .HasColumnName("LENDER_ID")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.LenderName)
                    .IsRequired()
                    .HasColumnName("LENDER_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.QualifyCuroCustomer).HasColumnName("QUALIFY_CURO_CUSTOMER");

                entity.Property(e => e.UpdatedBy)
                    .HasColumnName("UPDATED_BY")
                    .HasColumnType("char(3)");
            });

            modelBuilder.Entity<LienHolder>(entity =>
            {
                entity.HasKey(e => e.LienHolderKey)
                    .HasName("PK_LienHolder");

                entity.HasIndex(e => e.LienHolderName)
                    .HasName("IX_LienHolder_LIEN_HOLDER_NAME")
                    .IsUnique();

                entity.Property(e => e.LienHolderKey).HasColumnName("LIEN_HOLDER_KEY");

                entity.Property(e => e.AddrStreet)
                    .IsRequired()
                    .HasColumnName("ADDR_STREET")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.Address1)
                    .IsRequired()
                    .HasColumnName("ADDRESS1")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.AddressCsz)
                    .HasColumnName("ADDRESS_CSZ")
                    .HasColumnType("varchar(100)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_CSZ]([ADDRESS_FORMAT],[CITY],[STATE],[ZIPCODE])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressFormat)
                    .IsRequired()
                    .HasColumnName("ADDRESS_FORMAT")
                    .HasColumnType("char(3)");

                entity.Property(e => e.AddressLine)
                    .HasColumnName("ADDRESS_LINE")
                    .HasColumnType("varchar(100)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE]([ADDRESS_FORMAT],[ADDRESS1],'','',[ADDR_STREET],'','','','',[FLAT_NUM],[BUILDING_NAME],[BUILDING_NUM])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressLine1)
                    .HasColumnName("ADDRESS_LINE_1")
                    .HasColumnType("varchar(100)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE_1]([ADDRESS_FORMAT],[ADDRESS1],'','',[ADDR_STREET],'','',[FLAT_NUM],[BUILDING_NAME],'','')")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressLine2)
                    .HasColumnName("ADDRESS_LINE_2")
                    .HasColumnType("varchar(150)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE_2]([ADDRESS_FORMAT],'','',[CITY],[STATE],[ZIPCODE],[BUILDING_NUM],[ADDR_STREET],[ADDRESS1],'','','','')")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressLine3)
                    .HasColumnName("ADDRESS_LINE_3")
                    .HasColumnType("varchar(150)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE_3]([ADDRESS_FORMAT],'','',[CITY],[STATE],[ZIPCODE])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.BuildingName)
                    .IsRequired()
                    .HasColumnName("BUILDING_NAME")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.BuildingNum)
                    .IsRequired()
                    .HasColumnName("BUILDING_NUM")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasColumnName("CITY")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasColumnName("COUNTRY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.County)
                    .IsRequired()
                    .HasColumnName("COUNTY")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.EnteredLocation).HasColumnName("ENTERED_LOCATION");

                entity.Property(e => e.FlatNum)
                    .IsRequired()
                    .HasColumnName("FLAT_NUM")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.LastUpdated)
                    .HasColumnName("LAST_UPDATED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.LienHolderName)
                    .IsRequired()
                    .HasColumnName("LIEN_HOLDER_NAME")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasColumnName("PHONE")
                    .HasColumnType("varchar(12)");

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasColumnName("STATE")
                    .HasColumnType("char(2)");

                entity.Property(e => e.UpdatedBy)
                    .HasColumnName("UPDATED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.UpdatedLocation).HasColumnName("UPDATED_LOCATION");

                entity.Property(e => e.Zipcode)
                    .IsRequired()
                    .HasColumnName("ZIPCODE")
                    .HasColumnType("varchar(10)");
            });

            modelBuilder.Entity<Loan>(entity =>
            {
                entity.HasKey(e => e.LoanKey)
                    .HasName("PK_Loan");

                entity.HasIndex(e => e.AdjustedDueDate)
                    .HasName("IX_Loan_ADJUSTED_DUE_DATE");

                entity.HasIndex(e => e.CustomerKey)
                    .HasName("IX_Loan_CUSTOMER_KEY");

                entity.HasIndex(e => e.DateEntered)
                    .HasName("IX_Loan_DATE_ENTERED");

                entity.HasIndex(e => e.DwLoanNo)
                    .HasName("IX_Loan_DW_LOAN_NO");

                entity.HasIndex(e => e.IssuerKey)
                    .HasName("IX_Loan_ISSUER_KEY");

                entity.HasIndex(e => e.LoanProductKey)
                    .HasName("IX_Loan_LoanProductKey");

                entity.HasIndex(e => e.LoanStatus)
                    .HasName("IX_Loan_LOAN_STATUS");

                entity.HasIndex(e => e.LoanType)
                    .HasName("IX_Loan_LOAN_TYPE");

                entity.HasIndex(e => e.Location)
                    .HasName("IX_Loan_LOCATION");

                entity.HasIndex(e => e.OrigLoanKey)
                    .HasName("IX_Loan_ORIG_LOAN_KEY");

                entity.HasIndex(e => e.PaidLoanKey)
                    .HasName("IX_Loan_PAID_LOAN_KEY");

                entity.HasIndex(e => e.PaymentPlanKey)
                    .HasName("IX_Loan_PAYMENT_PLAN_KEY");

                entity.HasIndex(e => e.Teller)
                    .HasName("IX_Loan_TELLER");

                entity.HasIndex(e => new { e.CustomerKey, e.Location })
                    .HasName("IX_Loan_LOCATION_CUSTOMER_KEY");

                entity.HasIndex(e => new { e.LoanKey, e.Dwdocid })
                    .HasName("IX_Loan_DWDOCID");

                entity.HasIndex(e => new { e.Reversed, e.LoanKey })
                    .HasName("IX_Loan_REVERSED_LOAN_KEY");

                entity.HasIndex(e => new { e.LoanAmt, e.FeeAmt, e.TransDetailKey })
                    .HasName("IX_Loan_TRANS_DETAIL_KEY");

                entity.HasIndex(e => new { e.PendingSchedAchAmt, e.PendingCollAchAmt, e.PaidLoanKey })
                    .HasName("IX_Loan_PAID_LOAN_KEY_INCLUDEd");

                entity.HasIndex(e => new { e.LoanKey, e.TransDetailKey, e.Reversed, e.DateEntered })
                    .HasName("IX_Loan_DATE_ENTERED_LOAN_KEY");

                entity.HasIndex(e => new { e.PendingCollAchAmt, e.PendingSchedAchAmt, e.LoanKey, e.CustomerKey, e.LoanBalance, e.AdjustedDueDate })
                    .HasName("IX_Loan_LOAN_BALANCE_ADJUSTED_DUE_DATE_FF");

                entity.HasIndex(e => new { e.Teller, e.DateEntered, e.LoanAmt, e.OrigLoanKey, e.LoanKey, e.OrigCode, e.TransDetailKey, e.Location, e.RolloverNum })
                    .HasName("IX_Loan_ORIG_LOAN_KEY_LOAN_KEY");

                entity.HasIndex(e => new { e.ExcludeFromCap, e.LoanKey, e.CustomerKey, e.Teller, e.IssuerKey, e.CreditCardKey, e.LoanType, e.TotFeeAmt, e.AdjustedDueDate, e.Defaulted, e.ProductType, e.LoanBalance, e.LoanStatus, e.Reversed, e.PendingSchedAchAmt, e.DepositOrder, e.Location })
                    .HasName("IX_Loan_LOAN_STATUS_REVERSED_PENDING_SCHED_ACH_AMT_DEPOSIT_ORDER_LOCATION");

                entity.HasIndex(e => new { e.CheckNo, e.CustomerKey, e.PaymentPlanKey, e.CashAmt, e.FeeAmt, e.TotFeeAmt, e.IssuerKey, e.LoanKey, e.LoanAmt, e.PrincAmt, e.LoanBalance, e.Location, e.Defaulted, e.Reversed, e.LoanStatus, e.ProductType, e.LoanType, e.Teller, e.DrawerzKey, e.JointLoan, e.Dwdocid, e.Doclost, e.DateEntered, e.DefaultDate, e.AdjustedDueDate })
                    .HasName("IX_Loan_SKT_1");

                entity.HasIndex(e => new { e.TransDetailKey, e.Location, e.Teller, e.DateEntered, e.CheckNo, e.PendingCollAchSent, e.LoanDate, e.LoanProductKey, e.LoanStatusDate, e.LoanStatus, e.Dwdocid, e.ProductType, e.PendingSchedAchAmt, e.PendingCollAchAmt, e.DiscAmt, e.PendingSchedAchSent, e.FeeAmt, e.OrigDueDate, e.AdjustedDueDate, e.Defaulted, e.RolloverNum, e.JointLoan, e.LoanBalance, e.LoanAmt, e.PrincAmt, e.RatePct, e.IssuerKey, e.RebateAmt, e.LoanType, e.OrigCode, e.OrigLoanKey, e.PaidLoanKey, e.TotFeeAmt, e.CustomerKey, e.Reversed, e.LoanKey })
                    .HasName("IX_Loan_CUSTOMER_KEY_REVERESED");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.AdjustedDueDate)
                    .HasColumnName("ADJUSTED_DUE_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.CalcDueDate)
                    .HasColumnName("CALC_DUE_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.CancelInsuranceTransDetailKey).HasColumnName("CANCEL_INSURANCE_TRANS_DETAIL_KEY");

                entity.Property(e => e.CapsChangeDate)
                    .HasColumnName("CAPS_CHANGE_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.CashAmt)
                    .HasColumnName("CASH_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.ChargeLienFee).HasColumnName("CHARGE_LIEN_FEE");

                entity.Property(e => e.ChargeTransFee).HasColumnName("CHARGE_TRANS_FEE");

                entity.Property(e => e.CheckNo)
                    .IsRequired()
                    .HasColumnName("CHECK_NO")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.CourtesyCall).HasColumnName("COURTESY_CALL");

                entity.Property(e => e.CreditCardKey).HasColumnName("CREDIT_CARD_KEY");

                entity.Property(e => e.CreditedLocation).HasColumnName("CREDITED_LOCATION");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DefaultDate)
                    .HasColumnName("DEFAULT_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Defaulted).HasColumnName("DEFAULTED");

                entity.Property(e => e.DepositOrder).HasColumnName("DEPOSIT_ORDER");

                entity.Property(e => e.DepositStatus).HasColumnName("DEPOSIT_STATUS");

                entity.Property(e => e.DirectDeposit).HasColumnName("DIRECT_DEPOSIT");

                entity.Property(e => e.DiscAmt)
                    .HasColumnName("DISC_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.DisplayCheckNo)
                    .IsRequired()
                    .HasColumnName("DISPLAY_CHECK_NO")
                    .HasColumnType("varchar(10)")
                    .HasComputedColumnSql("case [CHECK_NO] when 'D' then 'DEBIT' else [CHECK_NO] end")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.Doclost).HasColumnName("DOCLOST");

                entity.Property(e => e.DrawerzKey).HasColumnName("DRAWERZ_KEY");

                entity.Property(e => e.DwLoanNo)
                    .IsRequired()
                    .HasColumnName("DW_LOAN_NO")
                    .HasColumnType("varchar(15)");

                entity.Property(e => e.Dwdocid).HasColumnName("DWDOCID");

                entity.Property(e => e.EsignDocMethod).HasColumnName("ESIGN_DOC_METHOD");

                entity.Property(e => e.ExcludeFromCap).HasColumnName("EXCLUDE_FROM_CAP");

                entity.Property(e => e.ExcludeFromCapAch).HasColumnName("EXCLUDE_FROM_CAP_ACH");

                entity.Property(e => e.FasterPaymentsFee)
                    .HasColumnName("FASTER_PAYMENTS_FEE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.FeeAmt)
                    .HasColumnName("FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.FundingMethod).HasColumnName("FUNDING_METHOD");

                entity.Property(e => e.GraceAmt)
                    .HasColumnName("GRACE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.InsuranceFeeAmt)
                    .HasColumnName("INSURANCE_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.InterestAndFeesCapReached).HasColumnName("INTEREST_AND_FEES_CAP_REACHED");

                entity.Property(e => e.InterestAndFeesCapReachedDate)
                    .HasColumnName("INTEREST_AND_FEES_CAP_REACHED_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.IsEsign).HasColumnName("IS_ESIGN");

                entity.Property(e => e.IsGailLoan).HasColumnName("IS_GAIL_LOAN");

                entity.Property(e => e.IsMultiCheck).HasColumnName("IS_MULTI_CHECK");

                entity.Property(e => e.IssuerKey).HasColumnName("ISSUER_KEY");

                entity.Property(e => e.JointLoan).HasColumnName("JOINT_LOAN");

                entity.Property(e => e.LienFeeAmt)
                    .HasColumnName("LIEN_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanAmt)
                    .HasColumnName("LOAN_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanBalance)
                    .HasColumnName("LOAN_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanDate)
                    .HasColumnName("LOAN_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.LoanProductConfigKey).HasColumnName("LOAN_PRODUCT_CONFIG_KEY");

                entity.Property(e => e.LoanProductKey).HasColumnName("LOAN_PRODUCT_KEY");

                entity.Property(e => e.LoanProductTilaKey).HasColumnName("LOAN_PRODUCT_TILA_KEY");

                entity.Property(e => e.LoanRateSource).HasColumnName("LOAN_RATE_SOURCE");

                entity.Property(e => e.LoanStatus)
                    .IsRequired()
                    .HasColumnName("LOAN_STATUS")
                    .HasColumnType("char(1)");

                entity.Property(e => e.LoanStatusDate)
                    .HasColumnName("LOAN_STATUS_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.LoanType)
                    .IsRequired()
                    .HasColumnName("LOAN_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.OrigApr)
                    .HasColumnName("ORIG_APR")
                    .HasColumnType("numeric");

                entity.Property(e => e.OrigCode)
                    .IsRequired()
                    .HasColumnName("ORIG_CODE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.OrigDueDate)
                    .HasColumnName("ORIG_DUE_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.OrigLoanKey).HasColumnName("ORIG_LOAN_KEY");

                entity.Property(e => e.PaidLoanKey).HasColumnName("PAID_LOAN_KEY");

                entity.Property(e => e.PaymentPlanKey).HasColumnName("PAYMENT_PLAN_KEY");

                entity.Property(e => e.PendingCollAchAmt)
                    .HasColumnName("PENDING_COLL_ACH_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PendingCollAchSent)
                    .HasColumnName("PENDING_COLL_ACH_SENT")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.PendingPmtAmt)
                    .HasColumnName("PENDING_PMT_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PendingPmtCabInterestCap)
                    .HasColumnName("PENDING_PMT_CAB_INTEREST_CAP")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PendingPmtDate)
                    .HasColumnName("PENDING_PMT_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.PendingPmtFees)
                    .HasColumnName("PENDING_PMT_FEES")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PendingPmtInterestCap)
                    .HasColumnName("PENDING_PMT_INTEREST_CAP")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PendingPmtPrinc)
                    .HasColumnName("PENDING_PMT_PRINC")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PendingSchedAchAmt)
                    .HasColumnName("PENDING_SCHED_ACH_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PendingSchedAchSent)
                    .HasColumnName("PENDING_SCHED_ACH_SENT")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.PrincAmt)
                    .HasColumnName("PRINC_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PrintLanguage)
                    .IsRequired()
                    .HasColumnName("PRINT_LANGUAGE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.ProductType)
                    .IsRequired()
                    .HasColumnName("PRODUCT_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.RatePct)
                    .HasColumnName("RATE_PCT")
                    .HasColumnType("numeric");

                entity.Property(e => e.RebateAmt)
                    .HasColumnName("REBATE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Reversed).HasColumnName("REVERSED");

                entity.Property(e => e.ReversedDate)
                    .HasColumnName("REVERSED_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RolloverNum).HasColumnName("ROLLOVER_NUM");

                entity.Property(e => e.StandardRatePct)
                    .HasColumnName("STANDARD_RATE_PCT")
                    .HasColumnType("numeric");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.TilaAmountFinanced)
                    .HasColumnName("TILA_AMOUNT_FINANCED")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TilaApr)
                    .HasColumnName("TILA_APR")
                    .HasColumnType("numeric");

                entity.Property(e => e.TilaFinanceCharge)
                    .HasColumnName("TILA_FINANCE_CHARGE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TilaTotalPayments)
                    .HasColumnName("TILA_TOTAL_PAYMENTS")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TotFeeAmt)
                    .HasColumnName("TOT_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");

                entity.Property(e => e.TransFeeAmt)
                    .HasColumnName("TRANS_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.WithdrawAdjustedDueDate)
                    .HasColumnName("WITHDRAW_ADJUSTED_DUE_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.WithdrawDate)
                    .HasColumnName("WITHDRAW_DATE")
                    .HasColumnType("date");

                entity.HasOne(d => d.CreditCardKeyNavigation)
                    .WithMany(p => p.Loan)
                    .HasForeignKey(d => d.CreditCardKey)
                    .HasConstraintName("FK_Loan_CREDIT_CARD_KEY");

                entity.HasOne(d => d.CreditedLocationNavigation)
                    .WithMany(p => p.LoanCreditedLocationNavigation)
                    .HasForeignKey(d => d.CreditedLocation);

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.Loan)
                    .HasForeignKey(d => d.CustomerKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_Loan_Customer");

                entity.HasOne(d => d.LocationNavigation)
                    .WithMany(p => p.LoanLocationNavigation)
                    .HasForeignKey(d => d.Location)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_Loan_Company");

                entity.HasOne(d => d.TransDetailKeyNavigation)
                    .WithMany(p => p.Loan)
                    .HasForeignKey(d => d.TransDetailKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_Loan_TransDetail");
            });

            modelBuilder.Entity<LoanApplication>(entity =>
            {
                entity.HasKey(e => e.LoanApplicationKey)
                    .HasName("PK_LoanApplication");

                entity.HasIndex(e => e.CustomerKey)
                    .HasName("IX_LoanApplication_CUSTOMER_KEY");

                entity.HasIndex(e => e.DateEntered)
                    .HasName("IX_LoanApplication_DATE_ENTERED");

                entity.HasIndex(e => e.FirstName)
                    .HasName("IX_LoanApplication_FIRSTNAME");

                entity.HasIndex(e => e.IdNo)
                    .HasName("IX_LoanApplication_ID_NO");

                entity.HasIndex(e => e.IpAddress)
                    .HasName("IX_LoanApplication_IP_ADDRESS");

                entity.HasIndex(e => e.LastName)
                    .HasName("IX_LoanApplication_LASTNAME");

                entity.HasIndex(e => e.LoanKey)
                    .HasName("IX_LoanApplication_LOAN_KEY");

                entity.HasIndex(e => e.Location)
                    .HasName("IX_LoanApplication_LOCATION");

                entity.HasIndex(e => e.Ssn)
                    .HasName("IX_LoanApplication_SSN");

                entity.HasIndex(e => e.VisitorKey)
                    .HasName("IX_LoanApplication_VISITOR_KEY");

                entity.HasIndex(e => new { e.CustomerKey, e.VisitorKey })
                    .HasName("IX_LoanApplication_CUSTOMER_KEY_VISITOR_KEY");

                entity.HasIndex(e => new { e.HomePhone, e.CellPhone })
                    .HasName("IX_LoanApplication_HOME_PHONE_CELL_PHONE");

                entity.HasIndex(e => new { e.LoanApplicationKey, e.LoanKey })
                    .HasName("IX_LoanApplication_LOAN_APPLICATION_KEY_LOAN_KEY");

                entity.HasIndex(e => new { e.HomePhone, e.CellPhone, e.VisitorKey })
                    .HasName("IX_LoanApplication_HOME_CELL_WORK_PHONE_VISITOR_KEY");

                entity.HasIndex(e => new { e.LoanKey, e.AcctNum, e.AbaNum })
                    .HasName("IX_LoanApplication_LOAN_KEY_ACCT_NUM");

                entity.HasIndex(e => new { e.Ssn, e.AcctNum, e.VisitorKey })
                    .HasName("IX_LoanApplication_ACCT_NUM_VISITOR_KEY");

                entity.HasIndex(e => new { e.VisitorKey, e.AcctNum, e.Ssn })
                    .HasName("IX_LoanApplication_VISITOR_KEY_ACCT_NUM");

                entity.HasIndex(e => new { e.LoanKey, e.Ssn, e.VisitorKey, e.DateEntered })
                    .HasName("IX_LoanApplication_VISITOR_KEY_DATE_ENTERED");

                entity.HasIndex(e => new { e.AcctNum, e.DateEntered, e.LoanApplicationKey, e.AbaNum, e.CustomerKey, e.LoanKey })
                    .HasName("IX_LoanApplication_CUSTOMER_KEY_LOAN_KEY");

                entity.HasIndex(e => new { e.FirstName, e.LastName, e.Ssn, e.Location, e.CustomerKey, e.IdNo, e.LegalNumber, e.HomePhone, e.LoanApplicationKey })
                    .HasName("IX_LoanApplication_HOMEPHONE_DATEENTERED")
                    .IsUnique();

                entity.HasIndex(e => new { e.Location, e.CustomerKey, e.FirstName, e.LastName, e.Ssn, e.IdNo, e.LegalNumber, e.CellPhone, e.LoanApplicationKey })
                    .HasName("IX_LoanApplication_CELLPHONE_DATEENTERED")
                    .IsUnique();

                entity.HasIndex(e => new { e.CustomerKey, e.VisitorKey, e.HomePhone, e.Location, e.CellPhone, e.AbaNum, e.AcctNum, e.Ssn, e.FirstName, e.LastName })
                    .HasName("IX_LoanApplication_SSN_INCLUDED");

                entity.HasIndex(e => new { e.Ssn, e.AbaNum, e.AcctNum, e.LastName, e.HomePhone, e.CellPhone, e.Location, e.CustomerKey, e.FirstName, e.VisitorKey })
                    .HasName("IX_LoanApplication_VISITOR_KEY_INCLUDED");

                entity.HasIndex(e => new { e.VisitorKey, e.HomePhone, e.CellPhone, e.AbaNum, e.AcctNum, e.Location, e.CustomerKey, e.FirstName, e.LastName, e.Ssn })
                    .HasName("IX_LoanApplication_FIRST_NAME_INCLUDED");

                entity.HasIndex(e => new { e.VisitorKey, e.HomePhone, e.CellPhone, e.Location, e.CustomerKey, e.AbaNum, e.AcctNum, e.LastName, e.FirstName, e.Ssn })
                    .HasName("IX_LoanApplication_LAST_NAME_INCLUDED");

                entity.HasIndex(e => new { e.LegalNumber, e.CustIdNum, e.Dob, e.FirstName, e.LastName, e.HomePhone, e.CellPhone, e.Ssn, e.IdNo, e.LoanApplicationKey, e.Location, e.CustomerKey, e.VisitorKey, e.DateEntered })
                    .HasName("IX_LoanApplication_CUSTOMER_KEY_VISITOR_KEY_DATE_ENTERED");

                entity.Property(e => e.LoanApplicationKey).HasColumnName("LOAN_APPLICATION_KEY");

                entity.Property(e => e.AbaNum)
                    .IsRequired()
                    .HasColumnName("ABA_NUM")
                    .HasColumnType("char(9)");

                entity.Property(e => e.AcctNum)
                    .IsRequired()
                    .HasColumnName("ACCT_NUM")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.ActiveMilitary).HasColumnName("ACTIVE_MILITARY");

                entity.Property(e => e.ArbitrationOptIn).HasColumnName("ARBITRATION_OPT_IN");

                entity.Property(e => e.Bounced).HasColumnName("BOUNCED");

                entity.Property(e => e.CancelInsuranceRequestBy)
                    .HasColumnName("CANCEL_INSURANCE_REQUEST_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.CancelInsuranceRequestDate)
                    .HasColumnName("CANCEL_INSURANCE_REQUEST_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.CcBlock).HasColumnName("CC_BLOCK");

                entity.Property(e => e.CcCount).HasColumnName("CC_COUNT");

                entity.Property(e => e.CcardBrand).HasColumnName("CCARD_BRAND");

                entity.Property(e => e.CcardCvv)
                    .IsRequired()
                    .HasColumnName("CCARD_CVV")
                    .HasColumnType("varchar(4)");

                entity.Property(e => e.CcardExpMonth).HasColumnName("CCARD_EXP_MONTH");

                entity.Property(e => e.CcardExpYear).HasColumnName("CCARD_EXP_YEAR");

                entity.Property(e => e.CcardFromDate)
                    .HasColumnName("CCARD_FROM_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.CcardGuaranteeAmt)
                    .HasColumnName("CCARD_GUARANTEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CcardIsDebit).HasColumnName("CCARD_IS_DEBIT");

                entity.Property(e => e.CcardIssueNum).HasColumnName("CCARD_ISSUE_NUM");

                entity.Property(e => e.CcardNameOnCard)
                    .IsRequired()
                    .HasColumnName("CCARD_NAME_ON_CARD")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.CcardNum)
                    .HasColumnName("CCARD_NUM")
                    .HasColumnType("varchar(18)");

                entity.Property(e => e.CcardToken)
                    .HasColumnName("CCARD_TOKEN")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.CcardType).HasColumnName("CCARD_TYPE");

                entity.Property(e => e.CellPhone)
                    .IsRequired()
                    .HasColumnName("CELL_PHONE")
                    .HasColumnType("varchar(12)");

                entity.Property(e => e.CourtesyCallNum)
                    .HasColumnName("COURTESY_CALL_NUM")
                    .HasColumnType("char(1)");

                entity.Property(e => e.CustIdCountry)
                    .HasColumnName("CUST_ID_COUNTRY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.CustIdExpDate)
                    .HasColumnName("CUST_ID_EXP_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.CustIdNum)
                    .HasColumnName("CUST_ID_NUM")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.CustIdSource)
                    .HasColumnName("CUST_ID_SOURCE")
                    .HasColumnType("varchar(15)");

                entity.Property(e => e.CustIdState)
                    .HasColumnName("CUST_ID_STATE")
                    .HasColumnType("char(2)");

                entity.Property(e => e.CustIdTypeKey).HasColumnName("CUST_ID_TYPE_KEY");

                entity.Property(e => e.CustIdVerifyKey).HasColumnName("CUST_ID_VERIFY_KEY");

                entity.Property(e => e.CustIdVerifyOther)
                    .HasColumnName("CUST_ID_VERIFY_OTHER")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.CustomerKey)
                    .IsRequired()
                    .HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Dependents).HasColumnName("DEPENDENTS");

                entity.Property(e => e.Dob)
                    .HasColumnName("DOB")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Email)
                    .HasColumnName("EMAIL")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasColumnName("FIRST_NAME")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.FundingType)
                    .HasColumnName("FUNDING_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.Gender)
                    .HasColumnName("GENDER")
                    .HasColumnType("char(1)");

                entity.Property(e => e.HomePhone)
                    .IsRequired()
                    .HasColumnName("HOME_PHONE")
                    .HasColumnType("varchar(12)");

                entity.Property(e => e.HowRefObsolete)
                    .HasColumnName("HOW_REF_OBSOLETE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.IdNo)
                    .IsRequired()
                    .HasColumnName("ID_NO")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.InetApproved).HasColumnName("INET_APPROVED");

                entity.Property(e => e.IpAddress)
                    .IsRequired()
                    .HasColumnName("IP_ADDRESS")
                    .HasColumnType("varchar(15)");

                entity.Property(e => e.IsEpdqOnly).HasColumnName("IS_EPDQ_ONLY");

                entity.Property(e => e.JointLoan).HasColumnName("JOINT_LOAN");

                entity.Property(e => e.Language)
                    .IsRequired()
                    .HasColumnName("LANGUAGE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasColumnName("LAST_NAME")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.LegalNumber)
                    .IsRequired()
                    .HasColumnName("LEGAL_NUMBER")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.LenderKey).HasColumnName("LENDER_KEY");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.MaritalStatus).HasColumnName("MARITAL_STATUS");

                entity.Property(e => e.MidName)
                    .IsRequired()
                    .HasColumnName("MID_NAME")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.MilitaryActiveDuty).HasColumnName("MILITARY_ACTIVE_DUTY");

                entity.Property(e => e.MilitaryCombatDuty).HasColumnName("MILITARY_COMBAT_DUTY");

                entity.Property(e => e.MilitaryMember).HasColumnName("MILITARY_MEMBER");

                entity.Property(e => e.MilitaryReserveActive).HasColumnName("MILITARY_RESERVE_ACTIVE");

                entity.Property(e => e.MilitaryReserveNotActive).HasColumnName("MILITARY_RESERVE_NOT_ACTIVE");

                entity.Property(e => e.MonthlyHousing)
                    .HasColumnName("MONTHLY_HOUSING")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NextPayDate)
                    .HasColumnName("NEXT_PAY_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.OwnRentOther).HasColumnName("OWN_RENT_OTHER");

                entity.Property(e => e.PennyAuthKey).HasColumnName("PENNY_AUTH_KEY");

                entity.Property(e => e.ReasonDenied)
                    .IsRequired()
                    .HasColumnName("REASON_DENIED")
                    .HasColumnType("varchar(1000)");

                entity.Property(e => e.Ref1FirstName)
                    .HasColumnName("REF1_FIRST_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Ref1LastName)
                    .HasColumnName("REF1_LAST_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Ref1Phone)
                    .HasColumnName("REF1_PHONE")
                    .HasColumnType("varchar(12)");

                entity.Property(e => e.Ref1Relationship)
                    .HasColumnName("REF1_RELATIONSHIP")
                    .HasColumnType("char(1)");

                entity.Property(e => e.Ref2FirstName)
                    .HasColumnName("REF2_FIRST_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Ref2LastName)
                    .HasColumnName("REF2_LAST_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Ref2Phone)
                    .HasColumnName("REF2_PHONE")
                    .HasColumnType("varchar(12)");

                entity.Property(e => e.Ref2Relationship)
                    .HasColumnName("REF2_RELATIONSHIP")
                    .HasColumnType("char(1)");

                entity.Property(e => e.ReferralMethodKey).HasColumnName("REFERRAL_METHOD_KEY");

                entity.Property(e => e.ReqCashAmt)
                    .HasColumnName("REQ_CASH_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.ResidenceSince)
                    .HasColumnName("RESIDENCE_SINCE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RiBalance)
                    .HasColumnName("RI_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.RiFollowup)
                    .HasColumnName("RI_FOLLOWUP")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.SourceApp)
                    .IsRequired()
                    .HasColumnName("SOURCE_APP")
                    .HasColumnType("char(1)");

                entity.Property(e => e.SourceDb)
                    .IsRequired()
                    .HasColumnName("SOURCE_DB")
                    .HasColumnType("char(1)");

                entity.Property(e => e.SpouseCellPhone)
                    .HasColumnName("SPOUSE_CELL_PHONE")
                    .HasColumnType("varchar(12)");

                entity.Property(e => e.SpouseFirstName)
                    .HasColumnName("SPOUSE_FIRST_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.SpouseHomePhone)
                    .HasColumnName("SPOUSE_HOME_PHONE")
                    .HasColumnType("varchar(12)");

                entity.Property(e => e.SpouseLastName)
                    .HasColumnName("SPOUSE_LAST_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.SpouseMidName)
                    .HasColumnName("SPOUSE_MID_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.SpouseSsn)
                    .HasColumnName("SPOUSE_SSN")
                    .HasColumnType("varchar(9)");

                entity.Property(e => e.SpouseWorkName)
                    .HasColumnName("SPOUSE_WORK_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.SpouseWorkPhone)
                    .HasColumnName("SPOUSE_WORK_PHONE")
                    .HasColumnType("varchar(12)");

                entity.Property(e => e.SpouseWorkPhoneExt)
                    .HasColumnName("SPOUSE_WORK_PHONE_EXT")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.Ssn)
                    .IsRequired()
                    .HasColumnName("SSN")
                    .HasColumnType("char(9)");

                entity.Property(e => e.Status).HasColumnName("STATUS");

                entity.Property(e => e.Teller)
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.Title).HasColumnName("TITLE");

                entity.Property(e => e.VehLeased).HasColumnName("VEH_LEASED");

                entity.Property(e => e.VehLienBalance)
                    .HasColumnName("VEH_LIEN_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.VehLienHolderName)
                    .HasColumnName("VEH_LIEN_HOLDER_NAME")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.VehMake)
                    .HasColumnName("VEH_MAKE")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.VehModel)
                    .HasColumnName("VEH_MODEL")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.VehVin)
                    .HasColumnName("VEH_VIN")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.VehYear).HasColumnName("VEH_YEAR");

                entity.Property(e => e.VisitorKey).HasColumnName("VISITOR_KEY");

                entity.Property(e => e.WebReferralMethodKeyObsolete)
                    .HasColumnName("WEB_REFERRAL_METHOD_KEY_OBSOLETE")
                    .HasDefaultValueSql("0");

                entity.HasOne(d => d.CustIdVerifyKeyNavigation)
                    .WithMany(p => p.LoanApplication)
                    .HasForeignKey(d => d.CustIdVerifyKey)
                    .HasConstraintName("FK_LoanApplication_CUST_ID_VERIFY_KEY");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.LoanApplication)
                    .HasForeignKey(d => d.CustomerKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LoanApplication_CUSTOMER_KEY");

                entity.HasOne(d => d.LenderKeyNavigation)
                    .WithMany(p => p.LoanApplication)
                    .HasForeignKey(d => d.LenderKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LoanApplication_LENDER_KEY");

                entity.HasOne(d => d.LoanKeyNavigation)
                    .WithMany(p => p.LoanApplication)
                    .HasForeignKey(d => d.LoanKey)
                    .HasConstraintName("FK_LoanApplication_LOAN_KEY");

                entity.HasOne(d => d.PennyAuthKeyNavigation)
                    .WithMany(p => p.LoanApplication)
                    .HasForeignKey(d => d.PennyAuthKey)
                    .HasConstraintName("FK_LoanApplication_PENNY_AUTH_KEY");

                entity.HasOne(d => d.ReferralMethodKeyNavigation)
                    .WithMany(p => p.LoanApplication)
                    .HasForeignKey(d => d.ReferralMethodKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LoanApplication_REFERRAL_METHOD_KEY");

                entity.HasOne(d => d.TitleNavigation)
                    .WithMany(p => p.LoanApplication)
                    .HasForeignKey(d => d.Title)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LoanApplication_PersonTitle");

                entity.HasOne(d => d.VisitorKeyNavigation)
                    .WithMany(p => p.LoanApplication)
                    .HasForeignKey(d => d.VisitorKey)
                    .HasConstraintName("FK_LoanApplication_VISITOR_KEY");
            });

            modelBuilder.Entity<LoanApplicationAddress>(entity =>
            {
                entity.HasKey(e => e.LoanApplicationAddressKey)
                    .HasName("PK__LoanAppl__9138AB347ED1C211");

                entity.HasIndex(e => e.Address1)
                    .HasName("IX_LoanApplicationAddress_ADDRESS_LINE");

                entity.HasIndex(e => new { e.LoanApplicationKey, e.AddressTypeCode })
                    .HasName("IX_LoanApplicationAddress_LOAN_APPLICATION_KEY");

                entity.HasIndex(e => new { e.City, e.State, e.Zipcode })
                    .HasName("IX_LoanApplicationAddress_STATE");

                entity.HasIndex(e => new { e.AddrStreet, e.AddressFormat, e.Address1, e.BuildingName, e.BuildingNum, e.City, e.FlatNum, e.LoanApplicationKey, e.State, e.AddressTypeCode })
                    .HasName("IX_LoanApplicationAddress_ADDRESS_TYPE_CODE");

                entity.Property(e => e.LoanApplicationAddressKey).HasColumnName("LOAN_APPLICATION_ADDRESS_KEY");

                entity.Property(e => e.AddrNum)
                    .IsRequired()
                    .HasColumnName("ADDR_NUM")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.AddrPostDir)
                    .IsRequired()
                    .HasColumnName("ADDR_POST_DIR")
                    .HasColumnType("varchar(2)");

                entity.Property(e => e.AddrPreDir)
                    .IsRequired()
                    .HasColumnName("ADDR_PRE_DIR")
                    .HasColumnType("varchar(2)");

                entity.Property(e => e.AddrStreet)
                    .IsRequired()
                    .HasColumnName("ADDR_STREET")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.AddrSuffix)
                    .IsRequired()
                    .HasColumnName("ADDR_SUFFIX")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.AddrSuite)
                    .IsRequired()
                    .HasColumnName("ADDR_SUITE")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.AddrSuiteNum)
                    .IsRequired()
                    .HasColumnName("ADDR_SUITE_NUM")
                    .HasColumnType("varchar(15)");

                entity.Property(e => e.Address1)
                    .IsRequired()
                    .HasColumnName("ADDRESS1")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.AddressCsz)
                    .HasColumnName("ADDRESS_CSZ")
                    .HasColumnType("varchar(100)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_CSZ]([ADDRESS_FORMAT],[CITY],[STATE],[ZIPCODE])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressFormat)
                    .IsRequired()
                    .HasColumnName("ADDRESS_FORMAT")
                    .HasColumnType("char(3)");

                entity.Property(e => e.AddressLine)
                    .HasColumnName("ADDRESS_LINE")
                    .HasColumnType("varchar(100)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE]([ADDRESS_FORMAT],[ADDRESS1],'','',case when [address_format]='GBR' then [ADDR_STREET] else '' end,'','','','',[FLAT_NUM],[BUILDING_NAME],[BUILDING_NUM])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressLine1)
                    .HasColumnName("ADDRESS_LINE_1")
                    .HasColumnType("varchar(100)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE_1]([ADDRESS_FORMAT],[ADDRESS1],'','',case when [address_format]='GBR' then [ADDR_STREET] else '' end,'','',[FLAT_NUM],[BUILDING_NAME],'','')")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressLine2)
                    .HasColumnName("ADDRESS_LINE_2")
                    .HasColumnType("varchar(150)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE_2]([ADDRESS_FORMAT],'','',[CITY],[STATE],[ZIPCODE],[BUILDING_NUM],[ADDR_STREET],[ADDRESS1],'','','','')")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressLine3)
                    .HasColumnName("ADDRESS_LINE_3")
                    .HasColumnType("varchar(150)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE_3]([ADDRESS_FORMAT],'','',[CITY],[STATE],[ZIPCODE])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressTypeCode).HasColumnName("ADDRESS_TYPE_CODE");

                entity.Property(e => e.BuildingName)
                    .IsRequired()
                    .HasColumnName("BUILDING_NAME")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.BuildingNum)
                    .IsRequired()
                    .HasColumnName("BUILDING_NUM")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasColumnName("CITY")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasColumnName("COUNTRY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.County)
                    .IsRequired()
                    .HasColumnName("COUNTY")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.FlatNum)
                    .IsRequired()
                    .HasColumnName("FLAT_NUM")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.FromDate)
                    .HasColumnName("FROM_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.LoanApplicationKey).HasColumnName("LOAN_APPLICATION_KEY");

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasColumnName("STATE")
                    .HasColumnType("char(2)");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.ToDate)
                    .HasColumnName("TO_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.Zipcode)
                    .IsRequired()
                    .HasColumnName("ZIPCODE")
                    .HasColumnType("varchar(10)");

                entity.HasOne(d => d.LoanApplicationKeyNavigation)
                    .WithMany(p => p.LoanApplicationAddress)
                    .HasForeignKey(d => d.LoanApplicationKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK__LoanAppli__LOAN___178E6407");
            });

            modelBuilder.Entity<LoanApplicationAffordSurveyToBeDeleted>(entity =>
            {
                entity.HasKey(e => e.LoanApplicationAffordSurveyKey)
                    .HasName("pk_LoanApplicationAffordSurvey");

                entity.ToTable("LoanApplicationAffordSurvey_ToBeDeleted");

                entity.HasIndex(e => e.LoanApplicationKey)
                    .HasName("idx_LOAN_APPLICATION_KEY")
                    .IsUnique();

                entity.HasIndex(e => e.RolloverRequestKey)
                    .HasName("idx_ROLLOVER_REQUEST_KEY")
                    .IsUnique();

                entity.HasIndex(e => e.VisitorKey)
                    .HasName("IDX_LoanApplicationAffordSurvey_VisitorKey");

                entity.Property(e => e.LoanApplicationAffordSurveyKey).HasColumnName("LOAN_APPLICATION_AFFORD_SURVEY_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IsCustomerReviewed)
                    .HasColumnName("IS_CUSTOMER_REVIEWED")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.LoanApplicationKey)
                    .IsRequired()
                    .HasColumnName("LOAN_APPLICATION_KEY");

                entity.Property(e => e.MonthlyMortgage).HasColumnName("MONTHLY_MORTGAGE");

                entity.Property(e => e.MonthlyOtherDebt).HasColumnName("MONTHLY_OTHER_DEBT");

                entity.Property(e => e.MonthlyUtilities).HasColumnName("MONTHLY_UTILITIES");

                entity.Property(e => e.NetIncome)
                    .HasColumnName("NET_INCOME")
                    .HasColumnType("money");

                entity.Property(e => e.RolloverRequestKey)
                    .IsRequired()
                    .HasColumnName("ROLLOVER_REQUEST_KEY");

                entity.Property(e => e.VisitorKey).HasColumnName("VISITOR_KEY");

                entity.HasOne(d => d.LoanApplicationKeyNavigation)
                    .WithOne(p => p.LoanApplicationAffordSurveyToBeDeleted)
                    .HasForeignKey<LoanApplicationAffordSurveyToBeDeleted>(d => d.LoanApplicationKey)
                    .HasConstraintName("FK_LoanAppAffordSurvey_LoanApplication");

                entity.HasOne(d => d.RolloverRequestKeyNavigation)
                    .WithOne(p => p.LoanApplicationAffordSurveyToBeDeleted)
                    .HasForeignKey<LoanApplicationAffordSurveyToBeDeleted>(d => d.RolloverRequestKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("LoanApplicationAffordSurvey_RolloverRequest");

                entity.HasOne(d => d.VisitorKeyNavigation)
                    .WithMany(p => p.LoanApplicationAffordSurveyToBeDeleted)
                    .HasForeignKey(d => d.VisitorKey)
                    .HasConstraintName("fk_LoanApplicationAffordSurvey_Visitor");
            });

            modelBuilder.Entity<LoanApplicationEmployer>(entity =>
            {
                entity.HasKey(e => e.LoanApplicationEmployerKey)
                    .HasName("PK_LoanApplicationEmployer");

                entity.HasIndex(e => e.LoanApplicationAddressKey)
                    .HasName("IX_LoanApplicationEmployer_LOAN_APPLICATION_ADDRESS_KEY");

                entity.HasIndex(e => e.LoanApplicationKey)
                    .HasName("IX_LoanApplicationEmployer_LoanApplication");

                entity.HasIndex(e => new { e.LoanApplicationKey, e.IsPrimaryEmployer })
                    .HasName("IDX_LoanApplicationEmployer_LoanApplicationKey_IsPrimary_Unique")
                    .IsUnique();

                entity.HasIndex(e => new { e.LoanApplicationKey, e.PhoneNumber, e.IsPrimaryEmployer })
                    .HasName("IX_LoanApplicationEmployer_IS_PRIMARY_EMPLOYER");

                entity.Property(e => e.LoanApplicationEmployerKey).HasColumnName("LOAN_APPLICATION_EMPLOYER_KEY");

                entity.Property(e => e.BiweekBase)
                    .HasColumnName("BIWEEK_BASE")
                    .HasColumnType("date");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasColumnName("COUNTRY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.County)
                    .IsRequired()
                    .HasColumnName("COUNTY")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.CustomerEmployerKey).HasColumnName("CUSTOMER_EMPLOYER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Department)
                    .IsRequired()
                    .HasColumnName("DEPARTMENT")
                    .HasColumnType("varchar(60)");

                entity.Property(e => e.EmpSince)
                    .HasColumnName("EMP_SINCE")
                    .HasColumnType("date");

                entity.Property(e => e.EmployerName)
                    .IsRequired()
                    .HasColumnName("EMPLOYER_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Fullparttime)
                    .IsRequired()
                    .HasColumnName("FULLPARTTIME")
                    .HasColumnType("char(1)");

                entity.Property(e => e.IncomeJobTypeKey).HasColumnName("INCOME_JOB_TYPE_KEY");

                entity.Property(e => e.IncomeSourceKey).HasColumnName("INCOME_SOURCE_KEY");

                entity.Property(e => e.IncomeTypeKey).HasColumnName("INCOME_TYPE_KEY");

                entity.Property(e => e.IsDirectDeposit).HasColumnName("IS_DIRECT_DEPOSIT");

                entity.Property(e => e.IsPrimaryEmployer).HasColumnName("IS_PRIMARY_EMPLOYER");

                entity.Property(e => e.JobTypeVerifiedDate)
                    .HasColumnName("JOB_TYPE_VERIFIED_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.LoanApplicationAddressKey).HasColumnName("LOAN_APPLICATION_ADDRESS_KEY");

                entity.Property(e => e.LoanApplicationKey).HasColumnName("LOAN_APPLICATION_KEY");

                entity.Property(e => e.PayCycle)
                    .IsRequired()
                    .HasColumnName("PAY_CYCLE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.PayCycle1st).HasColumnName("PAY_CYCLE_1ST");

                entity.Property(e => e.PayCycle2nd).HasColumnName("PAY_CYCLE_2ND");

                entity.Property(e => e.PayCycleCountDaysFromEndOfMonth).HasColumnName("PAY_CYCLE_COUNT_DAYS_FROM_END_OF_MONTH");

                entity.Property(e => e.PayCycleDay).HasColumnName("PAY_CYCLE_DAY");

                entity.Property(e => e.PayCycleMonthInt)
                    .HasColumnName("PAY_CYCLE_MONTH_INT")
                    .HasColumnType("char(1)");

                entity.Property(e => e.PhoneExt)
                    .IsRequired()
                    .HasColumnName("PHONE_EXT")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.PhoneNumber)
                    .IsRequired()
                    .HasColumnName("PHONE_NUMBER")
                    .HasColumnType("varchar(12)");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.CustomerEmployerKeyNavigation)
                    .WithMany(p => p.LoanApplicationEmployer)
                    .HasForeignKey(d => d.CustomerEmployerKey)
                    .HasConstraintName("fk_LoanApplicationEmployer_CustomerEmployer");

                entity.HasOne(d => d.IncomeJobTypeKeyNavigation)
                    .WithMany(p => p.LoanApplicationEmployer)
                    .HasForeignKey(d => d.IncomeJobTypeKey)
                    .HasConstraintName("FK_LoanApplicationEmployer_IncomeJobType");

                entity.HasOne(d => d.IncomeSourceKeyNavigation)
                    .WithMany(p => p.LoanApplicationEmployer)
                    .HasForeignKey(d => d.IncomeSourceKey)
                    .HasConstraintName("FK_LoanApplicationEmployer_IncomeSource");

                entity.HasOne(d => d.IncomeTypeKeyNavigation)
                    .WithMany(p => p.LoanApplicationEmployer)
                    .HasForeignKey(d => d.IncomeTypeKey)
                    .HasConstraintName("FK_LoanApplicationEmployer_IncomeType");

                entity.HasOne(d => d.LoanApplicationAddressKeyNavigation)
                    .WithMany(p => p.LoanApplicationEmployer)
                    .HasForeignKey(d => d.LoanApplicationAddressKey)
                    .HasConstraintName("FK_LoanApplicationEmployer_LoanApplicationAddress");
            });

            modelBuilder.Entity<LoanApplicationExpense>(entity =>
            {
                entity.HasKey(e => e.LoanApplicationExpenseKey)
                    .HasName("PK_LoanApplicationExpense");

                entity.HasIndex(e => e.LoanApplicationKey)
                    .HasName("IX_LoanApplicationExpense_LOAN_APPLICATION_KEY")
                    .IsUnique();

                entity.HasIndex(e => e.RolloverRequestKey)
                    .HasName("IX_LoanApplicationExpense_ROLLOVER_REQUEST_KEY")
                    .IsUnique();

                entity.Property(e => e.LoanApplicationExpenseKey).HasColumnName("LOAN_APPLICATION_EXPENSE_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IsCustomerVerified).HasColumnName("IS_CUSTOMER_VERIFIED");

                entity.Property(e => e.LoanApplicationKey)
                    .IsRequired()
                    .HasColumnName("LOAN_APPLICATION_KEY");

                entity.Property(e => e.RolloverRequestKey)
                    .IsRequired()
                    .HasColumnName("ROLLOVER_REQUEST_KEY");

                entity.Property(e => e.VisitorKey).HasColumnName("VISITOR_KEY");

                entity.HasOne(d => d.LoanApplicationKeyNavigation)
                    .WithOne(p => p.LoanApplicationExpense)
                    .HasForeignKey<LoanApplicationExpense>(d => d.LoanApplicationKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LoanApplicationExpense_LOAN_APPLICATION_KEY");

                entity.HasOne(d => d.RolloverRequestKeyNavigation)
                    .WithOne(p => p.LoanApplicationExpense)
                    .HasForeignKey<LoanApplicationExpense>(d => d.RolloverRequestKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LoanApplicationExpense_ROLLOVER_REQUEST_KEY");

                entity.HasOne(d => d.VisitorKeyNavigation)
                    .WithMany(p => p.LoanApplicationExpense)
                    .HasForeignKey(d => d.VisitorKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LoanApplicationExpense_VISITOR_KEY");
            });

            modelBuilder.Entity<LoanApplicationExpenseDetail>(entity =>
            {
                entity.HasKey(e => e.LoanApplicationExpenseDetailKey)
                    .HasName("PK_LoanApplicationExpenseDetail");

                entity.HasIndex(e => new { e.LoanApplicationExpenseKey, e.ExpenseTypeKey })
                    .HasName("UC_LoanApplicationExpenseDetail_EXPENSE_TYPE")
                    .IsUnique();

                entity.Property(e => e.LoanApplicationExpenseDetailKey).HasColumnName("LOAN_APPLICATION_EXPENSE_DETAIL_KEY");

                entity.Property(e => e.Amount)
                    .HasColumnName("AMOUNT")
                    .HasColumnType("money");

                entity.Property(e => e.ExpenseTypeKey).HasColumnName("EXPENSE_TYPE_KEY");

                entity.Property(e => e.LoanApplicationExpenseKey).HasColumnName("LOAN_APPLICATION_EXPENSE_KEY");

                entity.HasOne(d => d.ExpenseTypeKeyNavigation)
                    .WithMany(p => p.LoanApplicationExpenseDetail)
                    .HasForeignKey(d => d.ExpenseTypeKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LoanApplicationExpenseDetail_EXPENSE_TYPE_KEY");

                entity.HasOne(d => d.LoanApplicationExpenseKeyNavigation)
                    .WithMany(p => p.LoanApplicationExpenseDetail)
                    .HasForeignKey(d => d.LoanApplicationExpenseKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LoanApplicationExpenseDetail_LOAN_APPLICATION_EXPENSE_KEY");
            });

            modelBuilder.Entity<LoanApplicationIncome>(entity =>
            {
                entity.HasKey(e => e.LoanApplicationIncomeKey)
                    .HasName("PK_LoanApplicationIncome");

                entity.HasIndex(e => new { e.LoanApplicationKey, e.LoanApplicationEmployerKey })
                    .HasName("IX_LoanApplicationIncome_LOAN_APPLICATION_EMPLOYER_KEY");

                entity.HasIndex(e => new { e.IncomeAmount, e.AmountType, e.LoanApplicationEmployerKey })
                    .HasName("IX_LoanApplicationIncome_AMOUNT_TYPE_LOAN_APPLICATION_EMP");

                entity.HasIndex(e => new { e.IncomeAmount, e.LoanApplicationKey, e.AmountType })
                    .HasName("IX_LoanApplicationIncome_LOAN_APPLICATION_KEY");

                entity.Property(e => e.LoanApplicationIncomeKey).HasColumnName("LOAN_APPLICATION_INCOME_KEY");

                entity.Property(e => e.AmountCycle)
                    .IsRequired()
                    .HasColumnName("AMOUNT_CYCLE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.AmountType)
                    .IsRequired()
                    .HasColumnName("AMOUNT_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DateVerified)
                    .HasColumnName("DATE_VERIFIED")
                    .HasColumnType("date");

                entity.Property(e => e.IncomeAmount)
                    .HasColumnName("INCOME_AMOUNT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.IncomeVerifyMethodKey).HasColumnName("INCOME_VERIFY_METHOD_KEY");

                entity.Property(e => e.LoanApplicationEmployerKey).HasColumnName("LOAN_APPLICATION_EMPLOYER_KEY");

                entity.Property(e => e.LoanApplicationKey).HasColumnName("LOAN_APPLICATION_KEY");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.LoanApplicationEmployerKeyNavigation)
                    .WithMany(p => p.LoanApplicationIncome)
                    .HasForeignKey(d => d.LoanApplicationEmployerKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LoanApplicationIncome_LoanApplicationEmployer");

                entity.HasOne(d => d.LoanApplicationKeyNavigation)
                    .WithMany(p => p.LoanApplicationIncome)
                    .HasForeignKey(d => d.LoanApplicationKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LoanApplicationIncome_LoanApplication");
            });

            modelBuilder.Entity<LoanApplicationProduct>(entity =>
            {
                entity.HasKey(e => e.LoanApplicationProductKey)
                    .HasName("PK_LoanApplicationProduct");

                entity.HasIndex(e => e.LoanApplicationKey)
                    .HasName("IX_LoanApplicationProduct_LOAN_APPLICATION_KEY");

                entity.HasIndex(e => e.ScoreSummaryKey)
                    .HasName("IX_LoanApplicationProduct_SCORE_SUMMARY_KEY");

                entity.HasIndex(e => new { e.LoanApplicationKey, e.Selected })
                    .HasName("UX_LoanApplicationProduct_LOAN_APPLICATION_KEY_SELECTED")
                    .IsUnique();

                entity.HasIndex(e => new { e.ScoreSummaryKey, e.LoanApplicationKey, e.Selected })
                    .HasName("IX_LoanApplicationProduct_LOAN_APPLICATION_KEY_SCORE_SUMMARY_KEY_SELECTED");

                entity.Property(e => e.LoanApplicationProductKey).HasColumnName("LOAN_APPLICATION_PRODUCT_KEY");

                entity.Property(e => e.Approved).HasColumnName("APPROVED");

                entity.Property(e => e.ApprovedAmt)
                    .HasColumnName("APPROVED_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Detail)
                    .HasColumnName("DETAIL")
                    .HasColumnType("varchar(max)");

                entity.Property(e => e.FinalScore)
                    .HasColumnName("FINAL_SCORE")
                    .HasColumnType("decimal");

                entity.Property(e => e.LoanApplicationKey).HasColumnName("LOAN_APPLICATION_KEY");

                entity.Property(e => e.LoanProductConfigKey).HasColumnName("LOAN_PRODUCT_CONFIG_KEY");

                entity.Property(e => e.LoanProductKey).HasColumnName("LOAN_PRODUCT_KEY");

                entity.Property(e => e.LoanProductTilaKey).HasColumnName("LOAN_PRODUCT_TILA_KEY");

                entity.Property(e => e.LoanType)
                    .IsRequired()
                    .HasColumnName("LOAN_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.ModelUsed).HasColumnName("MODEL_USED");

                entity.Property(e => e.PrimaryScoreDate)
                    .HasColumnName("PRIMARY_SCORE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.ProductType)
                    .IsRequired()
                    .HasColumnName("PRODUCT_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.ScoreSummaryKey).HasColumnName("SCORE_SUMMARY_KEY");

                entity.Property(e => e.Selected).HasColumnName("SELECTED");

                entity.Property(e => e.SelectedAmt)
                    .HasColumnName("SELECTED_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.SelectedTerm).HasColumnName("SELECTED_TERM");

                entity.HasOne(d => d.LoanApplicationKeyNavigation)
                    .WithMany(p => p.LoanApplicationProduct)
                    .HasForeignKey(d => d.LoanApplicationKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LoanApplicationProduct_LOAN_APPLICATION_KEY");

                entity.HasOne(d => d.LoanProductConfigKeyNavigation)
                    .WithMany(p => p.LoanApplicationProduct)
                    .HasForeignKey(d => d.LoanProductConfigKey)
                    .HasConstraintName("FK_LoanApplicationProduct_LOAN_PRODUCT_CONFIG_KEY");

                entity.HasOne(d => d.LoanProductKeyNavigation)
                    .WithMany(p => p.LoanApplicationProduct)
                    .HasForeignKey(d => d.LoanProductKey)
                    .HasConstraintName("FK_LoanApplicationProduct_LOAN_PRODUCT_KEY");

                entity.HasOne(d => d.LoanProductTilaKeyNavigation)
                    .WithMany(p => p.LoanApplicationProduct)
                    .HasForeignKey(d => d.LoanProductTilaKey)
                    .HasConstraintName("FK_LoanApplicationProduct_LOAN_PRODUCT_TILA_KEY");
            });

            modelBuilder.Entity<LoanApplicationVehicleInformation>(entity =>
            {
                entity.HasKey(e => e.LoanApplicationVehicleInformationKey)
                    .HasName("PK_LoanApplicationVehicleInformation");

                entity.Property(e => e.LoanApplicationVehicleInformationKey).HasColumnName("LOAN_APPLICATION_VEHICLE_INFORMATION_KEY");

                entity.Property(e => e.AndOrName)
                    .HasColumnName("AND_OR_NAME")
                    .HasColumnType("varchar(59)");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("date");

                entity.Property(e => e.InsFullCover).HasColumnName("INS_FULL_COVER");

                entity.Property(e => e.InsName)
                    .IsRequired()
                    .HasColumnName("INS_NAME")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.InsPhone)
                    .IsRequired()
                    .HasColumnName("INS_PHONE")
                    .HasColumnType("varchar(12)");

                entity.Property(e => e.InsPolicyNum)
                    .IsRequired()
                    .HasColumnName("INS_POLICY_NUM")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.IsClearTitle).HasColumnName("IS_CLEAR_TITLE");

                entity.Property(e => e.LegalStatus)
                    .IsRequired()
                    .HasColumnName("LEGAL_STATUS")
                    .HasColumnType("char(1)");

                entity.Property(e => e.LienAcctNum)
                    .HasColumnName("LIEN_ACCT_NUM")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.LienBalance)
                    .HasColumnName("LIEN_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanApplicationKey).HasColumnName("LOAN_APPLICATION_KEY");

                entity.Property(e => e.PayVerified).HasColumnName("PAY_VERIFIED");

                entity.Property(e => e.StateCustNum)
                    .IsRequired()
                    .HasColumnName("STATE_CUST_NUM")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.VehBody)
                    .HasColumnName("VEH_BODY")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.VehCondition)
                    .IsRequired()
                    .HasColumnName("VEH_CONDITION")
                    .HasColumnType("char(1)");

                entity.Property(e => e.VehDrive)
                    .HasColumnName("VEH_DRIVE")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.VehEngine)
                    .HasColumnName("VEH_ENGINE")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.VehMake)
                    .HasColumnName("VEH_MAKE")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.VehMileage).HasColumnName("VEH_MILEAGE");

                entity.Property(e => e.VehModel)
                    .HasColumnName("VEH_MODEL")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.VehOdoCode)
                    .IsRequired()
                    .HasColumnName("VEH_ODO_CODE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.VehPlate)
                    .IsRequired()
                    .HasColumnName("VEH_PLATE")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.VehRegDate)
                    .HasColumnName("VEH_REG_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VehRegExpire)
                    .HasColumnName("VEH_REG_EXPIRE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VehRegState)
                    .IsRequired()
                    .HasColumnName("VEH_REG_STATE")
                    .HasColumnType("char(2)");

                entity.Property(e => e.VehRetail)
                    .HasColumnName("VEH_RETAIL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.VehSticker)
                    .IsRequired()
                    .HasColumnName("VEH_STICKER")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.VehTitleNum)
                    .IsRequired()
                    .HasColumnName("VEH_TITLE_NUM")
                    .HasColumnType("varchar(15)");

                entity.Property(e => e.VehTrans)
                    .HasColumnName("VEH_TRANS")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.VehVin)
                    .HasColumnName("VEH_VIN")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.VehWholesale)
                    .HasColumnName("VEH_WHOLESALE")
                    .HasColumnType("money");

                entity.Property(e => e.VehYear).HasColumnName("VEH_YEAR");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.LoanApplicationVehicleInformation)
                    .HasForeignKey(d => d.CustomerKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LoanApplicationVehicleInformation_Customer");

                entity.HasOne(d => d.LoanApplicationKeyNavigation)
                    .WithMany(p => p.LoanApplicationVehicleInformation)
                    .HasForeignKey(d => d.LoanApplicationKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LoanApplicationVehicleInformation_LoanApplication");
            });

            modelBuilder.Entity<LoanCcallChange>(entity =>
            {
                entity.HasKey(e => e.LoanCcallChangeKey)
                    .HasName("PK_LoanCCallChange");

                entity.ToTable("LoanCCallChange");

                entity.Property(e => e.LoanCcallChangeKey).HasColumnName("LOAN_CCALL_CHANGE_KEY");

                entity.Property(e => e.CourtesyCall).HasColumnName("COURTESY_CALL");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EmailStatements).HasColumnName("EMAIL_STATEMENTS");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.HasOne(d => d.LoanKeyNavigation)
                    .WithMany(p => p.LoanCcallChange)
                    .HasForeignKey(d => d.LoanKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LoanCCallChange_Loan");
            });

            modelBuilder.Entity<LoanCheck>(entity =>
            {
                entity.HasKey(e => e.LoanCheckKey)
                    .HasName("PK_LoanCheck");

                entity.HasIndex(e => e.LoanKey)
                    .HasName("IX_LoanCheck_LoanKey");

                entity.Property(e => e.LoanCheckKey).HasColumnName("LOAN_CHECK_KEY");

                entity.Property(e => e.AdjustedDueDate)
                    .HasColumnName("ADJUSTED_DUE_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.CheckAmt)
                    .HasColumnName("CHECK_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CheckNo)
                    .IsRequired()
                    .HasColumnName("CHECK_NO")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.CheckStatus)
                    .IsRequired()
                    .HasColumnName("CHECK_STATUS")
                    .HasColumnType("char(1)");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.OrigDueDate)
                    .HasColumnName("ORIG_DUE_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.Sequence)
                    .IsRequired()
                    .HasColumnName("SEQUENCE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.Shredded).HasColumnName("SHREDDED");

                entity.Property(e => e.StatusDate)
                    .HasColumnName("STATUS_DATE")
                    .HasColumnType("smalldatetime");

                entity.HasOne(d => d.LoanKeyNavigation)
                    .WithMany(p => p.LoanCheck)
                    .HasForeignKey(d => d.LoanKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LoanCheck_Loan");
            });

            modelBuilder.Entity<LoanChkAcctChange>(entity =>
            {
                entity.HasKey(e => e.ChkAcctChangeKey)
                    .HasName("PK_LoanChkAcctChange");

                entity.HasIndex(e => e.LoanKey)
                    .HasName("IX_LoanChkAcctChange_LOAN_KEY");

                entity.Property(e => e.ChkAcctChangeKey).HasColumnName("CHK_ACCT_CHANGE_KEY");

                entity.Property(e => e.CcardChkAcctChangeReason)
                    .IsRequired()
                    .HasColumnName("CCARD_CHK_ACCT_CHANGE_REASON")
                    .HasColumnType("char(1)");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DirectDeposit)
                    .HasColumnName("DIRECT_DEPOSIT")
                    .HasColumnType("LOGICAL");

                entity.Property(e => e.IssuerChkAcctChangeReason)
                    .IsRequired()
                    .HasColumnName("ISSUER_CHK_ACCT_CHANGE_REASON")
                    .HasColumnType("char(1)");

                entity.Property(e => e.IssuerKey).HasColumnName("ISSUER_KEY");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.NewCreditCardKey).HasColumnName("NEW_CREDIT_CARD_KEY");

                entity.Property(e => e.NewDeclinedAutoPay).HasColumnName("NEW_DECLINED_AUTO_PAY");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasColumnType("varchar(250)");

                entity.Property(e => e.PrvCreditCardKey).HasColumnName("PRV_CREDIT_CARD_KEY");

                entity.Property(e => e.PrvDeclinedAutoPay).HasColumnName("PRV_DECLINED_AUTO_PAY");

                entity.Property(e => e.PrvDirectDeposit).HasColumnName("PRV_DIRECT_DEPOSIT");

                entity.Property(e => e.PrvIssuerKey).HasColumnName("PRV_ISSUER_KEY");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");
            });

            modelBuilder.Entity<LoanCoPledger>(entity =>
            {
                entity.HasKey(e => e.LoanCoPledgerKey)
                    .HasName("PK_LoanCoPledger");

                entity.Property(e => e.LoanCoPledgerKey).HasColumnName("LOAN_CO_PLEDGER_KEY");

                entity.Property(e => e.AddrNum)
                    .IsRequired()
                    .HasColumnName("ADDR_NUM")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.AddrPostDir)
                    .IsRequired()
                    .HasColumnName("ADDR_POST_DIR")
                    .HasColumnType("varchar(2)");

                entity.Property(e => e.AddrPreDir)
                    .IsRequired()
                    .HasColumnName("ADDR_PRE_DIR")
                    .HasColumnType("varchar(2)");

                entity.Property(e => e.AddrStreet)
                    .IsRequired()
                    .HasColumnName("ADDR_STREET")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.AddrSuffix)
                    .IsRequired()
                    .HasColumnName("ADDR_SUFFIX")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.AddrSuite)
                    .IsRequired()
                    .HasColumnName("ADDR_SUITE")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.AddrSuiteNum)
                    .IsRequired()
                    .HasColumnName("ADDR_SUITE_NUM")
                    .HasColumnType("varchar(15)");

                entity.Property(e => e.AddressCsz)
                    .HasColumnName("ADDRESS_CSZ")
                    .HasColumnType("varchar(100)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_CSZ]([ADDRESS_FORMAT],[CITY],[STATE],[ZIPCODE])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressFormat)
                    .IsRequired()
                    .HasColumnName("ADDRESS_FORMAT")
                    .HasColumnType("char(3)");

                entity.Property(e => e.AddressLine)
                    .HasColumnName("ADDRESS_LINE")
                    .HasColumnType("varchar(100)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE]([ADDRESS_FORMAT],'',[ADDR_NUM],[ADDR_PRE_DIR],[ADDR_STREET],[ADDR_SUFFIX],[ADDR_POST_DIR],[ADDR_SUITE],[ADDR_SUITE_NUM],[FLAT_NUM],[BUILDING_NAME],[BUILDING_NUM])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressLine1)
                    .HasColumnName("ADDRESS_LINE_1")
                    .HasColumnType("varchar(100)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE_1]([ADDRESS_FORMAT],'',[ADDR_NUM],[ADDR_PRE_DIR],[ADDR_STREET],[ADDR_SUFFIX],[ADDR_POST_DIR],[FLAT_NUM],[BUILDING_NAME],[ADDR_SUITE],[ADDR_SUITE_NUM])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressLine2)
                    .HasColumnName("ADDRESS_LINE_2")
                    .HasColumnType("varchar(150)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE_2]([ADDRESS_FORMAT],[ADDR_SUITE],[ADDR_SUITE_NUM],[CITY],[STATE],[ZIPCODE],[BUILDING_NUM],[ADDR_STREET],'',[ADDR_NUM],[ADDR_PRE_DIR],[ADDR_SUFFIX],[ADDR_POST_DIR])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressLine3)
                    .HasColumnName("ADDRESS_LINE_3")
                    .HasColumnType("varchar(150)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE_3]([ADDRESS_FORMAT],[ADDR_SUITE],[ADDR_SUITE_NUM],[CITY],[STATE],[ZIPCODE])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.BuildingName)
                    .IsRequired()
                    .HasColumnName("BUILDING_NAME")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.BuildingNum)
                    .IsRequired()
                    .HasColumnName("BUILDING_NUM")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasColumnName("CITY")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasColumnName("COUNTRY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.County)
                    .IsRequired()
                    .HasColumnName("COUNTY")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DateOfBirth)
                    .HasColumnName("DATE_OF_BIRTH")
                    .HasColumnType("date");

                entity.Property(e => e.EyeColor).HasColumnName("EYE_COLOR");

                entity.Property(e => e.FlatNum)
                    .IsRequired()
                    .HasColumnName("FLAT_NUM")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Gender)
                    .IsRequired()
                    .HasColumnName("GENDER")
                    .HasColumnType("char(1)");

                entity.Property(e => e.HairColor).HasColumnName("HAIR_COLOR");

                entity.Property(e => e.HeightFeet).HasColumnName("HEIGHT_FEET");

                entity.Property(e => e.HeightInches).HasColumnName("HEIGHT_INCHES");

                entity.Property(e => e.HomePhone)
                    .IsRequired()
                    .HasColumnName("HOME_PHONE")
                    .HasColumnType("varchar(12)");

                entity.Property(e => e.IssuingAgency)
                    .IsRequired()
                    .HasColumnName("ISSUING_AGENCY")
                    .HasColumnType("varchar(15)");

                entity.Property(e => e.PhotoId)
                    .IsRequired()
                    .HasColumnName("PHOTO_ID")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.PhotoIdType)
                    .IsRequired()
                    .HasColumnName("PHOTO_ID_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.Race).HasColumnName("RACE");

                entity.Property(e => e.Ssn)
                    .HasColumnName("SSN")
                    .HasColumnType("varchar(9)");

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasColumnName("STATE")
                    .HasColumnType("char(2)");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.Zipcode)
                    .IsRequired()
                    .HasColumnName("ZIPCODE")
                    .HasColumnType("varchar(10)");
            });

            modelBuilder.Entity<LoanConfigApplyPaymentOrder>(entity =>
            {
                entity.HasKey(e => e.LoanConfigApplyPaymentOrderKey)
                    .HasName("PK_LoanConfigApplyPaymentOrder_LOAN_CONFIG_APPLY_PAYMENT_ORDER_KEY");

                entity.HasIndex(e => e.ApplyPaymentOrder)
                    .HasName("IX_LoanConfigApplyPaymentOrder_APPLY_PAYMENT_ORDER")
                    .IsUnique();

                entity.Property(e => e.LoanConfigApplyPaymentOrderKey).HasColumnName("LOAN_CONFIG_APPLY_PAYMENT_ORDER_KEY");

                entity.Property(e => e.ApplyPaymentOrder)
                    .IsRequired()
                    .HasColumnName("APPLY_PAYMENT_ORDER")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(150)");
            });

            modelBuilder.Entity<LoanCreditLimit>(entity =>
            {
                entity.HasKey(e => e.LoanCreditLimitKey)
                    .HasName("PK_LoanCreditLimit");

                entity.Property(e => e.LoanCreditLimitKey).HasColumnName("LOAN_CREDIT_LIMIT_KEY");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.NewLimit)
                    .HasColumnName("NEW_LIMIT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.OldLimit)
                    .HasColumnName("OLD_LIMIT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");
            });

            modelBuilder.Entity<LoanDepositOrderHistory>(entity =>
            {
                entity.HasKey(e => e.LoanDepositOrderHistoryKey)
                    .HasName("PK_LoanDepositOrderHistory");

                entity.HasIndex(e => e.LoanKey)
                    .HasName("IX_LOAN_KEY");

                entity.Property(e => e.LoanDepositOrderHistoryKey).HasColumnName("LOAN_DEPOSIT_ORDER_HISTORY_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Description)
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(200)");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.NewDepositOrder).HasColumnName("NEW_DEPOSIT_ORDER");

                entity.Property(e => e.OldDepositOrder).HasColumnName("OLD_DEPOSIT_ORDER");

                entity.Property(e => e.ResetReasonKey).HasColumnName("RESET_REASON_KEY");

                entity.Property(e => e.RuleDefKey).HasColumnName("RULE_DEF_KEY");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.ResetReasonKeyNavigation)
                    .WithMany(p => p.LoanDepositOrderHistory)
                    .HasForeignKey(d => d.ResetReasonKey)
                    .HasConstraintName("FK_LoanDepositOrderHistory_RESET_REASON_KEY");

                entity.HasOne(d => d.RuleDefKeyNavigation)
                    .WithMany(p => p.LoanDepositOrderHistory)
                    .HasForeignKey(d => d.RuleDefKey)
                    .HasConstraintName("FK_LoanDepositOrderHistory_RULE_DEF_KEY");
            });

            modelBuilder.Entity<LoanDepositOrderResetReason>(entity =>
            {
                entity.HasKey(e => e.LoanDepositOrderResetReasonKey)
                    .HasName("PK_LoanDepositOrderResetReason");

                entity.HasIndex(e => e.Reason)
                    .HasName("UX_Reason")
                    .IsUnique();

                entity.Property(e => e.LoanDepositOrderResetReasonKey).HasColumnName("LOAN_DEPOSIT_ORDER_RESET_REASON_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(255)");

                entity.Property(e => e.Reason).HasColumnName("REASON");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");
            });

            modelBuilder.Entity<LoanDoc>(entity =>
            {
                entity.HasKey(e => e.LoanDocKey)
                    .HasName("PK_LoanDoc");

                entity.Property(e => e.LoanDocKey).HasColumnName("LOAN_DOC_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.LoanDocEnabled).HasColumnName("LOAN_DOC_ENABLED");

                entity.Property(e => e.LoanDocExt)
                    .IsRequired()
                    .HasColumnName("LOAN_DOC_EXT")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.LoanDocFile)
                    .HasColumnName("LOAN_DOC_FILE")
                    .HasColumnType("image");

                entity.Property(e => e.LoanDocFilename)
                    .IsRequired()
                    .HasColumnName("LOAN_DOC_FILENAME")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.LoanDocLanguage)
                    .IsRequired()
                    .HasColumnName("LOAN_DOC_LANGUAGE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.LoanDocRevision)
                    .IsRequired()
                    .HasColumnName("LOAN_DOC_REVISION")
                    .HasColumnType("varchar(8)");

                entity.Property(e => e.LoanDocState)
                    .IsRequired()
                    .HasColumnName("LOAN_DOC_STATE")
                    .HasColumnType("char(2)");

                entity.Property(e => e.LoanDocTypeKey).HasColumnName("LOAN_DOC_TYPE_KEY");

                entity.Property(e => e.PrintOnlyMilitary).HasColumnName("PRINT_ONLY_MILITARY");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.LoanDocTypeKeyNavigation)
                    .WithMany(p => p.LoanDoc)
                    .HasForeignKey(d => d.LoanDocTypeKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LoanDoc_LoanDocType");
            });

            modelBuilder.Entity<LoanDocPrinted>(entity =>
            {
                entity.HasKey(e => e.LoanDocPrintedKey)
                    .HasName("PK_LoanDocPrinted");

                entity.HasIndex(e => e.CustomerKey)
                    .HasName("IX_LoanDocPrinted_CUSTOMER_KEY");

                entity.HasIndex(e => e.LoanKey)
                    .HasName("IX_LoanDocPrinted_LOAN_KEY");

                entity.Property(e => e.LoanDocPrintedKey).HasColumnName("LOAN_DOC_PRINTED_KEY");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.LoanDocKey).HasColumnName("LOAN_DOC_KEY");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");

                entity.HasOne(d => d.LoanDocKeyNavigation)
                    .WithMany(p => p.LoanDocPrinted)
                    .HasForeignKey(d => d.LoanDocKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LoanDocPrinted_LoanDoc");

                entity.HasOne(d => d.LoanKeyNavigation)
                    .WithMany(p => p.LoanDocPrinted)
                    .HasForeignKey(d => d.LoanKey)
                    .HasConstraintName("FK_LoanDocPrinted_Loan");
            });

            modelBuilder.Entity<LoanDocType>(entity =>
            {
                entity.HasKey(e => e.LoanDocTypeKey)
                    .HasName("PK_LoanDocType");

                entity.Property(e => e.LoanDocTypeKey).HasColumnName("LOAN_DOC_TYPE_KEY");

                entity.Property(e => e.LoanDocTypeId)
                    .HasColumnName("LOAN_DOC_TYPE_ID")
                    .HasColumnType("varchar(5)");

                entity.Property(e => e.LoanDocTypeName)
                    .IsRequired()
                    .HasColumnName("LOAN_DOC_TYPE_NAME")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.LoanDocTypeNickname)
                    .HasColumnName("LOAN_DOC_TYPE_NICKNAME")
                    .HasColumnType("varchar(25)");
            });

            modelBuilder.Entity<LoanDocUpload>(entity =>
            {
                entity.HasKey(e => e.LoanDocUploadKey)
                    .HasName("PK_LoanDocUpload");

                entity.Property(e => e.LoanDocUploadKey).HasColumnName("LOAN_DOC_UPLOAD_KEY");

                entity.Property(e => e.LoanDocFileName)
                    .IsRequired()
                    .HasColumnName("LOAN_DOC_FILE_NAME")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.UploadDate)
                    .HasColumnName("UPLOAD_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ZipFileName)
                    .IsRequired()
                    .HasColumnName("ZIP_FILE_NAME")
                    .HasColumnType("varchar(100)");
            });

            modelBuilder.Entity<LoanDocUsed>(entity =>
            {
                entity.HasKey(e => e.LoanDocUsedKey)
                    .HasName("PK_LoanDocUsed");

                entity.HasIndex(e => e.LoanDocKey)
                    .HasName("IX_LoanDocUsed_LOAN_DOC_KEY");

                entity.HasIndex(e => e.Location)
                    .HasName("IX_LoanDocUsed_LOCATION");

                entity.HasIndex(e => e.ProductType)
                    .HasName("IX_LoanDocUsed_PRODUCT_TYPE");

                entity.Property(e => e.LoanDocUsedKey).HasColumnName("LOAN_DOC_USED_KEY");

                entity.Property(e => e.ClearTitleMissing).HasColumnName("CLEAR_TITLE_MISSING");

                entity.Property(e => e.ClearTitlePresent).HasColumnName("CLEAR_TITLE_PRESENT");

                entity.Property(e => e.DaysBetweenPrintingPerCustomer).HasColumnName("DAYS_BETWEEN_PRINTING_PER_CUSTOMER");

                entity.Property(e => e.EsignAllowSendToPrinter).HasColumnName("ESIGN_ALLOW_SEND_TO_PRINTER");

                entity.Property(e => e.LoanDocKey).HasColumnName("LOAN_DOC_KEY");

                entity.Property(e => e.LoanDocTypeKey).HasColumnName("LOAN_DOC_TYPE_KEY");

                entity.Property(e => e.LoanProductKey).HasColumnName("LOAN_PRODUCT_KEY");

                entity.Property(e => e.LoanType)
                    .IsRequired()
                    .HasColumnName("LOAN_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.NoSignatureAction).HasColumnName("NO_SIGNATURE_ACTION");

                entity.Property(e => e.PrintCopies).HasColumnName("PRINT_COPIES");

                entity.Property(e => e.PrintForDepositMethod)
                    .IsRequired()
                    .HasColumnName("PRINT_FOR_DEPOSIT_METHOD")
                    .HasColumnType("char(1)");

                entity.Property(e => e.PrintForEmailStatements).HasColumnName("PRINT_FOR_EMAIL_STATEMENTS");

                entity.Property(e => e.PrintForGiftCards).HasColumnName("PRINT_FOR_GIFT_CARDS");

                entity.Property(e => e.PrintForLien).HasColumnName("PRINT_FOR_LIEN");

                entity.Property(e => e.PrintForNotEmailStatements).HasColumnName("PRINT_FOR_NOT_EMAIL_STATEMENTS");

                entity.Property(e => e.PrintForNotGiftCards).HasColumnName("PRINT_FOR_NOT_GIFT_CARDS");

                entity.Property(e => e.PrintForTitleCoPledger).HasColumnName("PRINT_FOR_TITLE_CO_PLEDGER");

                entity.Property(e => e.PrintForTitleDualOwner).HasColumnName("PRINT_FOR_TITLE_DUAL_OWNER");

                entity.Property(e => e.PrintOnClose).HasColumnName("PRINT_ON_CLOSE");

                entity.Property(e => e.PrintOnDenialSrc).HasColumnName("PRINT_ON_DENIAL_SRC");

                entity.Property(e => e.PrintOnDenialState).HasColumnName("PRINT_ON_DENIAL_STATE");

                entity.Property(e => e.PrintOnNew).HasColumnName("PRINT_ON_NEW");

                entity.Property(e => e.PrintOnPayoff).HasColumnName("PRINT_ON_PAYOFF");

                entity.Property(e => e.PrintOnRollNew).HasColumnName("PRINT_ON_ROLL_NEW");

                entity.Property(e => e.PrintOnRollPaid).HasColumnName("PRINT_ON_ROLL_PAID");

                entity.Property(e => e.PrintOnWaPplan).HasColumnName("PRINT_ON_WA_PPLAN");

                entity.Property(e => e.PrintOnlyLoanAmtMin)
                    .HasColumnName("PRINT_ONLY_LOAN_AMT_MIN")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PrintOrder).HasColumnName("PRINT_ORDER");

                entity.Property(e => e.ProductType)
                    .IsRequired()
                    .HasColumnName("PRODUCT_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.ScanRequired).HasColumnName("SCAN_REQUIRED");

                entity.Property(e => e.UseVehState).HasColumnName("USE_VEH_STATE");

                entity.HasOne(d => d.LoanDocKeyNavigation)
                    .WithMany(p => p.LoanDocUsed)
                    .HasForeignKey(d => d.LoanDocKey)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_LoanDocUsed_LoanDoc");

                entity.HasOne(d => d.LoanDocTypeKeyNavigation)
                    .WithMany(p => p.LoanDocUsed)
                    .HasForeignKey(d => d.LoanDocTypeKey)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_LoanDocUsed_LoanDocType");

                entity.HasOne(d => d.LoanProductKeyNavigation)
                    .WithMany(p => p.LoanDocUsed)
                    .HasForeignKey(d => d.LoanProductKey)
                    .HasConstraintName("FK_LoanDocUsed_LOAN_PRODUCT_KEY");
            });

            modelBuilder.Entity<LoanDueDateChange>(entity =>
            {
                entity.HasKey(e => e.DuedateChangeKey)
                    .HasName("PK_LoanDueDateChange");

                entity.HasIndex(e => e.CustomerKey)
                    .HasName("IX_LoanDueDateChange_CUSTOMER_KEY");

                entity.HasIndex(e => e.LoanKey)
                    .HasName("IX_LoanDueDateChange");

                entity.HasIndex(e => new { e.DuedateChangeKey, e.Teller, e.AdjustedDueDate, e.LoanKey, e.DateEntered, e.Location })
                    .HasName("IX_LoanDueDateChange_LOAN_KEY_DATE_ENTERED");

                entity.HasIndex(e => new { e.LoanKey, e.CustomerKey, e.Location, e.Teller, e.IsDuedateChanged, e.DateEntered })
                    .HasName("IX_LoanDueDateChange_IS_DUEDATE_CHANGED_DATE_ENTERED");

                entity.Property(e => e.DuedateChangeKey).HasColumnName("DUEDATE_CHANGE_KEY");

                entity.Property(e => e.AdjustedDueDate)
                    .HasColumnName("ADJUSTED_DUE_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.ChangeNote)
                    .HasColumnName("CHANGE_NOTE")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.IsDuedateChanged).HasColumnName("IS_DUEDATE_CHANGED");

                entity.Property(e => e.LoanCheckKey).HasColumnName("LOAN_CHECK_KEY");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.OpenEndLoanStmtKey).HasColumnName("OPEN_END_LOAN_STMT_KEY");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.LoanDueDateChange)
                    .HasForeignKey(d => d.CustomerKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LoanDueDateChange_Customer");

                entity.HasOne(d => d.LocationNavigation)
                    .WithMany(p => p.LoanDueDateChange)
                    .HasForeignKey(d => d.Location)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LoanDueDateChange_Company");

                entity.HasOne(d => d.OpenEndLoanStmtKeyNavigation)
                    .WithMany(p => p.LoanDueDateChange)
                    .HasForeignKey(d => d.OpenEndLoanStmtKey)
                    .HasConstraintName("FK_LoanDueDateChange_OpenEndLoanStatement");
            });

            modelBuilder.Entity<LoanFunding>(entity =>
            {
                entity.HasKey(e => e.LoanFundingKey)
                    .HasName("PK_LoanFunding");

                entity.HasIndex(e => e.ApprovedLoanPaymentKey)
                    .HasName("IX_LoanFunding_APPROVED_LOAN_PAYMENT_KEY");

                entity.HasIndex(e => e.FundingTransDetailKey)
                    .HasName("IX_LoanFunding_FUNDING_TRANS_DETAIL_KEY");

                entity.HasIndex(e => e.LoanKey)
                    .HasName("IX_LoanFunding_LOAN_KEY");

                entity.Property(e => e.LoanFundingKey).HasColumnName("LOAN_FUNDING_KEY");

                entity.Property(e => e.ActualFundingMethod)
                    .IsRequired()
                    .HasColumnName("ACTUAL_FUNDING_METHOD")
                    .HasColumnType("char(1)");

                entity.Property(e => e.ApprovedLoanPaymentKey).HasColumnName("APPROVED_LOAN_PAYMENT_KEY");

                entity.Property(e => e.FundingAmt)
                    .HasColumnName("FUNDING_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.FundingStatus)
                    .IsRequired()
                    .HasColumnName("FUNDING_STATUS")
                    .HasColumnType("char(1)");

                entity.Property(e => e.FundingTransDetailKey).HasColumnName("FUNDING_TRANS_DETAIL_KEY");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.RequestedFundingMethod)
                    .IsRequired()
                    .HasColumnName("REQUESTED_FUNDING_METHOD")
                    .HasColumnType("char(1)");

                entity.HasOne(d => d.ApprovedLoanPaymentKeyNavigation)
                    .WithMany(p => p.LoanFunding)
                    .HasForeignKey(d => d.ApprovedLoanPaymentKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LoanFunding_APPROVED_LOAN_PAYMENT_KEY");

                entity.HasOne(d => d.FundingTransDetailKeyNavigation)
                    .WithMany(p => p.LoanFunding)
                    .HasForeignKey(d => d.FundingTransDetailKey)
                    .HasConstraintName("FK_LoanFunding_FUNDING_TRANS_DETAIL_KEY");

                entity.HasOne(d => d.LoanKeyNavigation)
                    .WithMany(p => p.LoanFunding)
                    .HasForeignKey(d => d.LoanKey)
                    .HasConstraintName("FK_LoanFunding_LOAN_KEY");
            });

            modelBuilder.Entity<LoanFundingMethodHistory>(entity =>
            {
                entity.HasKey(e => e.LoanFundingMethodHistoryKey)
                    .HasName("PK_LoanFundingMethodHistory");

                entity.HasIndex(e => e.LoanKey)
                    .HasName("IX_LoanFundingMethodHistory_Loan_Key");

                entity.Property(e => e.LoanFundingMethodHistoryKey).HasColumnName("LOAN_FUNDING_METHOD_HISTORY_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.FundingMethod).HasColumnName("FUNDING_METHOD");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("nchar(3)");

                entity.HasOne(d => d.LoanKeyNavigation)
                    .WithMany(p => p.LoanFundingMethodHistory)
                    .HasForeignKey(d => d.LoanKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LoanFundingMethodHistory_Loan");
            });

            modelBuilder.Entity<LoanImport>(entity =>
            {
                entity.HasKey(e => e.LoanImportKey)
                    .HasName("PK_LoanImport");

                entity.Property(e => e.LoanImportKey).HasColumnName("LOAN_IMPORT_KEY");

                entity.Property(e => e.CompanyName)
                    .IsRequired()
                    .HasColumnName("COMPANY_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.CustomerImportFile)
                    .IsRequired()
                    .HasColumnName("CUSTOMER_IMPORT_FILE")
                    .HasColumnType("varchar(255)");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.LoanImportFile)
                    .IsRequired()
                    .HasColumnName("LOAN_IMPORT_FILE")
                    .HasColumnType("varchar(255)");
            });

            modelBuilder.Entity<LoanImportXref>(entity =>
            {
                entity.HasKey(e => new { e.LoanImportKey, e.LoanKey })
                    .HasName("PK_LoanImportXRef");

                entity.ToTable("LoanImportXRef");

                entity.HasIndex(e => e.LoanKey)
                    .HasName("IX_LoanImportXRef_LOAN_KEY");

                entity.Property(e => e.LoanImportKey).HasColumnName("LOAN_IMPORT_KEY");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.ImportLocation)
                    .IsRequired()
                    .HasColumnName("IMPORT_LOCATION")
                    .HasColumnType("varchar(9)");
            });

            modelBuilder.Entity<LoanIncome>(entity =>
            {
                entity.HasKey(e => e.LoanIncomeKey)
                    .HasName("PK_LoanIncome");

                entity.HasIndex(e => e.LoanKey)
                    .HasName("IX_LoanIncome_LOAN_KEY");

                entity.Property(e => e.LoanIncomeKey).HasColumnName("LOAN_INCOME_KEY");

                entity.Property(e => e.CustomerIncomeKey).HasColumnName("CUSTOMER_INCOME_KEY");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.HasOne(d => d.CustomerIncomeKeyNavigation)
                    .WithMany(p => p.LoanIncome)
                    .HasForeignKey(d => d.CustomerIncomeKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LoanIncome_CustomerIncome");

                entity.HasOne(d => d.LoanKeyNavigation)
                    .WithMany(p => p.LoanIncome)
                    .HasForeignKey(d => d.LoanKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LoanIncome_Loan");
            });

            modelBuilder.Entity<LoanNote>(entity =>
            {
                entity.HasKey(e => e.LoanNoteKey)
                    .HasName("PK_LoanNote");

                entity.HasIndex(e => e.CustomerKey)
                    .HasName("IX_LoanNote_CUSTOMER_KEY");

                entity.HasIndex(e => e.LoanKey)
                    .HasName("IX_LoanNote_LOAN_KEY");

                entity.Property(e => e.LoanNoteKey).HasColumnName("LOAN_NOTE_KEY");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateDeleted)
                    .HasColumnName("DATE_DELETED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy)
                    .HasColumnName("DELETED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.IsDeleted).HasColumnName("IS_DELETED");

                entity.Property(e => e.IsFlash).HasColumnName("IS_FLASH");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.NewLoanNoteKey).HasColumnName("NEW_LOAN_NOTE_KEY");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasColumnType("varchar(2000)");

                entity.Property(e => e.RtfNote)
                    .IsRequired()
                    .HasColumnName("RTF_NOTE")
                    .HasColumnType("text");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.LoanNote)
                    .HasForeignKey(d => d.CustomerKey)
                    .HasConstraintName("FK_LoanNote_CUSTOMER_KEY");

                entity.HasOne(d => d.LoanKeyNavigation)
                    .WithMany(p => p.LoanNote)
                    .HasForeignKey(d => d.LoanKey)
                    .HasConstraintName("FK_LoanNote_LOAN_KEY");
            });

            modelBuilder.Entity<LoanOverride>(entity =>
            {
                entity.HasKey(e => e.LoanOverrideKey)
                    .HasName("PK_LoanOverride");

                entity.HasIndex(e => e.LoanKey)
                    .HasName("IX_LoanOverride_LoanKey");

                entity.HasIndex(e => e.LoanNoteKey)
                    .HasName("IX_LoanOverride_LoanNote");

                entity.Property(e => e.LoanOverrideKey).HasColumnName("LOAN_OVERRIDE_KEY");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.LoanNoteKey).HasColumnName("LOAN_NOTE_KEY");

                entity.Property(e => e.LoanOverrideReason).HasColumnName("LOAN_OVERRIDE_REASON");

                entity.Property(e => e.LoanOverrideType)
                    .IsRequired()
                    .HasColumnName("LOAN_OVERRIDE_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.OrigValue)
                    .HasColumnName("ORIG_VALUE")
                    .HasColumnType("numeric");

                entity.Property(e => e.OverrideValue)
                    .HasColumnName("OVERRIDE_VALUE")
                    .HasColumnType("numeric");

                entity.HasOne(d => d.LoanKeyNavigation)
                    .WithMany(p => p.LoanOverride)
                    .HasForeignKey(d => d.LoanKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LoanOverride_Loan");

                entity.HasOne(d => d.LoanNoteKeyNavigation)
                    .WithMany(p => p.LoanOverride)
                    .HasForeignKey(d => d.LoanNoteKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LoanOverride_LoanNote");
            });

            modelBuilder.Entity<LoanPayment>(entity =>
            {
                entity.HasKey(e => e.LoanpaymentKey)
                    .HasName("PK_LoanPayment");

                entity.HasIndex(e => e.PaidLoanKey)
                    .HasName("IX_LoanPayment_PAID_LOAN_KEY");

                entity.HasIndex(e => e.TransCode)
                    .HasName("IX_LoanPayment_TRANS_CODE");

                entity.HasIndex(e => e.TransDetailKey)
                    .HasName("IX_LoanPayment_TRANS_DETAIL_KEY");

                entity.HasIndex(e => new { e.PaidLoanKey, e.Reversed, e.DateEntered })
                    .HasName("IX_LoanPayment_REVERSED_DATE_ENTERED");

                entity.HasIndex(e => new { e.PaidAmt, e.Reversed, e.TransCode, e.PaidLoanKey })
                    .HasName("IX_LoanPayment_Multiple_7");

                entity.HasIndex(e => new { e.LoanpaymentKey, e.Reversed, e.PaidLoanKey, e.DateEntered, e.Teller })
                    .HasName("IX_LoanPayment_Multiple_1");

                entity.HasIndex(e => new { e.PaidLoanKey, e.DateEntered, e.TransDetailKey, e.LoanpaymentKey, e.Reversed, e.TransCode, e.ProductType })
                    .HasName("IX_LoanPayment_Multiple_8");

                entity.HasIndex(e => new { e.PaidAmt, e.Reversed, e.TransCode, e.DateEntered, e.Teller, e.LoanpaymentKey, e.PaidLoanKey, e.Location })
                    .HasName("IX_LoanPayment_Multiple_6");

                entity.HasIndex(e => new { e.Note, e.PaidAmt, e.PaidLoanKey, e.PaymentMethod, e.TransCode, e.Reversed, e.LoanpaymentKey, e.Teller, e.TransDetailKey, e.DateEntered })
                    .HasName("IX_LoanPayment_Multiple_2");

                entity.HasIndex(e => new { e.Note, e.PaidAmt, e.PaymentMethod, e.PaidLoanKey, e.Reversed, e.LoanpaymentKey, e.Teller, e.TransCode, e.TransDetailKey, e.Location, e.DateEntered })
                    .HasName("IX_LoanPayment_Multiple_3");

                entity.HasIndex(e => new { e.Note, e.PaidAmt, e.PaymentMethod, e.PaidLoanKey, e.Reversed, e.TransDetailKey, e.TransCode, e.LoanpaymentKey, e.Location, e.DateEntered, e.Teller })
                    .HasName("IX_LoanPayment_Multiple_4");

                entity.HasIndex(e => new { e.PaidAmt, e.PaymentMethod, e.Note, e.PaidLoanKey, e.TransCode, e.Reversed, e.LoanpaymentKey, e.TransDetailKey, e.Location, e.DateEntered, e.Teller })
                    .HasName("IX_LoanPayment_Multiple_5");

                entity.HasIndex(e => new { e.PaidAmt, e.PaymentMethod, e.Note, e.TransDetailKey, e.PaidLoanKey, e.Reversed, e.TransCode, e.LoanpaymentKey, e.Location, e.DateEntered, e.Teller })
                    .HasName("IX_LoanPayment_Multiple_9");

                entity.Property(e => e.LoanpaymentKey).HasColumnName("LOANPAYMENT_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.LoanKey)
                    .HasColumnName("LOAN_KEY")
                    .HasComputedColumnSql("[PAID_LOAN_KEY]")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.LoanPaymentKey)
                    .HasColumnName("LOAN_PAYMENT_KEY")
                    .HasComputedColumnSql("[LOANPAYMENT_KEY]")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.LoanType)
                    .IsRequired()
                    .HasColumnName("LOAN_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasColumnType("varchar(500)");

                entity.Property(e => e.PaidAmt)
                    .HasColumnName("PAID_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PaidLoanKey).HasColumnName("PAID_LOAN_KEY");

                entity.Property(e => e.PaymentMethod).HasColumnName("PAYMENT_METHOD");

                entity.Property(e => e.ProductType)
                    .IsRequired()
                    .HasColumnName("PRODUCT_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.Reversed)
                    .HasColumnName("REVERSED")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.ReversedDate)
                    .HasColumnName("REVERSED_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.TransCode).HasColumnName("TRANS_CODE");

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");

                entity.HasOne(d => d.LocationNavigation)
                    .WithMany(p => p.LoanPayment)
                    .HasForeignKey(d => d.Location)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LoanPayment_Company");

                entity.HasOne(d => d.PaidLoanKeyNavigation)
                    .WithMany(p => p.LoanPayment)
                    .HasForeignKey(d => d.PaidLoanKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LoanPayment_Loan");

                entity.HasOne(d => d.TransDetailKeyNavigation)
                    .WithMany(p => p.LoanPayment)
                    .HasForeignKey(d => d.TransDetailKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LoanPayment_TransDetail");
            });

            modelBuilder.Entity<LoanPaymentAddToQueue>(entity =>
            {
                entity.HasKey(e => e.LoanPaymentAddToQueueKey)
                    .HasName("PK_LoanPaymentAddToQueue");

                entity.HasIndex(e => e.LoanPaymentKey)
                    .HasName("IX_LoanPaymentAddToQueue_LOAN_PAYMENT_KEY")
                    .IsUnique();

                entity.Property(e => e.LoanPaymentAddToQueueKey).HasColumnName("LOAN_PAYMENT_ADD_TO_QUEUE_KEY");

                entity.Property(e => e.AddToPaymentQueueAmt)
                    .HasColumnName("ADD_TO_PAYMENT_QUEUE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanPaymentKey).HasColumnName("LOAN_PAYMENT_KEY");

                entity.HasOne(d => d.LoanPaymentKeyNavigation)
                    .WithOne(p => p.LoanPaymentAddToQueue)
                    .HasForeignKey<LoanPaymentAddToQueue>(d => d.LoanPaymentKey)
                    .HasConstraintName("FK_LoanPaymentAddToQueue_LOAN_PAYMENT_KEY");
            });

            modelBuilder.Entity<LoanPaymentCheckPaymentTypeXref>(entity =>
            {
                entity.HasKey(e => e.LoanPaymentCheckPaymentTypeXrefKey)
                    .HasName("PK_LoanPaymentCheckPaymentTypeXref");

                entity.HasIndex(e => e.LoanPaymentKey)
                    .HasName("IX_LoanPaymentCheckPaymentTypeXref_LoanPayment");

                entity.Property(e => e.LoanPaymentCheckPaymentTypeXrefKey).HasColumnName("LOAN_PAYMENT_CHECK_PAYMENT_TYPE_XREF_KEY");

                entity.Property(e => e.CheckPaymentTypeKey).HasColumnName("CHECK_PAYMENT_TYPE_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.LoanPaymentKey).HasColumnName("LOAN_PAYMENT_KEY");

                entity.HasOne(d => d.CheckPaymentTypeKeyNavigation)
                    .WithMany(p => p.LoanPaymentCheckPaymentTypeXref)
                    .HasForeignKey(d => d.CheckPaymentTypeKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LoanPaymentCheckPaymentTypeXref_CheckPaymentType");
            });

            modelBuilder.Entity<LoanPaymentDecreaseAmountOwed>(entity =>
            {
                entity.HasKey(e => e.LoanPaymentDecreaseAmountOwedKey)
                    .HasName("PK_LoanPaymentDecreaseAmountOwed");

                entity.Property(e => e.LoanPaymentDecreaseAmountOwedKey).HasColumnName("LOAN_PAYMENT_DECREASE_AMOUNT_OWED_KEY");

                entity.Property(e => e.ApplyBucketAmt)
                    .HasColumnName("APPLY_BUCKET_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.ApplyBucketType)
                    .IsRequired()
                    .HasColumnName("APPLY_BUCKET_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.ApplyDueType)
                    .IsRequired()
                    .HasColumnName("APPLY_DUE_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.DecreaseAmountOwedReason)
                    .IsRequired()
                    .HasColumnName("DECREASE_AMOUNT_OWED_REASON")
                    .HasColumnType("char(1)");

                entity.Property(e => e.DecreaseAmountOwedType)
                    .IsRequired()
                    .HasColumnName("DECREASE_AMOUNT_OWED_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.LoanPaymentKey).HasColumnName("LOAN_PAYMENT_KEY");

                entity.HasOne(d => d.LoanPaymentKeyNavigation)
                    .WithMany(p => p.LoanPaymentDecreaseAmountOwed)
                    .HasForeignKey(d => d.LoanPaymentKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LoanPaymentDecreaseAmountOwed_LoanPayment");
            });

            modelBuilder.Entity<LoanPaymentDueDate>(entity =>
            {
                entity.HasKey(e => e.LoanPaymentDueDateKey)
                    .HasName("PK_LoanPaymentDueDate");

                entity.HasIndex(e => e.LoanPaymentKey)
                    .HasName("IX_LoanPaymentDueDate_LOAN_PAYMENT_KEY");

                entity.Property(e => e.LoanPaymentDueDateKey).HasColumnName("LOAN_PAYMENT_DUE_DATE_KEY");

                entity.Property(e => e.AdjustedDueDate)
                    .HasColumnName("ADJUSTED_DUE_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.CollectionsAmt)
                    .HasColumnName("COLLECTIONS_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanPaymentKey).HasColumnName("LOAN_PAYMENT_KEY");

                entity.Property(e => e.OrigDueDate)
                    .HasColumnName("ORIG_DUE_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.PastDueAmt)
                    .HasColumnName("PAST_DUE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PendingAchAmt)
                    .HasColumnName("PENDING_ACH_AMT")
                    .HasColumnType("smallmoney");

                entity.HasOne(d => d.LoanPaymentKeyNavigation)
                    .WithMany(p => p.LoanPaymentDueDate)
                    .HasForeignKey(d => d.LoanPaymentKey)
                    .HasConstraintName("FK_LoanPaymentDueDate_LOAN_PAYMENT_KEY");
            });

            modelBuilder.Entity<LoanPaymentInsuranceClaimXref>(entity =>
            {
                entity.HasKey(e => e.LoanPaymentInsuranceClaimXrefKey)
                    .HasName("PK_LoanPaymentInsuranceClaimXRef");

                entity.ToTable("LoanPaymentInsuranceClaimXRef");

                entity.Property(e => e.LoanPaymentInsuranceClaimXrefKey).HasColumnName("LOAN_PAYMENT_INSURANCE_CLAIM_XREF_KEY");

                entity.Property(e => e.InsuranceClaimKey).HasColumnName("INSURANCE_CLAIM_KEY");

                entity.Property(e => e.LoanPaymentKey).HasColumnName("LOAN_PAYMENT_KEY");

                entity.HasOne(d => d.InsuranceClaimKeyNavigation)
                    .WithMany(p => p.LoanPaymentInsuranceClaimXref)
                    .HasForeignKey(d => d.InsuranceClaimKey)
                    .HasConstraintName("FK_LoanPaymentInsuranceClaimXRef_INSURANCE_CLAIM_KEY");

                entity.HasOne(d => d.LoanPaymentKeyNavigation)
                    .WithMany(p => p.LoanPaymentInsuranceClaimXref)
                    .HasForeignKey(d => d.LoanPaymentKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LoanPaymentInsuranceClaimXRef_LOAN_PAYMENT_KEY");
            });

            modelBuilder.Entity<LoanPaymentLoanCheckXref>(entity =>
            {
                entity.HasKey(e => e.LpLcXrefKey)
                    .HasName("PK_LoanPaymentLoanCheckXref");

                entity.Property(e => e.LpLcXrefKey).HasColumnName("LP_LC_XREF_KEY");

                entity.Property(e => e.LoanCheckKey).HasColumnName("LOAN_CHECK_KEY");

                entity.Property(e => e.LoanPaymentKey).HasColumnName("LOAN_PAYMENT_KEY");

                entity.HasOne(d => d.LoanCheckKeyNavigation)
                    .WithMany(p => p.LoanPaymentLoanCheckXref)
                    .HasForeignKey(d => d.LoanCheckKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LpLcXref_LoanCheck");
            });

            modelBuilder.Entity<LoanPaymentMpay>(entity =>
            {
                entity.HasKey(e => e.LoanPaymentMpayKey)
                    .HasName("PK_LoanPaymentMPay");

                entity.ToTable("LoanPaymentMPay");

                entity.HasIndex(e => e.LoanPaymentKey)
                    .HasName("IX_LoanPaymentMPay_LOAN_PAYMENT_KEY");

                entity.Property(e => e.LoanPaymentMpayKey).HasColumnName("LOAN_PAYMENT_MPAY_KEY");

                entity.Property(e => e.AddToColl).HasColumnName("ADD_TO_COLL");

                entity.Property(e => e.CabCollFeePastDuePaid)
                    .HasColumnName("CAB_COLL_FEE_PAST_DUE_PAID")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CabInterestDuePaid)
                    .HasColumnName("CAB_INTEREST_DUE_PAID")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CollFeePastDuePaid)
                    .HasColumnName("COLL_FEE_PAST_DUE_PAID")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.DueDatePaymentQueuePaid)
                    .HasColumnName("DUE_DATE_PAYMENT_QUEUE_PAID")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.InsuranceDuePaid)
                    .HasColumnName("INSURANCE_DUE_PAID")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.InterestDuePaid)
                    .HasColumnName("INTEREST_DUE_PAID")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.IsCoEarlyPayoffRebate).HasColumnName("IS_CO_EARLY_PAYOFF_REBATE");

                entity.Property(e => e.IsDayAfterDuePayment).HasColumnName("IS_DAY_AFTER_DUE_PAYMENT");

                entity.Property(e => e.IsScheduledPayment).HasColumnName("IS_SCHEDULED_PAYMENT");

                entity.Property(e => e.LegalFeePastDuePaid)
                    .HasColumnName("LEGAL_FEE_PAST_DUE_PAID")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanFeeDuePaid)
                    .HasColumnName("LOAN_FEE_DUE_PAID")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanPaymentKey).HasColumnName("LOAN_PAYMENT_KEY");

                entity.Property(e => e.NsfFeePastDuePaid)
                    .HasColumnName("NSF_FEE_PAST_DUE_PAID")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PaymentDuePaid)
                    .HasColumnName("PAYMENT_DUE_PAID")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PaymentPastDuePaid)
                    .HasColumnName("PAYMENT_PAST_DUE_PAID")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PendingSchedAchAmt)
                    .HasColumnName("PENDING_SCHED_ACH_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PrincDuePaid)
                    .HasColumnName("PRINC_DUE_PAID")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.RemFromColl).HasColumnName("REM_FROM_COLL");

                entity.Property(e => e.TransFeeDuePaid)
                    .HasColumnName("TRANS_FEE_DUE_PAID")
                    .HasColumnType("smallmoney");

                entity.HasOne(d => d.LoanPaymentKeyNavigation)
                    .WithMany(p => p.LoanPaymentMpay)
                    .HasForeignKey(d => d.LoanPaymentKey)
                    .HasConstraintName("FK_LoanPaymentMPay_LoanPayment");
            });

            modelBuilder.Entity<LoanPaymentMpayRefund>(entity =>
            {
                entity.HasKey(e => e.LoanPaymentMpayRefundKey)
                    .HasName("PK_LoanPaymentMPayRefund");

                entity.ToTable("LoanPaymentMPayRefund");

                entity.HasIndex(e => e.LoanPaymentRefundXrefKey)
                    .HasName("IX_LoanPaymentMPayRefund_LOAN_PAYMENT_REFUND_XREF_KEY");

                entity.Property(e => e.LoanPaymentMpayRefundKey).HasColumnName("LOAN_PAYMENT_MPAY_REFUND_KEY");

                entity.Property(e => e.AccountingLoanPaymentKey).HasColumnName("ACCOUNTING_LOAN_PAYMENT_KEY");

                entity.Property(e => e.CabCollFeePastDueRefunded)
                    .HasColumnName("CAB_COLL_FEE_PAST_DUE_REFUNDED")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CabInterestDueRefunded)
                    .HasColumnName("CAB_INTEREST_DUE_REFUNDED")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CollFeePastDueRefunded)
                    .HasColumnName("COLL_FEE_PAST_DUE_REFUNDED")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.InsuranceDueRefunded)
                    .HasColumnName("INSURANCE_DUE_REFUNDED")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.InterestDueRefunded)
                    .HasColumnName("INTEREST_DUE_REFUNDED")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LegalFeePastDueRefunded)
                    .HasColumnName("LEGAL_FEE_PAST_DUE_REFUNDED")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanFeeDueRefunded)
                    .HasColumnName("LOAN_FEE_DUE_REFUNDED")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanPaymentRefundXrefKey).HasColumnName("LOAN_PAYMENT_REFUND_XREF_KEY");

                entity.Property(e => e.NsfFeePastDueRefunded)
                    .HasColumnName("NSF_FEE_PAST_DUE_REFUNDED")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PrincDueRefunded)
                    .HasColumnName("PRINC_DUE_REFUNDED")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TransFeeDueRefunded)
                    .HasColumnName("TRANS_FEE_DUE_REFUNDED")
                    .HasColumnType("smallmoney");

                entity.HasOne(d => d.LoanPaymentRefundXrefKeyNavigation)
                    .WithMany(p => p.LoanPaymentMpayRefund)
                    .HasForeignKey(d => d.LoanPaymentRefundXrefKey)
                    .HasConstraintName("FK_LoanPaymentMPayRefund_LoanPaymentRefundXRef");
            });

            modelBuilder.Entity<LoanPaymentOpenEnd>(entity =>
            {
                entity.HasKey(e => e.LoanPaymentOpenEndKey)
                    .HasName("PK_LoanPaymentOpenEnd");

                entity.HasIndex(e => e.LoanPaymentKey)
                    .HasName("IX_LoanPaymentOpenEnd_LOAN_PAYMENT_KEY");

                entity.HasIndex(e => new { e.FundingLoanPaymentKey, e.FundingStatusCode })
                    .HasName("IX_LoanPaymentOpenEnd_FUNDINGSTATUSCODE");

                entity.HasIndex(e => new { e.LoanPaymentOpenEndKey, e.FundingStatusCode, e.FundingLoanPaymentKey })
                    .HasName("IX_LoanPaymentOpenEnd_FUNDING_STATUS_CODE_FUNDING_LOAN_PAYMENT_KEY");

                entity.HasIndex(e => new { e.PastDueTransFeeAmt, e.PastDueLienFeeAmt, e.PastDueActivityFeeAmt, e.NotDueLienFeeAmt, e.NotDueActivityFeeAmt, e.AddToColl, e.RemFromColl, e.NextDueTransFeeAmt, e.NextDueLienFeeAmt, e.NextDuePrincAmt, e.NotDueTransFeeAmt, e.PastDuePrincAmt, e.CurrDueTransFeeAmt, e.NotDueInterestAmt, e.NotDuePrincAmt, e.CurrDueInterestAmt, e.CurrDuePrincAmt, e.CurrDueLienFeeAmt, e.CurrDueActivityFeeAmt, e.NextDueActivityFeeAmt, e.NextDueInterestAmt, e.PastDueCollFeeAmt, e.PastDueInterestAmt, e.LoanPaymentKey, e.LoanPaymentOpenEndKey })
                    .HasName("IX_LoanPaymentOpenEnd_DTA");

                entity.Property(e => e.LoanPaymentOpenEndKey).HasColumnName("LOAN_PAYMENT_OPEN_END_KEY");

                entity.Property(e => e.AchProcessingQueueKey).HasColumnName("ACH_PROCESSING_QUEUE_KEY");

                entity.Property(e => e.AddToColl).HasColumnName("ADD_TO_COLL");

                entity.Property(e => e.CurrDueActivityFeeAmt)
                    .HasColumnName("CURR_DUE_ACTIVITY_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CurrDueCsoLenderInterestAmt)
                    .HasColumnName("CURR_DUE_CSO_LENDER_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CurrDueInterestAmt)
                    .HasColumnName("CURR_DUE_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CurrDueLienFeeAmt)
                    .HasColumnName("CURR_DUE_LIEN_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CurrDuePrincAmt)
                    .HasColumnName("CURR_DUE_PRINC_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CurrDueTransFeeAmt)
                    .HasColumnName("CURR_DUE_TRANS_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.FundingAchHistoryKey).HasColumnName("FUNDING_ACH_HISTORY_KEY");

                entity.Property(e => e.FundingAmt)
                    .HasColumnName("FUNDING_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.FundingLoanPaymentKey).HasColumnName("FUNDING_LOAN_PAYMENT_KEY");

                entity.Property(e => e.FundingMethod)
                    .HasColumnName("FUNDING_METHOD")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.FundingStatusCode)
                    .IsRequired()
                    .HasColumnName("FUNDING_STATUS_CODE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.IsInterestReductionPayment).HasColumnName("IS_INTEREST_REDUCTION_PAYMENT");

                entity.Property(e => e.IsPrincipleOnlyPayment).HasColumnName("IS_PRINCIPLE_ONLY_PAYMENT");

                entity.Property(e => e.LoanPaymentKey).HasColumnName("LOAN_PAYMENT_KEY");

                entity.Property(e => e.NextDueActivityFeeAmt)
                    .HasColumnName("NEXT_DUE_ACTIVITY_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NextDueCsoLenderInterestAmt)
                    .HasColumnName("NEXT_DUE_CSO_LENDER_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NextDueInterestAmt)
                    .HasColumnName("NEXT_DUE_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NextDueLienFeeAmt)
                    .HasColumnName("NEXT_DUE_LIEN_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NextDuePrincAmt)
                    .HasColumnName("NEXT_DUE_PRINC_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NextDueTransFeeAmt)
                    .HasColumnName("NEXT_DUE_TRANS_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NotDueActivityFeeAmt)
                    .HasColumnName("NOT_DUE_ACTIVITY_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NotDueCsoLenderInterestAmt)
                    .HasColumnName("NOT_DUE_CSO_LENDER_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NotDueInterestAmt)
                    .HasColumnName("NOT_DUE_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NotDueLienFeeAmt)
                    .HasColumnName("NOT_DUE_LIEN_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NotDuePrincAmt)
                    .HasColumnName("NOT_DUE_PRINC_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NotDueTransFeeAmt)
                    .HasColumnName("NOT_DUE_TRANS_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PastDueActivityFeeAmt)
                    .HasColumnName("PAST_DUE_ACTIVITY_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PastDueCollFeeAmt)
                    .HasColumnName("PAST_DUE_COLL_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PastDueCsoLenderCollFeeAmt)
                    .HasColumnName("PAST_DUE_CSO_LENDER_COLL_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PastDueCsoLenderInterestAmt)
                    .HasColumnName("PAST_DUE_CSO_LENDER_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PastDueInterestAmt)
                    .HasColumnName("PAST_DUE_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PastDueLienFeeAmt)
                    .HasColumnName("PAST_DUE_LIEN_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PastDuePrincAmt)
                    .HasColumnName("PAST_DUE_PRINC_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PastDueTransFeeAmt)
                    .HasColumnName("PAST_DUE_TRANS_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PendingSchedAchAmt)
                    .HasColumnName("PENDING_SCHED_ACH_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.RemFromColl).HasColumnName("REM_FROM_COLL");

                entity.Property(e => e.TotActivityFeeAmt)
                    .HasColumnName("TOT_ACTIVITY_FEE_AMT")
                    .HasColumnType("smallmoney")
                    .HasComputedColumnSql("(([PAST_DUE_ACTIVITY_FEE_AMT]+[CURR_DUE_ACTIVITY_FEE_AMT])+[NEXT_DUE_ACTIVITY_FEE_AMT])+[NOT_DUE_ACTIVITY_FEE_AMT]")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.TotCsoLenderInterestFeeAmt)
                    .HasColumnName("TOT_CSO_LENDER_INTEREST_FEE_AMT")
                    .HasColumnType("smallmoney")
                    .HasComputedColumnSql("(([PAST_DUE_CSO_LENDER_INTEREST_AMT]+[CURR_DUE_CSO_LENDER_INTEREST_AMT])+[NEXT_DUE_CSO_LENDER_INTEREST_AMT])+[NOT_DUE_CSO_LENDER_INTEREST_AMT]")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.TotCurrDueAmt)
                    .HasColumnName("TOT_CURR_DUE_AMT")
                    .HasColumnType("smallmoney")
                    .HasComputedColumnSql("(((([CURR_DUE_TRANS_FEE_AMT]+[CURR_DUE_LIEN_FEE_AMT])+[CURR_DUE_ACTIVITY_FEE_AMT])+[CURR_DUE_INTEREST_AMT])+[CURR_DUE_PRINC_AMT])+[CURR_DUE_CSO_LENDER_INTEREST_AMT]")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.TotInterestFeeAmt)
                    .HasColumnName("TOT_INTEREST_FEE_AMT")
                    .HasColumnType("smallmoney")
                    .HasComputedColumnSql("(([PAST_DUE_INTEREST_AMT]+[CURR_DUE_INTEREST_AMT])+[NEXT_DUE_INTEREST_AMT])+[NOT_DUE_INTEREST_AMT]")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.TotLienFeeAmt)
                    .HasColumnName("TOT_LIEN_FEE_AMT")
                    .HasColumnType("smallmoney")
                    .HasComputedColumnSql("(([PAST_DUE_LIEN_FEE_AMT]+[CURR_DUE_LIEN_FEE_AMT])+[NEXT_DUE_LIEN_FEE_AMT])+[NOT_DUE_LIEN_FEE_AMT]")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.TotNextDueAmt)
                    .HasColumnName("TOT_NEXT_DUE_AMT")
                    .HasColumnType("smallmoney")
                    .HasComputedColumnSql("(((([NEXT_DUE_TRANS_FEE_AMT]+[NEXT_DUE_LIEN_FEE_AMT])+[NEXT_DUE_ACTIVITY_FEE_AMT])+[NEXT_DUE_INTEREST_AMT])+[NEXT_DUE_PRINC_AMT])+[NEXT_DUE_CSO_LENDER_INTEREST_AMT]")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.TotNotDueAmt)
                    .HasColumnName("TOT_NOT_DUE_AMT")
                    .HasColumnType("smallmoney")
                    .HasComputedColumnSql("(((([NOT_DUE_TRANS_FEE_AMT]+[NOT_DUE_LIEN_FEE_AMT])+[NOT_DUE_ACTIVITY_FEE_AMT])+[NOT_DUE_INTEREST_AMT])+[NOT_DUE_PRINC_AMT])+[NOT_DUE_CSO_LENDER_INTEREST_AMT]")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.TotPastDueAmt)
                    .HasColumnName("TOT_PAST_DUE_AMT")
                    .HasColumnType("smallmoney")
                    .HasComputedColumnSql("(((((([PAST_DUE_TRANS_FEE_AMT]+[PAST_DUE_LIEN_FEE_AMT])+[PAST_DUE_ACTIVITY_FEE_AMT])+[PAST_DUE_INTEREST_AMT])+[PAST_DUE_PRINC_AMT])+[PAST_DUE_COLL_FEE_AMT])+[PAST_DUE_CSO_LENDER_COLL_FEE_AMT])+[PAST_DUE_CSO_LENDER_INTEREST_AMT]")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.TotPrincFeeAmt)
                    .HasColumnName("TOT_PRINC_FEE_AMT")
                    .HasColumnType("smallmoney")
                    .HasComputedColumnSql("(([PAST_DUE_PRINC_AMT]+[CURR_DUE_PRINC_AMT])+[NEXT_DUE_PRINC_AMT])+[NOT_DUE_PRINC_AMT]")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.TotTransFeeAmt)
                    .HasColumnName("TOT_TRANS_FEE_AMT")
                    .HasColumnType("smallmoney")
                    .HasComputedColumnSql("(([PAST_DUE_TRANS_FEE_AMT]+[CURR_DUE_TRANS_FEE_AMT])+[NEXT_DUE_TRANS_FEE_AMT])+[NOT_DUE_TRANS_FEE_AMT]")
                    .ValueGeneratedOnAddOrUpdate();

                entity.HasOne(d => d.LoanPaymentKeyNavigation)
                    .WithMany(p => p.LoanPaymentOpenEnd)
                    .HasForeignKey(d => d.LoanPaymentKey)
                    .HasConstraintName("FK_LoanPaymentOpenEnd_LoanPayment");
            });

            modelBuilder.Entity<LoanPaymentOpenEndRefund>(entity =>
            {
                entity.HasKey(e => e.LoanPaymentOpenEndRefundKey)
                    .HasName("PK_LoanPaymentOpenEndRefund");

                entity.HasIndex(e => e.LoanPaymentRefundXrefKey)
                    .HasName("IX_LoanPaymentOpenEndRefund_LOAN_PAYMENT_REFUND_XREF_KEY");

                entity.Property(e => e.LoanPaymentOpenEndRefundKey).HasColumnName("LOAN_PAYMENT_OPEN_END_REFUND_KEY");

                entity.Property(e => e.AccountingLoanPaymentKey).HasColumnName("ACCOUNTING_LOAN_PAYMENT_KEY");

                entity.Property(e => e.CurrDueActivityFeeRefunded)
                    .HasColumnName("CURR_DUE_ACTIVITY_FEE_REFUNDED")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CurrDueCsoLenderInterestRefunded)
                    .HasColumnName("CURR_DUE_CSO_LENDER_INTEREST_REFUNDED")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CurrDueInterestRefunded)
                    .HasColumnName("CURR_DUE_INTEREST_REFUNDED")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CurrDueLienFeeRefunded)
                    .HasColumnName("CURR_DUE_LIEN_FEE_REFUNDED")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CurrDuePrincRefunded)
                    .HasColumnName("CURR_DUE_PRINC_REFUNDED")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CurrDueTransFeeRefunded)
                    .HasColumnName("CURR_DUE_TRANS_FEE_REFUNDED")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanPaymentRefundXrefKey).HasColumnName("LOAN_PAYMENT_REFUND_XREF_KEY");

                entity.Property(e => e.NextDueActivityFeeRefunded)
                    .HasColumnName("NEXT_DUE_ACTIVITY_FEE_REFUNDED")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NextDueCsoLenderInterestRefunded)
                    .HasColumnName("NEXT_DUE_CSO_LENDER_INTEREST_REFUNDED")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NextDueInterestRefunded)
                    .HasColumnName("NEXT_DUE_INTEREST_REFUNDED")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NextDueLienFeeRefunded)
                    .HasColumnName("NEXT_DUE_LIEN_FEE_REFUNDED")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NextDuePrincRefunded)
                    .HasColumnName("NEXT_DUE_PRINC_REFUNDED")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NextDueTransFeeRefunded)
                    .HasColumnName("NEXT_DUE_TRANS_FEE_REFUNDED")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NotDueActivityFeeRefunded)
                    .HasColumnName("NOT_DUE_ACTIVITY_FEE_REFUNDED")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NotDueCsoLenderInterestRefunded)
                    .HasColumnName("NOT_DUE_CSO_LENDER_INTEREST_REFUNDED")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NotDueInterestRefunded)
                    .HasColumnName("NOT_DUE_INTEREST_REFUNDED")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NotDueLienFeeRefunded)
                    .HasColumnName("NOT_DUE_LIEN_FEE_REFUNDED")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NotDuePrincRefunded)
                    .HasColumnName("NOT_DUE_PRINC_REFUNDED")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NotDueTransFeeRefunded)
                    .HasColumnName("NOT_DUE_TRANS_FEE_REFUNDED")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PastDueActivityFeeRefunded)
                    .HasColumnName("PAST_DUE_ACTIVITY_FEE_REFUNDED")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PastDueCollFeeRefunded)
                    .HasColumnName("PAST_DUE_COLL_FEE_REFUNDED")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PastDueCsoLenderCollFeeRefunded)
                    .HasColumnName("PAST_DUE_CSO_LENDER_COLL_FEE_REFUNDED")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PastDueCsoLenderInterestRefunded)
                    .HasColumnName("PAST_DUE_CSO_LENDER_INTEREST_REFUNDED")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PastDueInterestRefunded)
                    .HasColumnName("PAST_DUE_INTEREST_REFUNDED")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PastDueLienFeeRefunded)
                    .HasColumnName("PAST_DUE_LIEN_FEE_REFUNDED")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PastDuePrincRefunded)
                    .HasColumnName("PAST_DUE_PRINC_REFUNDED")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PastDueTransFeeRefunded)
                    .HasColumnName("PAST_DUE_TRANS_FEE_REFUNDED")
                    .HasColumnType("smallmoney");

                entity.HasOne(d => d.LoanPaymentRefundXrefKeyNavigation)
                    .WithMany(p => p.LoanPaymentOpenEndRefund)
                    .HasForeignKey(d => d.LoanPaymentRefundXrefKey)
                    .HasConstraintName("FK_LoanPaymentOpenEndRefund_LoanPaymentRefundXRef");
            });

            modelBuilder.Entity<LoanPaymentRefund>(entity =>
            {
                entity.HasKey(e => e.LoanPaymentRefundKey)
                    .HasName("PK_LoanPaymentRefund");

                entity.HasIndex(e => new { e.LoanPaymentRefundKey, e.RefundedLoanPaymentKey, e.Reversed, e.DateEntered })
                    .HasName("IX_LoanPaymentRefund_REVERSED_DATE_ENTERED");

                entity.Property(e => e.LoanPaymentRefundKey).HasColumnName("LOAN_PAYMENT_REFUND_KEY");

                entity.Property(e => e.Amount)
                    .HasColumnName("AMOUNT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.IsChargebackToCollections).HasColumnName("IS_CHARGEBACK_TO_COLLECTIONS");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.RefundedLoanPaymentKey).HasColumnName("REFUNDED_LOAN_PAYMENT_KEY");

                entity.Property(e => e.RefundedTransDetailKey).HasColumnName("REFUNDED_TRANS_DETAIL_KEY");

                entity.Property(e => e.ReverseTransDetailKey).HasColumnName("REVERSE_TRANS_DETAIL_KEY");

                entity.Property(e => e.Reversed).HasColumnName("REVERSED");

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");
            });

            modelBuilder.Entity<LoanPaymentRefundXref>(entity =>
            {
                entity.HasKey(e => e.LoanPaymentRefundXrefKey)
                    .HasName("PK_LoanPaymentRefundXRef");

                entity.ToTable("LoanPaymentRefundXRef");

                entity.HasIndex(e => e.RefundedLoanPaymentKey)
                    .HasName("IX_LoanPaymentRefundXRef_REFUNDED_LOAN_PAYMENT_KEY");

                entity.Property(e => e.LoanPaymentRefundXrefKey).HasColumnName("LOAN_PAYMENT_REFUND_XREF_KEY");

                entity.Property(e => e.RefundAmount)
                    .HasColumnName("REFUND_AMOUNT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.RefundLoanPaymentKey).HasColumnName("REFUND_LOAN_PAYMENT_KEY");

                entity.Property(e => e.RefundedLoanPaymentKey).HasColumnName("REFUNDED_LOAN_PAYMENT_KEY");

                entity.HasOne(d => d.RefundLoanPaymentKeyNavigation)
                    .WithMany(p => p.LoanPaymentRefundXrefRefundLoanPaymentKeyNavigation)
                    .HasForeignKey(d => d.RefundLoanPaymentKey)
                    .HasConstraintName("FK_LoanPaymentRefundXRef_REFUND_LOAN_PAYMENT_KEY");

                entity.HasOne(d => d.RefundedLoanPaymentKeyNavigation)
                    .WithMany(p => p.LoanPaymentRefundXrefRefundedLoanPaymentKeyNavigation)
                    .HasForeignKey(d => d.RefundedLoanPaymentKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LoanPaymentRefundXRef_REFUNDED_LOAN_PAYMENT_KEY");
            });

            modelBuilder.Entity<LoanPaymentRescind>(entity =>
            {
                entity.HasKey(e => e.LoanPaymentRescindKey)
                    .HasName("PK_LoanPaymentRescind");

                entity.Property(e => e.LoanPaymentRescindKey).HasColumnName("LOAN_PAYMENT_RESCIND_KEY");

                entity.Property(e => e.CabLenderInterestRebate)
                    .HasColumnName("CAB_LENDER_INTEREST_REBATE")
                    .HasColumnType("numeric");

                entity.Property(e => e.CashAdvanceLoanPaymentKey).HasColumnName("CASH_ADVANCE_LOAN_PAYMENT_KEY");

                entity.Property(e => e.InterestRebate)
                    .HasColumnName("INTEREST_REBATE")
                    .HasColumnType("numeric");

                entity.Property(e => e.LoanPaymentKey).HasColumnName("LOAN_PAYMENT_KEY");

                entity.Property(e => e.RescindAmount)
                    .HasColumnName("RESCIND_AMOUNT")
                    .HasColumnType("smallmoney");

                entity.HasOne(d => d.CashAdvanceLoanPaymentKeyNavigation)
                    .WithMany(p => p.LoanPaymentRescindCashAdvanceLoanPaymentKeyNavigation)
                    .HasForeignKey(d => d.CashAdvanceLoanPaymentKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LoanPaymentRescind_CASH_ADVANCE_LOAN_PAYMENT_KEY");

                entity.HasOne(d => d.LoanPaymentKeyNavigation)
                    .WithMany(p => p.LoanPaymentRescindLoanPaymentKeyNavigation)
                    .HasForeignKey(d => d.LoanPaymentKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LoanPaymentRescind_LOAN_PAYMENT_KEY");
            });

            modelBuilder.Entity<LoanPaymentSpay>(entity =>
            {
                entity.HasKey(e => e.LoanPaymentSpayKey)
                    .HasName("PK_LoanPaymentSPay");

                entity.ToTable("LoanPaymentSPay");

                entity.HasIndex(e => new { e.CollFeeDuePaidAmt, e.LegalFeeDuePaidAmt, e.LoanFeeDuePaidAmt, e.InterestDuePaidAmt, e.CabInterestDuePaidAmt, e.PrincDuePaidAmt, e.LoanPaymentKey })
                    .HasName("IX_LoanPaymentSPay_LOAN_PAYMENT_KEY_INCLUDEd");

                entity.Property(e => e.LoanPaymentSpayKey).HasColumnName("LOAN_PAYMENT_SPAY_KEY");

                entity.Property(e => e.CabInterestDuePaidAmt)
                    .HasColumnName("CAB_INTEREST_DUE_PAID_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CabLenderCollFeePastDuePaidAmt)
                    .HasColumnName("CAB_LENDER_COLL_FEE_PAST_DUE_PAID_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CollFeeDuePaidAmt)
                    .HasColumnName("COLL_FEE_DUE_PAID_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.InterestDuePaidAmt)
                    .HasColumnName("INTEREST_DUE_PAID_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LegalFeeDuePaidAmt)
                    .HasColumnName("LEGAL_FEE_DUE_PAID_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanFeeDuePaidAmt)
                    .HasColumnName("LOAN_FEE_DUE_PAID_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanPaymentKey).HasColumnName("LOAN_PAYMENT_KEY");

                entity.Property(e => e.NsfFeeDuePaidAmt)
                    .HasColumnName("NSF_FEE_DUE_PAID_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PendingSchedAchAmt)
                    .HasColumnName("PENDING_SCHED_ACH_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PrincDuePaidAmt)
                    .HasColumnName("PRINC_DUE_PAID_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TransFeeDuePaidAmt)
                    .HasColumnName("TRANS_FEE_DUE_PAID_AMT")
                    .HasColumnType("smallmoney");

                entity.HasOne(d => d.LoanPaymentKeyNavigation)
                    .WithMany(p => p.LoanPaymentSpay)
                    .HasForeignKey(d => d.LoanPaymentKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LoanPaymentSPay_LoanPaymentSPay");
            });

            modelBuilder.Entity<LoanPaymentSpayRefund>(entity =>
            {
                entity.HasKey(e => e.LoanPaymentSpayRefundKey)
                    .HasName("PK_LoanPaymentSPayRefund");

                entity.ToTable("LoanPaymentSPayRefund");

                entity.HasIndex(e => e.LoanPaymentRefundXrefKey)
                    .HasName("IX_LoanPaymentSPayRefund_LOAN_PAYMENT_REFUND_XREF_KEY");

                entity.Property(e => e.LoanPaymentSpayRefundKey).HasColumnName("LOAN_PAYMENT_SPAY_REFUND_KEY");

                entity.Property(e => e.AccountingLoanPaymentKey).HasColumnName("ACCOUNTING_LOAN_PAYMENT_KEY");

                entity.Property(e => e.CabInterestDueRefunded)
                    .HasColumnName("CAB_INTEREST_DUE_REFUNDED")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CabLenderCollFeeDueRefunded)
                    .HasColumnName("CAB_LENDER_COLL_FEE_DUE_REFUNDED")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CollFeeDueRefunded)
                    .HasColumnName("COLL_FEE_DUE_REFUNDED")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.InterestDueRefunded)
                    .HasColumnName("INTEREST_DUE_REFUNDED")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LegalFeeDueRefunded)
                    .HasColumnName("LEGAL_FEE_DUE_REFUNDED")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanFeeDueRefunded)
                    .HasColumnName("LOAN_FEE_DUE_REFUNDED")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanPaymentRefundXrefKey).HasColumnName("LOAN_PAYMENT_REFUND_XREF_KEY");

                entity.Property(e => e.NsfFeeDueRefunded)
                    .HasColumnName("NSF_FEE_DUE_REFUNDED")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PrincDueRefunded)
                    .HasColumnName("PRINC_DUE_REFUNDED")
                    .HasColumnType("smallmoney");

                entity.HasOne(d => d.LoanPaymentRefundXrefKeyNavigation)
                    .WithMany(p => p.LoanPaymentSpayRefund)
                    .HasForeignKey(d => d.LoanPaymentRefundXrefKey)
                    .HasConstraintName("FK_LoanPaymentSPayRefund_LoanPaymentRefundXRef");
            });

            modelBuilder.Entity<LoanPaymentSuspendInterest>(entity =>
            {
                entity.HasKey(e => e.LoanPaymentSuspendInterestKey)
                    .HasName("PK_LoanPaymentSuspendInterest");

                entity.HasIndex(e => new { e.ResumeInterestDate, e.IsResumeOnPayment, e.Status, e.LoanPaymentSuspendKey })
                    .HasName("IX_LoanPaymentSuspendInterest_LOANPAYMENTSUSPENDKEY");

                entity.Property(e => e.LoanPaymentSuspendInterestKey).HasColumnName("LOAN_PAYMENT_SUSPEND_INTEREST_KEY");

                entity.Property(e => e.IsResumeOnPayment).HasColumnName("IS_RESUME_ON_PAYMENT");

                entity.Property(e => e.LoanPaymentResumeKey).HasColumnName("LOAN_PAYMENT_RESUME_KEY");

                entity.Property(e => e.LoanPaymentSuspendKey).HasColumnName("LOAN_PAYMENT_SUSPEND_KEY");

                entity.Property(e => e.ResumeInterestDate)
                    .HasColumnName("RESUME_INTEREST_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasColumnName("STATUS")
                    .HasColumnType("char(1)");

                entity.HasOne(d => d.LoanPaymentResumeKeyNavigation)
                    .WithMany(p => p.LoanPaymentSuspendInterestLoanPaymentResumeKeyNavigation)
                    .HasForeignKey(d => d.LoanPaymentResumeKey)
                    .HasConstraintName("FK_LoanPaymentSuspendInterest_LoanPaymentKey2");

                entity.HasOne(d => d.LoanPaymentSuspendKeyNavigation)
                    .WithMany(p => p.LoanPaymentSuspendInterestLoanPaymentSuspendKeyNavigation)
                    .HasForeignKey(d => d.LoanPaymentSuspendKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LoanPaymentSuspendInterest_LoanPaymentKey1");
            });

            modelBuilder.Entity<LoanPaymentWaiveRifee>(entity =>
            {
                entity.HasKey(e => e.LoanPaymentWaiveRiFeeKey)
                    .HasName("PK_LoanPaymentWaiveRIFee");

                entity.ToTable("LoanPaymentWaiveRIFee");

                entity.HasIndex(e => e.LoanPaymentKey)
                    .HasName("IX_LoanPaymentWaiveRIFee_LOAN_PAYMENT_KEY");

                entity.Property(e => e.LoanPaymentWaiveRiFeeKey).HasColumnName("LOAN_PAYMENT_WAIVE_RI_FEE_KEY");

                entity.Property(e => e.LoanPaymentKey).HasColumnName("LOAN_PAYMENT_KEY");

                entity.Property(e => e.WaiveRiFeeReasonCode)
                    .IsRequired()
                    .HasColumnName("WAIVE_RI_FEE_REASON_CODE")
                    .HasColumnType("char(1)");

                entity.HasOne(d => d.LoanPaymentKeyNavigation)
                    .WithMany(p => p.LoanPaymentWaiveRifee)
                    .HasForeignKey(d => d.LoanPaymentKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LoanPaymentWaiveRIFee_LOAN_PAYMENT_KEY");
            });

            modelBuilder.Entity<LoanProduct>(entity =>
            {
                entity.HasKey(e => e.LoanProductKey)
                    .HasName("PK_LoanProduct");

                entity.Property(e => e.LoanProductKey).HasColumnName("LOAN_PRODUCT_KEY");

                entity.Property(e => e.BusinessState)
                    .IsRequired()
                    .HasColumnName("BUSINESS_STATE")
                    .HasColumnType("char(2)");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateUpdated)
                    .HasColumnName("DATE_UPDATED")
                    .HasColumnType("datetime");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.IsBusiness).HasColumnName("IS_BUSINESS");

                entity.Property(e => e.IsEasypay).HasColumnName("IS_EASYPAY");

                entity.Property(e => e.IsExpress).HasColumnName("IS_EXPRESS");

                entity.Property(e => e.LoanType)
                    .IsRequired()
                    .HasColumnName("LOAN_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasColumnType("varchar(2000)");

                entity.Property(e => e.ProductName)
                    .IsRequired()
                    .HasColumnName("PRODUCT_NAME")
                    .HasColumnType("varchar(75)");

                entity.Property(e => e.ProductType)
                    .IsRequired()
                    .HasColumnName("PRODUCT_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.UpdatedBy)
                    .HasColumnName("UPDATED_BY")
                    .HasColumnType("char(3)");
            });

            modelBuilder.Entity<LoanProductBlocked>(entity =>
            {
                entity.HasKey(e => e.LoanProductBlockedKey)
                    .HasName("PK_LoanProductBlocked");

                entity.Property(e => e.LoanProductBlockedKey).HasColumnName("LOAN_PRODUCT_BLOCKED_KEY");

                entity.Property(e => e.BlockedAfterTime)
                    .IsRequired()
                    .HasColumnName("BLOCKED_AFTER_TIME")
                    .HasColumnType("varchar(8)");

                entity.Property(e => e.BlockedUntilTime)
                    .IsRequired()
                    .HasColumnName("BLOCKED_UNTIL_TIME")
                    .HasColumnType("varchar(8)");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DateToDelete)
                    .HasColumnName("DATE_TO_DELETE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DayOfWeek).HasColumnName("DAY_OF_WEEK");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.LoanProductKey).HasColumnName("LOAN_PRODUCT_KEY");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.SpecificEndDate)
                    .HasColumnName("SPECIFIC_END_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.SpecificStartDate)
                    .HasColumnName("SPECIFIC_START_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.TypeOfBlock).HasColumnName("TYPE_OF_BLOCK");

                entity.HasOne(d => d.LoanProductKeyNavigation)
                    .WithMany(p => p.LoanProductBlocked)
                    .HasForeignKey(d => d.LoanProductKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LoanProductBlocked_LOAN_PRODUCT_KEY");

                entity.HasOne(d => d.LocationNavigation)
                    .WithMany(p => p.LoanProductBlocked)
                    .HasForeignKey(d => d.Location)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LoanProductBlocked_LOCATION");
            });

            modelBuilder.Entity<LoanProductConfig>(entity =>
            {
                entity.HasKey(e => e.LoanProductConfigKey)
                    .HasName("PK_LoanProductConfig");

                entity.HasIndex(e => e.LoanProductKey)
                    .HasName("IX_LoanProductConfig_LOAN_PRODUCT_KEY");

                entity.Property(e => e.LoanProductConfigKey).HasColumnName("LOAN_PRODUCT_CONFIG_KEY");

                entity.Property(e => e.AppClosedAfterDaysPending).HasColumnName("APP_CLOSED_AFTER_DAYS_PENDING");

                entity.Property(e => e.AppClosedAfterDaysValidated).HasColumnName("APP_CLOSED_AFTER_DAYS_VALIDATED");

                entity.Property(e => e.AppSubmitWaitDays).HasColumnName("APP_SUBMIT_WAIT_DAYS");

                entity.Property(e => e.AprOverridePct)
                    .HasColumnName("APR_OVERRIDE_PCT")
                    .HasColumnType("numeric");

                entity.Property(e => e.AutoRollEnabled).HasColumnName("AUTO_ROLL_ENABLED");

                entity.Property(e => e.AutoRollMinDaysNoNewLoan).HasColumnName("AUTO_ROLL_MIN_DAYS_NO_NEW_LOAN");

                entity.Property(e => e.Buydown3rdRollover10pctEnabled).HasColumnName("BUYDOWN_3RD_ROLLOVER_10PCT_ENABLED");

                entity.Property(e => e.BuydownMaxAmt)
                    .HasColumnName("BUYDOWN_MAX_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.BuydownRequiredAtRolloverCount).HasColumnName("BUYDOWN_REQUIRED_AT_ROLLOVER_COUNT");

                entity.Property(e => e.BuydownRequiredEnabled).HasColumnName("BUYDOWN_REQUIRED_ENABLED");

                entity.Property(e => e.BuydownRequiredPct).HasColumnName("BUYDOWN_REQUIRED_PCT");

                entity.Property(e => e.BuydownRequiredType).HasColumnName("BUYDOWN_REQUIRED_TYPE");

                entity.Property(e => e.BuydownZeroRecInsteadLastEnabled).HasColumnName("BUYDOWN_ZERO_REC_INSTEAD_LAST_ENABLED");

                entity.Property(e => e.BuyupMaxAmt)
                    .HasColumnName("BUYUP_MAX_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CabLenderAnnualInterestPct)
                    .HasColumnName("CAB_LENDER_ANNUAL_INTEREST_PCT")
                    .HasColumnType("numeric");

                entity.Property(e => e.CabLenderFiFeePct).HasColumnName("CAB_LENDER_FI_FEE_PCT");

                entity.Property(e => e.CabLenderRiFeeMin)
                    .HasColumnName("CAB_LENDER_RI_FEE_MIN")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CabLenderRiFeePerDefault)
                    .HasColumnName("CAB_LENDER_RI_FEE_PER_DEFAULT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CabLenderRiFeesPerLoan).HasColumnName("CAB_LENDER_RI_FEES_PER_LOAN");

                entity.Property(e => e.CheckDepositDays).HasColumnName("CHECK_DEPOSIT_DAYS");

                entity.Property(e => e.CoolingOffDays).HasColumnName("COOLING_OFF_DAYS");

                entity.Property(e => e.CoolingOffEnabled).HasColumnName("COOLING_OFF_ENABLED");

                entity.Property(e => e.CoolingOffKansasEnabled).HasColumnName("COOLING_OFF_KANSAS_ENABLED");

                entity.Property(e => e.CoolingOffKansasHours).HasColumnName("COOLING_OFF_KANSAS_HOURS");

                entity.Property(e => e.CoolingOffOklahomaDaysAfter).HasColumnName("COOLING_OFF_OKLAHOMA_DAYS_AFTER");

                entity.Property(e => e.CoolingOffOklahomaEnabled).HasColumnName("COOLING_OFF_OKLAHOMA_ENABLED");

                entity.Property(e => e.CoolingOffOklahomaPtpDaysAfter).HasColumnName("COOLING_OFF_OKLAHOMA_PTP_DAYS_AFTER");

                entity.Property(e => e.CoolingOffOregonDaysAfter).HasColumnName("COOLING_OFF_OREGON_DAYS_AFTER");

                entity.Property(e => e.CoolingOffOregonDaysBefore).HasColumnName("COOLING_OFF_OREGON_DAYS_BEFORE");

                entity.Property(e => e.CoolingOffReqTillPayoffDay).HasColumnName("COOLING_OFF_REQ_TILL_PAYOFF_DAY");

                entity.Property(e => e.CustomerMinAge).HasColumnName("CUSTOMER_MIN_AGE");

                entity.Property(e => e.CutRateIsEnabled).HasColumnName("CUT_RATE_IS_ENABLED");

                entity.Property(e => e.CutRateMinNumDaysBetweenLoans).HasColumnName("CUT_RATE_MIN_NUM_DAYS_BETWEEN_LOANS");

                entity.Property(e => e.CutRateNumSpayLoans).HasColumnName("CUT_RATE_NUM_SPAY_LOANS");

                entity.Property(e => e.CutRateOnLoansWithinDays).HasColumnName("CUT_RATE_ON_LOANS_WITHIN_DAYS");

                entity.Property(e => e.CutRateWithinDays).HasColumnName("CUT_RATE_WITHIN_DAYS");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateUpdated)
                    .HasColumnName("DATE_UPDATED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DaysCashOnlyPayoff).HasColumnName("DAYS_CASH_ONLY_PAYOFF");

                entity.Property(e => e.DepositMethodAchDayAfterDueDateEnabled).HasColumnName("DEPOSIT_METHOD_ACH_DAY_AFTER_DUE_DATE_ENABLED");

                entity.Property(e => e.DepositMethodAutoPayCalcOrderEnabled).HasColumnName("DEPOSIT_METHOD_AUTO_PAY_CALC_ORDER_ENABLED");

                entity.Property(e => e.DepositMethodAutoPayCalcOrderRuleDefSetKey).HasColumnName("DEPOSIT_METHOD_AUTO_PAY_CALC_ORDER_RULE_DEF_SET_KEY");

                entity.Property(e => e.DepositMethodAutoPayCalcStartDate)
                    .HasColumnName("DEPOSIT_METHOD_AUTO_PAY_CALC_START_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.DepositMethodAutoPayEnabled).HasColumnName("DEPOSIT_METHOD_AUTO_PAY_ENABLED");

                entity.Property(e => e.DepositMethodAutoPayOrder).HasColumnName("DEPOSIT_METHOD_AUTO_PAY_ORDER");

                entity.Property(e => e.DepositMethodAutoPayoffThresholdAmt)
                    .HasColumnName("DEPOSIT_METHOD_AUTO_PAYOFF_THRESHOLD_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.DepositMethodChecksEnabled).HasColumnName("DEPOSIT_METHOD_CHECKS_ENABLED");

                entity.Property(e => e.DepositMethodChecksOrder).HasColumnName("DEPOSIT_METHOD_CHECKS_ORDER");

                entity.Property(e => e.DepositMethodDebitCardWithChecksEnabled).HasColumnName("DEPOSIT_METHOD_DEBIT_CARD_WITH_CHECKS_ENABLED");

                entity.Property(e => e.DepositMethodExcludeDcardFromMiddayEnabled).HasColumnName("DEPOSIT_METHOD_EXCLUDE_DCARD_FROM_MIDDAY_ENABLED");

                entity.Property(e => e.DiscountsAffectCashEnabled).HasColumnName("DISCOUNTS_AFFECT_CASH_ENABLED");

                entity.Property(e => e.DiscountsEnabled).HasColumnName("DISCOUNTS_ENABLED");

                entity.Property(e => e.DueDateAdjustForHolidaysAndWeekendsMethod).HasColumnName("DUE_DATE_ADJUST_FOR_HOLIDAYS_AND_WEEKENDS_METHOD");

                entity.Property(e => e.DueDateCalcPriorToPaydate).HasColumnName("DUE_DATE_CALC_PRIOR_TO_PAYDATE");

                entity.Property(e => e.DueDateChangeEnabled).HasColumnName("DUE_DATE_CHANGE_ENABLED");

                entity.Property(e => e.DueDateMaxExtBeyondDays).HasColumnName("DUE_DATE_MAX_EXT_BEYOND_DAYS");

                entity.Property(e => e.DueDateMaxExtDays).HasColumnName("DUE_DATE_MAX_EXT_DAYS");

                entity.Property(e => e.DueDateMinDaysBeforeChange).HasColumnName("DUE_DATE_MIN_DAYS_BEFORE_CHANGE");

                entity.Property(e => e.DueDatePaymentQueueEnabled).HasColumnName("DUE_DATE_PAYMENT_QUEUE_ENABLED");

                entity.Property(e => e.EasypayItemsPerLoan).HasColumnName("EASYPAY_ITEMS_PER_LOAN");

                entity.Property(e => e.EnableBcPplan).HasColumnName("ENABLE_BC_PPLAN");

                entity.Property(e => e.EnableColoradoMaintFees).HasColumnName("ENABLE_COLORADO_MAINT_FEES");

                entity.Property(e => e.EnableDeclinedAutoPayChgChkAcct).HasColumnName("ENABLE_DECLINED_AUTO_PAY_CHG_CHK_ACCT");

                entity.Property(e => e.EnableDeclinedAutoPayNewLoan).HasColumnName("ENABLE_DECLINED_AUTO_PAY_NEW_LOAN");

                entity.Property(e => e.EnableDefaultDate).HasColumnName("ENABLE_DEFAULT_DATE");

                entity.Property(e => e.EnableJointLoans).HasColumnName("ENABLE_JOINT_LOANS");

                entity.Property(e => e.EnableMaxLoanAmtOverrideOnBuyup).HasColumnName("ENABLE_MAX_LOAN_AMT_OVERRIDE_ON_BUYUP");

                entity.Property(e => e.EnableMiddayExcludeToday).HasColumnName("ENABLE_MIDDAY_EXCLUDE_TODAY");

                entity.Property(e => e.EnableNewLoanDualAuthWithoutBankacct).HasColumnName("ENABLE_NEW_LOAN_DUAL_AUTH_WITHOUT_BANKACCT");

                entity.Property(e => e.EnableNewLoanDualAuthWithoutCcard).HasColumnName("ENABLE_NEW_LOAN_DUAL_AUTH_WITHOUT_CCARD");

                entity.Property(e => e.EnablePartialPayment).HasColumnName("ENABLE_PARTIAL_PAYMENT");

                entity.Property(e => e.EnablePayInFull).HasColumnName("ENABLE_PAY_IN_FULL");

                entity.Property(e => e.EnablePplan).HasColumnName("ENABLE_PPLAN");

                entity.Property(e => e.EnablePromptForCheckAmt).HasColumnName("ENABLE_PROMPT_FOR_CHECK_AMT");

                entity.Property(e => e.EnableRbcEfund).HasColumnName("ENABLE_RBC_EFUND");

                entity.Property(e => e.EnableSpanishDocs).HasColumnName("ENABLE_SPANISH_DOCS");

                entity.Property(e => e.EnableStateLoanTerm).HasColumnName("ENABLE_STATE_LOAN_TERM");

                entity.Property(e => e.EnableStoreFundAccountValidationPrompt).HasColumnName("ENABLE_STORE_FUND_ACCOUNT_VALIDATION_PROMPT");

                entity.Property(e => e.EnableStoreFundLoan).HasColumnName("ENABLE_STORE_FUND_LOAN");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.FasterPaymentsFeeAmt)
                    .HasColumnName("FASTER_PAYMENTS_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.FeesAndInterestCapAffordabilityDisposableIncomePctMultiplier).HasColumnName("FEES_AND_INTEREST_CAP_AFFORDABILITY_DISPOSABLE_INCOME_PCT_MULTIPLIER");

                entity.Property(e => e.FeesAndInterestCapAffordabilityEnabled).HasColumnName("FEES_AND_INTEREST_CAP_AFFORDABILITY_ENABLED");

                entity.Property(e => e.FeesAndInterestCapEnabled).HasColumnName("FEES_AND_INTEREST_CAP_ENABLED");

                entity.Property(e => e.FeesAndInterestCapIncludeFees).HasColumnName("FEES_AND_INTEREST_CAP_INCLUDE_FEES");

                entity.Property(e => e.FeesAndInterestCapIncludeInterest).HasColumnName("FEES_AND_INTEREST_CAP_INCLUDE_INTEREST");

                entity.Property(e => e.FeesAndInterestCapPct).HasColumnName("FEES_AND_INTEREST_CAP_PCT");

                entity.Property(e => e.FundUsingFedScheduleEnabled).HasColumnName("FUND_USING_FED_SCHEDULE_ENABLED");

                entity.Property(e => e.GovtIdRequiredEnabled).HasColumnName("GOVT_ID_REQUIRED_ENABLED");

                entity.Property(e => e.IncomeNetAmtMin)
                    .HasColumnName("INCOME_NET_AMT_MIN")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.IndebtednessMaxDays).HasColumnName("INDEBTEDNESS_MAX_DAYS");

                entity.Property(e => e.InsuranceCancelGracePeriodDays).HasColumnName("INSURANCE_CANCEL_GRACE_PERIOD_DAYS");

                entity.Property(e => e.InsuranceCancelRequestDays).HasColumnName("INSURANCE_CANCEL_REQUEST_DAYS");

                entity.Property(e => e.InsuranceCogsPct)
                    .HasColumnName("INSURANCE_COGS_PCT")
                    .HasColumnType("decimal");

                entity.Property(e => e.InsuranceRateTableEnabled).HasColumnName("INSURANCE_RATE_TABLE_ENABLED");

                entity.Property(e => e.InsuranceTaxPct)
                    .HasColumnName("INSURANCE_TAX_PCT")
                    .HasColumnType("decimal")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.InterestAmortTableCapEnabled).HasColumnName("INTEREST_AMORT_TABLE_CAP_ENABLED");

                entity.Property(e => e.InterestAnnualRateDebitRatePct)
                    .HasColumnName("INTEREST_ANNUAL_RATE_DEBIT_RATE_PCT")
                    .HasColumnType("decimal");

                entity.Property(e => e.InterestAnnualRatePct)
                    .HasColumnName("INTEREST_ANNUAL_RATE_PCT")
                    .HasColumnType("numeric");

                entity.Property(e => e.InterestAnnualRateUseTableEnabled).HasColumnName("INTEREST_ANNUAL_RATE_USE_TABLE_ENABLED");

                entity.Property(e => e.InterestBasedOnPastDueEnabled).HasColumnName("INTEREST_BASED_ON_PAST_DUE_ENABLED");

                entity.Property(e => e.InterestChargedAfterMaturityEnabled).HasColumnName("INTEREST_CHARGED_AFTER_MATURITY_ENABLED");

                entity.Property(e => e.InterestDeclinedAutoPayPct)
                    .HasColumnName("INTEREST_DECLINED_AUTO_PAY_PCT")
                    .HasColumnType("numeric");

                entity.Property(e => e.InterestMinAnnualRateOverridePct)
                    .HasColumnName("INTEREST_MIN_ANNUAL_RATE_OVERRIDE_PCT")
                    .HasColumnType("numeric");

                entity.Property(e => e.InterestMinDays).HasColumnName("INTEREST_MIN_DAYS");

                entity.Property(e => e.InterestMinEnabled).HasColumnName("INTEREST_MIN_ENABLED");

                entity.Property(e => e.InterestRateCalcIncludesFeeEnabled).HasColumnName("INTEREST_RATE_CALC_INCLUDES_FEE_ENABLED");

                entity.Property(e => e.InterestRateNegotiationEnabled).HasColumnName("INTEREST_RATE_NEGOTIATION_ENABLED");

                entity.Property(e => e.InterestRateOverrideEnabled).HasColumnName("INTEREST_RATE_OVERRIDE_ENABLED");

                entity.Property(e => e.InterestUseLowestRateFromNewOrOpenEnabled).HasColumnName("INTEREST_USE_LOWEST_RATE_FROM_NEW_OR_OPEN_ENABLED");

                entity.Property(e => e.LimitNewLoanDaysAfterPayoff).HasColumnName("LIMIT_NEW_LOAN_DAYS_AFTER_PAYOFF");

                entity.Property(e => e.LimitNewLoanDaysNextLoan).HasColumnName("LIMIT_NEW_LOAN_DAYS_NEXT_LOAN");

                entity.Property(e => e.LoanAmtDefaultAmt)
                    .HasColumnName("LOAN_AMT_DEFAULT_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanAmtMaxAllowOverrideLoanAmtWithFees).HasColumnName("LOAN_AMT_MAX_ALLOW_OVERRIDE_LOAN_AMT_WITH_FEES");

                entity.Property(e => e.LoanAmtMaxAmt)
                    .HasColumnName("LOAN_AMT_MAX_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanAmtMaxIncludesFeeEnabled).HasColumnName("LOAN_AMT_MAX_INCLUDES_FEE_ENABLED");

                entity.Property(e => e.LoanAmtMaxIncludesOpenPrincSubsequentLoans).HasColumnName("LOAN_AMT_MAX_INCLUDES_OPEN_PRINC_SUBSEQUENT_LOANS");

                entity.Property(e => e.LoanAmtMaxMultiAmt)
                    .HasColumnName("LOAN_AMT_MAX_MULTI_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanAmtMaxPreviousAmtAnyProduct).HasColumnName("LOAN_AMT_MAX_PREVIOUS_AMT_ANY_PRODUCT");

                entity.Property(e => e.LoanAmtMgrOverrideAmt)
                    .HasColumnName("LOAN_AMT_MGR_OVERRIDE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanAmtMgrOverrideMinAmt)
                    .HasColumnName("LOAN_AMT_MGR_OVERRIDE_MIN_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanAmtMgrOverridePct).HasColumnName("LOAN_AMT_MGR_OVERRIDE_PCT");

                entity.Property(e => e.LoanAmtMinAmt)
                    .HasColumnName("LOAN_AMT_MIN_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanAmtPriorAmtCapEnabled).HasColumnName("LOAN_AMT_PRIOR_AMT_CAP_ENABLED");

                entity.Property(e => e.LoanConfigApplyPaymentOrderKey).HasColumnName("LOAN_CONFIG_APPLY_PAYMENT_ORDER_KEY");

                entity.Property(e => e.LoanFeeAmt1)
                    .HasColumnName("LOAN_FEE_AMT_1")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanFeeAmt2)
                    .HasColumnName("LOAN_FEE_AMT_2")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanFeeBasedOnLengthEnabled).HasColumnName("LOAN_FEE_BASED_ON_LENGTH_ENABLED");

                entity.Property(e => e.LoanFeeForRolloverAmt)
                    .HasColumnName("LOAN_FEE_FOR_ROLLOVER_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanFeeInclDocPrepFeeAmt)
                    .HasColumnName("LOAN_FEE_INCL_DOC_PREP_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanFeeMaxAmt)
                    .HasColumnName("LOAN_FEE_MAX_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanFeeMethod)
                    .IsRequired()
                    .HasColumnName("LOAN_FEE_METHOD")
                    .HasColumnType("char(1)");

                entity.Property(e => e.LoanFeeMinAmt)
                    .HasColumnName("LOAN_FEE_MIN_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanFeeMinToOverridePct)
                    .HasColumnName("LOAN_FEE_MIN_TO_OVERRIDE_PCT")
                    .HasColumnType("numeric");

                entity.Property(e => e.LoanFeePct)
                    .HasColumnName("LOAN_FEE_PCT")
                    .HasColumnType("numeric");

                entity.Property(e => e.LoanFeeTruncateEnabled).HasColumnName("LOAN_FEE_TRUNCATE_ENABLED");

                entity.Property(e => e.LoanFeeUseTableEnabled).HasColumnName("LOAN_FEE_USE_TABLE_ENABLED");

                entity.Property(e => e.LoanFeeWaiveOnBuyupWithinDays).HasColumnName("LOAN_FEE_WAIVE_ON_BUYUP_WITHIN_DAYS");

                entity.Property(e => e.LoanLengthChangeEnabled).HasColumnName("LOAN_LENGTH_CHANGE_ENABLED");

                entity.Property(e => e.LoanLengthDefaultDays).HasColumnName("LOAN_LENGTH_DEFAULT_DAYS");

                entity.Property(e => e.LoanLengthDefaultIsCeiling).HasColumnName("LOAN_LENGTH_DEFAULT_IS_CEILING");

                entity.Property(e => e.LoanLengthDefaultIsFloor).HasColumnName("LOAN_LENGTH_DEFAULT_IS_FLOOR");

                entity.Property(e => e.LoanLengthDefaultMonths).HasColumnName("LOAN_LENGTH_DEFAULT_MONTHS");

                entity.Property(e => e.LoanLengthDefaultPayments).HasColumnName("LOAN_LENGTH_DEFAULT_PAYMENTS");

                entity.Property(e => e.LoanLengthEffectiveDateEnabled).HasColumnName("LOAN_LENGTH_EFFECTIVE_DATE_ENABLED");

                entity.Property(e => e.LoanLengthEffectiveDays).HasColumnName("LOAN_LENGTH_EFFECTIVE_DAYS");

                entity.Property(e => e.LoanLengthMaxDays).HasColumnName("LOAN_LENGTH_MAX_DAYS");

                entity.Property(e => e.LoanLengthMaxDaysExtBeyondMaxSystem).HasColumnName("LOAN_LENGTH_MAX_DAYS_EXT_BEYOND_MAX_SYSTEM");

                entity.Property(e => e.LoanLengthMaxDaysMonthly).HasColumnName("LOAN_LENGTH_MAX_DAYS_MONTHLY");

                entity.Property(e => e.LoanLengthMaxDaysNonMonthly).HasColumnName("LOAN_LENGTH_MAX_DAYS_NON_MONTHLY");

                entity.Property(e => e.LoanLengthMaxMonths).HasColumnName("LOAN_LENGTH_MAX_MONTHS");

                entity.Property(e => e.LoanLengthMaxPayments).HasColumnName("LOAN_LENGTH_MAX_PAYMENTS");

                entity.Property(e => e.LoanLengthMaxRollDays).HasColumnName("LOAN_LENGTH_MAX_ROLL_DAYS");

                entity.Property(e => e.LoanLengthMaxRollDaysType)
                    .IsRequired()
                    .HasColumnName("LOAN_LENGTH_MAX_ROLL_DAYS_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.LoanLengthMaxSeriesDays).HasColumnName("LOAN_LENGTH_MAX_SERIES_DAYS");

                entity.Property(e => e.LoanLengthMinDays).HasColumnName("LOAN_LENGTH_MIN_DAYS");

                entity.Property(e => e.LoanLengthMinDaysChecksMonthly).HasColumnName("LOAN_LENGTH_MIN_DAYS_CHECKS_MONTHLY");

                entity.Property(e => e.LoanLengthMinDaysChecksNonMonthly).HasColumnName("LOAN_LENGTH_MIN_DAYS_CHECKS_NON_MONTHLY");

                entity.Property(e => e.LoanLengthMinDaysDebitCardsMonthly).HasColumnName("LOAN_LENGTH_MIN_DAYS_DEBIT_CARDS_MONTHLY");

                entity.Property(e => e.LoanLengthMinDaysDebitCardsNonMonthly).HasColumnName("LOAN_LENGTH_MIN_DAYS_DEBIT_CARDS_NON_MONTHLY");

                entity.Property(e => e.LoanLengthMinMonths).HasColumnName("LOAN_LENGTH_MIN_MONTHS");

                entity.Property(e => e.LoanLengthMinPayments).HasColumnName("LOAN_LENGTH_MIN_PAYMENTS");

                entity.Property(e => e.LoanProductKey).HasColumnName("LOAN_PRODUCT_KEY");

                entity.Property(e => e.LoanQualEnabled).HasColumnName("LOAN_QUAL_ENABLED");

                entity.Property(e => e.LoanQualIncreaseForDirectDepositAmt)
                    .HasColumnName("LOAN_QUAL_INCREASE_FOR_DIRECT_DEPOSIT_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanQualIncreaseForSuccessfulLoansAmt)
                    .HasColumnName("LOAN_QUAL_INCREASE_FOR_SUCCESSFUL_LOANS_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanQualIncreaseForValidDebitCardAmt)
                    .HasColumnName("LOAN_QUAL_INCREASE_FOR_VALID_DEBIT_CARD_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanQualIncreaseSuccessfulLoansCount).HasColumnName("LOAN_QUAL_INCREASE_SUCCESSFUL_LOANS_COUNT");

                entity.Property(e => e.LoanQualVerifyBankAcctAfterDays).HasColumnName("LOAN_QUAL_VERIFY_BANK_ACCT_AFTER_DAYS");

                entity.Property(e => e.LoanQualVerifyDaysFromLastLoan).HasColumnName("LOAN_QUAL_VERIFY_DAYS_FROM_LAST_LOAN");

                entity.Property(e => e.MaxApprovalPctOfIncome)
                    .HasColumnName("MAX_APPROVAL_PCT_OF_INCOME")
                    .HasColumnType("decimal");

                entity.Property(e => e.MaxApprovalPctOfIncomeEnabled).HasColumnName("MAX_APPROVAL_PCT_OF_INCOME_ENABLED");

                entity.Property(e => e.MaxApprovalPctOfIncomeGrossOrNet)
                    .IsRequired()
                    .HasColumnName("MAX_APPROVAL_PCT_OF_INCOME_GROSS_OR_NET")
                    .HasColumnType("char(1)");

                entity.Property(e => e.MaxApprovalPctOfIncomeIncludeOpenLoansEnabled).HasColumnName("MAX_APPROVAL_PCT_OF_INCOME_INCLUDE_OPEN_LOANS_ENABLED");

                entity.Property(e => e.MaxCollectionDaysToAllowRollover).HasColumnName("MAX_COLLECTION_DAYS_TO_ALLOW_ROLLOVER");

                entity.Property(e => e.MaxConsecutiveFailedAttempts).HasColumnName("MAX_CONSECUTIVE_FAILED_ATTEMPTS");

                entity.Property(e => e.MaxConsecutiveFailedAttemptsEnabled).HasColumnName("MAX_CONSECUTIVE_FAILED_ATTEMPTS_ENABLED");

                entity.Property(e => e.MaxConsecutiveFailedAttemptsMethod).HasColumnName("MAX_CONSECUTIVE_FAILED_ATTEMPTS_METHOD");

                entity.Property(e => e.MaxLoanAmtRateTableEnabled).HasColumnName("MAX_LOAN_AMT_RATE_TABLE_ENABLED");

                entity.Property(e => e.MaxLoansCountSpouseOpenLoansEnabled).HasColumnName("MAX_LOANS_COUNT_SPOUSE_OPEN_LOANS_ENABLED");

                entity.Property(e => e.MaxLoansIncludeRolloverEnabled).HasColumnName("MAX_LOANS_INCLUDE_ROLLOVER_ENABLED");

                entity.Property(e => e.MaxLoansPerDay).HasColumnName("MAX_LOANS_PER_DAY");

                entity.Property(e => e.MaxLoansPerYear).HasColumnName("MAX_LOANS_PER_YEAR");

                entity.Property(e => e.MaxMultiAmtExcludeFeeOnNewLoanEnabled).HasColumnName("MAX_MULTI_AMT_EXCLUDE_FEE_ON_NEW_LOAN_ENABLED");

                entity.Property(e => e.MaxOpenLoansCount).HasColumnName("MAX_OPEN_LOANS_COUNT");

                entity.Property(e => e.MaxOpenLoansPctOfIncome)
                    .HasColumnName("MAX_OPEN_LOANS_PCT_OF_INCOME")
                    .HasColumnType("decimal");

                entity.Property(e => e.MaxOpenLoansPctOfIncomeGrossOrNet)
                    .IsRequired()
                    .HasColumnName("MAX_OPEN_LOANS_PCT_OF_INCOME_GROSS_OR_NET")
                    .HasColumnType("char(1)");

                entity.Property(e => e.MaxPaymentDeductMortgageFromIncomeEnabled).HasColumnName("MAX_PAYMENT_DEDUCT_MORTGAGE_FROM_INCOME_ENABLED");

                entity.Property(e => e.MaxPaymentGrossOrNet)
                    .IsRequired()
                    .HasColumnName("MAX_PAYMENT_GROSS_OR_NET")
                    .HasColumnType("char(1)");

                entity.Property(e => e.MaxPaymentGrossOrNetAllOpenLoans)
                    .IsRequired()
                    .HasColumnName("MAX_PAYMENT_GROSS_OR_NET_ALL_OPEN_LOANS")
                    .HasColumnType("char(1)");

                entity.Property(e => e.MaxPaymentIncludeOpenLoansEnabled).HasColumnName("MAX_PAYMENT_INCLUDE_OPEN_LOANS_ENABLED");

                entity.Property(e => e.MaxPaymentPctOfIncome)
                    .HasColumnName("MAX_PAYMENT_PCT_OF_INCOME")
                    .HasColumnType("decimal");

                entity.Property(e => e.MaxPaymentPctOfIncomeAllOpenLoans)
                    .HasColumnName("MAX_PAYMENT_PCT_OF_INCOME_ALL_OPEN_LOANS")
                    .HasColumnType("decimal");

                entity.Property(e => e.MaxPaymentPctOfIncomeAllOpenLoansEnabled).HasColumnName("MAX_PAYMENT_PCT_OF_INCOME_ALL_OPEN_LOANS_ENABLED");

                entity.Property(e => e.MaxPaymentPctOfIncomeEnabled).HasColumnName("MAX_PAYMENT_PCT_OF_INCOME_ENABLED");

                entity.Property(e => e.MaxPaymentSumPaymentsPerMonthEnabled).HasColumnName("MAX_PAYMENT_SUM_PAYMENTS_PER_MONTH_ENABLED");

                entity.Property(e => e.MaxTotalCollectionsAchAttemptsPerDay).HasColumnName("MAX_TOTAL_COLLECTIONS_ACH_ATTEMPTS_PER_DAY");

                entity.Property(e => e.MaxTotalCollectionsAchAttemptsPerDayEnabled).HasColumnName("MAX_TOTAL_COLLECTIONS_ACH_ATTEMPTS_PER_DAY_ENABLED");

                entity.Property(e => e.MonthlyCustUseNonmonthyMaxDaysEnabled).HasColumnName("MONTHLY_CUST_USE_NONMONTHY_MAX_DAYS_ENABLED");

                entity.Property(e => e.NextNewLoanOriginationFeeGracePeriodDays).HasColumnName("NEXT_NEW_LOAN_ORIGINATION_FEE_GRACE_PERIOD_DAYS");

                entity.Property(e => e.NoOverrideOpenLoanEnabled).HasColumnName("NO_OVERRIDE_OPEN_LOAN_ENABLED");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasColumnType("varchar(2000)");

                entity.Property(e => e.OutOfWalletEnabled).HasColumnName("OUT_OF_WALLET_ENABLED");

                entity.Property(e => e.OverridePctAmtOfIncome)
                    .HasColumnName("OVERRIDE_PCT_AMT_OF_INCOME")
                    .HasColumnType("decimal");

                entity.Property(e => e.OverridePctIncomeGrossOrNet)
                    .IsRequired()
                    .HasColumnName("OVERRIDE_PCT_INCOME_GROSS_OR_NET")
                    .HasColumnType("char(1)");

                entity.Property(e => e.PaymentBlackoutHours).HasColumnName("PAYMENT_BLACKOUT_HOURS");

                entity.Property(e => e.PaymentSchedAmortMethod).HasColumnName("PAYMENT_SCHED_AMORT_METHOD");

                entity.Property(e => e.PaymentSchedDueCycleChangesPerLoanSeries).HasColumnName("PAYMENT_SCHED_DUE_CYCLE_CHANGES_PER_LOAN_SERIES");

                entity.Property(e => e.PaymentSchedDueDateMatchEnabled).HasColumnName("PAYMENT_SCHED_DUE_DATE_MATCH_ENABLED");

                entity.Property(e => e.PaymentSchedSelectPayCycleEnabled).HasColumnName("PAYMENT_SCHED_SELECT_PAY_CYCLE_ENABLED");

                entity.Property(e => e.PaymentSchedUseCustomerPayCycle).HasColumnName("PAYMENT_SCHED_USE_CUSTOMER_PAY_CYCLE");

                entity.Property(e => e.PaymentSchedUseNextPaydateWithinDaysBiweekly).HasColumnName("PAYMENT_SCHED_USE_NEXT_PAYDATE_WITHIN_DAYS_BIWEEKLY");

                entity.Property(e => e.PaymentSchedUseNextPaydateWithinDaysMonthly).HasColumnName("PAYMENT_SCHED_USE_NEXT_PAYDATE_WITHIN_DAYS_MONTHLY");

                entity.Property(e => e.PaymentSchedWeeks).HasColumnName("PAYMENT_SCHED_WEEKS");

                entity.Property(e => e.PendingPaymentsAsUnpaidForNewLoan).HasColumnName("PENDING_PAYMENTS_AS_UNPAID_FOR_NEW_LOAN");

                entity.Property(e => e.PrincAmtMatchLoanFeeRateTable).HasColumnName("PRINC_AMT_MATCH_LOAN_FEE_RATE_TABLE");

                entity.Property(e => e.PrincAmtMatchMaxLoanAmtRateTable).HasColumnName("PRINC_AMT_MATCH_MAX_LOAN_AMT_RATE_TABLE");

                entity.Property(e => e.RbcFundingTimeoutDays)
                    .HasColumnName("RBC_FUNDING_TIMEOUT_DAYS")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.RebateAnnualInterestEnabled).HasColumnName("REBATE_ANNUAL_INTEREST_ENABLED");

                entity.Property(e => e.RebateColoradoEarlyPayoffEnabled).HasColumnName("REBATE_COLORADO_EARLY_PAYOFF_ENABLED");

                entity.Property(e => e.RebateGracePeriodDays).HasColumnName("REBATE_GRACE_PERIOD_DAYS");

                entity.Property(e => e.RebateGracePeriodOrigFeeEnabled).HasColumnName("REBATE_GRACE_PERIOD_ORIG_FEE_ENABLED");

                entity.Property(e => e.RebateLimitPct).HasColumnName("REBATE_LIMIT_PCT");

                entity.Property(e => e.RebateMaxDaysToPayAfterWithdraw).HasColumnName("REBATE_MAX_DAYS_TO_PAY_AFTER_WITHDRAW");

                entity.Property(e => e.RebateOnRolloverEnabled).HasColumnName("REBATE_ON_ROLLOVER_ENABLED");

                entity.Property(e => e.RebateOrigFeeEnabled).HasColumnName("REBATE_ORIG_FEE_ENABLED");

                entity.Property(e => e.ReduceApprovalEnabled).HasColumnName("REDUCE_APPROVAL_ENABLED");

                entity.Property(e => e.ReduceApprovalGrossOrNetIncome)
                    .IsRequired()
                    .HasColumnName("REDUCE_APPROVAL_GROSS_OR_NET_INCOME")
                    .HasColumnType("char(1)");

                entity.Property(e => e.ReduceApprovalIncomePercentMultiplier).HasColumnName("REDUCE_APPROVAL_INCOME_PERCENT_MULTIPLIER");

                entity.Property(e => e.ReduceApprovalWhenLessThanAmt).HasColumnName("REDUCE_APPROVAL_WHEN_LESS_THAN_AMT");

                entity.Property(e => e.ReduceApprovalWhenLessThanPct).HasColumnName("REDUCE_APPROVAL_WHEN_LESS_THAN_PCT");

                entity.Property(e => e.RequireDebitCard).HasColumnName("REQUIRE_DEBIT_CARD");

                entity.Property(e => e.RequireNotifySpouseByMail).HasColumnName("REQUIRE_NOTIFY_SPOUSE_BY_MAIL");

                entity.Property(e => e.RequireVerbalReview).HasColumnName("REQUIRE_VERBAL_REVIEW");

                entity.Property(e => e.RevisionNum).HasColumnName("REVISION_NUM");

                entity.Property(e => e.RiCyclesPastDueCalcType).HasColumnName("RI_CYCLES_PAST_DUE_CALC_TYPE");

                entity.Property(e => e.RiFeeAssessOnDay).HasColumnName("RI_FEE_ASSESS_ON_DAY");

                entity.Property(e => e.RiFeeChargeForDebitCardAmt)
                    .HasColumnName("RI_FEE_CHARGE_FOR_DEBIT_CARD_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.RiFeeExcludeProtectedAuditCatEnabled).HasColumnName("RI_FEE_EXCLUDE_PROTECTED_AUDIT_CAT_ENABLED");

                entity.Property(e => e.RiFeeMaxPerLoanAmt)
                    .HasColumnName("RI_FEE_MAX_PER_LOAN_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.RiFeeMaxPerLoanCount).HasColumnName("RI_FEE_MAX_PER_LOAN_COUNT");

                entity.Property(e => e.RiFeeMaxPerLoanSeriesAmt).HasColumnName("RI_FEE_MAX_PER_LOAN_SERIES_AMT");

                entity.Property(e => e.RiFeeMinAmt)
                    .HasColumnName("RI_FEE_MIN_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.RiFeeNoFee3rdRollEnabled).HasColumnName("RI_FEE_NO_FEE_3RD_ROLL_ENABLED");

                entity.Property(e => e.RiFeeNoFeeOpenRiEnabled).HasColumnName("RI_FEE_NO_FEE_OPEN_RI_ENABLED");

                entity.Property(e => e.RiFeeNoFeeStopPayEnabled).HasColumnName("RI_FEE_NO_FEE_STOP_PAY_ENABLED");

                entity.Property(e => e.RiFeePerDefaultAmt)
                    .HasColumnName("RI_FEE_PER_DEFAULT_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.RiFeePerDefaultPct).HasColumnName("RI_FEE_PER_DEFAULT_PCT");

                entity.Property(e => e.RiFeeRequiresBankAccount).HasColumnName("RI_FEE_REQUIRES_BANK_ACCOUNT");

                entity.Property(e => e.RiFeeWaivePct).HasColumnName("RI_FEE_WAIVE_PCT");

                entity.Property(e => e.RiGracePeriodDaysNonProtectedAuditCat).HasColumnName("RI_GRACE_PERIOD_DAYS_NON_PROTECTED_AUDIT_CAT");

                entity.Property(e => e.RiGracePeriodDaysProtectedAuditCat).HasColumnName("RI_GRACE_PERIOD_DAYS_PROTECTED_AUDIT_CAT");

                entity.Property(e => e.RiInterestAnnualRatePct)
                    .HasColumnName("RI_INTEREST_ANNUAL_RATE_PCT")
                    .HasColumnType("numeric");

                entity.Property(e => e.RiInterestDays).HasColumnName("RI_INTEREST_DAYS");

                entity.Property(e => e.RiInterestEnabled).HasColumnName("RI_INTEREST_ENABLED");

                entity.Property(e => e.RiInterestMaxLimitAmt)
                    .HasColumnName("RI_INTEREST_MAX_LIMIT_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.RiInterestMinLimitAmt)
                    .HasColumnName("RI_INTEREST_MIN_LIMIT_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.RiInterestUseRateTable).HasColumnName("RI_INTEREST_USE_RATE_TABLE");

                entity.Property(e => e.RolloverAmortEnabled).HasColumnName("ROLLOVER_AMORT_ENABLED");

                entity.Property(e => e.RolloverMaxCount).HasColumnName("ROLLOVER_MAX_COUNT");

                entity.Property(e => e.RolloverMaxScheduledCount).HasColumnName("ROLLOVER_MAX_SCHEDULED_COUNT");

                entity.Property(e => e.RolloverOutCollEnabled).HasColumnName("ROLLOVER_OUT_COLL_ENABLED");

                entity.Property(e => e.RolloverOutCollResetsNum).HasColumnName("ROLLOVER_OUT_COLL_RESETS_NUM");

                entity.Property(e => e.SameDayPayoffAndNewIsRollEnabled).HasColumnName("SAME_DAY_PAYOFF_AND_NEW_IS_ROLL_ENABLED");

                entity.Property(e => e.ScoringApprovalPoints)
                    .HasColumnName("SCORING_APPROVAL_POINTS")
                    .HasColumnType("decimal");

                entity.Property(e => e.ScoringBumpUpsBasedOnIncomeType)
                    .IsRequired()
                    .HasColumnName("SCORING_BUMP_UPS_BASED_ON_INCOME_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.ScoringBumpUpsLimitedTierBasedOnIncomeType)
                    .IsRequired()
                    .HasColumnName("SCORING_BUMP_UPS_LIMITED_TIER_BASED_ON_INCOME_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.ScoringDataPullEnabled).HasColumnName("SCORING_DATA_PULL_ENABLED");

                entity.Property(e => e.ScoringDenialOverrideEnabled).HasColumnName("SCORING_DENIAL_OVERRIDE_ENABLED");

                entity.Property(e => e.ScoringEnabled).HasColumnName("SCORING_ENABLED");

                entity.Property(e => e.ScoringEveryCustomerLoanEnabled).HasColumnName("SCORING_EVERY_CUSTOMER_LOAN_ENABLED");

                entity.Property(e => e.ScoringIncreaseAmt)
                    .HasColumnName("SCORING_INCREASE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.ScoringIncreaseMaxPct).HasColumnName("SCORING_INCREASE_MAX_PCT");

                entity.Property(e => e.ScoringIncreaseMaxScore).HasColumnName("SCORING_INCREASE_MAX_SCORE");

                entity.Property(e => e.ScoringIncreaseMinDays).HasColumnName("SCORING_INCREASE_MIN_DAYS");

                entity.Property(e => e.ScoringIncreaseMinScore).HasColumnName("SCORING_INCREASE_MIN_SCORE");

                entity.Property(e => e.ScoringIncreaseNumSuccessfulPayments).HasColumnName("SCORING_INCREASE_NUM_SUCCESSFUL_PAYMENTS");

                entity.Property(e => e.ScoringIncreaseRiRestart).HasColumnName("SCORING_INCREASE_RI_RESTART");

                entity.Property(e => e.ScoringMgrOverrideLoanAmtEnabled).HasColumnName("SCORING_MGR_OVERRIDE_LOAN_AMT_ENABLED");

                entity.Property(e => e.ScoringOverrideAmt)
                    .HasColumnName("SCORING_OVERRIDE_AMT")
                    .HasColumnType("decimal");

                entity.Property(e => e.ScoringOverrideEnabled).HasColumnName("SCORING_OVERRIDE_ENABLED");

                entity.Property(e => e.ScoringOverridePct).HasColumnName("SCORING_OVERRIDE_PCT");

                entity.Property(e => e.ScoringOverrideType).HasColumnName("SCORING_OVERRIDE_TYPE");

                entity.Property(e => e.ScoringSnapshotsEnabled).HasColumnName("SCORING_SNAPSHOTS_ENABLED");

                entity.Property(e => e.ScoringStartDate)
                    .HasColumnName("SCORING_START_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.ScoringTalkoffEnabled).HasColumnName("SCORING_TALKOFF_ENABLED");

                entity.Property(e => e.SetInactiveOnDay).HasColumnName("SET_INACTIVE_ON_DAY");

                entity.Property(e => e.SetInactiveOnDayAfterMissedPaymentCount).HasColumnName("SET_INACTIVE_ON_DAY_AFTER_MISSED_PAYMENT_COUNT");

                entity.Property(e => e.SetInactiveOnDayAfterNotice).HasColumnName("SET_INACTIVE_ON_DAY_AFTER_NOTICE");

                entity.Property(e => e.SetInactiveOnMissedPaymentCount).HasColumnName("SET_INACTIVE_ON_MISSED_PAYMENT_COUNT");

                entity.Property(e => e.SplitFeeAbovePct)
                    .HasColumnName("SPLIT_FEE_ABOVE_PCT")
                    .HasColumnType("decimal");

                entity.Property(e => e.SplitFeeAtAmount)
                    .HasColumnName("SPLIT_FEE_AT_AMOUNT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.SplitFeeEnabled).HasColumnName("SPLIT_FEE_ENABLED");

                entity.Property(e => e.SsnRequiredForLoanEnabled).HasColumnName("SSN_REQUIRED_FOR_LOAN_ENABLED");

                entity.Property(e => e.StateReqWaitDays).HasColumnName("STATE_REQ_WAIT_DAYS");

                entity.Property(e => e.UpdatedBy)
                    .HasColumnName("UPDATED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.UseScoredApprovalAmt).HasColumnName("USE_SCORED_APPROVAL_AMT");

                entity.Property(e => e.WithdrawDateMethod)
                    .IsRequired()
                    .HasColumnName("WITHDRAW_DATE_METHOD")
                    .HasColumnType("char(1)");

                entity.Property(e => e.WithdrawEnabled).HasColumnName("WITHDRAW_ENABLED");

                entity.Property(e => e.WithdrawMaxDays).HasColumnName("WITHDRAW_MAX_DAYS");

                entity.Property(e => e.WithdrawMaxDaysToPayAfter).HasColumnName("WITHDRAW_MAX_DAYS_TO_PAY_AFTER");

                entity.HasOne(d => d.DepositMethodAutoPayCalcOrderRuleDefSetKeyNavigation)
                    .WithMany(p => p.LoanProductConfig)
                    .HasForeignKey(d => d.DepositMethodAutoPayCalcOrderRuleDefSetKey)
                    .HasConstraintName("FK_LoanProductConfig_DEPOSIT_METHOD_AUTO_PAY_CALC_ORDER_RULE_DEF_SET_KEY");

                entity.HasOne(d => d.LoanConfigApplyPaymentOrderKeyNavigation)
                    .WithMany(p => p.LoanProductConfig)
                    .HasForeignKey(d => d.LoanConfigApplyPaymentOrderKey)
                    .HasConstraintName("FK_LoanProductConfig_LOAN_CONFIG_APPLY_PAYMENT_ORDER_KEY");

                entity.HasOne(d => d.LoanProductKeyNavigation)
                    .WithMany(p => p.LoanProductConfig)
                    .HasForeignKey(d => d.LoanProductKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LoanProductConfig_LOAN_PRODUCT_KEY");
            });

            modelBuilder.Entity<LoanProductConfigApprovalRate>(entity =>
            {
                entity.HasKey(e => e.LoanProductConfigApprovalRateKey)
                    .HasName("PK_LoanProductConfigApprovalRate");

                entity.HasIndex(e => e.LoanProductConfigKey)
                    .HasName("IX_LoanProductConfigApprovalRate_LOAN_PRODUCT_CONFIG_KEY");

                entity.Property(e => e.LoanProductConfigApprovalRateKey).HasColumnName("LOAN_PRODUCT_CONFIG_APPROVAL_RATE_KEY");

                entity.Property(e => e.ApprovalPctOrAmt)
                    .IsRequired()
                    .HasColumnName("APPROVAL_PCT_OR_AMT")
                    .HasColumnType("char(1)");

                entity.Property(e => e.ApprovalVal)
                    .HasColumnName("APPROVAL_VAL")
                    .HasColumnType("decimal");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DateUpdated)
                    .HasColumnName("DATE_UPDATED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.IncomeToAmt)
                    .HasColumnName("INCOME_TO_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanProductConfigKey).HasColumnName("LOAN_PRODUCT_CONFIG_KEY");

                entity.Property(e => e.UpdatedBy)
                    .HasColumnName("UPDATED_BY")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.LoanProductConfigKeyNavigation)
                    .WithMany(p => p.LoanProductConfigApprovalRate)
                    .HasForeignKey(d => d.LoanProductConfigKey)
                    .HasConstraintName("FK_LoanProductConfigApprovalRate_LOAN_PRODUCT_CONFIG_KEY");
            });

            modelBuilder.Entity<LoanProductConfigEdit>(entity =>
            {
                entity.HasKey(e => e.LoanProductConfigEditKey)
                    .HasName("PK_LoanProductConfigEdit");

                entity.Property(e => e.LoanProductConfigEditKey).HasColumnName("LOAN_PRODUCT_CONFIG_EDIT_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.FieldName)
                    .IsRequired()
                    .HasColumnName("FIELD_NAME")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.LoanProductConfigKey).HasColumnName("LOAN_PRODUCT_CONFIG_KEY");

                entity.Property(e => e.NewValue)
                    .HasColumnName("NEW_VALUE")
                    .HasColumnType("varchar(200)");

                entity.Property(e => e.OldValue)
                    .HasColumnName("OLD_VALUE")
                    .HasColumnType("varchar(200)");

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasColumnName("TABLE_NAME")
                    .HasColumnType("varchar(100)");

                entity.HasOne(d => d.LoanProductConfigKeyNavigation)
                    .WithMany(p => p.LoanProductConfigEdit)
                    .HasForeignKey(d => d.LoanProductConfigKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LoanProductConfigEdit_LOAN_PRODUCT_CONFIG_KEY");
            });

            modelBuilder.Entity<LoanProductConfigInsuranceRate>(entity =>
            {
                entity.HasKey(e => e.LoanProductConfigInsuranceRateKey)
                    .HasName("PK_LoanProductConfigInsuranceRate");

                entity.Property(e => e.LoanProductConfigInsuranceRateKey).HasColumnName("LOAN_PRODUCT_CONFIG_INSURANCE_RATE_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DateUpdated)
                    .HasColumnName("DATE_UPDATED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.FeePerPaymentPct)
                    .HasColumnName("FEE_PER_PAYMENT_PCT")
                    .HasColumnType("decimal");

                entity.Property(e => e.LoanProductConfigKey).HasColumnName("LOAN_PRODUCT_CONFIG_KEY");

                entity.Property(e => e.LoanUpToAmt)
                    .HasColumnName("LOAN_UP_TO_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PaymentCycle)
                    .IsRequired()
                    .HasColumnName("PAYMENT_CYCLE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.UpdatedBy)
                    .HasColumnName("UPDATED_BY")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.LoanProductConfigKeyNavigation)
                    .WithMany(p => p.LoanProductConfigInsuranceRate)
                    .HasForeignKey(d => d.LoanProductConfigKey)
                    .HasConstraintName("FK_LoanProductConfigInsuranceRate_LOAN_PRODUCT_CONFIG_KEY");
            });

            modelBuilder.Entity<LoanProductConfigInterestRate>(entity =>
            {
                entity.HasKey(e => e.LoanProductConfigInterestRateKey)
                    .HasName("PK_LoanProductConfigInterestRate");

                entity.HasIndex(e => e.LoanProductConfigKey)
                    .HasName("IX_LoanProductConfigInterestRate_LOAN_PRODUCT_CONFIG_KEY");

                entity.Property(e => e.LoanProductConfigInterestRateKey).HasColumnName("LOAN_PRODUCT_CONFIG_INTEREST_RATE_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DateUpdated)
                    .HasColumnName("DATE_UPDATED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.InterestRatePct)
                    .HasColumnName("INTEREST_RATE_PCT")
                    .HasColumnType("decimal");

                entity.Property(e => e.LoanProductConfigKey).HasColumnName("LOAN_PRODUCT_CONFIG_KEY");

                entity.Property(e => e.LoanUpToAmt)
                    .HasColumnName("LOAN_UP_TO_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.UpdatedBy)
                    .HasColumnName("UPDATED_BY")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.LoanProductConfigKeyNavigation)
                    .WithMany(p => p.LoanProductConfigInterestRate)
                    .HasForeignKey(d => d.LoanProductConfigKey)
                    .HasConstraintName("FK_LoanProductConfigInterestRate_LOAN_PRODUCT_CONFIG_KEY");
            });

            modelBuilder.Entity<LoanProductConfigLoanFeeRate>(entity =>
            {
                entity.HasKey(e => e.LoanProductConfigLoanFeeRateKey)
                    .HasName("PK_LoanProductConfigLoanFeeRate");

                entity.HasIndex(e => e.LoanProductConfigKey)
                    .HasName("IX_LoanProductConfigLoanFeeRate_LOAN_PRODUCT_CONFIG_KEY");

                entity.Property(e => e.LoanProductConfigLoanFeeRateKey).HasColumnName("LOAN_PRODUCT_CONFIG_LOAN_FEE_RATE_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DateUpdated)
                    .HasColumnName("DATE_UPDATED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.LoanFeePct)
                    .HasColumnName("LOAN_FEE_PCT")
                    .HasColumnType("decimal");

                entity.Property(e => e.LoanProductConfigKey).HasColumnName("LOAN_PRODUCT_CONFIG_KEY");

                entity.Property(e => e.LoanUpToAmt)
                    .HasColumnName("LOAN_UP_TO_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.UpdatedBy)
                    .HasColumnName("UPDATED_BY")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.LoanProductConfigKeyNavigation)
                    .WithMany(p => p.LoanProductConfigLoanFeeRate)
                    .HasForeignKey(d => d.LoanProductConfigKey)
                    .HasConstraintName("FK_LoanProductConfigLoanFeeRate_LOAN_PRODUCT_CONFIG_KEY");
            });

            modelBuilder.Entity<LoanProductConfigLoanStats>(entity =>
            {
                entity.HasKey(e => e.LoanProductConfigLoanStatsKey)
                    .HasName("PK_LoanProductConfigLoanStats");

                entity.Property(e => e.LoanProductConfigLoanStatsKey).HasColumnName("LOAN_PRODUCT_CONFIG_LOAN_STATS_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.LoanProductConfigKey).HasColumnName("LOAN_PRODUCT_CONFIG_KEY");

                entity.Property(e => e.LoansCount).HasColumnName("LOANS_COUNT");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.OpenLoansCount).HasColumnName("OPEN_LOANS_COUNT");

                entity.HasOne(d => d.LoanProductConfigKeyNavigation)
                    .WithMany(p => p.LoanProductConfigLoanStats)
                    .HasForeignKey(d => d.LoanProductConfigKey)
                    .HasConstraintName("FK_LoanProductConfigLoanStats_LOAN_PRODUCT_CONFIG_KEY");

                entity.HasOne(d => d.LocationNavigation)
                    .WithMany(p => p.LoanProductConfigLoanStats)
                    .HasForeignKey(d => d.Location)
                    .HasConstraintName("FK_LoanProductConfigLoanStats_LOCATION");
            });

            modelBuilder.Entity<LoanProductConfigMaxLoanAmtRate>(entity =>
            {
                entity.HasKey(e => e.LoanProductConfigMaxLoanAmtRateKey)
                    .HasName("PK_LoanProductConfigMaxLoanAmtRate");

                entity.Property(e => e.LoanProductConfigMaxLoanAmtRateKey).HasColumnName("LOAN_PRODUCT_CONFIG_MAX_LOAN_AMT_RATE_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DateUpdated)
                    .HasColumnName("DATE_UPDATED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.IncomeRequiredAmt)
                    .HasColumnName("INCOME_REQUIRED_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanAmtMaxAmt)
                    .HasColumnName("LOAN_AMT_MAX_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanLengthMaxMonths).HasColumnName("LOAN_LENGTH_MAX_MONTHS");

                entity.Property(e => e.LoanProductConfigKey).HasColumnName("LOAN_PRODUCT_CONFIG_KEY");

                entity.Property(e => e.UpdatedBy)
                    .HasColumnName("UPDATED_BY")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.LoanProductConfigKeyNavigation)
                    .WithMany(p => p.LoanProductConfigMaxLoanAmtRate)
                    .HasForeignKey(d => d.LoanProductConfigKey)
                    .HasConstraintName("FK_LoanProductConfigMaxLoanAmtRate_LOAN_PRODUCT_CONFIG_KEY");
            });

            modelBuilder.Entity<LoanProductConfigOpenEnd>(entity =>
            {
                entity.HasKey(e => e.LoanProductConfigOpenEndKey)
                    .HasName("PK_LoanProductConfigOpenEnd");

                entity.HasIndex(e => e.LoanProductConfigKey)
                    .HasName("IX_LoanProductConfigOpenEnd_LOAN_PRODUCT_CONFIG_KEY");

                entity.HasIndex(e => e.LoanProductKey)
                    .HasName("IX_LoanProductConfigOpenEnd_LOAN_PRODUCT_KEY");

                entity.Property(e => e.LoanProductConfigOpenEndKey).HasColumnName("LOAN_PRODUCT_CONFIG_OPEN_END_KEY");

                entity.Property(e => e.ActivityFeeAmt)
                    .HasColumnName("ACTIVITY_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.ActivityFeePct)
                    .HasColumnName("ACTIVITY_FEE_PCT")
                    .HasColumnType("numeric");

                entity.Property(e => e.CabDefaultLoanLength).HasColumnName("CAB_DEFAULT_LOAN_LENGTH");

                entity.Property(e => e.CabFeeDayOffset).HasColumnName("CAB_FEE_DAY_OFFSET");

                entity.Property(e => e.CashAdvanceDisabled).HasColumnName("CASH_ADVANCE_DISABLED");

                entity.Property(e => e.CashAdvanceLimitAmt)
                    .HasColumnName("CASH_ADVANCE_LIMIT_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CashAdvanceLimitEnabled).HasColumnName("CASH_ADVANCE_LIMIT_ENABLED");

                entity.Property(e => e.CashAdvanceRescindDuringGracePeriodEnabled).HasColumnName("CASH_ADVANCE_RESCIND_DURING_GRACE_PERIOD_ENABLED");

                entity.Property(e => e.CloseWhenInactiveDays).HasColumnName("CLOSE_WHEN_INACTIVE_DAYS");

                entity.Property(e => e.CloseWhenPaidOff).HasColumnName("CLOSE_WHEN_PAID_OFF");

                entity.Property(e => e.CoolingDaysAfterFinalRollover).HasColumnName("COOLING_DAYS_AFTER_FINAL_ROLLOVER");

                entity.Property(e => e.CoolingDaysCashAdvanceAfterPayment).HasColumnName("COOLING_DAYS_CASH_ADVANCE_AFTER_PAYMENT");

                entity.Property(e => e.CycleDays).HasColumnName("CYCLE_DAYS");

                entity.Property(e => e.EnforceRolloverRestrictionsAsOfDate)
                    .HasColumnName("ENFORCE_ROLLOVER_RESTRICTIONS_AS_OF_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.FlatFeeBiweeklyRatesEnabled).HasColumnName("FLAT_FEE_BIWEEKLY_RATES_ENABLED");

                entity.Property(e => e.FlatFeeRulesEnabled).HasColumnName("FLAT_FEE_RULES_ENABLED");

                entity.Property(e => e.GiftCardProceedsEnabled).HasColumnName("GIFT_CARD_PROCEEDS_ENABLED");

                entity.Property(e => e.IsOrdinanceLocation).HasColumnName("IS_ORDINANCE_LOCATION");

                entity.Property(e => e.LimitZeroBalanceStatements).HasColumnName("LIMIT_ZERO_BALANCE_STATEMENTS");

                entity.Property(e => e.LoanProductConfigKey).HasColumnName("LOAN_PRODUCT_CONFIG_KEY");

                entity.Property(e => e.LoanProductKey).HasColumnName("LOAN_PRODUCT_KEY");

                entity.Property(e => e.MinPrincDueFourWeeksAmt)
                    .HasColumnName("MIN_PRINC_DUE_FOUR_WEEKS_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.MinPrincDueFourWeeksPct)
                    .HasColumnName("MIN_PRINC_DUE_FOUR_WEEKS_PCT")
                    .HasColumnType("numeric");

                entity.Property(e => e.MinPrincDueTwoWeeksAmt)
                    .HasColumnName("MIN_PRINC_DUE_TWO_WEEKS_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.MinPrincDueTwoWeeksPct)
                    .HasColumnName("MIN_PRINC_DUE_TWO_WEEKS_PCT")
                    .HasColumnType("numeric");

                entity.Property(e => e.NewLoanWithinClosingPreviousLoanDays).HasColumnName("NEW_LOAN_WITHIN_CLOSING_PREVIOUS_LOAN_DAYS");

                entity.Property(e => e.NewLoanWithinClosingPreviousLoanOnlyEnabled).HasColumnName("NEW_LOAN_WITHIN_CLOSING_PREVIOUS_LOAN_ONLY_ENABLED");

                entity.Property(e => e.NonOrdinanceLocation).HasColumnName("NON_ORDINANCE_LOCATION");

                entity.Property(e => e.PayPrincBeforeNextAndNotDue).HasColumnName("PAY_PRINC_BEFORE_NEXT_AND_NOT_DUE");

                entity.Property(e => e.PaymentDueCycleDays).HasColumnName("PAYMENT_DUE_CYCLE_DAYS");

                entity.Property(e => e.PrincAmtIncrementAmt)
                    .HasColumnName("PRINC_AMT_INCREMENT_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PrincAmtIncrementEnabled).HasColumnName("PRINC_AMT_INCREMENT_ENABLED");

                entity.Property(e => e.StmtsEmailEnabled).HasColumnName("STMTS_EMAIL_ENABLED");

                entity.Property(e => e.StmtsGenCycleDays).HasColumnName("STMTS_GEN_CYCLE_DAYS");

                entity.HasOne(d => d.LoanProductConfigKeyNavigation)
                    .WithOne(p => p.LoanProductConfigOpenEnd)
                    .HasForeignKey<LoanProductConfigOpenEnd>(d => d.LoanProductConfigKey)
                    .HasConstraintName("FK_LoanProductConfigOpenEnd_LoanProductConfig");

                entity.HasOne(d => d.LoanProductKeyNavigation)
                    .WithMany(p => p.LoanProductConfigOpenEnd)
                    .HasForeignKey(d => d.LoanProductKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LoanProductConfigOpenEnd_LOAN_PRODUCT_KEY");
            });

            modelBuilder.Entity<LoanProductConfigRirate>(entity =>
            {
                entity.HasKey(e => e.LoanProductConfigRiRateKey)
                    .HasName("PK_LoanProductConfigRIRate");

                entity.ToTable("LoanProductConfigRIRate");

                entity.HasIndex(e => e.LoanProductConfigKey)
                    .HasName("IX_LoanProductConfigRIRate_LOAN_PRODUCT_CONFIG_KEY");

                entity.Property(e => e.LoanProductConfigRiRateKey).HasColumnName("LOAN_PRODUCT_CONFIG_RI_RATE_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DateUpdated)
                    .HasColumnName("DATE_UPDATED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.FromNumDays).HasColumnName("FROM_NUM_DAYS");

                entity.Property(e => e.LoanProductConfigKey).HasColumnName("LOAN_PRODUCT_CONFIG_KEY");

                entity.Property(e => e.RiRatePctOrAmt)
                    .IsRequired()
                    .HasColumnName("RI_RATE_PCT_OR_AMT")
                    .HasColumnType("char(1)");

                entity.Property(e => e.RiRateVal)
                    .HasColumnName("RI_RATE_VAL")
                    .HasColumnType("decimal");

                entity.Property(e => e.ToNumDays).HasColumnName("TO_NUM_DAYS");

                entity.Property(e => e.UpdatedBy)
                    .HasColumnName("UPDATED_BY")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.LoanProductConfigKeyNavigation)
                    .WithMany(p => p.LoanProductConfigRirate)
                    .HasForeignKey(d => d.LoanProductConfigKey)
                    .HasConstraintName("FK_LoanProductConfigRIRate_LOAN_PRODUCT_CONFIG_KEY");
            });

            modelBuilder.Entity<LoanProductConfigTitle>(entity =>
            {
                entity.HasKey(e => e.LoanProductConfigTitleKey)
                    .HasName("PK_LoanProductConfigTitle");

                entity.HasIndex(e => e.LoanProductConfigKey)
                    .HasName("IX_LoanProductConfigTitle_LOAN_PRODUCT_CONFIG_KEY")
                    .IsUnique();

                entity.HasIndex(e => e.LoanProductKey)
                    .HasName("IX_LoanProductConfigTitle_LOAN_PRODUCT_KEY");

                entity.Property(e => e.LoanProductConfigTitleKey).HasColumnName("LOAN_PRODUCT_CONFIG_TITLE_KEY");

                entity.Property(e => e.ApprovalPctEmployed24PlusMonths)
                    .HasColumnName("APPROVAL_PCT_EMPLOYED_24_PLUS_MONTHS")
                    .HasColumnType("decimal");

                entity.Property(e => e.ApprovalPctEmployed6To23Months)
                    .HasColumnName("APPROVAL_PCT_EMPLOYED_6_TO_23_MONTHS")
                    .HasColumnType("decimal");

                entity.Property(e => e.ApprovalPctEmployedUpTo5Months)
                    .HasColumnName("APPROVAL_PCT_EMPLOYED_UP_TO_5_MONTHS")
                    .HasColumnType("decimal");

                entity.Property(e => e.ApprovalPctWholesaleGreaterThan1500CheckingAcct)
                    .HasColumnName("APPROVAL_PCT_WHOLESALE_GREATER_THAN_1500_CHECKING_ACCT")
                    .HasColumnType("decimal");

                entity.Property(e => e.ApprovalPctWholesaleGreaterThan1500CheckingAcctDirectDeposit)
                    .HasColumnName("APPROVAL_PCT_WHOLESALE_GREATER_THAN_1500_CHECKING_ACCT_DIRECT_DEPOSIT")
                    .HasColumnType("decimal");

                entity.Property(e => e.ApprovalPctWholesaleGreaterThan1500DebitCard)
                    .HasColumnName("APPROVAL_PCT_WHOLESALE_GREATER_THAN_1500_DEBIT_CARD")
                    .HasColumnType("decimal");

                entity.Property(e => e.ApprovalPctWholesaleUpTo1500CheckingAcct)
                    .HasColumnName("APPROVAL_PCT_WHOLESALE_UP_TO_1500_CHECKING_ACCT")
                    .HasColumnType("decimal");

                entity.Property(e => e.ApprovalPctWholesaleUpTo1500CheckingAcctDirectDeposit)
                    .HasColumnName("APPROVAL_PCT_WHOLESALE_UP_TO_1500_CHECKING_ACCT_DIRECT_DEPOSIT")
                    .HasColumnType("decimal");

                entity.Property(e => e.ApprovalPctWholesaleUpTo1500DebitCard)
                    .HasColumnName("APPROVAL_PCT_WHOLESALE_UP_TO_1500_DEBIT_CARD")
                    .HasColumnType("decimal");

                entity.Property(e => e.LegalMaxLoanVehicleValuePct).HasColumnName("LEGAL_MAX_LOAN_VEHICLE_VALUE_PCT");

                entity.Property(e => e.LegalMaxLoanVehicleValueWholesaleOrRetail)
                    .IsRequired()
                    .HasColumnName("LEGAL_MAX_LOAN_VEHICLE_VALUE_WHOLESALE_OR_RETAIL")
                    .HasColumnType("char(1)");

                entity.Property(e => e.LienFeeAmt)
                    .HasColumnName("LIEN_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LienFeeFinancedEnabled).HasColumnName("LIEN_FEE_FINANCED_ENABLED");

                entity.Property(e => e.LoanAmtMgrOverrideVehicleValuePct).HasColumnName("LOAN_AMT_MGR_OVERRIDE_VEHICLE_VALUE_PCT");

                entity.Property(e => e.LoanAmtMgrOverrideVehicleWholesaleOrRetail)
                    .IsRequired()
                    .HasColumnName("LOAN_AMT_MGR_OVERRIDE_VEHICLE_WHOLESALE_OR_RETAIL")
                    .HasColumnType("char(1)");

                entity.Property(e => e.LoanAmtNoInsuranceMaxAmt)
                    .HasColumnName("LOAN_AMT_NO_INSURANCE_MAX_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanProductConfigKey).HasColumnName("LOAN_PRODUCT_CONFIG_KEY");

                entity.Property(e => e.LoanProductKey).HasColumnName("LOAN_PRODUCT_KEY");

                entity.Property(e => e.MaxLoanVehicleValuePct).HasColumnName("MAX_LOAN_VEHICLE_VALUE_PCT");

                entity.Property(e => e.MaxLoanVehicleValuePctEnabled).HasColumnName("MAX_LOAN_VEHICLE_VALUE_PCT_ENABLED");

                entity.Property(e => e.MaxLoanVehicleValuePctWholesaleOrRetail)
                    .IsRequired()
                    .HasColumnName("MAX_LOAN_VEHICLE_VALUE_PCT_WHOLESALE_OR_RETAIL")
                    .HasColumnType("char(1)");

                entity.Property(e => e.MultLoansVinEnabled).HasColumnName("MULT_LOANS_VIN_ENABLED");

                entity.Property(e => e.OrigFeePct2ndLien)
                    .HasColumnName("ORIG_FEE_PCT_2ND_LIEN")
                    .HasColumnType("numeric");

                entity.Property(e => e.RepoAssignmentMinBalance)
                    .HasColumnName("REPO_ASSIGNMENT_MIN_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.RequireCopledgeDetails).HasColumnName("REQUIRE_COPLEDGE_DETAILS");

                entity.Property(e => e.RequireCopledgeEyeColor).HasColumnName("REQUIRE_COPLEDGE_EYE_COLOR");

                entity.Property(e => e.RequireCopledgeGender).HasColumnName("REQUIRE_COPLEDGE_GENDER");

                entity.Property(e => e.RequireCopledgeHairColor).HasColumnName("REQUIRE_COPLEDGE_HAIR_COLOR");

                entity.Property(e => e.RequireCopledgeHeight).HasColumnName("REQUIRE_COPLEDGE_HEIGHT");

                entity.Property(e => e.RequireCopledgeRace).HasColumnName("REQUIRE_COPLEDGE_RACE");

                entity.Property(e => e.RequireCopledgeSsn).HasColumnName("REQUIRE_COPLEDGE_SSN");

                entity.Property(e => e.RequireDetails).HasColumnName("REQUIRE_DETAILS");

                entity.Property(e => e.RequireEyeColor).HasColumnName("REQUIRE_EYE_COLOR");

                entity.Property(e => e.RequireGender).HasColumnName("REQUIRE_GENDER");

                entity.Property(e => e.RequireHairColor).HasColumnName("REQUIRE_HAIR_COLOR");

                entity.Property(e => e.RequireHeight).HasColumnName("REQUIRE_HEIGHT");

                entity.Property(e => e.RequireRace).HasColumnName("REQUIRE_RACE");

                entity.Property(e => e.UseFuelType).HasColumnName("USE_FUEL_TYPE");

                entity.Property(e => e.UseLegalStatus).HasColumnName("USE_LEGAL_STATUS");

                entity.Property(e => e.UseLienHolder).HasColumnName("USE_LIEN_HOLDER");

                entity.Property(e => e.UseOdoCode).HasColumnName("USE_ODO_CODE");

                entity.Property(e => e.UseRegistrationDate).HasColumnName("USE_REGISTRATION_DATE");

                entity.Property(e => e.UseRegistrationExpires).HasColumnName("USE_REGISTRATION_EXPIRES");

                entity.Property(e => e.UseStateNum).HasColumnName("USE_STATE_NUM");

                entity.Property(e => e.UseStickerNum).HasColumnName("USE_STICKER_NUM");

                entity.Property(e => e.UseTitleNum).HasColumnName("USE_TITLE_NUM");

                entity.Property(e => e.VehValueMinAmt)
                    .HasColumnName("VEH_VALUE_MIN_AMT")
                    .HasColumnType("smallmoney");

                entity.HasOne(d => d.LoanProductConfigKeyNavigation)
                    .WithOne(p => p.LoanProductConfigTitle)
                    .HasForeignKey<LoanProductConfigTitle>(d => d.LoanProductConfigKey)
                    .HasConstraintName("FK_LoanProductConfigTitle_LoanProductConfig");

                entity.HasOne(d => d.LoanProductKeyNavigation)
                    .WithMany(p => p.LoanProductConfigTitle)
                    .HasForeignKey(d => d.LoanProductKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LoanProductConfigTitle_LOAN_PRODUCT_KEY");
            });

            modelBuilder.Entity<LoanProductEnableNewLoan>(entity =>
            {
                entity.HasKey(e => e.LoanProductEnableNewLoanKey)
                    .HasName("PK_LoanProductEnableNewLoan");

                entity.HasIndex(e => e.LoanProductConfigKey)
                    .HasName("IX_LoanProductEnableNewLoan_LOAN_PRODUCT_CONFIG_KEY");

                entity.HasIndex(e => e.Location)
                    .HasName("IX_LoanProductEnableNewLoan_LOCATION");

                entity.HasIndex(e => new { e.LoanProductConfigKey, e.Location })
                    .HasName("CK_LoanProductEnableNewLoan_LOAN_PRODUCT_CONFIG_KEY_LOCATION")
                    .IsUnique();

                entity.HasIndex(e => new { e.Location, e.HotkeyNumber })
                    .HasName("IX_LoanProductEnableNewLoan_LOCATION_HOTKEY_NUMBER_NOT_NULL")
                    .IsUnique();

                entity.Property(e => e.LoanProductEnableNewLoanKey).HasColumnName("LOAN_PRODUCT_ENABLE_NEW_LOAN_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateUpdated)
                    .HasColumnName("DATE_UPDATED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DisplayOrder).HasColumnName("DISPLAY_ORDER");

                entity.Property(e => e.EnableAgreementNumber).HasColumnName("ENABLE_AGREEMENT_NUMBER");

                entity.Property(e => e.EndDate)
                    .HasColumnName("END_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.HotkeyNumber)
                    .IsRequired()
                    .HasColumnName("HOTKEY_NUMBER");

                entity.Property(e => e.LienAddressLocation).HasColumnName("LIEN_ADDRESS_LOCATION");

                entity.Property(e => e.LoanProductConfigKey).HasColumnName("LOAN_PRODUCT_CONFIG_KEY");

                entity.Property(e => e.LoanProductTilaKey).HasColumnName("LOAN_PRODUCT_TILA_KEY");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.NextAgreementNumber).HasColumnName("NEXT_AGREEMENT_NUMBER");

                entity.Property(e => e.StartDate)
                    .HasColumnName("START_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy)
                    .HasColumnName("UPDATED_BY")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.LienAddressLocationNavigation)
                    .WithMany(p => p.LoanProductEnableNewLoanLienAddressLocationNavigation)
                    .HasForeignKey(d => d.LienAddressLocation)
                    .HasConstraintName("FK_LoanProductEnableNewLoan_LIEN_ADDRESS_LOCATION");

                entity.HasOne(d => d.LoanProductConfigKeyNavigation)
                    .WithMany(p => p.LoanProductEnableNewLoan)
                    .HasForeignKey(d => d.LoanProductConfigKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LoanProductEnableNewLoan_LoanProductConfig");

                entity.HasOne(d => d.LoanProductTilaKeyNavigation)
                    .WithMany(p => p.LoanProductEnableNewLoan)
                    .HasForeignKey(d => d.LoanProductTilaKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LoanProductEnableNewLoan_LoanProductTila");

                entity.HasOne(d => d.LocationNavigation)
                    .WithMany(p => p.LoanProductEnableNewLoanLocationNavigation)
                    .HasForeignKey(d => d.Location)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LoanProductEnableNewLoan_LOCATION");
            });

            modelBuilder.Entity<LoanProductFeature>(entity =>
            {
                entity.HasKey(e => e.LoanProductFeatureKey)
                    .HasName("PK_LoanProductFeature");

                entity.HasIndex(e => new { e.LoanProductKey, e.LoanProductFeatureTypeKey })
                    .HasName("UC_LoanProductFeature_LOAN_PRODUCT_KEY_LOAN_PRODUCT_FEATURE_TYPE_KEY")
                    .IsUnique();

                entity.Property(e => e.LoanProductFeatureKey).HasColumnName("LOAN_PRODUCT_FEATURE_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(300)");

                entity.Property(e => e.DisplayColor).HasColumnName("DISPLAY_COLOR");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.LastUpdateDate)
                    .HasColumnName("LAST_UPDATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.LastUpdatedBy)
                    .IsRequired()
                    .HasColumnName("LAST_UPDATED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.LoanProductFeatureTypeKey).HasColumnName("LOAN_PRODUCT_FEATURE_TYPE_KEY");

                entity.Property(e => e.LoanProductKey).HasColumnName("LOAN_PRODUCT_KEY");

                entity.HasOne(d => d.LoanProductFeatureTypeKeyNavigation)
                    .WithMany(p => p.LoanProductFeature)
                    .HasForeignKey(d => d.LoanProductFeatureTypeKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LoanProductFeature_LOAN_PRODUCT_FEATURE_TYPE_KEY");

                entity.HasOne(d => d.LoanProductKeyNavigation)
                    .WithMany(p => p.LoanProductFeature)
                    .HasForeignKey(d => d.LoanProductKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LoanProductFeature_LOAN_PRODUCT_KEY");
            });

            modelBuilder.Entity<LoanProductFeatureType>(entity =>
            {
                entity.HasKey(e => e.LoanProductFeatureTypeKey)
                    .HasName("PK_LoanProductFeatureType");

                entity.Property(e => e.LoanProductFeatureTypeKey).HasColumnName("LOAN_PRODUCT_FEATURE_TYPE_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(300)");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.IsActive).HasColumnName("IS_ACTIVE");

                entity.Property(e => e.LastUpdateDate)
                    .HasColumnName("LAST_UPDATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.LastUpdatedBy)
                    .IsRequired()
                    .HasColumnName("LAST_UPDATED_BY")
                    .HasColumnType("char(3)");
            });

            modelBuilder.Entity<LoanProductRollover>(entity =>
            {
                entity.HasKey(e => e.LoanProductRolloverKey)
                    .HasName("PK_LoanProductRollover");

                entity.HasIndex(e => new { e.LoanProductKeyPaidLoan, e.Location })
                    .HasName("CK_LoanProductRollover_LOAN_PRODUCT_KEY_PAID_LOAN_LOCATION")
                    .IsUnique();

                entity.Property(e => e.LoanProductRolloverKey).HasColumnName("LOAN_PRODUCT_ROLLOVER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateUpdated)
                    .HasColumnName("DATE_UPDATED")
                    .HasColumnType("datetime");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.LoanProductKeyNewLoan).HasColumnName("LOAN_PRODUCT_KEY_NEW_LOAN");

                entity.Property(e => e.LoanProductKeyPaidLoan).HasColumnName("LOAN_PRODUCT_KEY_PAID_LOAN");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.UpdatedBy)
                    .HasColumnName("UPDATED_BY")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.LoanProductKeyNewLoanNavigation)
                    .WithMany(p => p.LoanProductRollover)
                    .HasForeignKey(d => d.LoanProductKeyNewLoan)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LoanProductRollover_LOAN_PRODUCT_KEY_NEW_LOAN");

                entity.HasOne(d => d.LoanProductKeyPaidLoanNavigation)
                    .WithMany(p => p.LoanProductRollover)
                    .HasForeignKey(d => d.LoanProductKeyPaidLoan)
                    .HasConstraintName("FK_LoanProductRollover_LOAN_PRODUCT_KEY_PAID_LOAN");

                entity.HasOne(d => d.LocationNavigation)
                    .WithMany(p => p.LoanProductRollover)
                    .HasForeignKey(d => d.Location)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LoanProductRollover_LOCATION");
            });

            modelBuilder.Entity<LoanProductTila>(entity =>
            {
                entity.HasKey(e => e.LoanProductTilaKey)
                    .HasName("PK_LoanProductTila");

                entity.Property(e => e.LoanProductTilaKey).HasColumnName("LOAN_PRODUCT_TILA_KEY");

                entity.Property(e => e.AddressFormat)
                    .IsRequired()
                    .HasColumnName("ADDRESS_FORMAT")
                    .HasColumnType("char(3)");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateUpdated)
                    .HasColumnName("DATE_UPDATED")
                    .HasColumnType("datetime");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.LoansCount).HasColumnName("LOANS_COUNT");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.TilaAddrStreet)
                    .IsRequired()
                    .HasColumnName("TILA_ADDR_STREET")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.TilaAddress1)
                    .IsRequired()
                    .HasColumnName("TILA_ADDRESS1")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.TilaAddressCsz)
                    .HasColumnName("TILA_ADDRESS_CSZ")
                    .HasColumnType("varchar(100)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_CSZ]([ADDRESS_FORMAT],[TILA_CITY],[TILA_STATE],[TILA_ZIPCODE])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.TilaAddressLine)
                    .HasColumnName("TILA_ADDRESS_LINE")
                    .HasColumnType("varchar(100)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE]([ADDRESS_FORMAT],[TILA_ADDRESS1],'','',[TILA_ADDR_STREET],'','','','',[TILA_FLAT_NUM],[TILA_BUILDING_NAME],[TILA_BUILDING_NUM])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.TilaAddressLine1)
                    .HasColumnName("TILA_ADDRESS_LINE_1")
                    .HasColumnType("varchar(100)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE_1]([ADDRESS_FORMAT],[TILA_ADDRESS1],'','',[TILA_ADDR_STREET],'','',[TILA_FLAT_NUM],[TILA_BUILDING_NAME],'','')")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.TilaAddressLine2)
                    .HasColumnName("TILA_ADDRESS_LINE_2")
                    .HasColumnType("varchar(150)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE_2]([ADDRESS_FORMAT],'','',[TILA_CITY],[TILA_STATE],[TILA_ZIPCODE],[TILA_BUILDING_NUM],[TILA_ADDR_STREET],[TILA_ADDRESS1],'','','','')")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.TilaAddressLine3)
                    .HasColumnName("TILA_ADDRESS_LINE_3")
                    .HasColumnType("varchar(150)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE_3]([ADDRESS_FORMAT],'','',[TILA_CITY],[TILA_STATE],[TILA_ZIPCODE])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.TilaBuildingName)
                    .IsRequired()
                    .HasColumnName("TILA_BUILDING_NAME")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.TilaBuildingNum)
                    .IsRequired()
                    .HasColumnName("TILA_BUILDING_NUM")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.TilaCertNum)
                    .IsRequired()
                    .HasColumnName("TILA_CERT_NUM")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.TilaCity)
                    .IsRequired()
                    .HasColumnName("TILA_CITY")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.TilaCountry)
                    .IsRequired()
                    .HasColumnName("TILA_COUNTRY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.TilaCounty)
                    .IsRequired()
                    .HasColumnName("TILA_COUNTY")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.TilaFlatNum)
                    .IsRequired()
                    .HasColumnName("TILA_FLAT_NUM")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.TilaName)
                    .IsRequired()
                    .HasColumnName("TILA_NAME")
                    .HasColumnType("varchar(75)");

                entity.Property(e => e.TilaPhone)
                    .IsRequired()
                    .HasColumnName("TILA_PHONE")
                    .HasColumnType("varchar(14)");

                entity.Property(e => e.TilaState)
                    .IsRequired()
                    .HasColumnName("TILA_STATE")
                    .HasColumnType("char(2)");

                entity.Property(e => e.TilaZipcode)
                    .IsRequired()
                    .HasColumnName("TILA_ZIPCODE")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.UpdatedBy)
                    .HasColumnName("UPDATED_BY")
                    .HasColumnType("char(3)");
            });

            modelBuilder.Entity<LoanService>(entity =>
            {
                entity.HasKey(e => e.LoanServiceKey)
                    .HasName("PK_LoanService");

                entity.HasIndex(e => e.LoanKey)
                    .HasName("IX_LoanService_LOAN_KEY");

                entity.Property(e => e.LoanServiceKey).HasColumnName("LOAN_SERVICE_KEY");

                entity.Property(e => e.DownPayment)
                    .HasColumnName("DOWN_PAYMENT")
                    .HasColumnType("decimal");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.MarkDown)
                    .HasColumnName("MARK_DOWN")
                    .HasColumnType("decimal");

                entity.Property(e => e.Price)
                    .HasColumnName("PRICE")
                    .HasColumnType("decimal");

                entity.Property(e => e.SalesTax)
                    .HasColumnName("SALES_TAX")
                    .HasColumnType("decimal");

                entity.Property(e => e.ServiceCost)
                    .HasColumnName("SERVICE_COST")
                    .HasColumnType("decimal");

                entity.Property(e => e.ServiceDetailKey).HasColumnName("SERVICE_DETAIL_KEY");

                entity.HasOne(d => d.LoanKeyNavigation)
                    .WithMany(p => p.LoanService)
                    .HasForeignKey(d => d.LoanKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LoanService_Loan");

                entity.HasOne(d => d.ServiceDetailKeyNavigation)
                    .WithMany(p => p.LoanService)
                    .HasForeignKey(d => d.ServiceDetailKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LoanService_ServiceDetail");
            });

            modelBuilder.Entity<LoanStatusChange>(entity =>
            {
                entity.HasKey(e => e.LoanStatusChangeKey)
                    .HasName("PK_LoanStatusChange");

                entity.HasIndex(e => e.LoanKey)
                    .HasName("IX_LoanStatusChange_LOAN_KEY");

                entity.HasIndex(e => e.TransDetailKey)
                    .HasName("IX_LoanStatusChange_TRANS_DETAIL_KEY");

                entity.Property(e => e.LoanStatusChangeKey).HasColumnName("LOAN_STATUS_CHANGE_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.NewLoanDefaulted)
                    .HasColumnName("NEW_LOAN_DEFAULTED")
                    .HasColumnType("LOGICAL");

                entity.Property(e => e.NewLoanStatus)
                    .IsRequired()
                    .HasColumnName("NEW_LOAN_STATUS")
                    .HasColumnType("char(1)");

                entity.Property(e => e.OldLoanDefaulted)
                    .HasColumnName("OLD_LOAN_DEFAULTED")
                    .HasColumnType("LOGICAL");

                entity.Property(e => e.OldLoanStatus)
                    .IsRequired()
                    .HasColumnName("OLD_LOAN_STATUS")
                    .HasColumnType("char(1)");

                entity.Property(e => e.ReasonDefaulted)
                    .HasColumnName("REASON_DEFAULTED")
                    .HasColumnType("char(1)");

                entity.Property(e => e.Reversed)
                    .HasColumnName("REVERSED")
                    .HasColumnType("LOGICAL");

                entity.Property(e => e.ReversedDate)
                    .HasColumnName("REVERSED_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");
            });

            modelBuilder.Entity<LoanWebReviewTemplateXref>(entity =>
            {
                entity.HasKey(e => e.LoanWebReviewTemplateKey)
                    .HasName("PK_LoanWebReviewTemplateXref");

                entity.Property(e => e.LoanWebReviewTemplateKey).HasColumnName("LOAN_WEB_REVIEW_TEMPLATE_KEY");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.WebReviewTemplateKey).HasColumnName("WEB_REVIEW_TEMPLATE_KEY");

                entity.HasOne(d => d.LoanKeyNavigation)
                    .WithMany(p => p.LoanWebReviewTemplateXref)
                    .HasForeignKey(d => d.LoanKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LoanWebReviewTemplateXref_Loan");

                entity.HasOne(d => d.WebReviewTemplateKeyNavigation)
                    .WithMany(p => p.LoanWebReviewTemplateXref)
                    .HasForeignKey(d => d.WebReviewTemplateKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LoanWebReviewTemplate_WebReviewTemplate");
            });

            modelBuilder.Entity<LocaleSetting>(entity =>
            {
                entity.HasKey(e => e.LocaleSettingKey)
                    .HasName("PK_LocaleSetting");

                entity.Property(e => e.LocaleSettingKey).HasColumnName("LOCALE_SETTING_KEY");

                entity.Property(e => e.AddressFormat)
                    .IsRequired()
                    .HasColumnName("ADDRESS_FORMAT")
                    .HasColumnType("varchar(3)");

                entity.Property(e => e.CurrencySymbol)
                    .IsRequired()
                    .HasColumnName("CURRENCY_SYMBOL")
                    .HasColumnType("char(1)");

                entity.Property(e => e.DebitCardMaxLen).HasColumnName("DEBIT_CARD_MAX_LEN");

                entity.Property(e => e.EnableHpi).HasColumnName("ENABLE_HPI");

                entity.Property(e => e.EnableIat).HasColumnName("ENABLE_IAT");

                entity.Property(e => e.EnableKbb).HasColumnName("ENABLE_KBB");

                entity.Property(e => e.EnableVerifyBank).HasColumnName("ENABLE_VERIFY_BANK");

                entity.Property(e => e.PhoneFormat)
                    .IsRequired()
                    .HasColumnName("PHONE_FORMAT")
                    .HasColumnType("varchar(15)");

                entity.Property(e => e.ShowItem).HasColumnName("SHOW_ITEM");

                entity.Property(e => e.SsnOrNin)
                    .IsRequired()
                    .HasColumnName("SSN_OR_NIN")
                    .HasColumnType("char(3)");

                entity.Property(e => e.ZipFormat)
                    .IsRequired()
                    .HasColumnName("ZIP_FORMAT")
                    .HasColumnType("varchar(10)");
            });

            modelBuilder.Entity<LocaleTranslator>(entity =>
            {
                entity.HasKey(e => e.LocaleTranslatorKey)
                    .HasName("PK_LocaleTranslator");

                entity.Property(e => e.LocaleTranslatorKey).HasColumnName("LOCALE_TRANSLATOR_KEY");

                entity.Property(e => e.CountryCode)
                    .IsRequired()
                    .HasColumnName("COUNTRY_CODE")
                    .HasColumnType("char(3)");

                entity.Property(e => e.EnglishValue)
                    .IsRequired()
                    .HasColumnName("ENGLISH_VALUE")
                    .HasColumnType("varchar(75)");

                entity.Property(e => e.ExactMatchOnly).HasColumnName("EXACT_MATCH_ONLY");

                entity.Property(e => e.LocaleValue)
                    .IsRequired()
                    .HasColumnName("LOCALE_VALUE")
                    .HasColumnType("varchar(75)");
            });

            modelBuilder.Entity<LocationConverted>(entity =>
            {
                entity.HasKey(e => e.LocationConvertedKey)
                    .HasName("PK_LocationConverted");

                entity.Property(e => e.LocationConvertedKey).HasColumnName("LOCATION_CONVERTED_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.RunOpenLoanCheck)
                    .HasColumnName("RUN_OPEN_LOAN_CHECK")
                    .HasDefaultValueSql("1");
            });

            modelBuilder.Entity<LocationUsZipcodesXref>(entity =>
            {
                entity.HasKey(e => new { e.Location, e.Zipcode })
                    .HasName("IX_LocationUS_ZipcodesXRef_ZIPCODE");

                entity.ToTable("LocationUS_ZipcodesXRef");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.Zipcode)
                    .HasColumnName("ZIPCODE")
                    .HasColumnType("char(7)");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Enabled).HasColumnName("ENABLED");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.LastUpdated)
                    .HasColumnName("LAST_UPDATED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.LenderKey).HasColumnName("LENDER_KEY");

                entity.Property(e => e.UpdatedBy)
                    .HasColumnName("UPDATED_BY")
                    .HasColumnType("varchar(50)");

                entity.HasOne(d => d.LocationNavigation)
                    .WithMany(p => p.LocationUsZipcodesXref)
                    .HasForeignKey(d => d.Location)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LocationUS_ZipcodesXRef_LOCATION");

                entity.HasOne(d => d.ZipcodeNavigation)
                    .WithMany(p => p.LocationUsZipcodesXref)
                    .HasForeignKey(d => d.Zipcode)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_LocationUS_ZipcodesXRef_ZIPCODE");
            });

            modelBuilder.Entity<MarketingInvitation>(entity =>
            {
                entity.HasKey(e => e.MarketingInvitationKey)
                    .HasName("PK_MarketingInvitation");

                entity.HasIndex(e => e.ReservationCode)
                    .HasName("UC_RESERVATION_CODE")
                    .IsUnique();

                entity.HasIndex(e => e.VisitorKey)
                    .HasName("IX_MarketingInvitaion_VISITOR_KEY");

                entity.HasIndex(e => new { e.State, e.KeyCode, e.ExpirationDate })
                    .HasName("idx_KeyCode_ExpirationDate");

                entity.HasIndex(e => new { e.IdentificationInfo, e.City, e.State, e.ZipCode })
                    .HasName("IX_MarketingInvitation_IDENTIFICATION_INFO_CITY_STATE_ZIP_CODE");

                entity.Property(e => e.MarketingInvitationKey).HasColumnName("MARKETING_INVITATION_KEY");

                entity.Property(e => e.ApprovedAmount)
                    .HasColumnName("APPROVED_AMOUNT")
                    .HasColumnType("decimal");

                entity.Property(e => e.CarrierRouteTypeWithNumber)
                    .HasColumnName("CARRIER_ROUTE_TYPE_WITH_NUMBER")
                    .HasColumnType("varchar(4)");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasColumnName("CITY")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.CityStateZipZip4)
                    .IsRequired()
                    .HasColumnName("CITY_STATE_ZIP_ZIP_4")
                    .HasColumnType("varchar(150)");

                entity.Property(e => e.CountyName)
                    .HasColumnName("COUNTY_NAME")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.DeliveryPointBarcode).HasColumnName("DELIVERY_POINT_BARCODE");

                entity.Property(e => e.DisasterZipFlag).HasColumnName("DISASTER_ZIP_FLAG");

                entity.Property(e => e.ExpirationDate)
                    .HasColumnName("EXPIRATION_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasColumnName("FIRST_NAME")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasColumnName("FULL_NAME")
                    .HasColumnType("varchar(75)");

                entity.Property(e => e.IdentificationInfo)
                    .IsRequired()
                    .HasColumnName("IDENTIFICATION_INFO")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.KeyCode)
                    .HasColumnName("KEY_CODE")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasColumnName("LAST_NAME")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.LineOfTravel)
                    .HasColumnName("LINE_OF_TRAVEL")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.LoanApplicationKey).HasColumnName("LOAN_APPLICATION_KEY");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.LoanType)
                    .IsRequired()
                    .HasColumnName("LOAN_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.MailDate)
                    .HasColumnName("MAIL_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.MailType)
                    .HasColumnName("MAIL_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.MiddleInitial)
                    .HasColumnName("MIDDLE_INITIAL")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.MinimumIncome)
                    .HasColumnName("MINIMUM_INCOME")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NamePrefix)
                    .HasColumnName("NAME_PREFIX")
                    .HasColumnType("varchar(3)");

                entity.Property(e => e.NameSuffix)
                    .HasColumnName("NAME_SUFFIX")
                    .HasColumnType("varchar(3)");

                entity.Property(e => e.PrimaryAddress)
                    .IsRequired()
                    .HasColumnName("PRIMARY_ADDRESS")
                    .HasColumnType("varchar(150)");

                entity.Property(e => e.ProductType)
                    .IsRequired()
                    .HasColumnName("PRODUCT_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.ReservationCode).HasColumnName("RESERVATION_CODE");

                entity.Property(e => e.SecondaryAddress)
                    .HasColumnName("SECONDARY_ADDRESS")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasColumnName("STATE")
                    .HasColumnType("char(2)");

                entity.Property(e => e.StateCountyCode).HasColumnName("STATE_COUNTY_CODE");

                entity.Property(e => e.StreetName)
                    .IsRequired()
                    .HasColumnName("STREET_NAME")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.StreetNumber)
                    .IsRequired()
                    .HasColumnName("STREET_NUMBER")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.StreetPostDirectional)
                    .HasColumnName("STREET_POST_DIRECTIONAL")
                    .HasColumnType("varchar(2)");

                entity.Property(e => e.StreetPreDirectional)
                    .HasColumnName("STREET_PRE_DIRECTIONAL")
                    .HasColumnType("varchar(2)");

                entity.Property(e => e.StreetSuffix)
                    .HasColumnName("STREET_SUFFIX")
                    .HasColumnType("varchar(5)");

                entity.Property(e => e.UnitDesignator)
                    .HasColumnName("UNIT_DESIGNATOR")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.UnitNumber)
                    .HasColumnName("UNIT_NUMBER")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.VisitorKey).HasColumnName("VISITOR_KEY");

                entity.Property(e => e.Zip4)
                    .HasColumnName("ZIP_4")
                    .HasColumnType("varchar(4)");

                entity.Property(e => e.ZipCode)
                    .IsRequired()
                    .HasColumnName("ZIP_CODE")
                    .HasColumnType("varchar(5)");
            });

            modelBuilder.Entity<MarketingInvitationHistory>(entity =>
            {
                entity.HasKey(e => e.MarketingInvitationHistoryKey)
                    .HasName("PK_MarketingInvitationHistory");

                entity.HasIndex(e => e.ReservationCode)
                    .HasName("IX_MarketingInvitationHistory_RESERVATION_CODE");

                entity.Property(e => e.MarketingInvitationHistoryKey).HasColumnName("MARKETING_INVITATION_HISTORY_KEY");

                entity.Property(e => e.Attributes).HasColumnName("ATTRIBUTES");

                entity.Property(e => e.Comments)
                    .HasColumnName("COMMENTS")
                    .HasMaxLength(250);

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.ReservationCode).HasColumnName("RESERVATION_CODE");
            });

            modelBuilder.Entity<Markets>(entity =>
            {
                entity.HasKey(e => e.MarketKey)
                    .HasName("PK_Markets");

                entity.Property(e => e.MarketKey).HasColumnName("MARKET_KEY");

                entity.Property(e => e.LocaleSettingKey).HasColumnName("LOCALE_SETTING_KEY");

                entity.Property(e => e.MarketDesc)
                    .HasColumnName("MARKET_DESC")
                    .HasColumnType("varchar(50)");
            });

            modelBuilder.Entity<Message>(entity =>
            {
                entity.HasKey(e => e.MessageKey)
                    .HasName("PK_Message");

                entity.HasIndex(e => e.MessageClassKey)
                    .HasName("IX_Message_MESSAGE_CLASS_KEY");

                entity.HasIndex(e => e.MessageClientKey)
                    .HasName("IX_Message_MESSAGE_CLIENT_KEY");

                entity.HasIndex(e => e.MessageScenarioKey)
                    .HasName("IX_Message_MESSAGE_SCENARIO_KEY");

                entity.Property(e => e.MessageKey).HasColumnName("MESSAGE_KEY");

                entity.Property(e => e.MessageClassKey).HasColumnName("MESSAGE_CLASS_KEY");

                entity.Property(e => e.MessageClientKey).HasColumnName("MESSAGE_CLIENT_KEY");

                entity.Property(e => e.MessageDirective)
                    .HasColumnName("MESSAGE_DIRECTIVE")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.MessageScenarioKey).HasColumnName("MESSAGE_SCENARIO_KEY");

                entity.Property(e => e.MessageText)
                    .IsRequired()
                    .HasColumnName("MESSAGE_TEXT")
                    .HasColumnType("varchar(max)");

                entity.HasOne(d => d.MessageClassKeyNavigation)
                    .WithMany(p => p.Message)
                    .HasForeignKey(d => d.MessageClassKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_Message_MessageClass");

                entity.HasOne(d => d.MessageClientKeyNavigation)
                    .WithMany(p => p.Message)
                    .HasForeignKey(d => d.MessageClientKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_Message_MessageClient");

                entity.HasOne(d => d.MessageScenarioKeyNavigation)
                    .WithMany(p => p.Message)
                    .HasForeignKey(d => d.MessageScenarioKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_Message_MessageScenario");
            });

            modelBuilder.Entity<MessageClass>(entity =>
            {
                entity.HasKey(e => e.MessageClassKey)
                    .HasName("PK_MessageClass");

                entity.HasIndex(e => e.MessageClassId)
                    .HasName("UC_MessageClass_MessageClassId")
                    .IsUnique();

                entity.Property(e => e.MessageClassKey).HasColumnName("MESSAGE_CLASS_KEY");

                entity.Property(e => e.MessageClassDescription)
                    .HasColumnName("MESSAGE_CLASS_DESCRIPTION")
                    .HasColumnType("varchar(250)");

                entity.Property(e => e.MessageClassId).HasColumnName("MESSAGE_CLASS_ID");

                entity.Property(e => e.MessageClassName)
                    .IsRequired()
                    .HasColumnName("MESSAGE_CLASS_NAME")
                    .HasColumnType("varchar(50)");
            });

            modelBuilder.Entity<MessageClient>(entity =>
            {
                entity.HasKey(e => e.MessageClientKey)
                    .HasName("PK_MessageClient");

                entity.HasIndex(e => e.MessageClientId)
                    .HasName("UC_MessageClient_MessageClientId")
                    .IsUnique();

                entity.Property(e => e.MessageClientKey).HasColumnName("MESSAGE_CLIENT_KEY");

                entity.Property(e => e.MessageClientDescription)
                    .HasColumnName("MESSAGE_CLIENT_DESCRIPTION")
                    .HasColumnType("varchar(250)");

                entity.Property(e => e.MessageClientId).HasColumnName("MESSAGE_CLIENT_ID");

                entity.Property(e => e.MessageClientName)
                    .IsRequired()
                    .HasColumnName("MESSAGE_CLIENT_NAME")
                    .HasColumnType("varchar(50)");
            });

            modelBuilder.Entity<MessageScenario>(entity =>
            {
                entity.HasKey(e => e.MessageScenarioKey)
                    .HasName("PK_MessageScenario");

                entity.HasIndex(e => e.MessageScenarioId)
                    .HasName("UC_MessageScenario_MessageScenarioId")
                    .IsUnique();

                entity.Property(e => e.MessageScenarioKey).HasColumnName("MESSAGE_SCENARIO_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MessageScenarioDescription)
                    .HasColumnName("MESSAGE_SCENARIO_DESCRIPTION")
                    .HasColumnType("varchar(250)");

                entity.Property(e => e.MessageScenarioId).HasColumnName("MESSAGE_SCENARIO_ID");

                entity.Property(e => e.MessageScenarioName)
                    .IsRequired()
                    .HasColumnName("MESSAGE_SCENARIO_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");
            });

            modelBuilder.Entity<MetroIibaseSegment>(entity =>
            {
                entity.HasKey(e => e.MetroiiBaseSegmentKey)
                    .HasName("PK_MetroIIBaseSegment");

                entity.ToTable("MetroIIBaseSegment");

                entity.Property(e => e.MetroiiBaseSegmentKey).HasColumnName("METROII_BASE_SEGMENT_KEY");

                entity.Property(e => e.AccountStatus)
                    .HasColumnName("ACCOUNT_STATUS")
                    .HasColumnType("char(2)");

                entity.Property(e => e.AccountType)
                    .IsRequired()
                    .HasColumnName("ACCOUNT_TYPE")
                    .HasColumnType("char(2)");

                entity.Property(e => e.ActualPaymentAmount).HasColumnName("ACTUAL_PAYMENT_AMOUNT");

                entity.Property(e => e.AddressIndicator)
                    .IsRequired()
                    .HasColumnName("ADDRESS_INDICATOR")
                    .HasColumnType("char(1)");

                entity.Property(e => e.AddressLine1)
                    .IsRequired()
                    .HasColumnName("ADDRESS_LINE_1")
                    .HasColumnType("varchar(32)");

                entity.Property(e => e.AddressLine2)
                    .IsRequired()
                    .HasColumnName("ADDRESS_LINE_2")
                    .HasColumnType("varchar(32)");

                entity.Property(e => e.AmountPastDue).HasColumnName("AMOUNT_PAST_DUE");

                entity.Property(e => e.AssociationCode)
                    .IsRequired()
                    .HasColumnName("ASSOCIATION_CODE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasColumnName("CITY")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.ComplianceConditionCode)
                    .HasColumnName("COMPLIANCE_CONDITION_CODE")
                    .HasColumnType("varchar(2)");

                entity.Property(e => e.ConsumerAccountNumber).HasColumnName("CONSUMER_ACCOUNT_NUMBER");

                entity.Property(e => e.ConsumerInformationIndicator)
                    .HasColumnName("CONSUMER_INFORMATION_INDICATOR")
                    .HasColumnType("varchar(2)");

                entity.Property(e => e.ConsumerTransactionType)
                    .IsRequired()
                    .HasColumnName("CONSUMER_TRANSACTION_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.CorrectionIndicator)
                    .IsRequired()
                    .HasColumnName("CORRECTION_INDICATOR")
                    .HasColumnType("char(1)");

                entity.Property(e => e.CountryCode)
                    .HasColumnName("COUNTRY_CODE")
                    .HasColumnType("char(2)");

                entity.Property(e => e.CreditLimit).HasColumnName("CREDIT_LIMIT");

                entity.Property(e => e.CurrentBalance).HasColumnName("CURRENT_BALANCE");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.CycleIdentifier)
                    .HasColumnName("CYCLE_IDENTIFIER")
                    .HasColumnType("varchar(2)");

                entity.Property(e => e.DateClosed)
                    .HasColumnName("DATE_CLOSED")
                    .HasColumnType("date");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("date");

                entity.Property(e => e.DateFirstDelinquency)
                    .HasColumnName("DATE_FIRST_DELINQUENCY")
                    .HasColumnType("date");

                entity.Property(e => e.DateLastPayment)
                    .HasColumnName("DATE_LAST_PAYMENT")
                    .HasColumnType("date");

                entity.Property(e => e.DateOfBirth)
                    .HasColumnName("DATE_OF_BIRTH")
                    .HasColumnType("date");

                entity.Property(e => e.DateOpened)
                    .HasColumnName("DATE_OPENED")
                    .HasColumnType("date");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasColumnName("FIRST_NAME")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.GenerationCode)
                    .HasColumnName("GENERATION_CODE")
                    .HasColumnType("varchar(1)");

                entity.Property(e => e.IdentificationNumber)
                    .IsRequired()
                    .HasColumnName("IDENTIFICATION_NUMBER")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.MiddleName)
                    .IsRequired()
                    .HasColumnName("MIDDLE_NAME")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.OriginalChargeOffAmount).HasColumnName("ORIGINAL_CHARGE_OFF_AMOUNT");

                entity.Property(e => e.OriginalLoanAmount).HasColumnName("ORIGINAL_LOAN_AMOUNT");

                entity.Property(e => e.PaymentHistoryProfile)
                    .IsRequired()
                    .HasColumnName("PAYMENT_HISTORY_PROFILE")
                    .HasColumnType("varchar(24)");

                entity.Property(e => e.PaymentRating)
                    .IsRequired()
                    .HasColumnName("PAYMENT_RATING")
                    .HasColumnType("char(1)");

                entity.Property(e => e.PortfolioType)
                    .IsRequired()
                    .HasColumnName("PORTFOLIO_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.PostalCode)
                    .IsRequired()
                    .HasColumnName("POSTAL_CODE")
                    .HasColumnType("varchar(9)");

                entity.Property(e => e.Province)
                    .IsRequired()
                    .HasColumnName("PROVINCE")
                    .HasColumnType("char(2)");

                entity.Property(e => e.ResidenceCode)
                    .IsRequired()
                    .HasColumnName("RESIDENCE_CODE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.SchedulePaymentAmount).HasColumnName("SCHEDULE_PAYMENT_AMOUNT");

                entity.Property(e => e.SocialInsuranceNumber)
                    .IsRequired()
                    .HasColumnName("SOCIAL_INSURANCE_NUMBER")
                    .HasColumnType("varchar(9)");

                entity.Property(e => e.SpecialComment)
                    .HasColumnName("SPECIAL_COMMENT")
                    .HasColumnType("varchar(2)");

                entity.Property(e => e.Surname)
                    .IsRequired()
                    .HasColumnName("SURNAME")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.TelephoneNumber)
                    .IsRequired()
                    .HasColumnName("TELEPHONE_NUMBER")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.TermsDuration).HasColumnName("TERMS_DURATION");

                entity.Property(e => e.TermsFrequency)
                    .IsRequired()
                    .HasColumnName("TERMS_FREQUENCY")
                    .HasColumnType("char(1)");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.MetroIibaseSegment)
                    .HasForeignKey(d => d.CustomerKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_MetroIIBaseSegment_Customer");
            });

            modelBuilder.Entity<MimeType>(entity =>
            {
                entity.HasKey(e => e.MimeTypeKey)
                    .HasName("PK_MimeType");

                entity.HasIndex(e => e.MimeType1)
                    .HasName("UX_MimeType")
                    .IsUnique();

                entity.Property(e => e.MimeTypeKey).HasColumnName("MIME_TYPE_KEY");

                entity.Property(e => e.FileExtension)
                    .HasColumnName("FILE_EXTENSION")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.MimeType1)
                    .IsRequired()
                    .HasColumnName("MIME_TYPE")
                    .HasColumnType("varchar(50)");
            });

            modelBuilder.Entity<Mostatus>(entity =>
            {
                entity.HasKey(e => e.SequenceNo)
                    .HasName("PK_MOStatus");

                entity.ToTable("MOStatus");

                entity.HasIndex(e => new { e.StatusCode, e.Location, e.PrinterNumber })
                    .HasName("IX_MOStatus_STATUS_LOCATION_PRINTER");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.Error).HasColumnType("varchar(100)");

                entity.Property(e => e.Monumber)
                    .HasColumnName("MONumber")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.SubmitTime).HasColumnType("datetime");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnType("char(3)");

                entity.Property(e => e.TellerFirstname)
                    .IsRequired()
                    .HasColumnName("TELLER_FIRSTNAME")
                    .HasColumnType("varchar(15)");

                entity.Property(e => e.TellerLastname)
                    .IsRequired()
                    .HasColumnName("TELLER_LASTNAME")
                    .HasColumnType("varchar(15)");
            });

            modelBuilder.Entity<MostatusHistory>(entity =>
            {
                entity.HasKey(e => e.SequenceNo)
                    .HasName("PK_MOStatusHistory");

                entity.ToTable("MOStatusHistory");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.Error).HasColumnType("varchar(100)");

                entity.Property(e => e.Monumber)
                    .HasColumnName("MONumber")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.SubmitTime).HasColumnType("datetime");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnType("char(3)");

                entity.Property(e => e.TellerFirstname)
                    .IsRequired()
                    .HasColumnName("TELLER_FIRSTNAME")
                    .HasColumnType("varchar(15)");

                entity.Property(e => e.TellerLastname)
                    .IsRequired()
                    .HasColumnName("TELLER_LASTNAME")
                    .HasColumnType("varchar(15)");
            });

            modelBuilder.Entity<MpayAmort>(entity =>
            {
                entity.HasKey(e => e.MpayAmortKey)
                    .HasName("PK_MPayAmort");

                entity.ToTable("MPayAmort");

                entity.HasIndex(e => new { e.LoanKey, e.PaymentNum })
                    .HasName("IX_MPayAmort_LOAN_KEY_PAYMENT_NUM")
                    .IsUnique();

                entity.HasIndex(e => new { e.PaymentNum, e.PaymentDate, e.PaymentAmt, e.PrincAmt, e.LoanKey })
                    .HasName("IX_MPayAmort_LOAN_KEY");

                entity.Property(e => e.MpayAmortKey).HasColumnName("MPAY_AMORT_KEY");

                entity.Property(e => e.AdjustedPaymentDate)
                    .HasColumnName("ADJUSTED_PAYMENT_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.Balance)
                    .HasColumnName("BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CabInterestAmt)
                    .HasColumnName("CAB_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.DiscountAmt)
                    .HasColumnName("DISCOUNT_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.InsuranceFeeAmt)
                    .HasColumnName("INSURANCE_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.InterestAmt)
                    .HasColumnName("INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanFeeAmt)
                    .HasColumnName("LOAN_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.PaymentAmt)
                    .HasColumnName("PAYMENT_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PaymentDate)
                    .HasColumnName("PAYMENT_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.PaymentNum).HasColumnName("PAYMENT_NUM");

                entity.Property(e => e.PrincAmt)
                    .HasColumnName("PRINC_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TransFeeAmt)
                    .HasColumnName("TRANS_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.HasOne(d => d.LoanKeyNavigation)
                    .WithMany(p => p.MpayAmort)
                    .HasForeignKey(d => d.LoanKey)
                    .HasConstraintName("FK_MPayAmort_Loan");
            });

            modelBuilder.Entity<MpayAmortDueDateChange>(entity =>
            {
                entity.HasKey(e => e.MpayAmortDueDateChangeKey)
                    .HasName("PK_MPayAmortDueDateChange");

                entity.ToTable("MPayAmortDueDateChange");

                entity.HasIndex(e => e.LoanKey)
                    .HasName("IX_MPayAmortDueDateChange_LOAN_KEY");

                entity.HasIndex(e => e.MpayAmortKey)
                    .HasName("MPayAmortDueDateChange_MPayAmortKey");

                entity.Property(e => e.MpayAmortDueDateChangeKey).HasColumnName("MPAY_AMORT_DUE_DATE_CHANGE_KEY");

                entity.Property(e => e.AdjustedDueDate)
                    .HasColumnName("ADJUSTED_DUE_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.DateDeleted)
                    .HasColumnName("DATE_DELETED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy)
                    .HasColumnName("DELETED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.IsDeleted).HasColumnName("IS_DELETED");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.MpayAmortKey).HasColumnName("MPAY_AMORT_KEY");

                entity.HasOne(d => d.LoanKeyNavigation)
                    .WithMany(p => p.MpayAmortDueDateChange)
                    .HasForeignKey(d => d.LoanKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_MPayAmortDueDateChange_Loan");

                entity.HasOne(d => d.MpayAmortKeyNavigation)
                    .WithMany(p => p.MpayAmortDueDateChange)
                    .HasForeignKey(d => d.MpayAmortKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_MPayAmortDueDateChange_MPayAmort");
            });

            modelBuilder.Entity<MpayInterest>(entity =>
            {
                entity.HasKey(e => e.MpayInterestKey)
                    .HasName("PK_MPayInterest");

                entity.ToTable("MPayInterest");

                entity.HasIndex(e => e.LoanKey)
                    .HasName("IX_MPayInterest_LOAN_KEY");

                entity.HasIndex(e => new { e.InterestAdded, e.TransFeeAdded, e.CabInterestAdded, e.LoanKey })
                    .HasName("IX_MPayInterest_LOAN_KEY2");

                entity.HasIndex(e => new { e.InterestAdded, e.DateEntered, e.TransFeeAdded, e.MpayInterestKey, e.PrincDue, e.LoanBalance, e.IsAchAdj, e.IsErrAdj, e.LoanKey, e.InterestDate })
                    .HasName("IX_MPayInterest_LOAN_KEY_INTEREST_DATE");

                entity.Property(e => e.MpayInterestKey).HasColumnName("MPAY_INTEREST_KEY");

                entity.Property(e => e.CabInterestAdded)
                    .HasColumnName("CAB_INTEREST_ADDED")
                    .HasColumnType("numeric");

                entity.Property(e => e.CollectionsAmt)
                    .HasColumnName("COLLECTIONS_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.InterestAdded)
                    .HasColumnName("INTEREST_ADDED")
                    .HasColumnType("numeric");

                entity.Property(e => e.InterestDate)
                    .HasColumnName("INTEREST_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsAchAdj).HasColumnName("IS_ACH_ADJ");

                entity.Property(e => e.IsDiscount).HasColumnName("IS_DISCOUNT");

                entity.Property(e => e.IsErrAdj).HasColumnName("IS_ERR_ADJ");

                entity.Property(e => e.LoanBalance)
                    .HasColumnName("LOAN_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.PrincDue)
                    .HasColumnName("PRINC_DUE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TransFeeAdded)
                    .HasColumnName("TRANS_FEE_ADDED")
                    .HasColumnType("numeric");

                entity.HasOne(d => d.LoanKeyNavigation)
                    .WithMany(p => p.MpayInterest)
                    .HasForeignKey(d => d.LoanKey)
                    .HasConstraintName("FK_MPayInterest_Loan");
            });

            modelBuilder.Entity<MpayLoan>(entity =>
            {
                entity.HasKey(e => e.MpayLoanKey)
                    .HasName("PK_MPayLoan");

                entity.ToTable("MPayLoan");

                entity.HasIndex(e => new { e.LastPaymentAmt, e.LastPaymentDate, e.LoanKey })
                    .HasName("IX_MPayLoan_LOAN_KEY");

                entity.HasIndex(e => new { e.LoanKey, e.LastPaymentDate, e.CollectionsBal })
                    .HasName("IX_MPayLoan_COLLECTIONS_BAL_LOAN_KEY_LAST_PAYMENT_DATE");

                entity.Property(e => e.MpayLoanKey).HasColumnName("MPAY_LOAN_KEY");

                entity.Property(e => e.ActuarialApr)
                    .HasColumnName("ACTUARIAL_APR")
                    .HasColumnType("numeric");

                entity.Property(e => e.AdjustedMaturityDate)
                    .HasColumnName("ADJUSTED_MATURITY_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.AmortPaymentCnt).HasColumnName("AMORT_PAYMENT_CNT");

                entity.Property(e => e.AnnualRatePct)
                    .HasColumnName("ANNUAL_RATE_PCT")
                    .HasColumnType("numeric");

                entity.Property(e => e.ApplyDiscountTo)
                    .IsRequired()
                    .HasColumnName("APPLY_DISCOUNT_TO")
                    .HasColumnType("char(1)");

                entity.Property(e => e.CabAnnualRatePct)
                    .HasColumnName("CAB_ANNUAL_RATE_PCT")
                    .HasColumnType("numeric");

                entity.Property(e => e.CabCollFeePastDueBal)
                    .HasColumnName("CAB_COLL_FEE_PAST_DUE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CabDailyRatePct)
                    .HasColumnName("CAB_DAILY_RATE_PCT")
                    .HasColumnType("numeric");

                entity.Property(e => e.CabInterestDueBal)
                    .HasColumnName("CAB_INTEREST_DUE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CabMonthlyRatePct)
                    .HasColumnName("CAB_MONTHLY_RATE_PCT")
                    .HasColumnType("numeric");

                entity.Property(e => e.ClosedDate)
                    .HasColumnName("CLOSED_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.CollFeePastDueBal)
                    .HasColumnName("COLL_FEE_PAST_DUE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CollectionDays).HasColumnName("COLLECTION_DAYS");

                entity.Property(e => e.CollectionsBal)
                    .HasColumnName("COLLECTIONS_BAL")
                    .HasColumnType("smallmoney")
                    .HasComputedColumnSql("case when [PAYMENT_PAST_DUE_BAL]>[PENDING_SCHED_ACH_AMT] then [PAYMENT_PAST_DUE_BAL]-[PENDING_SCHED_ACH_AMT] else (0) end")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.CreditLimit)
                    .HasColumnName("CREDIT_LIMIT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CreditcardKey).HasColumnName("CREDITCARD_KEY");

                entity.Property(e => e.CycleDays).HasColumnName("CYCLE_DAYS");

                entity.Property(e => e.CycleDaysFixed).HasColumnName("CYCLE_DAYS_FIXED");

                entity.Property(e => e.CycleDueDateMatch).HasColumnName("CYCLE_DUE_DATE_MATCH");

                entity.Property(e => e.CyclesPastDue).HasColumnName("CYCLES_PAST_DUE");

                entity.Property(e => e.DailyInterestAmt)
                    .HasColumnName("DAILY_INTEREST_AMT")
                    .HasColumnType("numeric")
                    .HasComputedColumnSql("round((case when [PRINC_DUE_BAL]>=(0) then [PRINC_DUE_BAL] else (0) end*[DAILY_RATE_PCT])/(100),(2),(1))")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.DailyRatePct)
                    .HasColumnName("DAILY_RATE_PCT")
                    .HasColumnType("numeric");

                entity.Property(e => e.DeclinedAutoPay).HasColumnName("DECLINED_AUTO_PAY");

                entity.Property(e => e.DueDatePaymentQueueBal)
                    .HasColumnName("DUE_DATE_PAYMENT_QUEUE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.EstFinanceCharge)
                    .HasColumnName("EST_FINANCE_CHARGE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.InactiveDate)
                    .HasColumnName("INACTIVE_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.InsuranceDueBal)
                    .HasColumnName("INSURANCE_DUE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.InsuranceStatusKey).HasColumnName("INSURANCE_STATUS_KEY");

                entity.Property(e => e.InterestDueBal)
                    .HasColumnName("INTEREST_DUE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.InventoryBal)
                    .HasColumnName("INVENTORY_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.IsBusinessLoan).HasColumnName("IS_BUSINESS_LOAN");

                entity.Property(e => e.IsDayAfterDue).HasColumnName("IS_DAY_AFTER_DUE");

                entity.Property(e => e.LastPaymentAmt)
                    .HasColumnName("LAST_PAYMENT_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LastPaymentDate)
                    .HasColumnName("LAST_PAYMENT_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.LegalFeePastDueBal)
                    .HasColumnName("LEGAL_FEE_PAST_DUE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanFeeDueBal)
                    .HasColumnName("LOAN_FEE_DUE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.MatchSpayRate).HasColumnName("MATCH_SPAY_RATE");

                entity.Property(e => e.MaxRiFeesPerLoanSeries).HasColumnName("MAX_RI_FEES_PER_LOAN_SERIES");

                entity.Property(e => e.MonthlyRatePct)
                    .HasColumnName("MONTHLY_RATE_PCT")
                    .HasColumnType("numeric");

                entity.Property(e => e.NextDueAmt)
                    .HasColumnName("NEXT_DUE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NextDueDate)
                    .HasColumnName("NEXT_DUE_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.NsfFeePastDueBal)
                    .HasColumnName("NSF_FEE_PAST_DUE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.OddDaysInterestAmt)
                    .HasColumnName("ODD_DAYS_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.OddDaysInterestCnt).HasColumnName("ODD_DAYS_INTEREST_CNT");

                entity.Property(e => e.OrigMaturityDate)
                    .HasColumnName("ORIG_MATURITY_DATE")
                    .HasColumnType("date")
                    .HasComputedColumnSql("[SCHED_LAST_PAYMENT_DATE]")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.PaymentDueBal)
                    .HasColumnName("PAYMENT_DUE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PaymentPastDueBal)
                    .HasColumnName("PAYMENT_PAST_DUE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PaymentPlanFee)
                    .HasColumnName("PAYMENT_PLAN_FEE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PaymentPlanLoanKey).HasColumnName("PAYMENT_PLAN_LOAN_KEY");

                entity.Property(e => e.PendingSchedAchAmt)
                    .HasColumnName("PENDING_SCHED_ACH_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PrincDueBal)
                    .HasColumnName("PRINC_DUE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.ResumeInterestDate)
                    .HasColumnName("RESUME_INTEREST_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.ResumeInterestOnPayment).HasColumnName("RESUME_INTEREST_ON_PAYMENT");

                entity.Property(e => e.RiFeePerDefault)
                    .HasColumnName("RI_FEE_PER_DEFAULT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.RiFeeRequiresBankAccount).HasColumnName("RI_FEE_REQUIRES_BANK_ACCOUNT");

                entity.Property(e => e.RiFeesPerLoan).HasColumnName("RI_FEES_PER_LOAN");

                entity.Property(e => e.RoCancelInsuranceRequestBy)
                    .HasColumnName("RO_CANCEL_INSURANCE_REQUEST_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.RoCancelInsuranceRequestDate)
                    .HasColumnName("RO_CANCEL_INSURANCE_REQUEST_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.SchedLastPaymentAmt)
                    .HasColumnName("SCHED_LAST_PAYMENT_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.SchedLastPaymentDate)
                    .HasColumnName("SCHED_LAST_PAYMENT_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.SelectedCycleWeeks).HasColumnName("SELECTED_CYCLE_WEEKS");

                entity.Property(e => e.SetInactiveOnDay).HasColumnName("SET_INACTIVE_ON_DAY");

                entity.Property(e => e.SetInactiveOnDayAfterMissedPaymentCount).HasColumnName("SET_INACTIVE_ON_DAY_AFTER_MISSED_PAYMENT_COUNT");

                entity.Property(e => e.SetInactiveOnMissedPaymentCount).HasColumnName("SET_INACTIVE_ON_MISSED_PAYMENT_COUNT");

                entity.Property(e => e.SuspendInterest).HasColumnName("SUSPEND_INTEREST");

                entity.Property(e => e.TransFeeAmt)
                    .HasColumnName("TRANS_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TransFeeColoradoPostponeAmt)
                    .HasColumnName("TRANS_FEE_COLORADO_POSTPONE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TransFeeDueBal)
                    .HasColumnName("TRANS_FEE_DUE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TransFeeMethod)
                    .IsRequired()
                    .HasColumnName("TRANS_FEE_METHOD")
                    .HasColumnType("char(1)");

                entity.Property(e => e.TransFeePct).HasColumnName("TRANS_FEE_PCT");

                entity.HasOne(d => d.CreditcardKeyNavigation)
                    .WithMany(p => p.MpayLoan)
                    .HasForeignKey(d => d.CreditcardKey)
                    .HasConstraintName("FK_MPayLoan_CREDITCARD_KEY");

                entity.HasOne(d => d.LoanKeyNavigation)
                    .WithMany(p => p.MpayLoan)
                    .HasForeignKey(d => d.LoanKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_MPay_Loan");
            });

            modelBuilder.Entity<MpayLoanInSyncAdj>(entity =>
            {
                entity.HasKey(e => e.MpayLoanInSyncAdjKey)
                    .HasName("PK_MPayLoanInSyncAdj");

                entity.ToTable("MPayLoanInSyncAdj");

                entity.HasIndex(e => e.DateEntered)
                    .HasName("IX_MPayLoanInSyncAdj_DATE_ENTERED");

                entity.HasIndex(e => new { e.LoanKey, e.DateEntered })
                    .HasName("IX_MPayLoanInSyncAdj_LOAN_KEY_DATE_ENTERED");

                entity.Property(e => e.MpayLoanInSyncAdjKey).HasColumnName("MPAY_LOAN_IN_SYNC_ADJ_KEY");

                entity.Property(e => e.AdjustedDueDate)
                    .HasColumnName("ADJUSTED_DUE_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.CAdjCntInt).HasColumnName("C_ADJ_CNT_INT");

                entity.Property(e => e.CAdjCntLpMpayRecord).HasColumnName("C_ADJ_CNT_LP_MPAY_RECORD");

                entity.Property(e => e.CAdjCntPendingAchInt).HasColumnName("C_ADJ_CNT_PENDING_ACH_INT");

                entity.Property(e => e.CAdjustedDueDate)
                    .HasColumnName("C_ADJUSTED_DUE_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.CCabCollFeePastDueBal)
                    .HasColumnName("C_CAB_COLL_FEE_PAST_DUE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CCabInterestDueBal)
                    .HasColumnName("C_CAB_INTEREST_DUE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CCashAmt)
                    .HasColumnName("C_CASH_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CChargeLienFee).HasColumnName("C_CHARGE_LIEN_FEE");

                entity.Property(e => e.CChargeTransFee).HasColumnName("C_CHARGE_TRANS_FEE");

                entity.Property(e => e.CCollFeePastDueBal)
                    .HasColumnName("C_COLL_FEE_PAST_DUE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CCyclesPastDue).HasColumnName("C_CYCLES_PAST_DUE");

                entity.Property(e => e.CDefaultDate)
                    .HasColumnName("C_DEFAULT_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.CDefaulted).HasColumnName("C_DEFAULTED");

                entity.Property(e => e.CDiscAmt)
                    .HasColumnName("C_DISC_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CDueDatePaymentQueueBal)
                    .HasColumnName("C_DUE_DATE_PAYMENT_QUEUE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CInsuranceDueBal)
                    .HasColumnName("C_INSURANCE_DUE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CInterestDueBal)
                    .HasColumnName("C_INTEREST_DUE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CInventoryAmt)
                    .HasColumnName("C_INVENTORY_AMT")
                    .HasColumnType("smallmoney")
                    .HasComputedColumnSql("case when [C_DEFAULTED]=(1) then (0) else [C_PRINC_DUE_BAL] end")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.CInventoryBal)
                    .HasColumnName("C_INVENTORY_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CLastPaymentAmt)
                    .HasColumnName("C_LAST_PAYMENT_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CLastPaymentDate)
                    .HasColumnName("C_LAST_PAYMENT_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.CLegalFeePastDueBal)
                    .HasColumnName("C_LEGAL_FEE_PAST_DUE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CLienFeeAmt)
                    .HasColumnName("C_LIEN_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CLoanAmt)
                    .HasColumnName("C_LOAN_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CLoanBalance)
                    .HasColumnName("C_LOAN_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CLoanFeeDueBal)
                    .HasColumnName("C_LOAN_FEE_DUE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CLoanStatus)
                    .IsRequired()
                    .HasColumnName("C_LOAN_STATUS")
                    .HasColumnType("char(1)");

                entity.Property(e => e.CNextDueAmt)
                    .HasColumnName("C_NEXT_DUE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CNextDueDate)
                    .HasColumnName("C_NEXT_DUE_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.CNsfFeePastDueBal)
                    .HasColumnName("C_NSF_FEE_PAST_DUE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.COrigDueDate)
                    .HasColumnName("C_ORIG_DUE_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.CPaymentDueBal)
                    .HasColumnName("C_PAYMENT_DUE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CPaymentPastDueBal)
                    .HasColumnName("C_PAYMENT_PAST_DUE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CPendingPmtAmt)
                    .HasColumnName("C_PENDING_PMT_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CPendingPmtCabInterestCap)
                    .HasColumnName("C_PENDING_PMT_CAB_INTEREST_CAP")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CPendingPmtDate)
                    .HasColumnName("C_PENDING_PMT_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.CPendingPmtInterestCap)
                    .HasColumnName("C_PENDING_PMT_INTEREST_CAP")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CPendingPmtPrinc)
                    .HasColumnName("C_PENDING_PMT_PRINC")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CPendingSchedAchAmt)
                    .HasColumnName("C_PENDING_SCHED_ACH_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CPendingSchedAchSent)
                    .HasColumnName("C_PENDING_SCHED_ACH_SENT")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.CPrincAmt)
                    .HasColumnName("C_PRINC_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CPrincDueBal)
                    .HasColumnName("C_PRINC_DUE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CRebateAmt)
                    .HasColumnName("C_REBATE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CRiBalance)
                    .HasColumnName("C_RI_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CTransFeeAmt)
                    .HasColumnName("C_TRANS_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CTransFeeColoradoPostponeAmt)
                    .HasColumnName("C_TRANS_FEE_COLORADO_POSTPONE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CTransFeeDueBal)
                    .HasColumnName("C_TRANS_FEE_DUE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CabCollFeePastDueBal)
                    .HasColumnName("CAB_COLL_FEE_PAST_DUE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CabInterestDueBal)
                    .HasColumnName("CAB_INTEREST_DUE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CashAmt)
                    .HasColumnName("CASH_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.ChargeLienFee).HasColumnName("CHARGE_LIEN_FEE");

                entity.Property(e => e.ChargeTransFee).HasColumnName("CHARGE_TRANS_FEE");

                entity.Property(e => e.CollFeePastDueBal)
                    .HasColumnName("COLL_FEE_PAST_DUE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CyclesPastDue).HasColumnName("CYCLES_PAST_DUE");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DefaultDate)
                    .HasColumnName("DEFAULT_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Defaulted).HasColumnName("DEFAULTED");

                entity.Property(e => e.DiscAmt)
                    .HasColumnName("DISC_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.DueDatePaymentQueueBal)
                    .HasColumnName("DUE_DATE_PAYMENT_QUEUE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.InsuranceDueBal)
                    .HasColumnName("INSURANCE_DUE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.InterestDueBal)
                    .HasColumnName("INTEREST_DUE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.InventoryAmt)
                    .HasColumnName("INVENTORY_AMT")
                    .HasColumnType("smallmoney")
                    .HasComputedColumnSql("case when [DEFAULTED]=(1) then (0) else [PRINC_DUE_BAL] end")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.InventoryBal)
                    .HasColumnName("INVENTORY_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.IsInLegalStatus).HasColumnName("IS_IN_LEGAL_STATUS");

                entity.Property(e => e.LastPaymentAmt)
                    .HasColumnName("LAST_PAYMENT_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LastPaymentDate)
                    .HasColumnName("LAST_PAYMENT_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.LegalFeePastDueBal)
                    .HasColumnName("LEGAL_FEE_PAST_DUE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LienFeeAmt)
                    .HasColumnName("LIEN_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanAmt)
                    .HasColumnName("LOAN_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanBalance)
                    .HasColumnName("LOAN_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanFeeDueBal)
                    .HasColumnName("LOAN_FEE_DUE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.LoanStatus)
                    .IsRequired()
                    .HasColumnName("LOAN_STATUS")
                    .HasColumnType("char(1)");

                entity.Property(e => e.NextDueAmt)
                    .HasColumnName("NEXT_DUE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NextDueDate)
                    .HasColumnName("NEXT_DUE_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.NsfFeePastDueBal)
                    .HasColumnName("NSF_FEE_PAST_DUE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.OrigDueDate)
                    .HasColumnName("ORIG_DUE_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.PaymentDueBal)
                    .HasColumnName("PAYMENT_DUE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PaymentPastDueBal)
                    .HasColumnName("PAYMENT_PAST_DUE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PendingPmtAmt)
                    .HasColumnName("PENDING_PMT_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PendingPmtCabInterestCap)
                    .HasColumnName("PENDING_PMT_CAB_INTEREST_CAP")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PendingPmtDate)
                    .HasColumnName("PENDING_PMT_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.PendingPmtInterestCap)
                    .HasColumnName("PENDING_PMT_INTEREST_CAP")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PendingPmtPrinc)
                    .HasColumnName("PENDING_PMT_PRINC")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PendingSchedAchAmt)
                    .HasColumnName("PENDING_SCHED_ACH_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PendingSchedAchSent)
                    .HasColumnName("PENDING_SCHED_ACH_SENT")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.PrincAmt)
                    .HasColumnName("PRINC_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PrincDueBal)
                    .HasColumnName("PRINC_DUE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.RebateAmt)
                    .HasColumnName("REBATE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.RiBalance)
                    .HasColumnName("RI_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TransFeeAmt)
                    .HasColumnName("TRANS_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TransFeeColoradoPostponeAmt)
                    .HasColumnName("TRANS_FEE_COLORADO_POSTPONE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TransFeeDueBal)
                    .HasColumnName("TRANS_FEE_DUE_BAL")
                    .HasColumnType("smallmoney");
            });

            modelBuilder.Entity<MpayLoanInSyncAdjRows>(entity =>
            {
                entity.HasKey(e => new { e.MpayLoanInSyncAdjKey, e.FieldName })
                    .HasName("PK_MPayLoanInSyncAdj_Rows");

                entity.ToTable("MPayLoanInSyncAdj_Rows");

                entity.Property(e => e.MpayLoanInSyncAdjKey).HasColumnName("MPAY_LOAN_IN_SYNC_ADJ_KEY");

                entity.Property(e => e.FieldName)
                    .HasColumnName("FIELD_NAME")
                    .HasColumnType("varchar(35)");

                entity.Property(e => e.ChgToVal)
                    .IsRequired()
                    .HasColumnName("CHG_TO_VAL")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.PrvVal)
                    .IsRequired()
                    .HasColumnName("PRV_VAL")
                    .HasColumnType("varchar(25)");
            });

            modelBuilder.Entity<MpayPayInFull>(entity =>
            {
                entity.HasKey(e => e.MpayPayInFullKey)
                    .HasName("PK_MPayPayInFull");

                entity.ToTable("MPayPayInFull");

                entity.HasIndex(e => new { e.MpayPayInFullKey, e.LoanKey, e.PaymentNum, e.DisabledDate, e.PifStatus })
                    .HasName("IX_MPayPayInFull_PIF_STATUS");

                entity.Property(e => e.MpayPayInFullKey).HasColumnName("MPAY_PAY_IN_FULL_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DisabledBy)
                    .HasColumnName("DISABLED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.DisabledDate)
                    .HasColumnName("DISABLED_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.PaymentNum).HasColumnName("PAYMENT_NUM");

                entity.Property(e => e.PifStatus)
                    .IsRequired()
                    .HasColumnName("PIF_STATUS")
                    .HasColumnType("char(1)");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");
            });

            modelBuilder.Entity<MpayRecalcInterestAdj>(entity =>
            {
                entity.HasKey(e => e.MpayRecalcInterestAdjKey)
                    .HasName("PK_MPayRecalcInterestAdj");

                entity.ToTable("MPayRecalcInterestAdj");

                entity.HasIndex(e => e.LoanKey)
                    .HasName("IX_MPayRecalcInterestAdj_LOAN_KEY");

                entity.HasIndex(e => e.MpayInterestKey)
                    .HasName("IX_MPayRecalcInterestAdj_MPAY_INTEREST_KEY");

                entity.Property(e => e.MpayRecalcInterestAdjKey).HasColumnName("MPAY_RECALC_INTEREST_ADJ_KEY");

                entity.Property(e => e.CCabInterestAdded)
                    .HasColumnName("C_CAB_INTEREST_ADDED")
                    .HasColumnType("numeric");

                entity.Property(e => e.CCollectionsAmt)
                    .HasColumnName("C_COLLECTIONS_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CInterestAdded)
                    .HasColumnName("C_INTEREST_ADDED")
                    .HasColumnType("numeric");

                entity.Property(e => e.CInterestDate)
                    .HasColumnName("C_INTEREST_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.CLoanBalance)
                    .HasColumnName("C_LOAN_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CPrincDue)
                    .HasColumnName("C_PRINC_DUE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CTransFeeAdded)
                    .HasColumnName("C_TRANS_FEE_ADDED")
                    .HasColumnType("numeric");

                entity.Property(e => e.CabInterestAdded)
                    .HasColumnName("CAB_INTEREST_ADDED")
                    .HasColumnType("numeric");

                entity.Property(e => e.CollectionsAmt)
                    .HasColumnName("COLLECTIONS_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.InterestAdded)
                    .HasColumnName("INTEREST_ADDED")
                    .HasColumnType("numeric");

                entity.Property(e => e.InterestDate)
                    .HasColumnName("INTEREST_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.LoanBalance)
                    .HasColumnName("LOAN_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.MpayInterestKey).HasColumnName("MPAY_INTEREST_KEY");

                entity.Property(e => e.PrincDue)
                    .HasColumnName("PRINC_DUE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TransFeeAdded)
                    .HasColumnName("TRANS_FEE_ADDED")
                    .HasColumnType("numeric");
            });

            modelBuilder.Entity<MpayRecalcLoanPaymentAdj>(entity =>
            {
                entity.HasKey(e => e.MpayRecalcLoanPaymentAdjKey)
                    .HasName("PK_MPayRecalcLoanPaymentAdj");

                entity.ToTable("MPayRecalcLoanPaymentAdj");

                entity.Property(e => e.MpayRecalcLoanPaymentAdjKey).HasColumnName("MPAY_RECALC_LOAN_PAYMENT_ADJ_KEY");

                entity.Property(e => e.AddToColl).HasColumnName("ADD_TO_COLL");

                entity.Property(e => e.CAddToColl).HasColumnName("C_ADD_TO_COLL");

                entity.Property(e => e.CCabCollFeePastDuePaid)
                    .HasColumnName("C_CAB_COLL_FEE_PAST_DUE_PAID")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CCabInterestDuePaid)
                    .HasColumnName("C_CAB_INTEREST_DUE_PAID")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CCollFeePastDuePaid)
                    .HasColumnName("C_COLL_FEE_PAST_DUE_PAID")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CInsuranceDuePaid)
                    .HasColumnName("C_INSURANCE_DUE_PAID")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CInterestDuePaid)
                    .HasColumnName("C_INTEREST_DUE_PAID")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CLegalFeePastDuePaid)
                    .HasColumnName("C_LEGAL_FEE_PAST_DUE_PAID")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CLoanFeeDuePaid)
                    .HasColumnName("C_LOAN_FEE_DUE_PAID")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CLpddAdjustedDueDate)
                    .HasColumnName("C_LPDD_ADJUSTED_DUE_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.CLpddCollectionsAmt)
                    .HasColumnName("C_LPDD_COLLECTIONS_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CLpddOrigDueDate)
                    .HasColumnName("C_LPDD_ORIG_DUE_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.CLpddPastDueAmt)
                    .HasColumnName("C_LPDD_PAST_DUE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CLpddPendingAchAmt)
                    .HasColumnName("C_LPDD_PENDING_ACH_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CNsfFeePastDuePaid)
                    .HasColumnName("C_NSF_FEE_PAST_DUE_PAID")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CPaymentDuePaid)
                    .HasColumnName("C_PAYMENT_DUE_PAID")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CPaymentPastDuePaid)
                    .HasColumnName("C_PAYMENT_PAST_DUE_PAID")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CPendingSchedAchAmt)
                    .HasColumnName("C_PENDING_SCHED_ACH_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CPrincDuePaid)
                    .HasColumnName("C_PRINC_DUE_PAID")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CRemFromColl).HasColumnName("C_REM_FROM_COLL");

                entity.Property(e => e.CTransFeeDuePaid)
                    .HasColumnName("C_TRANS_FEE_DUE_PAID")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CTranscode).HasColumnName("C_TRANSCODE");

                entity.Property(e => e.CabCollFeePastDuePaid)
                    .HasColumnName("CAB_COLL_FEE_PAST_DUE_PAID")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CabInterestDuePaid)
                    .HasColumnName("CAB_INTEREST_DUE_PAID")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CollFeePastDuePaid)
                    .HasColumnName("COLL_FEE_PAST_DUE_PAID")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.InsuranceDuePaid)
                    .HasColumnName("INSURANCE_DUE_PAID")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.InterestDuePaid)
                    .HasColumnName("INTEREST_DUE_PAID")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LegalFeePastDuePaid)
                    .HasColumnName("LEGAL_FEE_PAST_DUE_PAID")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanFeeDuePaid)
                    .HasColumnName("LOAN_FEE_DUE_PAID")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.LoanPaymentKey).HasColumnName("LOAN_PAYMENT_KEY");

                entity.Property(e => e.LpddAdjustedDueDate)
                    .HasColumnName("LPDD_ADJUSTED_DUE_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.LpddCollectionsAmt)
                    .HasColumnName("LPDD_COLLECTIONS_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LpddOrigDueDate)
                    .HasColumnName("LPDD_ORIG_DUE_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.LpddPastDueAmt)
                    .HasColumnName("LPDD_PAST_DUE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LpddPendingAchAmt)
                    .HasColumnName("LPDD_PENDING_ACH_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NsfFeePastDuePaid)
                    .HasColumnName("NSF_FEE_PAST_DUE_PAID")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PaymentDuePaid)
                    .HasColumnName("PAYMENT_DUE_PAID")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PaymentPastDuePaid)
                    .HasColumnName("PAYMENT_PAST_DUE_PAID")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PendingSchedAchAmt)
                    .HasColumnName("PENDING_SCHED_ACH_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PrincDuePaid)
                    .HasColumnName("PRINC_DUE_PAID")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.RemFromColl).HasColumnName("REM_FROM_COLL");

                entity.Property(e => e.TransFeeDuePaid)
                    .HasColumnName("TRANS_FEE_DUE_PAID")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Transcode).HasColumnName("TRANSCODE");
            });

            modelBuilder.Entity<Msa>(entity =>
            {
                entity.HasKey(e => e.MsaCode)
                    .HasName("PK_MSA");

                entity.ToTable("MSA");

                entity.Property(e => e.MsaCode)
                    .HasColumnName("MSA_CODE")
                    .HasColumnType("varchar(4)");

                entity.Property(e => e.Cmsa)
                    .HasColumnName("CMSA")
                    .HasColumnType("varchar(2)");

                entity.Property(e => e.Name)
                    .HasColumnName("NAME")
                    .HasColumnType("varchar(60)");

                entity.Property(e => e.Population).HasColumnName("POPULATION");

                entity.Property(e => e.Typ)
                    .HasColumnName("TYP")
                    .HasColumnType("varchar(4)");
            });

            modelBuilder.Entity<NetSpendTrans>(entity =>
            {
                entity.HasKey(e => e.NetSpendTransKey)
                    .HasName("PK_NetSpendTrans");

                entity.HasIndex(e => e.TransDetailKey)
                    .HasName("IX_NetSpendTrans_TRANS_DETAIL_KEY");

                entity.Property(e => e.NetSpendTransKey).HasColumnName("NET_SPEND_TRANS_KEY");

                entity.Property(e => e.CcardNum)
                    .IsRequired()
                    .HasColumnName("CCARD_NUM")
                    .HasColumnType("char(16)");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.ResultNum).HasColumnName("RESULT_NUM");

                entity.Property(e => e.ResultStr)
                    .IsRequired()
                    .HasColumnName("RESULT_STR")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");
            });

            modelBuilder.Entity<NobleConfiguration>(entity =>
            {
                entity.HasKey(e => e.NobleConfigKey)
                    .HasName("PK_NobleConfiguration");

                entity.Property(e => e.NobleConfigKey).HasColumnName("NOBLE_CONFIG_KEY");

                entity.Property(e => e.CollectionsExclusionTableName)
                    .HasColumnName("COLLECTIONS_EXCLUSION_TABLE_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.CollectionsTableName)
                    .HasColumnName("COLLECTIONS_TABLE_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.CourtesyTableName)
                    .HasColumnName("COURTESY_TABLE_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.InternetLendingListId).HasColumnName("INTERNET_LENDING_LIST_ID");

                entity.Property(e => e.InternetLendingTableName)
                    .HasColumnName("INTERNET_LENDING_TABLE_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.TableNamePrefix)
                    .HasColumnName("TABLE_NAME_PREFIX")
                    .HasColumnType("char(2)");

                entity.Property(e => e.TellerId)
                    .HasColumnName("TELLER_ID")
                    .HasColumnType("char(3)");

                entity.Property(e => e.TimeOffsetFromNoble).HasColumnName("TIME_OFFSET_FROM_NOBLE");
            });

            modelBuilder.Entity<NoteType>(entity =>
            {
                entity.HasKey(e => e.NoteTypeKey)
                    .HasName("PK_NoteType");

                entity.Property(e => e.NoteTypeKey).HasColumnName("NOTE_TYPE_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("date");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.NoteTypeValue).HasColumnName("NOTE_TYPE_VALUE");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");
            });

            modelBuilder.Entity<Ocrregion>(entity =>
            {
                entity.HasKey(e => e.OcrregionKey)
                    .HasName("PK_OCRREGION_KEY");

                entity.ToTable("OCRRegion");

                entity.Property(e => e.OcrregionKey).HasColumnName("OCRREGION_KEY");

                entity.Property(e => e.Color).HasColumnName("COLOR");

                entity.Property(e => e.Compression).HasColumnName("COMPRESSION");

                entity.Property(e => e.Enable).HasColumnName("ENABLE");

                entity.Property(e => e.Front).HasColumnName("FRONT");

                entity.Property(e => e.Height).HasColumnName("HEIGHT");

                entity.Property(e => e.Millimeters).HasColumnName("MILLIMETERS");

                entity.Property(e => e.Ocrflags).HasColumnName("OCRFLAGS");

                entity.Property(e => e.Orientation).HasColumnName("ORIENTATION");

                entity.Property(e => e.Side).HasColumnName("SIDE");

                entity.Property(e => e.Snippet).HasColumnName("SNIPPET");

                entity.Property(e => e.Width).HasColumnName("WIDTH");
            });

            modelBuilder.Entity<Oowsession>(entity =>
            {
                entity.HasKey(e => e.OowSessionKey)
                    .HasName("PK_OOWSession");

                entity.ToTable("OOWSession");

                entity.HasIndex(e => e.SessionId)
                    .HasName("UX_SESSION_ID")
                    .IsUnique();

                entity.Property(e => e.OowSessionKey).HasColumnName("OOW_SESSION_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateUpdated)
                    .HasColumnName("DATE_UPDATED")
                    .HasColumnType("datetime");

                entity.Property(e => e.EarnedPoints).HasColumnName("EARNED_POINTS");

                entity.Property(e => e.ExternalId)
                    .IsRequired()
                    .HasColumnName("EXTERNAL_ID")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.PossiblePoints).HasColumnName("POSSIBLE_POINTS");

                entity.Property(e => e.SessionId).HasColumnName("SESSION_ID");

                entity.Property(e => e.TransunionConfidenceScore).HasColumnName("TRANSUNION_CONFIDENCE_SCORE");

                entity.Property(e => e.TransunionDecision)
                    .HasColumnName("TRANSUNION_DECISION")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.VisitorKey).HasColumnName("VISITOR_KEY");

                entity.HasOne(d => d.VisitorKeyNavigation)
                    .WithMany(p => p.Oowsession)
                    .HasForeignKey(d => d.VisitorKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_OOWSession_Visitor");
            });

            modelBuilder.Entity<OowsessionAlert>(entity =>
            {
                entity.HasKey(e => e.OowSessionAlertKey)
                    .HasName("PK_OOWSessionAlert");

                entity.ToTable("OOWSessionAlert");

                entity.Property(e => e.OowSessionAlertKey).HasColumnName("OOW_SESSION_ALERT_KEY");

                entity.Property(e => e.AlertCode)
                    .IsRequired()
                    .HasColumnName("ALERT_CODE")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.AlertText)
                    .HasColumnName("ALERT_TEXT")
                    .HasColumnType("varchar(500)");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.OowSessionKey).HasColumnName("OOW_SESSION_KEY");

                entity.HasOne(d => d.OowSessionKeyNavigation)
                    .WithMany(p => p.OowsessionAlert)
                    .HasForeignKey(d => d.OowSessionKey)
                    .HasConstraintName("FK_OOWSessionAlert_OOWSession");
            });

            modelBuilder.Entity<OowsessionError>(entity =>
            {
                entity.HasKey(e => e.OowSessionErrorKey)
                    .HasName("PK_OOWSessionError");

                entity.ToTable("OOWSessionError");

                entity.Property(e => e.OowSessionErrorKey).HasColumnName("OOW_SESSION_ERROR_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.ErrorCode)
                    .IsRequired()
                    .HasColumnName("ERROR_CODE")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.ErrorText)
                    .HasColumnName("ERROR_TEXT")
                    .HasColumnType("varchar(500)");

                entity.Property(e => e.OowSessionKey).HasColumnName("OOW_SESSION_KEY");

                entity.HasOne(d => d.OowSessionKeyNavigation)
                    .WithMany(p => p.OowsessionError)
                    .HasForeignKey(d => d.OowSessionKey)
                    .HasConstraintName("FK_OOWSessionError_OOWSession");
            });

            modelBuilder.Entity<OowsessionQuestion>(entity =>
            {
                entity.HasKey(e => e.OowSessionQuestionKey)
                    .HasName("PK_OOWSessionQuestion");

                entity.ToTable("OOWSessionQuestion");

                entity.Property(e => e.OowSessionQuestionKey).HasColumnName("OOW_SESSION_QUESTION_KEY");

                entity.Property(e => e.ActualTimeSeconds).HasColumnName("ACTUAL_TIME_SECONDS");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateUpdated)
                    .HasColumnName("DATE_UPDATED")
                    .HasColumnType("datetime");

                entity.Property(e => e.OowSessionKey).HasColumnName("OOW_SESSION_KEY");

                entity.Property(e => e.QuestionId).HasColumnName("QUESTION_ID");

                entity.Property(e => e.TimePermittedSeconds).HasColumnName("TIME_PERMITTED_SECONDS");

                entity.Property(e => e.Type).HasColumnName("TYPE");

                entity.HasOne(d => d.OowSessionKeyNavigation)
                    .WithMany(p => p.OowsessionQuestion)
                    .HasForeignKey(d => d.OowSessionKey)
                    .HasConstraintName("FK_OOWSessionQuestion_OOWSession");
            });

            modelBuilder.Entity<OpenEndInterest>(entity =>
            {
                entity.HasKey(e => e.OpenEndInterestKey)
                    .HasName("PK_OpenEndInterest");

                entity.HasIndex(e => e.LoanKey)
                    .HasName("IX_OpenEndInterest_LOAN_KEY");

                entity.HasIndex(e => new { e.InterestAdded, e.LoanKey, e.OpenEndInterestKey, e.InterestDate })
                    .HasName("IX_OpenEndInterest_DTA");

                entity.Property(e => e.OpenEndInterestKey).HasColumnName("OPEN_END_INTEREST_KEY");

                entity.Property(e => e.CabFeeBalance)
                    .HasColumnName("CAB_FEE_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CollectionsAmt)
                    .HasColumnName("COLLECTIONS_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CsoLenderInterestAdded)
                    .HasColumnName("CSO_LENDER_INTEREST_ADDED")
                    .HasColumnType("numeric");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.InterestAdded)
                    .HasColumnName("INTEREST_ADDED")
                    .HasColumnType("numeric");

                entity.Property(e => e.InterestDate)
                    .HasColumnName("INTEREST_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsAchAdj).HasColumnName("IS_ACH_ADJ");

                entity.Property(e => e.IsErrAdj).HasColumnName("IS_ERR_ADJ");

                entity.Property(e => e.IsGracePeriodAdj).HasColumnName("IS_GRACE_PERIOD_ADJ");

                entity.Property(e => e.LoanBalance)
                    .HasColumnName("LOAN_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.OpenEndLoanStmtKey).HasColumnName("OPEN_END_LOAN_STMT_KEY");

                entity.Property(e => e.PrincDue)
                    .HasColumnName("PRINC_DUE")
                    .HasColumnType("smallmoney");

                entity.HasOne(d => d.OpenEndLoanStmtKeyNavigation)
                    .WithMany(p => p.OpenEndInterest)
                    .HasForeignKey(d => d.OpenEndLoanStmtKey)
                    .HasConstraintName("FK_OpenEndInterest_OpenEndLoanStatement");
            });

            modelBuilder.Entity<OpenEndInterestRate>(entity =>
            {
                entity.HasKey(e => e.OpenEndInterestRateKey)
                    .HasName("PK_OpenEndInterestRate");

                entity.HasIndex(e => new { e.LoanKey, e.InterestStartDate })
                    .HasName("UC_OpenEndInterestRate")
                    .IsUnique();

                entity.Property(e => e.OpenEndInterestRateKey).HasColumnName("OPEN_END_INTEREST_RATE_KEY");

                entity.Property(e => e.AnnualRatePct)
                    .HasColumnName("ANNUAL_RATE_PCT")
                    .HasColumnType("numeric");

                entity.Property(e => e.DailyRatePct)
                    .HasColumnName("DAILY_RATE_PCT")
                    .HasColumnType("numeric");

                entity.Property(e => e.InterestStartDate)
                    .HasColumnName("INTEREST_START_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.MonthlyRatePct)
                    .HasColumnName("MONTHLY_RATE_PCT")
                    .HasColumnType("numeric");

                entity.HasOne(d => d.LoanKeyNavigation)
                    .WithMany(p => p.OpenEndInterestRate)
                    .HasForeignKey(d => d.LoanKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_OpenEndInterestRate_Loan");
            });

            modelBuilder.Entity<OpenEndLoan>(entity =>
            {
                entity.HasKey(e => e.OpenEndLoanKey)
                    .HasName("PK_OpenEndLoan");

                entity.HasIndex(e => e.LoanKey)
                    .HasName("IX_OpenEndLoan_LOAN_KEY");

                entity.HasIndex(e => new { e.LoanKey, e.CollectionsAmt })
                    .HasName("IX_OpenEndLoan_COLLECTIONS_AMT");

                entity.HasIndex(e => new { e.LoanKey, e.LastPaymentDate, e.CollectionsAmt })
                    .HasName("IX_OpenEndLoan_COLLECTIONS_AMT_LOAN_KEY_LAST_PAYMENT_DATE");

                entity.Property(e => e.OpenEndLoanKey).HasColumnName("OPEN_END_LOAN_KEY");

                entity.Property(e => e.ActivityFeeAmt)
                    .HasColumnName("ACTIVITY_FEE_AMT")
                    .HasColumnType("smallmoney")
                    .HasComputedColumnSql("(([PAST_DUE_ACTIVITY_FEE_AMT]+[CURR_DUE_ACTIVITY_FEE_AMT])+[NEXT_DUE_ACTIVITY_FEE_AMT])+[NOT_DUE_ACTIVITY_FEE_AMT]")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.ActivityFeeFourWeekPct)
                    .HasColumnName("ACTIVITY_FEE_FOUR_WEEK_PCT")
                    .HasColumnType("numeric");

                entity.Property(e => e.ActivityFeeTwoWeekPct)
                    .HasColumnName("ACTIVITY_FEE_TWO_WEEK_PCT")
                    .HasColumnType("numeric");

                entity.Property(e => e.CabFeeDayOffset).HasColumnName("CAB_FEE_DAY_OFFSET");

                entity.Property(e => e.ChargeInterestOnLoanFees).HasColumnName("CHARGE_INTEREST_ON_LOAN_FEES");

                entity.Property(e => e.ClosedDate)
                    .HasColumnName("CLOSED_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.CollectionsAmt)
                    .HasColumnName("COLLECTIONS_AMT")
                    .HasColumnType("smallmoney")
                    .HasComputedColumnSql("case when ((((((([PAST_DUE_TRANS_FEE_AMT]+[PAST_DUE_LIEN_FEE_AMT])+[PAST_DUE_ACTIVITY_FEE_AMT])+[PAST_DUE_INTEREST_AMT])+[PAST_DUE_CSO_LENDER_INTEREST_AMT])+[PAST_DUE_PRINC_AMT])+[PAST_DUE_COLL_FEE_AMT])+[PAST_DUE_CSO_LENDER_COLL_FEE_AMT])>[PENDING_SCHED_ACH_AMT] then ((((((([PAST_DUE_TRANS_FEE_AMT]+[PAST_DUE_LIEN_FEE_AMT])+[PAST_DUE_ACTIVITY_FEE_AMT])+[PAST_DUE_INTEREST_AMT])+[PAST_DUE_CSO_LENDER_INTEREST_AMT])+[PAST_DUE_PRINC_AMT])+[PAST_DUE_COLL_FEE_AMT])+[PAST_DUE_CSO_LENDER_COLL_FEE_AMT])-[PENDING_SCHED_ACH_AMT] else (0) end")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.CreditAvail)
                    .HasColumnName("CREDIT_AVAIL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CreditAvailableForBuyup)
                    .HasColumnName("CREDIT_AVAILABLE_FOR_BUYUP")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CreditAvailableForBuyupNonOrdinance)
                    .HasColumnName("CREDIT_AVAILABLE_FOR_BUYUP_NON_ORDINANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CreditLimit)
                    .HasColumnName("CREDIT_LIMIT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CreditLimitNonOrdinance)
                    .HasColumnName("CREDIT_LIMIT_NON_ORDINANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CsoLenderAnnualRatePct)
                    .HasColumnName("CSO_LENDER_ANNUAL_RATE_PCT")
                    .HasColumnType("numeric");

                entity.Property(e => e.CsoLenderDailyRatePct)
                    .HasColumnName("CSO_LENDER_DAILY_RATE_PCT")
                    .HasColumnType("numeric");

                entity.Property(e => e.CsoLenderInterestFeeAmt)
                    .HasColumnName("CSO_LENDER_INTEREST_FEE_AMT")
                    .HasColumnType("smallmoney")
                    .HasComputedColumnSql("(([PAST_DUE_CSO_LENDER_INTEREST_AMT]+[CURR_DUE_CSO_LENDER_INTEREST_AMT])+[NEXT_DUE_CSO_LENDER_INTEREST_AMT])+[NOT_DUE_CSO_LENDER_INTEREST_AMT]")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.CsoLenderMonthlyRatePct)
                    .HasColumnName("CSO_LENDER_MONTHLY_RATE_PCT")
                    .HasColumnType("numeric");

                entity.Property(e => e.CurrDueActivityFeeAmt)
                    .HasColumnName("CURR_DUE_ACTIVITY_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CurrDueAmt)
                    .HasColumnName("CURR_DUE_AMT")
                    .HasColumnType("smallmoney")
                    .HasComputedColumnSql("(((([CURR_DUE_TRANS_FEE_AMT]+[CURR_DUE_LIEN_FEE_AMT])+[CURR_DUE_ACTIVITY_FEE_AMT])+[CURR_DUE_CSO_LENDER_INTEREST_AMT])+[CURR_DUE_INTEREST_AMT])+[CURR_DUE_PRINC_AMT]")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.CurrDueCsoLenderInterestAmt)
                    .HasColumnName("CURR_DUE_CSO_LENDER_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CurrDueInterestAmt)
                    .HasColumnName("CURR_DUE_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CurrDueLienFeeAmt)
                    .HasColumnName("CURR_DUE_LIEN_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CurrDuePrincAmt)
                    .HasColumnName("CURR_DUE_PRINC_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CurrDueTransFeeAmt)
                    .HasColumnName("CURR_DUE_TRANS_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CycleDays).HasColumnName("CYCLE_DAYS");

                entity.Property(e => e.DeclinedAutoPay).HasColumnName("DECLINED_AUTO_PAY");

                entity.Property(e => e.EmailStatements).HasColumnName("EMAIL_STATEMENTS");

                entity.Property(e => e.EnableFlatFeeRules).HasColumnName("ENABLE_FLAT_FEE_RULES");

                entity.Property(e => e.FinanceLienFee).HasColumnName("FINANCE_LIEN_FEE");

                entity.Property(e => e.InactiveDate)
                    .HasColumnName("INACTIVE_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.InterestFeeAmt)
                    .HasColumnName("INTEREST_FEE_AMT")
                    .HasColumnType("smallmoney")
                    .HasComputedColumnSql("(([PAST_DUE_INTEREST_AMT]+[CURR_DUE_INTEREST_AMT])+[NEXT_DUE_INTEREST_AMT])+[NOT_DUE_INTEREST_AMT]")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.IsBusinessLoan).HasColumnName("IS_BUSINESS_LOAN");

                entity.Property(e => e.IsGiftCardLoan).HasColumnName("IS_GIFT_CARD_LOAN");

                entity.Property(e => e.IsUsePayCycle).HasColumnName("IS_USE_PAY_CYCLE");

                entity.Property(e => e.LastCabFeeAmt)
                    .HasColumnName("LAST_CAB_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LastCabFeeDate)
                    .HasColumnName("LAST_CAB_FEE_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.LastCashAdvAmt)
                    .HasColumnName("LAST_CASH_ADV_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LastCashAdvDate)
                    .HasColumnName("LAST_CASH_ADV_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.LastPaymentAmt)
                    .HasColumnName("LAST_PAYMENT_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LastPaymentDate)
                    .HasColumnName("LAST_PAYMENT_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.LastStatementDate)
                    .HasColumnName("LAST_STATEMENT_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.LastStatementNum).HasColumnName("LAST_STATEMENT_NUM");

                entity.Property(e => e.LienFeeAmt)
                    .HasColumnName("LIEN_FEE_AMT")
                    .HasColumnType("smallmoney")
                    .HasComputedColumnSql("(([PAST_DUE_LIEN_FEE_AMT]+[CURR_DUE_LIEN_FEE_AMT])+[NEXT_DUE_LIEN_FEE_AMT])+[NOT_DUE_LIEN_FEE_AMT]")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.MaxRiFeesPerLoanSeries).HasColumnName("MAX_RI_FEES_PER_LOAN_SERIES");

                entity.Property(e => e.MinPrincDueFourWeeksAmt)
                    .HasColumnName("MIN_PRINC_DUE_FOUR_WEEKS_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.MinPrincDueFourWeeksPct)
                    .HasColumnName("MIN_PRINC_DUE_FOUR_WEEKS_PCT")
                    .HasColumnType("numeric");

                entity.Property(e => e.MinPrincDueTwoWeeksAmt)
                    .HasColumnName("MIN_PRINC_DUE_TWO_WEEKS_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.MinPrincDueTwoWeeksPct)
                    .HasColumnName("MIN_PRINC_DUE_TWO_WEEKS_PCT")
                    .HasColumnType("numeric");

                entity.Property(e => e.NextDueActivityFeeAmt)
                    .HasColumnName("NEXT_DUE_ACTIVITY_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NextDueAmt)
                    .HasColumnName("NEXT_DUE_AMT")
                    .HasColumnType("smallmoney")
                    .HasComputedColumnSql("(((([NEXT_DUE_TRANS_FEE_AMT]+[NEXT_DUE_LIEN_FEE_AMT])+[NEXT_DUE_ACTIVITY_FEE_AMT])+[NEXT_DUE_CSO_LENDER_INTEREST_AMT])+[NEXT_DUE_INTEREST_AMT])+[NEXT_DUE_PRINC_AMT]")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.NextDueCsoLenderInterestAmt)
                    .HasColumnName("NEXT_DUE_CSO_LENDER_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NextDueDate)
                    .HasColumnName("NEXT_DUE_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.NextDueInterestAmt)
                    .HasColumnName("NEXT_DUE_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NextDueLienFeeAmt)
                    .HasColumnName("NEXT_DUE_LIEN_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NextDuePrincAmt)
                    .HasColumnName("NEXT_DUE_PRINC_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NextDueTransFeeAmt)
                    .HasColumnName("NEXT_DUE_TRANS_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NextStatementDate)
                    .HasColumnName("NEXT_STATEMENT_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.NotDueActivityFeeAmt)
                    .HasColumnName("NOT_DUE_ACTIVITY_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NotDueAmt)
                    .HasColumnName("NOT_DUE_AMT")
                    .HasColumnType("smallmoney")
                    .HasComputedColumnSql("(((([NOT_DUE_TRANS_FEE_AMT]+[NOT_DUE_LIEN_FEE_AMT])+[NOT_DUE_ACTIVITY_FEE_AMT])+[NOT_DUE_CSO_LENDER_INTEREST_AMT])+[NOT_DUE_INTEREST_AMT])+[NOT_DUE_PRINC_AMT]")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.NotDueCsoLenderInterestAmt)
                    .HasColumnName("NOT_DUE_CSO_LENDER_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NotDueInterestAmt)
                    .HasColumnName("NOT_DUE_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NotDueLienFeeAmt)
                    .HasColumnName("NOT_DUE_LIEN_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NotDuePrincAmt)
                    .HasColumnName("NOT_DUE_PRINC_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NotDueTransFeeAmt)
                    .HasColumnName("NOT_DUE_TRANS_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.OrigFinalDueDate)
                    .HasColumnName("ORIG_FINAL_DUE_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.OrigFinalStatementDate)
                    .HasColumnName("ORIG_FINAL_STATEMENT_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.PastDueActivityFeeAmt)
                    .HasColumnName("PAST_DUE_ACTIVITY_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PastDueAmt)
                    .HasColumnName("PAST_DUE_AMT")
                    .HasColumnType("decimal")
                    .HasComputedColumnSql("CONVERT([decimal](9,2),(((((([PAST_DUE_TRANS_FEE_AMT]+[PAST_DUE_LIEN_FEE_AMT])+[PAST_DUE_ACTIVITY_FEE_AMT])+[PAST_DUE_CSO_LENDER_INTEREST_AMT])+[PAST_DUE_INTEREST_AMT])+[PAST_DUE_PRINC_AMT])+[PAST_DUE_COLL_FEE_AMT])+[PAST_DUE_CSO_LENDER_COLL_FEE_AMT],(0))")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.PastDueCollFeeAmt)
                    .HasColumnName("PAST_DUE_COLL_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PastDueCsoLenderCollFeeAmt)
                    .HasColumnName("PAST_DUE_CSO_LENDER_COLL_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PastDueCsoLenderInterestAmt)
                    .HasColumnName("PAST_DUE_CSO_LENDER_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PastDueInterestAmt)
                    .HasColumnName("PAST_DUE_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PastDueLienFeeAmt)
                    .HasColumnName("PAST_DUE_LIEN_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PastDuePrincAmt)
                    .HasColumnName("PAST_DUE_PRINC_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PastDueTransFeeAmt)
                    .HasColumnName("PAST_DUE_TRANS_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PaymentDays).HasColumnName("PAYMENT_DAYS");

                entity.Property(e => e.PendingDueDateChangeAdjustedDueDate)
                    .HasColumnName("PENDING_DUE_DATE_CHANGE_ADJUSTED_DUE_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.PendingDueDateChangeOrigDueDate)
                    .HasColumnName("PENDING_DUE_DATE_CHANGE_ORIG_DUE_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.PendingSchedAchAmt)
                    .HasColumnName("PENDING_SCHED_ACH_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PrincFeeAmt)
                    .HasColumnName("PRINC_FEE_AMT")
                    .HasColumnType("smallmoney")
                    .HasComputedColumnSql("(([PAST_DUE_PRINC_AMT]+[CURR_DUE_PRINC_AMT])+[NEXT_DUE_PRINC_AMT])+[NOT_DUE_PRINC_AMT]")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.PrintCashAdvFeeOnlyPaymentCount).HasColumnName("PRINT_CASH_ADV_FEE_ONLY_PAYMENT_COUNT");

                entity.Property(e => e.PrintCashAdvFinalPaymentAmt)
                    .HasColumnName("PRINT_CASH_ADV_FINAL_PAYMENT_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PrintCashAdvFinanceCharge)
                    .HasColumnName("PRINT_CASH_ADV_FINANCE_CHARGE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PrintCashAdvPayment1InterestAmt)
                    .HasColumnName("PRINT_CASH_ADV_PAYMENT1_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PrintCashAdvPayment1PrincAmt)
                    .HasColumnName("PRINT_CASH_ADV_PAYMENT1_PRINC_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PrintCashAdvPayment1TotalDueAmt)
                    .HasColumnName("PRINT_CASH_ADV_PAYMENT1_TOTAL_DUE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PrintCashAdvPayment2InterestAmt)
                    .HasColumnName("PRINT_CASH_ADV_PAYMENT2_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PrintCashAdvPayment2PrincAmt)
                    .HasColumnName("PRINT_CASH_ADV_PAYMENT2_PRINC_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PrintCashAdvPayment2TotalDueAmt)
                    .HasColumnName("PRINT_CASH_ADV_PAYMENT2_TOTAL_DUE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PrintCashAdvPaymentCount).HasColumnName("PRINT_CASH_ADV_PAYMENT_COUNT");

                entity.Property(e => e.PrintCashAdvTotCsoInterestAmt)
                    .HasColumnName("PRINT_CASH_ADV_TOT_CSO_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PrintCashAdvTotInterestAmt)
                    .HasColumnName("PRINT_CASH_ADV_TOT_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PrintCashAdvTotPaymentsAmt)
                    .HasColumnName("PRINT_CASH_ADV_TOT_PAYMENTS_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PrintPayment1Duedate)
                    .HasColumnName("PRINT_PAYMENT1_DUEDATE")
                    .HasColumnType("date");

                entity.Property(e => e.PrintPayment1InterestAmt)
                    .HasColumnName("PRINT_PAYMENT1_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PrintPayment1PrincAmt)
                    .HasColumnName("PRINT_PAYMENT1_PRINC_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PrintPayment1StatementDays).HasColumnName("PRINT_PAYMENT1_STATEMENT_DAYS");

                entity.Property(e => e.PrintPayment1TotalDueAmt)
                    .HasColumnName("PRINT_PAYMENT1_TOTAL_DUE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PrintPayment1TransFeeAmt)
                    .HasColumnName("PRINT_PAYMENT1_TRANS_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PrintPayment2Duedate)
                    .HasColumnName("PRINT_PAYMENT2_DUEDATE")
                    .HasColumnType("date");

                entity.Property(e => e.PrintPayment2InterestAmt)
                    .HasColumnName("PRINT_PAYMENT2_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PrintPayment2PrincAmt)
                    .HasColumnName("PRINT_PAYMENT2_PRINC_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PrintPayment2StatementDays).HasColumnName("PRINT_PAYMENT2_STATEMENT_DAYS");

                entity.Property(e => e.PrintPayment2TotalDueAmt)
                    .HasColumnName("PRINT_PAYMENT2_TOTAL_DUE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PrintPayment2TransFeeAmt)
                    .HasColumnName("PRINT_PAYMENT2_TRANS_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PrintTotCsoInterestAmt)
                    .HasColumnName("PRINT_TOT_CSO_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PrintTotInterestAmt)
                    .HasColumnName("PRINT_TOT_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PrintTotPaymentsAmt)
                    .HasColumnName("PRINT_TOT_PAYMENTS_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.ResumeInterestDate)
                    .HasColumnName("RESUME_INTEREST_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.ResumeInterestOnPayment).HasColumnName("RESUME_INTEREST_ON_PAYMENT");

                entity.Property(e => e.RiFeeRequiresBankAccount).HasColumnName("RI_FEE_REQUIRES_BANK_ACCOUNT");

                entity.Property(e => e.SelectedCycleWeeks).HasColumnName("SELECTED_CYCLE_WEEKS");

                entity.Property(e => e.SetInactiveOnDay).HasColumnName("SET_INACTIVE_ON_DAY");

                entity.Property(e => e.SetInactiveOnDayAfterMissedPaymentCount).HasColumnName("SET_INACTIVE_ON_DAY_AFTER_MISSED_PAYMENT_COUNT");

                entity.Property(e => e.SetInactiveOnMissedPaymentCount).HasColumnName("SET_INACTIVE_ON_MISSED_PAYMENT_COUNT");

                entity.Property(e => e.StatementDays).HasColumnName("STATEMENT_DAYS");

                entity.Property(e => e.SuspendInterest).HasColumnName("SUSPEND_INTEREST");

                entity.Property(e => e.TermLimitDays).HasColumnName("TERM_LIMIT_DAYS");

                entity.Property(e => e.TermLimitFinalDueDate)
                    .HasColumnName("TERM_LIMIT_FINAL_DUE_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.TermLimitFinalStatementDate)
                    .HasColumnName("TERM_LIMIT_FINAL_STATEMENT_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.TransFeeAmt)
                    .HasColumnName("TRANS_FEE_AMT")
                    .HasColumnType("smallmoney")
                    .HasComputedColumnSql("(([PAST_DUE_TRANS_FEE_AMT]+[CURR_DUE_TRANS_FEE_AMT])+[NEXT_DUE_TRANS_FEE_AMT])+[NOT_DUE_TRANS_FEE_AMT]")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.TransFeePct).HasColumnName("TRANS_FEE_PCT");
            });

            modelBuilder.Entity<OpenEndLoanStatement>(entity =>
            {
                entity.HasKey(e => e.OpenEndLoanStmtKey)
                    .HasName("PK_OpenEndLoanStatement");

                entity.HasIndex(e => e.LoanKey)
                    .HasName("IX_OpenEndLoanStatement_LOAN_KEY");

                entity.HasIndex(e => new { e.MailStatus, e.LoanPaymentKey })
                    .HasName("IX_OpenEndLoanStatement_LOAN_PAYMENT_KEY");

                entity.HasIndex(e => new { e.LoanPaymentKey, e.LoanKey, e.AdjustedDueDate })
                    .HasName("IX_OpenEndLoanStatement_ADJUSTED_DUE_DATE");

                entity.Property(e => e.OpenEndLoanStmtKey).HasColumnName("OPEN_END_LOAN_STMT_KEY");

                entity.Property(e => e.AdjustedDueDate)
                    .HasColumnName("ADJUSTED_DUE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.AvgDailyBal)
                    .HasColumnName("AVG_DAILY_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CreditAvail)
                    .HasColumnName("CREDIT_AVAIL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CreditLimit)
                    .HasColumnName("CREDIT_LIMIT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CurrDueActivityFeeAmt)
                    .HasColumnName("CURR_DUE_ACTIVITY_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CurrDueAmt)
                    .HasColumnName("CURR_DUE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CurrDueCollFeeAmt)
                    .HasColumnName("CURR_DUE_COLL_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CurrDueCsoLenderInterestAmt)
                    .HasColumnName("CURR_DUE_CSO_LENDER_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CurrDueDate)
                    .HasColumnName("CURR_DUE_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.CurrDueInterestAmt)
                    .HasColumnName("CURR_DUE_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CurrDuePrincAmt)
                    .HasColumnName("CURR_DUE_PRINC_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CurrDueTransFeeAmt)
                    .HasColumnName("CURR_DUE_TRANS_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EffectiveApr)
                    .HasColumnName("EFFECTIVE_APR")
                    .HasColumnType("numeric");

                entity.Property(e => e.EndBalance)
                    .HasColumnName("END_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.EndDate)
                    .HasColumnName("END_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EndPrinc)
                    .HasColumnName("END_PRINC")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.FinalEstDueCsoLenderInterestAmt)
                    .HasColumnName("FINAL_EST_DUE_CSO_LENDER_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.FinalEstDueInterestAmt)
                    .HasColumnName("FINAL_EST_DUE_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.IsFinalStatement).HasColumnName("IS_FINAL_STATEMENT");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.LoanPaymentKey).HasColumnName("LOAN_PAYMENT_KEY");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.MailStatus).HasColumnName("MAIL_STATUS");

                entity.Property(e => e.MailedWithImage).HasColumnName("MAILED_WITH_IMAGE");

                entity.Property(e => e.NewActivityFees)
                    .HasColumnName("NEW_ACTIVITY_FEES")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NewCollFees)
                    .HasColumnName("NEW_COLL_FEES")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NewCsoLenderInterest)
                    .HasColumnName("NEW_CSO_LENDER_INTEREST")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NewCsoLenderInterestPayments)
                    .HasColumnName("NEW_CSO_LENDER_INTEREST_PAYMENTS")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NewFeePayments)
                    .HasColumnName("NEW_FEE_PAYMENTS")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NewInterest)
                    .HasColumnName("NEW_INTEREST")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NewInterestPayments)
                    .HasColumnName("NEW_INTEREST_PAYMENTS")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NewLienFees)
                    .HasColumnName("NEW_LIEN_FEES")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NewLoanAmt)
                    .HasColumnName("NEW_LOAN_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NewPastDuePayments)
                    .HasColumnName("NEW_PAST_DUE_PAYMENTS")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NewPayments)
                    .HasColumnName("NEW_PAYMENTS")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NewPrincPayments)
                    .HasColumnName("NEW_PRINC_PAYMENTS")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NewTransFees)
                    .HasColumnName("NEW_TRANS_FEES")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NextDueActivityFeeAmt)
                    .HasColumnName("NEXT_DUE_ACTIVITY_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NextDueAmt)
                    .HasColumnName("NEXT_DUE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NextDueCollFeeAmt)
                    .HasColumnName("NEXT_DUE_COLL_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NextDueCsoLenderInterestAmt)
                    .HasColumnName("NEXT_DUE_CSO_LENDER_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NextDueDate)
                    .HasColumnName("NEXT_DUE_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.NextDueInterestAmt)
                    .HasColumnName("NEXT_DUE_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NextDuePrincAmt)
                    .HasColumnName("NEXT_DUE_PRINC_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NextDueTransFeeAmt)
                    .HasColumnName("NEXT_DUE_TRANS_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.OpenEndLoanStatementSnapshotKey).HasColumnName("OPEN_END_LOAN_STATEMENT_SNAPSHOT_KEY");

                entity.Property(e => e.PastDueAmt)
                    .HasColumnName("PAST_DUE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PastDueDate)
                    .HasColumnName("PAST_DUE_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.PerFinCharge)
                    .HasColumnName("PER_FIN_CHARGE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.StartBalance)
                    .HasColumnName("START_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.StartDate)
                    .HasColumnName("START_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartPrinc)
                    .HasColumnName("START_PRINC")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.StatementNum).HasColumnName("STATEMENT_NUM");

                entity.Property(e => e.TotActivityFees)
                    .HasColumnName("TOT_ACTIVITY_FEES")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TotCollFees)
                    .HasColumnName("TOT_COLL_FEES")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TotCsoLenderInterest)
                    .HasColumnName("TOT_CSO_LENDER_INTEREST")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TotInterest)
                    .HasColumnName("TOT_INTEREST")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TotLienFees)
                    .HasColumnName("TOT_LIEN_FEES")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TotLoanAmt)
                    .HasColumnName("TOT_LOAN_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TotPayments)
                    .HasColumnName("TOT_PAYMENTS")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TotTransFees)
                    .HasColumnName("TOT_TRANS_FEES")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");

                entity.Property(e => e.YtdActivityFeesAmt)
                    .HasColumnName("YTD_ACTIVITY_FEES_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.YtdCollFeesAmt)
                    .HasColumnName("YTD_COLL_FEES_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.YtdCsoLenderInterestAmt)
                    .HasColumnName("YTD_CSO_LENDER_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.YtdInterestAmt)
                    .HasColumnName("YTD_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.YtdTransFeesAmt)
                    .HasColumnName("YTD_TRANS_FEES_AMT")
                    .HasColumnType("smallmoney");

                entity.HasOne(d => d.LoanPaymentKeyNavigation)
                    .WithMany(p => p.OpenEndLoanStatement)
                    .HasForeignKey(d => d.LoanPaymentKey)
                    .HasConstraintName("FK_OpenEndLoanStatement_LoanPayment");

                entity.HasOne(d => d.OpenEndLoanStatementSnapshotKeyNavigation)
                    .WithMany(p => p.OpenEndLoanStatement)
                    .HasForeignKey(d => d.OpenEndLoanStatementSnapshotKey)
                    .HasConstraintName("FK_OpenEndLoanStatement_OpenEndLoanStatementSnapshot");

                entity.HasOne(d => d.TransDetailKeyNavigation)
                    .WithMany(p => p.OpenEndLoanStatement)
                    .HasForeignKey(d => d.TransDetailKey)
                    .HasConstraintName("FK_OpenEndLoanStatement_TransDetail");
            });

            modelBuilder.Entity<OpenEndLoanStatementSnapshot>(entity =>
            {
                entity.HasKey(e => e.OpenEndLoanStatementSnapshotKey)
                    .HasName("PK_OpenEndLoanStatementSnapshot");

                entity.Property(e => e.OpenEndLoanStatementSnapshotKey).HasColumnName("OPEN_END_LOAN_STATEMENT_SNAPSHOT_KEY");

                entity.Property(e => e.CabFeeBal)
                    .HasColumnName("CAB_FEE_BAL")
                    .HasColumnType("smallmoney")
                    .HasComputedColumnSql("(([PAST_DUE_CAB_FEE_BAL]+[CURR_DUE_CAB_FEE_BAL])+[NEXT_DUE_CAB_FEE_BAL])+[NOT_DUE_CAB_FEE_BAL]")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.CabLenderInterestFeeBal)
                    .HasColumnName("CAB_LENDER_INTEREST_FEE_BAL")
                    .HasColumnType("smallmoney")
                    .HasComputedColumnSql("(([PAST_DUE_CAB_LENDER_INTEREST_BAL]+[CURR_DUE_CAB_LENDER_INTEREST_BAL])+[NEXT_DUE_CAB_LENDER_INTEREST_BAL])+[NOT_DUE_CAB_LENDER_INTEREST_BAL]")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.CurrDueBal)
                    .HasColumnName("CURR_DUE_BAL")
                    .HasColumnType("smallmoney")
                    .HasComputedColumnSql("(((([CURR_DUE_TRANS_FEE_BAL]+[CURR_DUE_LIEN_FEE_BAL])+[CURR_DUE_CAB_FEE_BAL])+[CURR_DUE_CAB_LENDER_INTEREST_BAL])+[CURR_DUE_INTEREST_BAL])+[CURR_DUE_PRINC_BAL]")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.CurrDueCabFeeBal)
                    .HasColumnName("CURR_DUE_CAB_FEE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CurrDueCabLenderInterestBal)
                    .HasColumnName("CURR_DUE_CAB_LENDER_INTEREST_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CurrDueInterestBal)
                    .HasColumnName("CURR_DUE_INTEREST_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CurrDueLienFeeBal)
                    .HasColumnName("CURR_DUE_LIEN_FEE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CurrDuePrincBal)
                    .HasColumnName("CURR_DUE_PRINC_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CurrDueTransFeeBal)
                    .HasColumnName("CURR_DUE_TRANS_FEE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.InterestBal)
                    .HasColumnName("INTEREST_BAL")
                    .HasColumnType("smallmoney")
                    .HasComputedColumnSql("(([PAST_DUE_INTEREST_BAL]+[CURR_DUE_INTEREST_BAL])+[NEXT_DUE_INTEREST_BAL])+[NOT_DUE_INTEREST_BAL]")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.LienFeeBal)
                    .HasColumnName("LIEN_FEE_BAL")
                    .HasColumnType("smallmoney")
                    .HasComputedColumnSql("(([PAST_DUE_LIEN_FEE_BAL]+[CURR_DUE_LIEN_FEE_BAL])+[NEXT_DUE_LIEN_FEE_BAL])+[NOT_DUE_LIEN_FEE_BAL]")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.NextDueBal)
                    .HasColumnName("NEXT_DUE_BAL")
                    .HasColumnType("smallmoney")
                    .HasComputedColumnSql("(((([NEXT_DUE_TRANS_FEE_BAL]+[NEXT_DUE_LIEN_FEE_BAL])+[NEXT_DUE_CAB_FEE_BAL])+[NEXT_DUE_CAB_LENDER_INTEREST_BAL])+[NEXT_DUE_INTEREST_BAL])+[NEXT_DUE_PRINC_BAL]")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.NextDueCabFeeBal)
                    .HasColumnName("NEXT_DUE_CAB_FEE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NextDueCabLenderInterestBal)
                    .HasColumnName("NEXT_DUE_CAB_LENDER_INTEREST_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NextDueDate)
                    .HasColumnName("NEXT_DUE_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.NextDueInterestBal)
                    .HasColumnName("NEXT_DUE_INTEREST_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NextDueLienFeeBal)
                    .HasColumnName("NEXT_DUE_LIEN_FEE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NextDuePrincBal)
                    .HasColumnName("NEXT_DUE_PRINC_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NextDueTransFeeBal)
                    .HasColumnName("NEXT_DUE_TRANS_FEE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NextStatementDate)
                    .HasColumnName("NEXT_STATEMENT_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.NotDueBal)
                    .HasColumnName("NOT_DUE_BAL")
                    .HasColumnType("smallmoney")
                    .HasComputedColumnSql("(((([NOT_DUE_TRANS_FEE_BAL]+[NOT_DUE_LIEN_FEE_BAL])+[NOT_DUE_CAB_FEE_BAL])+[NOT_DUE_CAB_LENDER_INTEREST_BAL])+[NOT_DUE_INTEREST_BAL])+[NOT_DUE_PRINC_BAL]")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.NotDueCabFeeBal)
                    .HasColumnName("NOT_DUE_CAB_FEE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NotDueCabLenderInterestBal)
                    .HasColumnName("NOT_DUE_CAB_LENDER_INTEREST_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NotDueInterestBal)
                    .HasColumnName("NOT_DUE_INTEREST_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NotDueLienFeeBal)
                    .HasColumnName("NOT_DUE_LIEN_FEE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NotDuePrincBal)
                    .HasColumnName("NOT_DUE_PRINC_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NotDueTransFeeBal)
                    .HasColumnName("NOT_DUE_TRANS_FEE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PastDueBal)
                    .HasColumnName("PAST_DUE_BAL")
                    .HasColumnType("smallmoney")
                    .HasComputedColumnSql("(((((([PAST_DUE_TRANS_FEE_BAL]+[PAST_DUE_LIEN_FEE_BAL])+[PAST_DUE_CAB_FEE_BAL])+[PAST_DUE_CAB_LENDER_INTEREST_BAL])+[PAST_DUE_INTEREST_BAL])+[PAST_DUE_PRINC_BAL])+[PAST_DUE_COLL_FEE_BAL])+[PAST_DUE_CAB_LENDER_COLL_FEE_BAL]")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.PastDueCabFeeBal)
                    .HasColumnName("PAST_DUE_CAB_FEE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PastDueCabLenderCollFeeBal)
                    .HasColumnName("PAST_DUE_CAB_LENDER_COLL_FEE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PastDueCabLenderInterestBal)
                    .HasColumnName("PAST_DUE_CAB_LENDER_INTEREST_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PastDueCollFeeBal)
                    .HasColumnName("PAST_DUE_COLL_FEE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PastDueInterestBal)
                    .HasColumnName("PAST_DUE_INTEREST_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PastDueLienFeeBal)
                    .HasColumnName("PAST_DUE_LIEN_FEE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PastDuePrincBal)
                    .HasColumnName("PAST_DUE_PRINC_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PastDueTransFeeBal)
                    .HasColumnName("PAST_DUE_TRANS_FEE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PendingCollAchAmt)
                    .HasColumnName("PENDING_COLL_ACH_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PendingCollAchSent)
                    .HasColumnName("PENDING_COLL_ACH_SENT")
                    .HasColumnType("date");

                entity.Property(e => e.PendingSchedAchAmt)
                    .HasColumnName("PENDING_SCHED_ACH_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PendingSchedAchSent)
                    .HasColumnName("PENDING_SCHED_ACH_SENT")
                    .HasColumnType("date");

                entity.Property(e => e.PrincBal)
                    .HasColumnName("PRINC_BAL")
                    .HasColumnType("smallmoney")
                    .HasComputedColumnSql("(([PAST_DUE_PRINC_BAL]+[CURR_DUE_PRINC_BAL])+[NEXT_DUE_PRINC_BAL])+[NOT_DUE_PRINC_BAL]")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.TransFeeBal)
                    .HasColumnName("TRANS_FEE_BAL")
                    .HasColumnType("smallmoney")
                    .HasComputedColumnSql("(([PAST_DUE_TRANS_FEE_BAL]+[CURR_DUE_TRANS_FEE_BAL])+[NEXT_DUE_TRANS_FEE_BAL])+[NOT_DUE_TRANS_FEE_BAL]")
                    .ValueGeneratedOnAddOrUpdate();
            });

            modelBuilder.Entity<OpenEndRecalcInterestAdj>(entity =>
            {
                entity.HasKey(e => e.OpenEndRecalcInterestAdjKey)
                    .HasName("PK_OpenEndRecalcInterestAdj");

                entity.HasIndex(e => e.LoanKey)
                    .HasName("IX_OpenEndRecalcInterestAdj_LOAN_KEY");

                entity.HasIndex(e => e.OpenEndInterestKey)
                    .HasName("IX_OpenEndRecalcInterestAdj_OPEN_END_INTEREST_KEY");

                entity.Property(e => e.OpenEndRecalcInterestAdjKey).HasColumnName("OPEN_END_RECALC_INTEREST_ADJ_KEY");

                entity.Property(e => e.CCabFeeBalance)
                    .HasColumnName("C_CAB_FEE_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CCabInterestAdded)
                    .HasColumnName("C_CAB_INTEREST_ADDED")
                    .HasColumnType("numeric");

                entity.Property(e => e.CCollectionsAmt)
                    .HasColumnName("C_COLLECTIONS_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CInterestAdded)
                    .HasColumnName("C_INTEREST_ADDED")
                    .HasColumnType("numeric");

                entity.Property(e => e.CInterestDate)
                    .HasColumnName("C_INTEREST_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.CLoanBalance)
                    .HasColumnName("C_LOAN_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CPrincDue)
                    .HasColumnName("C_PRINC_DUE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CabFeeBalance)
                    .HasColumnName("CAB_FEE_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CabInterestAdded)
                    .HasColumnName("CAB_INTEREST_ADDED")
                    .HasColumnType("numeric");

                entity.Property(e => e.CollectionsAmt)
                    .HasColumnName("COLLECTIONS_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.InterestAdded)
                    .HasColumnName("INTEREST_ADDED")
                    .HasColumnType("numeric");

                entity.Property(e => e.InterestDate)
                    .HasColumnName("INTEREST_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.LoanBalance)
                    .HasColumnName("LOAN_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.OpenEndInterestKey).HasColumnName("OPEN_END_INTEREST_KEY");

                entity.Property(e => e.PrincDue)
                    .HasColumnName("PRINC_DUE")
                    .HasColumnType("smallmoney");
            });

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>(entity =>
            {
                entity.HasKey(e => e.OpenEndRecalcLoanPaymentAdjKey)
                    .HasName("PK_OpenEndRecalcLoanPaymentAdj");

                entity.Property(e => e.OpenEndRecalcLoanPaymentAdjKey).HasColumnName("OPEN_END_RECALC_LOAN_PAYMENT_ADJ_KEY");

                entity.Property(e => e.AddToColl).HasColumnName("ADD_TO_COLL");

                entity.Property(e => e.CAddToColl).HasColumnName("C_ADD_TO_COLL");

                entity.Property(e => e.CCurrDueActivityFeeAmt)
                    .HasColumnName("C_CURR_DUE_ACTIVITY_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CCurrDueCsoLenderInterestAmt)
                    .HasColumnName("C_CURR_DUE_CSO_LENDER_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CCurrDueInterestAmt)
                    .HasColumnName("C_CURR_DUE_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CCurrDueLienFeeAmt)
                    .HasColumnName("C_CURR_DUE_LIEN_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CCurrDuePrincAmt)
                    .HasColumnName("C_CURR_DUE_PRINC_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CCurrDueTransFeeAmt)
                    .HasColumnName("C_CURR_DUE_TRANS_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CLpddAdjustedDueDate)
                    .HasColumnName("C_LPDD_ADJUSTED_DUE_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.CLpddCollectionsAmt)
                    .HasColumnName("C_LPDD_COLLECTIONS_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CLpddOrigDueDate)
                    .HasColumnName("C_LPDD_ORIG_DUE_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.CLpddPastDueAmt)
                    .HasColumnName("C_LPDD_PAST_DUE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CLpddPendingAchAmt)
                    .HasColumnName("C_LPDD_PENDING_ACH_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CNextDueActivityFeeAmt)
                    .HasColumnName("C_NEXT_DUE_ACTIVITY_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CNextDueCsoLenderInterestAmt)
                    .HasColumnName("C_NEXT_DUE_CSO_LENDER_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CNextDueInterestAmt)
                    .HasColumnName("C_NEXT_DUE_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CNextDueLienFeeAmt)
                    .HasColumnName("C_NEXT_DUE_LIEN_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CNextDuePrincAmt)
                    .HasColumnName("C_NEXT_DUE_PRINC_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CNextDueTransFeeAmt)
                    .HasColumnName("C_NEXT_DUE_TRANS_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CNotDueActivityFeeAmt)
                    .HasColumnName("C_NOT_DUE_ACTIVITY_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CNotDueCsoLenderInterestAmt)
                    .HasColumnName("C_NOT_DUE_CSO_LENDER_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CNotDueInterestAmt)
                    .HasColumnName("C_NOT_DUE_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CNotDueLienFeeAmt)
                    .HasColumnName("C_NOT_DUE_LIEN_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CNotDuePrincAmt)
                    .HasColumnName("C_NOT_DUE_PRINC_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CNotDueTransFeeAmt)
                    .HasColumnName("C_NOT_DUE_TRANS_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CPastDueActivityFeeAmt)
                    .HasColumnName("C_PAST_DUE_ACTIVITY_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CPastDueCollFeeAmt)
                    .HasColumnName("C_PAST_DUE_COLL_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CPastDueCsoLenderCollFeeAmt)
                    .HasColumnName("C_PAST_DUE_CSO_LENDER_COLL_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CPastDueCsoLenderInterestAmt)
                    .HasColumnName("C_PAST_DUE_CSO_LENDER_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CPastDueInterestAmt)
                    .HasColumnName("C_PAST_DUE_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CPastDueLienFeeAmt)
                    .HasColumnName("C_PAST_DUE_LIEN_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CPastDuePrincAmt)
                    .HasColumnName("C_PAST_DUE_PRINC_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CPastDueTransFeeAmt)
                    .HasColumnName("C_PAST_DUE_TRANS_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CPendingSchedAchAmt)
                    .HasColumnName("C_PENDING_SCHED_ACH_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CRemFromColl).HasColumnName("C_REM_FROM_COLL");

                entity.Property(e => e.CTranscode).HasColumnName("C_TRANSCODE");

                entity.Property(e => e.CurrDueActivityFeeAmt)
                    .HasColumnName("CURR_DUE_ACTIVITY_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CurrDueCsoLenderInterestAmt)
                    .HasColumnName("CURR_DUE_CSO_LENDER_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CurrDueInterestAmt)
                    .HasColumnName("CURR_DUE_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CurrDueLienFeeAmt)
                    .HasColumnName("CURR_DUE_LIEN_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CurrDuePrincAmt)
                    .HasColumnName("CURR_DUE_PRINC_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CurrDueTransFeeAmt)
                    .HasColumnName("CURR_DUE_TRANS_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.LoanPaymentKey).HasColumnName("LOAN_PAYMENT_KEY");

                entity.Property(e => e.LpddAdjustedDueDate)
                    .HasColumnName("LPDD_ADJUSTED_DUE_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.LpddCollectionsAmt)
                    .HasColumnName("LPDD_COLLECTIONS_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LpddOrigDueDate)
                    .HasColumnName("LPDD_ORIG_DUE_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.LpddPastDueAmt)
                    .HasColumnName("LPDD_PAST_DUE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LpddPendingAchAmt)
                    .HasColumnName("LPDD_PENDING_ACH_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NextDueActivityFeeAmt)
                    .HasColumnName("NEXT_DUE_ACTIVITY_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NextDueCsoLenderInterestAmt)
                    .HasColumnName("NEXT_DUE_CSO_LENDER_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NextDueInterestAmt)
                    .HasColumnName("NEXT_DUE_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NextDueLienFeeAmt)
                    .HasColumnName("NEXT_DUE_LIEN_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NextDuePrincAmt)
                    .HasColumnName("NEXT_DUE_PRINC_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NextDueTransFeeAmt)
                    .HasColumnName("NEXT_DUE_TRANS_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NotDueActivityFeeAmt)
                    .HasColumnName("NOT_DUE_ACTIVITY_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NotDueCsoLenderInterestAmt)
                    .HasColumnName("NOT_DUE_CSO_LENDER_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NotDueInterestAmt)
                    .HasColumnName("NOT_DUE_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NotDueLienFeeAmt)
                    .HasColumnName("NOT_DUE_LIEN_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NotDuePrincAmt)
                    .HasColumnName("NOT_DUE_PRINC_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NotDueTransFeeAmt)
                    .HasColumnName("NOT_DUE_TRANS_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PastDueActivityFeeAmt)
                    .HasColumnName("PAST_DUE_ACTIVITY_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PastDueCollFeeAmt)
                    .HasColumnName("PAST_DUE_COLL_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PastDueCsoLenderCollFeeAmt)
                    .HasColumnName("PAST_DUE_CSO_LENDER_COLL_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PastDueCsoLenderInterestAmt)
                    .HasColumnName("PAST_DUE_CSO_LENDER_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PastDueInterestAmt)
                    .HasColumnName("PAST_DUE_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PastDueLienFeeAmt)
                    .HasColumnName("PAST_DUE_LIEN_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PastDuePrincAmt)
                    .HasColumnName("PAST_DUE_PRINC_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PastDueTransFeeAmt)
                    .HasColumnName("PAST_DUE_TRANS_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PendingSchedAchAmt)
                    .HasColumnName("PENDING_SCHED_ACH_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.RemFromColl).HasColumnName("REM_FROM_COLL");

                entity.Property(e => e.Transcode).HasColumnName("TRANSCODE");
            });

            modelBuilder.Entity<OpenEndRecalcStatementAdj>(entity =>
            {
                entity.HasKey(e => e.OpenEndRecalcStatementAdjKey)
                    .HasName("PK_OpenEndRecalcStatementAdj");

                entity.Property(e => e.OpenEndRecalcStatementAdjKey).HasColumnName("OPEN_END_RECALC_STATEMENT_ADJ_KEY");

                entity.Property(e => e.AdjustedDueDate)
                    .HasColumnName("ADJUSTED_DUE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.AvgDailyBal)
                    .HasColumnName("AVG_DAILY_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CAdjustedDueDate)
                    .HasColumnName("C_ADJUSTED_DUE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.CAvgDailyBal)
                    .HasColumnName("C_AVG_DAILY_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CCreditAvail)
                    .HasColumnName("C_CREDIT_AVAIL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CCreditLimit)
                    .HasColumnName("C_CREDIT_LIMIT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CCurrDueActivityFeeAmt)
                    .HasColumnName("C_CURR_DUE_ACTIVITY_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CCurrDueAmt)
                    .HasColumnName("C_CURR_DUE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CCurrDueCollFeeAmt)
                    .HasColumnName("C_CURR_DUE_COLL_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CCurrDueCsoLenderInterestAmt)
                    .HasColumnName("C_CURR_DUE_CSO_LENDER_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CCurrDueDate)
                    .HasColumnName("C_CURR_DUE_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.CCurrDueInterestAmt)
                    .HasColumnName("C_CURR_DUE_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CCurrDuePrincAmt)
                    .HasColumnName("C_CURR_DUE_PRINC_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CCurrDueTransFeeAmt)
                    .HasColumnName("C_CURR_DUE_TRANS_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CEffectiveApr)
                    .HasColumnName("C_EFFECTIVE_APR")
                    .HasColumnType("numeric");

                entity.Property(e => e.CEndBalance)
                    .HasColumnName("C_END_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CEndDate)
                    .HasColumnName("C_END_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.CEndPrinc)
                    .HasColumnName("C_END_PRINC")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CFinalEstDueCsoLenderInterestAmt)
                    .HasColumnName("C_FINAL_EST_DUE_CSO_LENDER_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CFinalEstDueInterestAmt)
                    .HasColumnName("C_FINAL_EST_DUE_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CIsFinalStatement).HasColumnName("C_IS_FINAL_STATEMENT");

                entity.Property(e => e.CNewActivityFees)
                    .HasColumnName("C_NEW_ACTIVITY_FEES")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CNewCollFees)
                    .HasColumnName("C_NEW_COLL_FEES")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CNewCsoLenderInterest)
                    .HasColumnName("C_NEW_CSO_LENDER_INTEREST")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CNewCsoLenderInterestPayments)
                    .HasColumnName("C_NEW_CSO_LENDER_INTEREST_PAYMENTS")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CNewFeePayments)
                    .HasColumnName("C_NEW_FEE_PAYMENTS")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CNewInterest)
                    .HasColumnName("C_NEW_INTEREST")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CNewInterestPayments)
                    .HasColumnName("C_NEW_INTEREST_PAYMENTS")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CNewLienFees)
                    .HasColumnName("C_NEW_LIEN_FEES")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CNewLoanAmt)
                    .HasColumnName("C_NEW_LOAN_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CNewPastDuePayments)
                    .HasColumnName("C_NEW_PAST_DUE_PAYMENTS")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CNewPayments)
                    .HasColumnName("C_NEW_PAYMENTS")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CNewPrincPayments)
                    .HasColumnName("C_NEW_PRINC_PAYMENTS")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CNewTransFees)
                    .HasColumnName("C_NEW_TRANS_FEES")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CNextDueActivityFeeAmt)
                    .HasColumnName("C_NEXT_DUE_ACTIVITY_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CNextDueAmt)
                    .HasColumnName("C_NEXT_DUE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CNextDueCollFeeAmt)
                    .HasColumnName("C_NEXT_DUE_COLL_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CNextDueCsoLenderInterestAmt)
                    .HasColumnName("C_NEXT_DUE_CSO_LENDER_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CNextDueDate)
                    .HasColumnName("C_NEXT_DUE_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.CNextDueInterestAmt)
                    .HasColumnName("C_NEXT_DUE_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CNextDuePrincAmt)
                    .HasColumnName("C_NEXT_DUE_PRINC_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CNextDueTransFeeAmt)
                    .HasColumnName("C_NEXT_DUE_TRANS_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CPastDueAmt)
                    .HasColumnName("C_PAST_DUE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CPastDueDate)
                    .HasColumnName("C_PAST_DUE_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.CPerFinCharge)
                    .HasColumnName("C_PER_FIN_CHARGE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CStartBalance)
                    .HasColumnName("C_START_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CStartDate)
                    .HasColumnName("C_START_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.CStartPrinc)
                    .HasColumnName("C_START_PRINC")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CTotActivityFees)
                    .HasColumnName("C_TOT_ACTIVITY_FEES")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CTotCollFees)
                    .HasColumnName("C_TOT_COLL_FEES")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CTotCsoLenderInterest)
                    .HasColumnName("C_TOT_CSO_LENDER_INTEREST")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CTotInterest)
                    .HasColumnName("C_TOT_INTEREST")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CTotLienFees)
                    .HasColumnName("C_TOT_LIEN_FEES")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CTotLoanAmt)
                    .HasColumnName("C_TOT_LOAN_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CTotPayments)
                    .HasColumnName("C_TOT_PAYMENTS")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CTotTransFees)
                    .HasColumnName("C_TOT_TRANS_FEES")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CYtdActivityFeesAmt)
                    .HasColumnName("C_YTD_ACTIVITY_FEES_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CYtdCollFeesAmt)
                    .HasColumnName("C_YTD_COLL_FEES_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CYtdCsoLenderInterestAmt)
                    .HasColumnName("C_YTD_CSO_LENDER_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CYtdInterestAmt)
                    .HasColumnName("C_YTD_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CYtdTransFeesAmt)
                    .HasColumnName("C_YTD_TRANS_FEES_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CreditAvail)
                    .HasColumnName("CREDIT_AVAIL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CreditLimit)
                    .HasColumnName("CREDIT_LIMIT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CurrDueActivityFeeAmt)
                    .HasColumnName("CURR_DUE_ACTIVITY_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CurrDueAmt)
                    .HasColumnName("CURR_DUE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CurrDueCollFeeAmt)
                    .HasColumnName("CURR_DUE_COLL_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CurrDueCsoLenderInterestAmt)
                    .HasColumnName("CURR_DUE_CSO_LENDER_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CurrDueDate)
                    .HasColumnName("CURR_DUE_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.CurrDueInterestAmt)
                    .HasColumnName("CURR_DUE_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CurrDuePrincAmt)
                    .HasColumnName("CURR_DUE_PRINC_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CurrDueTransFeeAmt)
                    .HasColumnName("CURR_DUE_TRANS_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EffectiveApr)
                    .HasColumnName("EFFECTIVE_APR")
                    .HasColumnType("numeric");

                entity.Property(e => e.EndBalance)
                    .HasColumnName("END_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.EndDate)
                    .HasColumnName("END_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EndPrinc)
                    .HasColumnName("END_PRINC")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.FinalEstDueCsoLenderInterestAmt)
                    .HasColumnName("FINAL_EST_DUE_CSO_LENDER_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.FinalEstDueInterestAmt)
                    .HasColumnName("FINAL_EST_DUE_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.IsFinalStatement).HasColumnName("IS_FINAL_STATEMENT");

                entity.Property(e => e.NewActivityFees)
                    .HasColumnName("NEW_ACTIVITY_FEES")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NewCollFees)
                    .HasColumnName("NEW_COLL_FEES")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NewCsoLenderInterest)
                    .HasColumnName("NEW_CSO_LENDER_INTEREST")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NewCsoLenderInterestPayments)
                    .HasColumnName("NEW_CSO_LENDER_INTEREST_PAYMENTS")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NewFeePayments)
                    .HasColumnName("NEW_FEE_PAYMENTS")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NewInterest)
                    .HasColumnName("NEW_INTEREST")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NewInterestPayments)
                    .HasColumnName("NEW_INTEREST_PAYMENTS")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NewLienFees)
                    .HasColumnName("NEW_LIEN_FEES")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NewLoanAmt)
                    .HasColumnName("NEW_LOAN_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NewPastDuePayments)
                    .HasColumnName("NEW_PAST_DUE_PAYMENTS")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NewPayments)
                    .HasColumnName("NEW_PAYMENTS")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NewPrincPayments)
                    .HasColumnName("NEW_PRINC_PAYMENTS")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NewTransFees)
                    .HasColumnName("NEW_TRANS_FEES")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NextDueActivityFeeAmt)
                    .HasColumnName("NEXT_DUE_ACTIVITY_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NextDueAmt)
                    .HasColumnName("NEXT_DUE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NextDueCollFeeAmt)
                    .HasColumnName("NEXT_DUE_COLL_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NextDueCsoLenderInterestAmt)
                    .HasColumnName("NEXT_DUE_CSO_LENDER_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NextDueDate)
                    .HasColumnName("NEXT_DUE_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.NextDueInterestAmt)
                    .HasColumnName("NEXT_DUE_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NextDuePrincAmt)
                    .HasColumnName("NEXT_DUE_PRINC_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NextDueTransFeeAmt)
                    .HasColumnName("NEXT_DUE_TRANS_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.OpenEndLoanStmtKey).HasColumnName("OPEN_END_LOAN_STMT_KEY");

                entity.Property(e => e.PastDueAmt)
                    .HasColumnName("PAST_DUE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PastDueDate)
                    .HasColumnName("PAST_DUE_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.PerFinCharge)
                    .HasColumnName("PER_FIN_CHARGE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.StartBalance)
                    .HasColumnName("START_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.StartDate)
                    .HasColumnName("START_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartPrinc)
                    .HasColumnName("START_PRINC")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TotActivityFees)
                    .HasColumnName("TOT_ACTIVITY_FEES")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TotCollFees)
                    .HasColumnName("TOT_COLL_FEES")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TotCsoLenderInterest)
                    .HasColumnName("TOT_CSO_LENDER_INTEREST")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TotInterest)
                    .HasColumnName("TOT_INTEREST")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TotLienFees)
                    .HasColumnName("TOT_LIEN_FEES")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TotLoanAmt)
                    .HasColumnName("TOT_LOAN_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TotPayments)
                    .HasColumnName("TOT_PAYMENTS")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TotTransFees)
                    .HasColumnName("TOT_TRANS_FEES")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.YtdActivityFeesAmt)
                    .HasColumnName("YTD_ACTIVITY_FEES_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.YtdCollFeesAmt)
                    .HasColumnName("YTD_COLL_FEES_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.YtdCsoLenderInterestAmt)
                    .HasColumnName("YTD_CSO_LENDER_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.YtdInterestAmt)
                    .HasColumnName("YTD_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.YtdTransFeesAmt)
                    .HasColumnName("YTD_TRANS_FEES_AMT")
                    .HasColumnType("smallmoney");

                entity.HasOne(d => d.OpenEndLoanStmtKeyNavigation)
                    .WithMany(p => p.OpenEndRecalcStatementAdj)
                    .HasForeignKey(d => d.OpenEndLoanStmtKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_OpenEndRecalcStatementAdj_OPEN_END_LOAN_STMT_KEY");
            });

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>(entity =>
            {
                entity.HasKey(e => e.OpenEndRecalcStatementSnapshotKey)
                    .HasName("PK_OpenEndRecalcStatementSnapshot");

                entity.Property(e => e.OpenEndRecalcStatementSnapshotKey).HasColumnName("OPEN_END_RECALC_STATEMENT_SNAPSHOT_KEY");

                entity.Property(e => e.CCurrDueCabFeeBal)
                    .HasColumnName("C_CURR_DUE_CAB_FEE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CCurrDueCabLenderInterestBal)
                    .HasColumnName("C_CURR_DUE_CAB_LENDER_INTEREST_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CCurrDueInterestBal)
                    .HasColumnName("C_CURR_DUE_INTEREST_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CCurrDueLienFeeBal)
                    .HasColumnName("C_CURR_DUE_LIEN_FEE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CCurrDuePrincBal)
                    .HasColumnName("C_CURR_DUE_PRINC_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CCurrDueTransFeeBal)
                    .HasColumnName("C_CURR_DUE_TRANS_FEE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CNextDueCabFeeBal)
                    .HasColumnName("C_NEXT_DUE_CAB_FEE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CNextDueCabLenderInterestBal)
                    .HasColumnName("C_NEXT_DUE_CAB_LENDER_INTEREST_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CNextDueDate)
                    .HasColumnName("C_NEXT_DUE_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.CNextDueInterestBal)
                    .HasColumnName("C_NEXT_DUE_INTEREST_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CNextDueLienFeeBal)
                    .HasColumnName("C_NEXT_DUE_LIEN_FEE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CNextDuePrincBal)
                    .HasColumnName("C_NEXT_DUE_PRINC_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CNextDueTransFeeBal)
                    .HasColumnName("C_NEXT_DUE_TRANS_FEE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CNextStatementDate)
                    .HasColumnName("C_NEXT_STATEMENT_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.CNotDueCabFeeBal)
                    .HasColumnName("C_NOT_DUE_CAB_FEE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CNotDueCabLenderInterestBal)
                    .HasColumnName("C_NOT_DUE_CAB_LENDER_INTEREST_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CNotDueInterestBal)
                    .HasColumnName("C_NOT_DUE_INTEREST_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CNotDueLienFeeBal)
                    .HasColumnName("C_NOT_DUE_LIEN_FEE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CNotDuePrincBal)
                    .HasColumnName("C_NOT_DUE_PRINC_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CNotDueTransFeeBal)
                    .HasColumnName("C_NOT_DUE_TRANS_FEE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CPastDueCabFeeBal)
                    .HasColumnName("C_PAST_DUE_CAB_FEE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CPastDueCabLenderCollFeeBal)
                    .HasColumnName("C_PAST_DUE_CAB_LENDER_COLL_FEE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CPastDueCabLenderInterestBal)
                    .HasColumnName("C_PAST_DUE_CAB_LENDER_INTEREST_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CPastDueCollFeeBal)
                    .HasColumnName("C_PAST_DUE_COLL_FEE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CPastDueInterestBal)
                    .HasColumnName("C_PAST_DUE_INTEREST_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CPastDueLienFeeBal)
                    .HasColumnName("C_PAST_DUE_LIEN_FEE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CPastDuePrincBal)
                    .HasColumnName("C_PAST_DUE_PRINC_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CPastDueTransFeeBal)
                    .HasColumnName("C_PAST_DUE_TRANS_FEE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CPendingCollAchAmt)
                    .HasColumnName("C_PENDING_COLL_ACH_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CPendingCollAchSent)
                    .HasColumnName("C_PENDING_COLL_ACH_SENT")
                    .HasColumnType("date");

                entity.Property(e => e.CPendingSchedAchAmt)
                    .HasColumnName("C_PENDING_SCHED_ACH_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CPendingSchedAchSent)
                    .HasColumnName("C_PENDING_SCHED_ACH_SENT")
                    .HasColumnType("date");

                entity.Property(e => e.CurrDueCabFeeBal)
                    .HasColumnName("CURR_DUE_CAB_FEE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CurrDueCabLenderInterestBal)
                    .HasColumnName("CURR_DUE_CAB_LENDER_INTEREST_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CurrDueInterestBal)
                    .HasColumnName("CURR_DUE_INTEREST_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CurrDueLienFeeBal)
                    .HasColumnName("CURR_DUE_LIEN_FEE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CurrDuePrincBal)
                    .HasColumnName("CURR_DUE_PRINC_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CurrDueTransFeeBal)
                    .HasColumnName("CURR_DUE_TRANS_FEE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.NextDueCabFeeBal)
                    .HasColumnName("NEXT_DUE_CAB_FEE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NextDueCabLenderInterestBal)
                    .HasColumnName("NEXT_DUE_CAB_LENDER_INTEREST_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NextDueDate)
                    .HasColumnName("NEXT_DUE_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.NextDueInterestBal)
                    .HasColumnName("NEXT_DUE_INTEREST_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NextDueLienFeeBal)
                    .HasColumnName("NEXT_DUE_LIEN_FEE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NextDuePrincBal)
                    .HasColumnName("NEXT_DUE_PRINC_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NextDueTransFeeBal)
                    .HasColumnName("NEXT_DUE_TRANS_FEE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NextStatementDate)
                    .HasColumnName("NEXT_STATEMENT_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.NotDueCabFeeBal)
                    .HasColumnName("NOT_DUE_CAB_FEE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NotDueCabLenderInterestBal)
                    .HasColumnName("NOT_DUE_CAB_LENDER_INTEREST_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NotDueInterestBal)
                    .HasColumnName("NOT_DUE_INTEREST_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NotDueLienFeeBal)
                    .HasColumnName("NOT_DUE_LIEN_FEE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NotDuePrincBal)
                    .HasColumnName("NOT_DUE_PRINC_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NotDueTransFeeBal)
                    .HasColumnName("NOT_DUE_TRANS_FEE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.OpenEndLoanStatementSnapshotKey).HasColumnName("OPEN_END_LOAN_STATEMENT_SNAPSHOT_KEY");

                entity.Property(e => e.PastDueCabFeeBal)
                    .HasColumnName("PAST_DUE_CAB_FEE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PastDueCabLenderCollFeeBal)
                    .HasColumnName("PAST_DUE_CAB_LENDER_COLL_FEE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PastDueCabLenderInterestBal)
                    .HasColumnName("PAST_DUE_CAB_LENDER_INTEREST_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PastDueCollFeeBal)
                    .HasColumnName("PAST_DUE_COLL_FEE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PastDueInterestBal)
                    .HasColumnName("PAST_DUE_INTEREST_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PastDueLienFeeBal)
                    .HasColumnName("PAST_DUE_LIEN_FEE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PastDuePrincBal)
                    .HasColumnName("PAST_DUE_PRINC_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PastDueTransFeeBal)
                    .HasColumnName("PAST_DUE_TRANS_FEE_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PendingCollAchAmt)
                    .HasColumnName("PENDING_COLL_ACH_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PendingCollAchSent)
                    .HasColumnName("PENDING_COLL_ACH_SENT")
                    .HasColumnType("date");

                entity.Property(e => e.PendingSchedAchAmt)
                    .HasColumnName("PENDING_SCHED_ACH_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PendingSchedAchSent)
                    .HasColumnName("PENDING_SCHED_ACH_SENT")
                    .HasColumnType("date");

                entity.HasOne(d => d.OpenEndLoanStatementSnapshotKeyNavigation)
                    .WithMany(p => p.OpenEndRecalcStatementSnapshot)
                    .HasForeignKey(d => d.OpenEndLoanStatementSnapshotKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_OpenEndRecalcStatementSnapshot_OpenEndLoanStatementSnapshot");
            });

            modelBuilder.Entity<OptInOut>(entity =>
            {
                entity.HasKey(e => e.OptinoutKey)
                    .HasName("PK_OptInOut");

                entity.HasIndex(e => new { e.OptoutEmail, e.VisitorKey })
                    .HasName("UX_OptInOut_VISITOR_KEY")
                    .IsUnique();

                entity.Property(e => e.OptinoutKey).HasColumnName("OPTINOUT_KEY");

                entity.Property(e => e.CallCampaignPhone)
                    .IsRequired()
                    .HasColumnName("CALL_CAMPAIGN_PHONE")
                    .HasColumnType("varchar(12)");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.OptoutCallCampaign).HasColumnName("OPTOUT_CALL_CAMPAIGN");

                entity.Property(e => e.OptoutCrSms).HasColumnName("OPTOUT_CR_SMS");

                entity.Property(e => e.OptoutDirectMail).HasColumnName("OPTOUT_DIRECT_MAIL");

                entity.Property(e => e.OptoutEmail).HasColumnName("OPTOUT_EMAIL");

                entity.Property(e => e.OptoutOptplusCallCampaign).HasColumnName("OPTOUT_OPTPLUS_CALL_CAMPAIGN");

                entity.Property(e => e.OptoutOptplusDirectMail).HasColumnName("OPTOUT_OPTPLUS_DIRECT_MAIL");

                entity.Property(e => e.OptoutOptplusEmail).HasColumnName("OPTOUT_OPTPLUS_EMAIL");

                entity.Property(e => e.OptoutOptplusSms).HasColumnName("OPTOUT_OPTPLUS_SMS");

                entity.Property(e => e.OptoutOptplusVoiceblast).HasColumnName("OPTOUT_OPTPLUS_VOICEBLAST");

                entity.Property(e => e.OptoutPrivacyConsent).HasColumnName("OPTOUT_PRIVACY_CONSENT");

                entity.Property(e => e.OptoutSms).HasColumnName("OPTOUT_SMS");

                entity.Property(e => e.OptoutThirdPartyShare).HasColumnName("OPTOUT_THIRD_PARTY_SHARE");

                entity.Property(e => e.OptoutTransactionCommunication).HasColumnName("OPTOUT_TRANSACTION_COMMUNICATION");

                entity.Property(e => e.OptoutVoiceblast).HasColumnName("OPTOUT_VOICEBLAST");

                entity.Property(e => e.OptplusCallCampaignPhone)
                    .IsRequired()
                    .HasColumnName("OPTPLUS_CALL_CAMPAIGN_PHONE")
                    .HasColumnType("varchar(12)");

                entity.Property(e => e.OptplusSmsPhone)
                    .IsRequired()
                    .HasColumnName("OPTPLUS_SMS_PHONE")
                    .HasColumnType("varchar(12)");

                entity.Property(e => e.OptplusVoiceblastPhone)
                    .IsRequired()
                    .HasColumnName("OPTPLUS_VOICEBLAST_PHONE")
                    .HasColumnType("varchar(12)");

                entity.Property(e => e.SmsPhone)
                    .IsRequired()
                    .HasColumnName("SMS_PHONE")
                    .HasColumnType("varchar(12)");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.VisitorKey).HasColumnName("VISITOR_KEY");

                entity.Property(e => e.VoiceblastPhone)
                    .IsRequired()
                    .HasColumnName("VOICEBLAST_PHONE")
                    .HasColumnType("varchar(12)");

                entity.HasOne(d => d.VisitorKeyNavigation)
                    .WithMany(p => p.OptInOut)
                    .HasForeignKey(d => d.VisitorKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_OptInOut_Visitor");
            });

            modelBuilder.Entity<OptInOutEdit>(entity =>
            {
                entity.HasKey(e => e.OptinoutEditKey)
                    .HasName("PK_OptInOutEdit");

                entity.HasIndex(e => e.OptinoutKey)
                    .HasName("IX_OptInOutEdit");

                entity.Property(e => e.OptinoutEditKey).HasColumnName("OPTINOUT_EDIT_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.FieldName)
                    .IsRequired()
                    .HasColumnName("FIELD_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.NewValue)
                    .IsRequired()
                    .HasColumnName("NEW_VALUE")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.OldValue)
                    .IsRequired()
                    .HasColumnName("OLD_VALUE")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.OptinoutKey).HasColumnName("OPTINOUT_KEY");

                entity.Property(e => e.Tellerid)
                    .IsRequired()
                    .HasColumnName("TELLERID")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.OptinoutKeyNavigation)
                    .WithMany(p => p.OptInOutEdit)
                    .HasForeignKey(d => d.OptinoutKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_OptInOutEdit_OptInOut");
            });

            modelBuilder.Entity<OptPlusBinProduct>(entity =>
            {
                entity.HasKey(e => e.OptplusBinProductKey)
                    .HasName("PK_OptPlusBinProduct");

                entity.Property(e => e.OptplusBinProductKey).HasColumnName("OPTPLUS_BIN_PRODUCT_KEY");

                entity.Property(e => e.OptplusProductKey).HasColumnName("OPTPLUS_PRODUCT_KEY");

                entity.Property(e => e.PrepaidCardBinKey).HasColumnName("PREPAID_CARD_BIN_KEY");

                entity.Property(e => e.TestVendorPackageId).HasColumnName("TEST_VENDOR_PACKAGE_ID");

                entity.Property(e => e.TestVendorProductId).HasColumnName("TEST_VENDOR_PRODUCT_ID");

                entity.Property(e => e.VendorPackageId).HasColumnName("VENDOR_PACKAGE_ID");

                entity.Property(e => e.VendorProductId).HasColumnName("VENDOR_PRODUCT_ID");

                entity.HasOne(d => d.OptplusProductKeyNavigation)
                    .WithMany(p => p.OptPlusBinProduct)
                    .HasForeignKey(d => d.OptplusProductKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_OptPlusBinProduct_OptPlusProduct");

                entity.HasOne(d => d.PrepaidCardBinKeyNavigation)
                    .WithMany(p => p.OptPlusBinProduct)
                    .HasForeignKey(d => d.PrepaidCardBinKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_OptPlusBinProduct_PrepaidCardBin");
            });

            modelBuilder.Entity<OptPlusBinService>(entity =>
            {
                entity.HasKey(e => e.OptPlusBinServiceKey)
                    .HasName("PK_OptPlusBinService");

                entity.Property(e => e.OptPlusBinServiceKey).HasColumnName("OPT_PLUS_BIN_SERVICE_KEY");

                entity.Property(e => e.OptPlusBinKey).HasColumnName("OPT_PLUS_BIN_KEY");

                entity.Property(e => e.ServiceDetailKey).HasColumnName("SERVICE_DETAIL_KEY");
            });

            modelBuilder.Entity<OptPlusCardDetail>(entity =>
            {
                entity.HasKey(e => e.OptplusCardDetailKey)
                    .HasName("PK_OptPlusCardDetail");

                entity.HasIndex(e => e.CreditCardKey)
                    .HasName("IX_OptPlusCardDetail_CREDIT_CARD_KEY");

                entity.HasIndex(e => e.OptplusProductKey)
                    .HasName("IX_OptPlusCardDetail_OPTPLUS_PRODUCT_KEY");

                entity.HasIndex(e => e.PanProxyNum)
                    .HasName("IX_OptPlusCardDetail_PAN_PROXY_NUM");

                entity.HasIndex(e => e.PersonId)
                    .HasName("IX_OptPlusCardDetail_PERSON_ID");

                entity.Property(e => e.OptplusCardDetailKey).HasColumnName("OPTPLUS_CARD_DETAIL_KEY");

                entity.Property(e => e.BankAccessNumber)
                    .HasColumnName("BANK_ACCESS_NUMBER")
                    .HasColumnType("varchar(13)");

                entity.Property(e => e.CardId)
                    .HasColumnName("CARD_ID")
                    .HasMaxLength(30);

                entity.Property(e => e.CreditCardKey).HasColumnName("CREDIT_CARD_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsDeactivated).HasColumnName("IS_DEACTIVATED");

                entity.Property(e => e.IsEligibleColl).HasColumnName("IS_ELIGIBLE_COLL");

                entity.Property(e => e.IsEmbossed)
                    .HasColumnName("IS_EMBOSSED")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.IssuerKey).HasColumnName("ISSUER_KEY");

                entity.Property(e => e.OptplusPreviousProductKey).HasColumnName("OPTPLUS_PREVIOUS_PRODUCT_KEY");

                entity.Property(e => e.OptplusProductKey).HasColumnName("OPTPLUS_PRODUCT_KEY");

                entity.Property(e => e.OtherCreditcardKey).HasColumnName("OTHER_CREDITCARD_KEY");

                entity.Property(e => e.OverdraftAmount)
                    .HasColumnName("OVERDRAFT_AMOUNT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.OverdraftOptedIn).HasColumnName("OVERDRAFT_OPTED_IN");

                entity.Property(e => e.PanProxyNum)
                    .HasColumnName("PAN_PROXY_NUM")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.ParentOptPlusCardDetailKey).HasColumnName("PARENT_OPT_PLUS_CARD_DETAIL_KEY");

                entity.Property(e => e.PendingCollAchAmt)
                    .HasColumnName("PENDING_COLL_ACH_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PendingCollAchSent)
                    .HasColumnName("PENDING_COLL_ACH_SENT")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.PersonId).HasColumnName("PERSON_ID");

                entity.Property(e => e.ProductFlipDate)
                    .HasColumnName("PRODUCT_FLIP_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.CreditCardKeyNavigation)
                    .WithOne(p => p.OptPlusCardDetailCreditCardKeyNavigation)
                    .HasForeignKey<OptPlusCardDetail>(d => d.CreditCardKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_OptPlusCardDetail_CreditCards");

                entity.HasOne(d => d.IssuerKeyNavigation)
                    .WithMany(p => p.OptPlusCardDetail)
                    .HasForeignKey(d => d.IssuerKey)
                    .HasConstraintName("FK_OptPlusCardDetailIssuer");

                entity.HasOne(d => d.OptplusProductKeyNavigation)
                    .WithMany(p => p.OptPlusCardDetail)
                    .HasForeignKey(d => d.OptplusProductKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_OptPlusCardDetail_OptPlusProduct");

                entity.HasOne(d => d.OtherCreditcardKeyNavigation)
                    .WithMany(p => p.OptPlusCardDetailOtherCreditcardKeyNavigation)
                    .HasForeignKey(d => d.OtherCreditcardKey)
                    .HasConstraintName("FK_OptPlusCardDetailCreditCards");

                entity.HasOne(d => d.ParentOptPlusCardDetailKeyNavigation)
                    .WithMany(p => p.InverseParentOptPlusCardDetailKeyNavigation)
                    .HasForeignKey(d => d.ParentOptPlusCardDetailKey)
                    .HasConstraintName("fk_OptPlusCardDetail_OptPlusCardDetail");
            });

            modelBuilder.Entity<OptPlusCardRipayment>(entity =>
            {
                entity.HasKey(e => e.OptplusCardRiPaymentKey)
                    .HasName("PK_OptPlusCardRIPayment");

                entity.ToTable("OptPlusCardRIPayment");

                entity.Property(e => e.OptplusCardRiPaymentKey).HasColumnName("OPTPLUS_CARD_RI_PAYMENT_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasColumnType("varchar(500)");

                entity.Property(e => e.OptplusCardDetailKey).HasColumnName("OPTPLUS_CARD_DETAIL_KEY");

                entity.Property(e => e.PaidAmt)
                    .HasColumnName("PAID_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PaymentMethod).HasColumnName("PAYMENT_METHOD");

                entity.Property(e => e.Reversed).HasColumnName("REVERSED");

                entity.Property(e => e.ReversedDate)
                    .HasColumnName("REVERSED_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.RisreptKey).HasColumnName("RISREPT_KEY");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.TransCode).HasColumnName("TRANS_CODE");

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");

                entity.HasOne(d => d.OptplusCardDetailKeyNavigation)
                    .WithMany(p => p.OptPlusCardRipayment)
                    .HasForeignKey(d => d.OptplusCardDetailKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_OptPlusCardRIPayment_OptPlusCardDetail");

                entity.HasOne(d => d.RisreptKeyNavigation)
                    .WithMany(p => p.OptPlusCardRipayment)
                    .HasForeignKey(d => d.RisreptKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_OptPlusCardRIPayment_RISREPT");
            });

            modelBuilder.Entity<OptPlusCarrier>(entity =>
            {
                entity.HasKey(e => e.OptplusCarrierKey)
                    .HasName("PK_OptPlusCarrier");

                entity.Property(e => e.OptplusCarrierKey).HasColumnName("OPTPLUS_CARRIER_KEY");

                entity.Property(e => e.CarrierId)
                    .IsRequired()
                    .HasColumnName("CARRIER_ID")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.CarrierName)
                    .IsRequired()
                    .HasColumnName("CARRIER_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DateTerminated)
                    .HasColumnName("DATE_TERMINATED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DisplayName)
                    .IsRequired()
                    .HasColumnName("DISPLAY_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.EmailGateway)
                    .IsRequired()
                    .HasColumnName("EMAIL_GATEWAY")
                    .HasColumnType("varchar(300)");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");
            });

            modelBuilder.Entity<OptPlusDirectDeposit>(entity =>
            {
                entity.HasKey(e => e.OptplusDirectDepositKey)
                    .HasName("PK_OptPlusDirectDeposit");

                entity.HasIndex(e => e.CustomerKey)
                    .HasName("IX_OptPlusDirectDeposit_CUSTOMER_KEY");

                entity.HasIndex(e => e.OptplusMerchantKey)
                    .HasName("IX_OptPlusDirectDeposit_OPTPLUS_MERCHANT_KEY");

                entity.Property(e => e.OptplusDirectDepositKey).HasColumnName("OPTPLUS_DIRECT_DEPOSIT_KEY");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DepositAmt)
                    .HasColumnName("DEPOSIT_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.IsEligibleDeposit).HasColumnName("IS_ELIGIBLE_DEPOSIT");

                entity.Property(e => e.OptplusMerchantKey).HasColumnName("OPTPLUS_MERCHANT_KEY");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.OptPlusDirectDeposit)
                    .HasForeignKey(d => d.CustomerKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_OptPlusDirectDeposit_Customer");

                entity.HasOne(d => d.OptplusMerchantKeyNavigation)
                    .WithMany(p => p.OptPlusDirectDeposit)
                    .HasForeignKey(d => d.OptplusMerchantKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_OptPlusDirectDeposit_OptPlusMerchant");
            });

            modelBuilder.Entity<OptPlusEdit>(entity =>
            {
                entity.HasKey(e => e.OptplusEditKey)
                    .HasName("PK_OptPlusEdit");

                entity.Property(e => e.OptplusEditKey).HasColumnName("OPTPLUS_EDIT_KEY");

                entity.Property(e => e.CreditcardKey).HasColumnName("CREDITCARD_KEY");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.FieldName)
                    .IsRequired()
                    .HasColumnName("FIELD_NAME")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.NewValue)
                    .IsRequired()
                    .HasColumnName("NEW_VALUE")
                    .HasColumnType("varchar(150)");

                entity.Property(e => e.OldValue)
                    .IsRequired()
                    .HasColumnName("OLD_VALUE")
                    .HasColumnType("varchar(150)");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.OptPlusEdit)
                    .HasForeignKey(d => d.CustomerKey)
                    .HasConstraintName("FK_OptplusEdit_Customer");
            });

            modelBuilder.Entity<OptPlusEmail>(entity =>
            {
                entity.HasKey(e => e.OptplusEmailKey)
                    .HasName("PK_OptPlusEmail");

                entity.Property(e => e.OptplusEmailKey).HasColumnName("OPTPLUS_EMAIL_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EmailAddress)
                    .IsRequired()
                    .HasColumnName("EMAIL_ADDRESS")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");
            });

            modelBuilder.Entity<OptPlusEmailLocation>(entity =>
            {
                entity.HasKey(e => e.OptplusEmailLocationKey)
                    .HasName("PK_OptPlusEmailLoc");

                entity.Property(e => e.OptplusEmailLocationKey).HasColumnName("OPTPLUS_EMAIL_LOCATION_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.OptplusEmailKey).HasColumnName("OPTPLUS_EMAIL_KEY");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.OptplusEmailKeyNavigation)
                    .WithMany(p => p.OptPlusEmailLocation)
                    .HasForeignKey(d => d.OptplusEmailKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_OptPlusEmailLoc_Email");
            });

            modelBuilder.Entity<OptPlusEmployment>(entity =>
            {
                entity.HasKey(e => e.OptplusEmploymentKey)
                    .HasName("PK_OptPlusEmployment");

                entity.HasIndex(e => e.CustomerKey)
                    .HasName("IX_OptPlusEmployment_CUSTOMERKEY");

                entity.Property(e => e.OptplusEmploymentKey).HasColumnName("OPTPLUS_EMPLOYMENT_KEY");

                entity.Property(e => e.AddrNum)
                    .IsRequired()
                    .HasColumnName("ADDR_NUM")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.AddrPostDir)
                    .IsRequired()
                    .HasColumnName("ADDR_POST_DIR")
                    .HasColumnType("varchar(2)");

                entity.Property(e => e.AddrPreDir)
                    .IsRequired()
                    .HasColumnName("ADDR_PRE_DIR")
                    .HasColumnType("varchar(2)");

                entity.Property(e => e.AddrStreet)
                    .IsRequired()
                    .HasColumnName("ADDR_STREET")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.AddrSuffix)
                    .IsRequired()
                    .HasColumnName("ADDR_SUFFIX")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.AddrSuite)
                    .IsRequired()
                    .HasColumnName("ADDR_SUITE")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.AddrSuiteNum)
                    .IsRequired()
                    .HasColumnName("ADDR_SUITE_NUM")
                    .HasColumnType("varchar(15)");

                entity.Property(e => e.AddressCsz)
                    .HasColumnName("ADDRESS_CSZ")
                    .HasColumnType("varchar(100)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_CSZ]([ADDRESS_FORMAT],[CITY],[STATE],[ZIPCODE])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressFormat)
                    .IsRequired()
                    .HasColumnName("ADDRESS_FORMAT")
                    .HasColumnType("char(3)");

                entity.Property(e => e.AddressLine)
                    .HasColumnName("ADDRESS_LINE")
                    .HasColumnType("varchar(100)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE]([ADDRESS_FORMAT],'',[ADDR_NUM],[ADDR_PRE_DIR],[ADDR_STREET],[ADDR_SUFFIX],[ADDR_POST_DIR],[ADDR_SUITE],[ADDR_SUITE_NUM],[FLAT_NUM],[BUILDING_NAME],[BUILDING_NUM])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressLine1)
                    .HasColumnName("ADDRESS_LINE_1")
                    .HasColumnType("varchar(100)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE_1]([ADDRESS_FORMAT],'',[ADDR_NUM],[ADDR_PRE_DIR],[ADDR_STREET],[ADDR_SUFFIX],[ADDR_POST_DIR],[FLAT_NUM],[BUILDING_NAME],[ADDR_SUITE],[ADDR_SUITE_NUM])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressLine2)
                    .HasColumnName("ADDRESS_LINE_2")
                    .HasColumnType("varchar(150)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE_2]([ADDRESS_FORMAT],[ADDR_SUITE],[ADDR_SUITE_NUM],[CITY],[STATE],[ZIPCODE],[BUILDING_NUM],[ADDR_STREET],'',[ADDR_NUM],[ADDR_PRE_DIR],[ADDR_SUFFIX],[ADDR_POST_DIR])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AddressLine3)
                    .HasColumnName("ADDRESS_LINE_3")
                    .HasColumnType("varchar(150)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE_3]([ADDRESS_FORMAT],[ADDR_SUITE],[ADDR_SUITE_NUM],[CITY],[STATE],[ZIPCODE])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.BuildingName)
                    .IsRequired()
                    .HasColumnName("BUILDING_NAME")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.BuildingNum)
                    .IsRequired()
                    .HasColumnName("BUILDING_NUM")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasColumnName("CITY")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasColumnName("COUNTRY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.County)
                    .IsRequired()
                    .HasColumnName("COUNTY")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EmployerName)
                    .IsRequired()
                    .HasColumnName("EMPLOYER_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.FlatNum)
                    .IsRequired()
                    .HasColumnName("FLAT_NUM")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.HrContact)
                    .IsRequired()
                    .HasColumnName("HR_CONTACT")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.HrFax)
                    .IsRequired()
                    .HasColumnName("HR_FAX")
                    .HasColumnType("varchar(13)");

                entity.Property(e => e.HrPhone)
                    .IsRequired()
                    .HasColumnName("HR_PHONE")
                    .HasColumnType("varchar(13)");

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasColumnName("STATE")
                    .HasColumnType("char(2)");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.Website)
                    .IsRequired()
                    .HasColumnName("WEBSITE")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.Zipcode)
                    .IsRequired()
                    .HasColumnName("ZIPCODE")
                    .HasColumnType("varchar(10)");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.OptPlusEmployment)
                    .HasForeignKey(d => d.CustomerKey)
                    .HasConstraintName("FK_OptPlusEmployment_Customer");
            });

            modelBuilder.Entity<OptPlusExportInitGl>(entity =>
            {
                entity.HasKey(e => e.OptPlusExportInitGlKey)
                    .HasName("PK_OptPlusExportInitGL");

                entity.ToTable("OptPlusExportInitGL");

                entity.HasIndex(e => new { e.PrepaidCardBinKey, e.OptPlusTransCode })
                    .HasName("UC_OptPlusExportInitGL_OPT_PLUS_TRANS_CODE")
                    .IsUnique();

                entity.Property(e => e.OptPlusExportInitGlKey).HasColumnName("OPT_PLUS_EXPORT_INIT_GL_KEY");

                entity.Property(e => e.D2je1cNeg).HasColumnName("D2JE1C_NEG");

                entity.Property(e => e.D2je1cPos).HasColumnName("D2JE1C_POS");

                entity.Property(e => e.D2je1dNeg).HasColumnName("D2JE1D_NEG");

                entity.Property(e => e.D2je1dPos).HasColumnName("D2JE1D_POS");

                entity.Property(e => e.D2je2cNeg).HasColumnName("D2JE2C_NEG");

                entity.Property(e => e.D2je2cPos).HasColumnName("D2JE2C_POS");

                entity.Property(e => e.D2je2dNeg).HasColumnName("D2JE2D_NEG");

                entity.Property(e => e.D2je2dPos).HasColumnName("D2JE2D_POS");

                entity.Property(e => e.OptPlusTransCode)
                    .IsRequired()
                    .HasColumnName("OPT_PLUS_TRANS_CODE")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.PrepaidCardBinKey).HasColumnName("PREPAID_CARD_BIN_KEY");

                entity.Property(e => e.TrecsTransCode)
                    .HasColumnName("TRECS_TRANS_CODE")
                    .HasColumnType("varchar(4)");

                entity.HasOne(d => d.PrepaidCardBinKeyNavigation)
                    .WithMany(p => p.OptPlusExportInitGl)
                    .HasForeignKey(d => d.PrepaidCardBinKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_OptPlusExportInitGL_PrepaidCardBin");
            });

            modelBuilder.Entity<OptPlusGlobal>(entity =>
            {
                entity.HasKey(e => e.OptplusGlobalKey)
                    .HasName("PK_OptPlusGlobal");

                entity.Property(e => e.OptplusGlobalKey).HasColumnName("OPTPLUS_GLOBAL_KEY");

                entity.Property(e => e.IsEnableDirectDepositOdp).HasColumnName("IS_ENABLE_DIRECT_DEPOSIT_ODP");

                entity.Property(e => e.IsEnableNondirectDepositOdp).HasColumnName("IS_ENABLE_NONDIRECT_DEPOSIT_ODP");

                entity.Property(e => e.MaxAmountLostCardBalance)
                    .HasColumnName("MAX_AMOUNT_LOST_CARD_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.MaxAmountPerLoad)
                    .HasColumnName("MAX_AMOUNT_PER_LOAD")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.MaxAmountPerUnload)
                    .HasColumnName("MAX_AMOUNT_PER_UNLOAD")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.MaxAtmUnloadAmountPerDay)
                    .HasColumnName("MAX_ATM_UNLOAD_AMOUNT_PER_DAY")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.MaxBalance)
                    .HasColumnName("MAX_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.MaxDaysNegCardBalance).HasColumnName("MAX_DAYS_NEG_CARD_BALANCE");

                entity.Property(e => e.MaxLoadAmountPerDay)
                    .HasColumnName("MAX_LOAD_AMOUNT_PER_DAY")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.MaxLoadsPerDay).HasColumnName("MAX_LOADS_PER_DAY");

                entity.Property(e => e.MaxOtherUnloadAmountPerDay)
                    .HasColumnName("MAX_OTHER_UNLOAD_AMOUNT_PER_DAY")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.MaxUnloadsPerDay).HasColumnName("MAX_UNLOADS_PER_DAY");

                entity.Property(e => e.MinAmountPerLoad)
                    .HasColumnName("MIN_AMOUNT_PER_LOAD")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.NumDaysAfterDdpForRi).HasColumnName("NUM_DAYS_AFTER_DDP_FOR_RI");

                entity.Property(e => e.OdMaxAmtRecv)
                    .HasColumnName("OD_MAX_AMT_RECV")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.OdMinDirectDepositAmt)
                    .HasColumnName("OD_MIN_DIRECT_DEPOSIT_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.OdNonDdpMaxAmtToRecv)
                    .HasColumnName("OD_NON_DDP_MAX_AMT_TO_RECV")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.OdNonDdpNumGoodLoans).HasColumnName("OD_NON_DDP_NUM_GOOD_LOANS");

                entity.Property(e => e.OdNumLastDirectDeposits).HasColumnName("OD_NUM_LAST_DIRECT_DEPOSITS");

                entity.Property(e => e.OdPercentOfDepositAvg)
                    .HasColumnName("OD_PERCENT_OF_DEPOSIT_AVG")
                    .HasColumnType("numeric");

                entity.Property(e => e.PrepaidCardBinKey).HasColumnName("PREPAID_CARD_BIN_KEY");

                entity.Property(e => e.ReversalCutoffTime)
                    .IsRequired()
                    .HasColumnName("REVERSAL_CUTOFF_TIME")
                    .HasColumnType("varchar(8)");

                entity.HasOne(d => d.PrepaidCardBinKeyNavigation)
                    .WithMany(p => p.OptPlusGlobal)
                    .HasForeignKey(d => d.PrepaidCardBinKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_OptPlusGlobal_PrepaidCardBin");
            });

            modelBuilder.Entity<OptPlusMerchant>(entity =>
            {
                entity.HasKey(e => e.OptplusMerchantKey)
                    .HasName("PK_OptPlusMerchant");

                entity.HasIndex(e => e.MerchantNum)
                    .HasName("IX_OptPlusMerchant_MERCHANT_NUM");

                entity.Property(e => e.OptplusMerchantKey).HasColumnName("OPTPLUS_MERCHANT_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.MerchantCategory)
                    .IsRequired()
                    .HasColumnName("MERCHANT_CATEGORY")
                    .HasColumnType("varchar(4)");

                entity.Property(e => e.MerchantCountry)
                    .IsRequired()
                    .HasColumnName("MERCHANT_COUNTRY")
                    .HasColumnType("varchar(5)");

                entity.Property(e => e.MerchantName)
                    .IsRequired()
                    .HasColumnName("MERCHANT_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.MerchantNum)
                    .IsRequired()
                    .HasColumnName("MERCHANT_NUM")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");
            });

            modelBuilder.Entity<OptPlusProduct>(entity =>
            {
                entity.HasKey(e => e.OptplusProductKey)
                    .HasName("PK_OptPlusProduct");

                entity.Property(e => e.OptplusProductKey).HasColumnName("OPTPLUS_PRODUCT_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DateTerminated)
                    .HasColumnName("DATE_TERMINATED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsActiveForChangeProduct).HasColumnName("IS_ACTIVE_FOR_CHANGE_PRODUCT");

                entity.Property(e => e.IsEmployee).HasColumnName("IS_EMPLOYEE");

                entity.Property(e => e.IsOverdraft).HasColumnName("IS_OVERDRAFT");

                entity.Property(e => e.IsWebProduct).HasColumnName("IS_WEB_PRODUCT");

                entity.Property(e => e.ProductDescription)
                    .IsRequired()
                    .HasColumnName("PRODUCT_DESCRIPTION")
                    .HasColumnType("varchar(300)");

                entity.Property(e => e.ProductId)
                    .IsRequired()
                    .HasColumnName("PRODUCT_ID")
                    .HasColumnType("varchar(6)");

                entity.Property(e => e.ProductName)
                    .IsRequired()
                    .HasColumnName("PRODUCT_NAME")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");
            });

            modelBuilder.Entity<OptPlusRdfaccountCard>(entity =>
            {
                entity.HasKey(e => e.AccountCardKey)
                    .HasName("PK_OptPlusRDFAccountCard");

                entity.ToTable("OptPlusRDFAccountCard");

                entity.HasIndex(e => e.AccountId)
                    .HasName("IX_OptPlusRDFAccountCard_ACCOUNT_ID");

                entity.HasIndex(e => e.CardNumber)
                    .HasName("IX_OptPlusRDFAccountCard_CARD_NUMBER");

                entity.HasIndex(e => e.CustomerKey)
                    .HasName("IX_OptPlusRDFAccountCard_CUSTOMER_KEY");

                entity.HasIndex(e => e.Prn)
                    .HasName("IX_OptPlusRDFAccountCard_PRN");

                entity.HasIndex(e => new { e.Status, e.AccountId, e.Prn, e.DateUpdated })
                    .HasName("IX_OptPlusRDFAccountCard_ACCOUNT_ID_PRN_DATE_UPDATED");

                entity.Property(e => e.AccountCardKey).HasColumnName("ACCOUNT_CARD_KEY");

                entity.Property(e => e.AccountId)
                    .HasColumnName("ACCOUNT_ID")
                    .HasMaxLength(30);

                entity.Property(e => e.CardId)
                    .HasColumnName("CARD_ID")
                    .HasMaxLength(30);

                entity.Property(e => e.CardNumber)
                    .HasColumnName("CARD_NUMBER")
                    .HasMaxLength(16);

                entity.Property(e => e.CardType)
                    .HasColumnName("CARD_TYPE")
                    .HasMaxLength(10);

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateUpdated)
                    .HasColumnName("DATE_UPDATED")
                    .HasColumnType("datetime");

                entity.Property(e => e.ExpDate)
                    .HasColumnName("EXP_DATE")
                    .HasMaxLength(8);

                entity.Property(e => e.GroupId)
                    .HasColumnName("GROUP_ID")
                    .HasMaxLength(15);

                entity.Property(e => e.Prn)
                    .HasColumnName("PRN")
                    .HasMaxLength(12);

                entity.Property(e => e.ProductId)
                    .HasColumnName("PRODUCT_ID")
                    .HasMaxLength(15);

                entity.Property(e => e.ProgramId)
                    .HasColumnName("PROGRAM_ID")
                    .HasMaxLength(15);

                entity.Property(e => e.Status)
                    .HasColumnName("STATUS")
                    .HasMaxLength(5);

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.OptPlusRdfaccountCard)
                    .HasForeignKey(d => d.CustomerKey)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_OptPlusRDFAccountCard_Customer");
            });

            modelBuilder.Entity<OptPlusRdfauthorizedTransactions>(entity =>
            {
                entity.HasKey(e => e.AuthorizedTransactionsKey)
                    .HasName("PK_OptPlusRDFAuthorizedTransactions");

                entity.ToTable("OptPlusRDFAuthorizedTransactions");

                entity.Property(e => e.AuthorizedTransactionsKey).HasColumnName("AUTHORIZED_TRANSACTIONS_KEY");

                entity.Property(e => e.AddressVerificationResponse)
                    .HasColumnName("ADDRESS_VERIFICATION_RESPONSE")
                    .HasColumnType("varchar(1)");

                entity.Property(e => e.AuthorizationAmount)
                    .HasColumnName("AUTHORIZATION_AMOUNT")
                    .HasColumnType("varchar(13)");

                entity.Property(e => e.AuthorizationAmountSign)
                    .HasColumnName("AUTHORIZATION_AMOUNT_SIGN")
                    .HasColumnType("varchar(1)");

                entity.Property(e => e.AuthorizationCode)
                    .HasColumnName("AUTHORIZATION_CODE")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.AuthorizationResponse)
                    .HasColumnName("AUTHORIZATION_RESPONSE")
                    .HasColumnType("varchar(2)");

                entity.Property(e => e.CardId)
                    .HasColumnName("CARD_ID")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateUpdated)
                    .HasColumnName("DATE_UPDATED")
                    .HasColumnType("datetime");

                entity.Property(e => e.GalileoAccountId)
                    .HasColumnName("GALILEO_ACCOUNT_ID")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.MerchantCategoryCode)
                    .HasColumnName("MERCHANT_CATEGORY_CODE")
                    .HasColumnType("varchar(4)");

                entity.Property(e => e.MerchantCountryCode)
                    .HasColumnName("MERCHANT_COUNTRY_CODE")
                    .HasColumnType("varchar(5)");

                entity.Property(e => e.MerchantName)
                    .HasColumnName("MERCHANT_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.MerchantNumber)
                    .HasColumnName("MERCHANT_NUMBER")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.NetworkCode)
                    .HasColumnName("NETWORK_CODE")
                    .HasColumnType("varchar(1)");

                entity.Property(e => e.TransactionCode)
                    .HasColumnName("TRANSACTION_CODE")
                    .HasColumnType("varchar(15)");

                entity.Property(e => e.TransactionCurrencyCode)
                    .HasColumnName("TRANSACTION_CURRENCY_CODE")
                    .HasColumnType("varchar(3)");

                entity.Property(e => e.TransactionDate)
                    .HasColumnName("TRANSACTION_DATE")
                    .HasColumnType("varchar(17)");

                entity.Property(e => e.UniqueProgramId)
                    .HasColumnName("UNIQUE_PROGRAM_ID")
                    .HasColumnType("varchar(15)");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.OptPlusRdfauthorizedTransactions)
                    .HasForeignKey(d => d.CustomerKey)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_OptPlusRDFAuthorizedTransactions_Customer");
            });

            modelBuilder.Entity<OptPlusRdfcustomerMaster>(entity =>
            {
                entity.HasKey(e => e.CustomerMasterKey)
                    .HasName("PK_OptPlusRDFCustomerMaster");

                entity.ToTable("OptPlusRDFCustomerMaster");

                entity.HasIndex(e => e.AccountId)
                    .HasName("IX_OptPlusRDFCustomerMaster_ACCOUNT_ID");

                entity.HasIndex(e => e.CustomerKey)
                    .HasName("IX_OptPlusRDFCustomerMaster_CUSTOMER_KEY");

                entity.HasIndex(e => new { e.CustomerKey, e.CustomerMasterKey })
                    .HasName("IX_OptPlusRDFCustomerMaster_CUSTOMER_MASTER_KEY");

                entity.Property(e => e.CustomerMasterKey).HasColumnName("CUSTOMER_MASTER_KEY");

                entity.Property(e => e.AccountId)
                    .HasColumnName("ACCOUNT_ID")
                    .HasMaxLength(30);

                entity.Property(e => e.AccountType)
                    .HasColumnName("ACCOUNT_TYPE")
                    .HasMaxLength(5);

                entity.Property(e => e.AddressLine1)
                    .HasColumnName("ADDRESS_LINE1")
                    .HasMaxLength(40);

                entity.Property(e => e.AddressLine2)
                    .HasColumnName("ADDRESS_LINE2")
                    .HasMaxLength(40);

                entity.Property(e => e.AgentuserId)
                    .HasColumnName("AGENTUSER_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.AvailBalAmt)
                    .HasColumnName("AVAIL_BAL_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.AvailBalSign)
                    .HasColumnName("AVAIL_BAL_SIGN")
                    .HasColumnType("char(1)");

                entity.Property(e => e.BillCycleDay).HasColumnName("BILL_CYCLE_DAY");

                entity.Property(e => e.City)
                    .HasColumnName("CITY")
                    .HasMaxLength(20);

                entity.Property(e => e.CurrBalAmt)
                    .HasColumnName("CURR_BAL_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CurrBalSign)
                    .HasColumnName("CURR_BAL_SIGN")
                    .HasColumnType("char(1)");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasMaxLength(8);

                entity.Property(e => e.DateUpdated)
                    .HasColumnName("DATE_UPDATED")
                    .HasColumnType("datetime");

                entity.Property(e => e.Dob)
                    .HasColumnName("DOB")
                    .HasMaxLength(8);

                entity.Property(e => e.ExtAcctNum)
                    .HasColumnName("EXT_ACCT_NUM")
                    .HasMaxLength(30);

                entity.Property(e => e.FirstName)
                    .HasColumnName("FIRST_NAME")
                    .HasMaxLength(20);

                entity.Property(e => e.HomePhone)
                    .HasColumnName("HOME_PHONE")
                    .HasMaxLength(10);

                entity.Property(e => e.IsReloadable).HasColumnName("IS_RELOADABLE");

                entity.Property(e => e.IssueDate)
                    .HasColumnName("ISSUE_DATE")
                    .HasMaxLength(8);

                entity.Property(e => e.LastName)
                    .HasColumnName("LAST_NAME")
                    .HasMaxLength(20);

                entity.Property(e => e.LastTransDate)
                    .HasColumnName("LAST_TRANS_DATE")
                    .HasMaxLength(8);

                entity.Property(e => e.LocationId)
                    .HasColumnName("LOCATION_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.NegBalDate)
                    .HasColumnName("NEG_BAL_DATE")
                    .HasMaxLength(8);

                entity.Property(e => e.NegBalFeeAmt)
                    .HasColumnName("NEG_BAL_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PrimaryId)
                    .HasColumnName("PRIMARY_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.PrimaryIdtype)
                    .HasColumnName("PRIMARY_IDTYPE")
                    .HasMaxLength(5);

                entity.Property(e => e.ProgramId)
                    .HasColumnName("PROGRAM_ID")
                    .HasMaxLength(15);

                entity.Property(e => e.SecondaryId)
                    .HasColumnName("SECONDARY_ID")
                    .HasMaxLength(50);

                entity.Property(e => e.SecondaryIdtype)
                    .HasColumnName("SECONDARY_IDTYPE")
                    .HasMaxLength(5);

                entity.Property(e => e.State)
                    .HasColumnName("STATE")
                    .HasMaxLength(2);

                entity.Property(e => e.Status)
                    .HasColumnName("STATUS")
                    .HasMaxLength(5);

                entity.Property(e => e.UserData1)
                    .HasColumnName("USER_DATA1")
                    .HasMaxLength(50);

                entity.Property(e => e.UserData2)
                    .HasColumnName("USER_DATA2")
                    .HasMaxLength(50);

                entity.Property(e => e.WorkPhone)
                    .HasColumnName("WORK_PHONE")
                    .HasMaxLength(10);

                entity.Property(e => e.Zipcode)
                    .HasColumnName("ZIPCODE")
                    .HasMaxLength(9);

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.OptPlusRdfcustomerMaster)
                    .HasForeignKey(d => d.CustomerKey)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_OptPlusRDFCustomerMaster_Customer");
            });

            modelBuilder.Entity<OptPlusRdflookUp>(entity =>
            {
                entity.HasKey(e => e.LookupKey)
                    .HasName("PK_OptPlusRDFLookUp");

                entity.ToTable("OptPlusRDFLookUp");

                entity.Property(e => e.LookupKey).HasColumnName("LOOKUP_KEY");

                entity.Property(e => e.Code)
                    .HasColumnName("CODE")
                    .HasMaxLength(10);

                entity.Property(e => e.DateUpdated)
                    .HasColumnName("DATE_UPDATED")
                    .HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasColumnName("DESCRIPTION")
                    .HasMaxLength(50);

                entity.Property(e => e.FieldName)
                    .HasColumnName("FIELD_NAME")
                    .HasMaxLength(30);

                entity.Property(e => e.RdfCode)
                    .HasColumnName("RDF_CODE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.RdfFile)
                    .HasColumnName("RDF_FILE")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<OptPlusRdfodtransition>(entity =>
            {
                entity.HasKey(e => e.OdTransitionKey)
                    .HasName("PK_OptPlusRDFODTransition");

                entity.ToTable("OptPlusRDFODTransition");

                entity.HasIndex(e => e.CustomerKey)
                    .HasName("IX_OptPlusRDFODTransition_CUSTOMER_KEY");

                entity.HasIndex(e => e.DateUpdated)
                    .HasName("IX_OptPlusRDFODTransition_DATE_UPDATED");

                entity.HasIndex(e => e.Prn)
                    .HasName("IX_OptPlusRDFODTransition_PRN");

                entity.Property(e => e.OdTransitionKey).HasColumnName("OD_TRANSITION_KEY");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateUpdated)
                    .HasColumnName("DATE_UPDATED")
                    .HasColumnType("datetime");

                entity.Property(e => e.EntryDate)
                    .HasColumnName("ENTRY_DATE")
                    .HasMaxLength(8);

                entity.Property(e => e.EntryTime)
                    .HasColumnName("ENTRY_TIME")
                    .HasMaxLength(6);

                entity.Property(e => e.Prn)
                    .HasColumnName("PRN")
                    .HasMaxLength(16);

                entity.Property(e => e.TransCode).HasColumnName("TRANS_CODE");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.OptPlusRdfodtransition)
                    .HasForeignKey(d => d.CustomerKey)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_OptPlusRDFODTransition_Customer");
            });

            modelBuilder.Entity<OptPlusRdfpostedTrans>(entity =>
            {
                entity.HasKey(e => e.PostedTransKey)
                    .HasName("PK_OptPlusRDFPostedTrans");

                entity.ToTable("OptPlusRDFPostedTrans");

                entity.HasIndex(e => e.AccountId)
                    .HasName("IX_OptPlusRDFPostedTrans_ACCOUNT_ID");

                entity.HasIndex(e => e.CustomerKey)
                    .HasName("IX_OptPlusRDFPostedTrans_CUSTOMER_KEY");

                entity.HasIndex(e => e.MerchantNum)
                    .HasName("IX_OptPlusRDFPostedTrans_MERCHANT_NUM");

                entity.HasIndex(e => e.OptplusMerchantKey)
                    .HasName("IX_OptPlusRDFPostedTrans_OPTPLUS_MERCHANT_KEY");

                entity.Property(e => e.PostedTransKey).HasColumnName("POSTED_TRANS_KEY");

                entity.Property(e => e.AccountId)
                    .HasColumnName("ACCOUNT_ID")
                    .HasMaxLength(30);

                entity.Property(e => e.AuthCode)
                    .HasColumnName("AUTH_CODE")
                    .HasMaxLength(10);

                entity.Property(e => e.CardId)
                    .HasColumnName("CARD_ID")
                    .HasMaxLength(30);

                entity.Property(e => e.CurrencyCode)
                    .HasColumnName("CURRENCY_CODE")
                    .HasMaxLength(3);

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateUpdated)
                    .HasColumnName("DATE_UPDATED")
                    .HasColumnType("datetime");

                entity.Property(e => e.ExtTransId)
                    .HasColumnName("EXT_TRANS_ID")
                    .HasMaxLength(20);

                entity.Property(e => e.InterFeeAmt)
                    .HasColumnName("INTER_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.MerchantCategory)
                    .HasColumnName("MERCHANT_CATEGORY")
                    .HasMaxLength(4);

                entity.Property(e => e.MerchantCountry)
                    .HasColumnName("MERCHANT_COUNTRY")
                    .HasMaxLength(5);

                entity.Property(e => e.MerchantName)
                    .HasColumnName("MERCHANT_NAME")
                    .HasMaxLength(50);

                entity.Property(e => e.MerchantNum)
                    .HasColumnName("MERCHANT_NUM")
                    .HasMaxLength(30);

                entity.Property(e => e.NetworkCode)
                    .HasColumnName("NETWORK_CODE")
                    .HasMaxLength(1);

                entity.Property(e => e.OptplusMerchantKey).HasColumnName("OPTPLUS_MERCHANT_KEY");

                entity.Property(e => e.PostDate)
                    .HasColumnName("POST_DATE")
                    .HasMaxLength(8);

                entity.Property(e => e.ProgramId)
                    .HasColumnName("PROGRAM_ID")
                    .HasMaxLength(15);

                entity.Property(e => e.TransAmt)
                    .HasColumnName("TRANS_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TransCode)
                    .HasColumnName("TRANS_CODE")
                    .HasMaxLength(10);

                entity.Property(e => e.TransDate)
                    .HasColumnName("TRANS_DATE")
                    .HasMaxLength(17);

                entity.Property(e => e.TransSign)
                    .HasColumnName("TRANS_SIGN")
                    .HasColumnType("char(1)");

                entity.Property(e => e.UserData1)
                    .HasColumnName("USER_DATA1")
                    .HasMaxLength(20);

                entity.Property(e => e.UserData2)
                    .HasColumnName("USER_DATA2")
                    .HasMaxLength(20);

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.OptPlusRdfpostedTrans)
                    .HasForeignKey(d => d.CustomerKey)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_OptPlusRDFPostedTrans_Customer");

                entity.HasOne(d => d.OptplusMerchantKeyNavigation)
                    .WithMany(p => p.OptPlusRdfpostedTrans)
                    .HasForeignKey(d => d.OptplusMerchantKey)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_OptPlusRDFPostedTrans_OptPlusMerchant");
            });

            modelBuilder.Entity<OverShort>(entity =>
            {
                entity.HasKey(e => e.OsKey)
                    .HasName("PK_OverShort");

                entity.HasIndex(e => e.DrawerzKey)
                    .HasName("IX_OverShort_DRAWERZ_KEY");

                entity.HasIndex(e => new { e.TransDetailKey, e.DrawerzKey, e.VaultCountKey, e.ServiceDetailKey })
                    .HasName("IX_OverShort_TRANS_DETAIL_KEY_1");

                entity.Property(e => e.OsKey).HasColumnName("OS_KEY");

                entity.Property(e => e.AmtOver)
                    .HasColumnName("AMT_OVER")
                    .HasColumnType("money")
                    .HasComputedColumnSql("case when [ENTERED_AMT]>[CALC_AMT] then [ENTERED_AMT]-[CALC_AMT] else (0) end")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.AmtShort)
                    .HasColumnName("AMT_SHORT")
                    .HasColumnType("money")
                    .HasComputedColumnSql("case when [CALC_AMT]>[ENTERED_AMT] then [CALC_AMT]-[ENTERED_AMT] else (0) end")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.CalcAmt)
                    .HasColumnName("CALC_AMT")
                    .HasColumnType("money");

                entity.Property(e => e.CalcQty).HasColumnName("CALC_QTY");

                entity.Property(e => e.CurrencyKey).HasColumnName("CURRENCY_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DrawerzKey).HasColumnName("DRAWERZ_KEY");

                entity.Property(e => e.EnteredAmt)
                    .HasColumnName("ENTERED_AMT")
                    .HasColumnType("money");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.EnteredQty).HasColumnName("ENTERED_QTY");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.QtyOver)
                    .HasColumnName("QTY_OVER")
                    .HasComputedColumnSql("case when [ENTERED_QTY]>[CALC_QTY] then [ENTERED_QTY]-[CALC_QTY] else (0) end")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.QtyShort)
                    .HasColumnName("QTY_SHORT")
                    .HasComputedColumnSql("case when [CALC_QTY]>[ENTERED_QTY] then [CALC_QTY]-[ENTERED_QTY] else (0) end")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.ServiceDetailKey).HasColumnName("SERVICE_DETAIL_KEY");

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");

                entity.Property(e => e.VaultCountKey).HasColumnName("VAULT_COUNT_KEY");

                entity.HasOne(d => d.DrawerzKeyNavigation)
                    .WithMany(p => p.OverShort)
                    .HasForeignKey(d => d.DrawerzKey)
                    .HasConstraintName("FK_OverShort_DrawerZ");

                entity.HasOne(d => d.ServiceDetailKeyNavigation)
                    .WithMany(p => p.OverShort)
                    .HasForeignKey(d => d.ServiceDetailKey)
                    .HasConstraintName("FK_OverShort_ServiceDetail");

                entity.HasOne(d => d.TransDetailKeyNavigation)
                    .WithMany(p => p.OverShort)
                    .HasForeignKey(d => d.TransDetailKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_OverShort_TransDetail");

                entity.HasOne(d => d.VaultCountKeyNavigation)
                    .WithMany(p => p.OverShort)
                    .HasForeignKey(d => d.VaultCountKey)
                    .HasConstraintName("FK_OverShort_VaultCount");
            });

            modelBuilder.Entity<ParseCash>(entity =>
            {
                entity.HasKey(e => e.ParseCashKey)
                    .HasName("PK_ParseCash");

                entity.Property(e => e.ParseCashKey).HasColumnName("PARSE_CASH_KEY");

                entity.Property(e => e.Pc01)
                    .HasColumnName("PC_01")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Pc05)
                    .HasColumnName("PC_05")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Pc10)
                    .HasColumnName("PC_10")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Pc100)
                    .HasColumnName("PC_100")
                    .HasColumnType("money");

                entity.Property(e => e.Pc20)
                    .HasColumnName("PC_20")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Pc50)
                    .HasColumnName("PC_50")
                    .HasColumnType("money");

                entity.Property(e => e.PcLoose01)
                    .HasColumnName("PC_LOOSE_01")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PcLoose02)
                    .HasColumnName("PC_LOOSE_02")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PcLoose20p)
                    .HasColumnName("PC_LOOSE_20P")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PcLoose2p)
                    .HasColumnName("PC_LOOSE_2P")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PcLooseDime)
                    .HasColumnName("PC_LOOSE_DIME")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PcLooseHlf)
                    .HasColumnName("PC_LOOSE_HLF")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PcLooseNic)
                    .HasColumnName("PC_LOOSE_NIC")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PcLoosePen)
                    .HasColumnName("PC_LOOSE_PEN")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PcLooseQtr)
                    .HasColumnName("PC_LOOSE_QTR")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PcMisc)
                    .HasColumnName("PC_MISC")
                    .HasColumnType("money");

                entity.Property(e => e.PcRoll01)
                    .HasColumnName("PC_ROLL_01")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PcRoll02)
                    .HasColumnName("PC_ROLL_02")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PcRoll20p)
                    .HasColumnName("PC_ROLL_20P")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PcRoll2p)
                    .HasColumnName("PC_ROLL_2P")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PcRollDime)
                    .HasColumnName("PC_ROLL_DIME")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PcRollHlf)
                    .HasColumnName("PC_ROLL_HLF")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PcRollNic)
                    .HasColumnName("PC_ROLL_NIC")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PcRollPen)
                    .HasColumnName("PC_ROLL_PEN")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PcRollQtr)
                    .HasColumnName("PC_ROLL_QTR")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PcTotCash)
                    .HasColumnName("PC_TOT_CASH")
                    .HasColumnType("money")
                    .HasComputedColumnSql("((((((((((((((((((((((([PC_MISC]+[PC_100])+[PC_50])+[PC_20])+[PC_10])+[PC_05])+[PC_01])+[PC_ROLL_02])+[PC_LOOSE_02])+[PC_ROLL_01])+[PC_LOOSE_01])+[PC_ROLL_HLF])+[PC_LOOSE_HLF])+[PC_ROLL_QTR])+[PC_LOOSE_QTR])+[PC_ROLL_20P])+[PC_LOOSE_20P])+[PC_ROLL_DIME])+[PC_LOOSE_DIME])+[PC_ROLL_NIC])+[PC_LOOSE_NIC])+[PC_ROLL_2P])+[PC_LOOSE_2P])+[PC_ROLL_PEN])+[PC_LOOSE_PEN]")
                    .ValueGeneratedOnAddOrUpdate();
            });

            modelBuilder.Entity<PayStub>(entity =>
            {
                entity.HasKey(e => e.PaystubKey)
                    .HasName("PK_PayStub");

                entity.HasIndex(e => e.LoanApplicationKey)
                    .HasName("IX_PayStub_LOAN_APPLICATION_KEY");

                entity.HasIndex(e => e.VisitorKey)
                    .HasName("IX_PayStub_VISITOR_KEY");

                entity.Property(e => e.PaystubKey).HasColumnName("PAYSTUB_KEY");

                entity.Property(e => e.CheckAmount)
                    .HasColumnName("CHECK_AMOUNT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CheckDate)
                    .HasColumnName("CHECK_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.CheckNumber)
                    .IsRequired()
                    .HasColumnName("CHECK_NUMBER")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.FederalTax)
                    .HasColumnName("FEDERAL_TAX")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Gross)
                    .HasColumnName("GROSS")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.GrossYtd)
                    .HasColumnName("GROSS_YTD")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.ImageTransdetailKey).HasColumnName("IMAGE_TRANSDETAIL_KEY");

                entity.Property(e => e.LoanApplicationKey).HasColumnName("LOAN_APPLICATION_KEY");

                entity.Property(e => e.MedicareTax)
                    .HasColumnName("MEDICARE_TAX")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.OvertimeHours)
                    .HasColumnName("OVERTIME_HOURS")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.OvertimeRate)
                    .HasColumnName("OVERTIME_RATE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PayCycle)
                    .IsRequired()
                    .HasColumnName("PAY_CYCLE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.PayPeriodEnding)
                    .HasColumnName("PAY_PERIOD_ENDING")
                    .HasColumnType("date");

                entity.Property(e => e.PayType)
                    .IsRequired()
                    .HasColumnName("PAY_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.RegularHours)
                    .HasColumnName("REGULAR_HOURS")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.RegularRate)
                    .HasColumnName("REGULAR_RATE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.SocialSecurityTax)
                    .HasColumnName("SOCIAL_SECURITY_TAX")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.StateTax)
                    .HasColumnName("STATE_TAX")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Taxable)
                    .HasColumnName("TAXABLE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.VisitorKey).HasColumnName("VISITOR_KEY");

                entity.HasOne(d => d.ImageTransdetailKeyNavigation)
                    .WithMany(p => p.PayStub)
                    .HasForeignKey(d => d.ImageTransdetailKey)
                    .HasConstraintName("FK_PayStub_Transdetail");

                entity.HasOne(d => d.LoanApplicationKeyNavigation)
                    .WithMany(p => p.PayStub)
                    .HasForeignKey(d => d.LoanApplicationKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_PayStub_LOAN_APPLICATION_KEY");

                entity.HasOne(d => d.VisitorKeyNavigation)
                    .WithMany(p => p.PayStub)
                    .HasForeignKey(d => d.VisitorKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_PayStub_VISITOR_KEY");
            });

            modelBuilder.Entity<PaydayLoan>(entity =>
            {
                entity.HasKey(e => e.PaydayLoanKey)
                    .HasName("PK_PaydayLoan");

                entity.HasIndex(e => new { e.LoanKey, e.DepositMethod })
                    .HasName("IX_PaydayLoan_LOAN_KEY");

                entity.Property(e => e.PaydayLoanKey).HasColumnName("PAYDAY_LOAN_KEY");

                entity.Property(e => e.AgreementNumber).HasColumnName("AGREEMENT_NUMBER");

                entity.Property(e => e.CheckNo)
                    .IsRequired()
                    .HasColumnName("CHECK_NO")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.DepositMethod)
                    .IsRequired()
                    .HasColumnName("DEPOSIT_METHOD")
                    .HasColumnType("char(1)");

                entity.Property(e => e.DisplayCheckNo)
                    .IsRequired()
                    .HasColumnName("DISPLAY_CHECK_NO")
                    .HasColumnType("varchar(10)")
                    .HasComputedColumnSql("case [CHECK_NO] when 'D' then 'DEBIT' else [CHECK_NO] end")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.DuedateChangeKey).HasColumnName("DUEDATE_CHANGE_KEY");

                entity.Property(e => e.IsExpress).HasColumnName("IS_EXPRESS");

                entity.Property(e => e.IsPrepay).HasColumnName("IS_PREPAY");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.Split1stFee)
                    .HasColumnName("SPLIT_1ST_FEE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Split2ndFee)
                    .HasColumnName("SPLIT_2ND_FEE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Split2ndRatePct)
                    .HasColumnName("SPLIT_2ND_RATE_PCT")
                    .HasColumnType("numeric");

                entity.Property(e => e.SplitAmount)
                    .HasColumnName("SPLIT_AMOUNT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.SplitPrvOpenBal)
                    .HasColumnName("SPLIT_PRV_OPEN_BAL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.StartupCheck).HasColumnName("STARTUP_CHECK");

                entity.HasOne(d => d.LoanKeyNavigation)
                    .WithMany(p => p.PaydayLoan)
                    .HasForeignKey(d => d.LoanKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_PaydayLoan_Loan");
            });

            modelBuilder.Entity<PaydayLoanApproval>(entity =>
            {
                entity.HasKey(e => e.PaydayLoanApprovalKey)
                    .HasName("PK_PaydayLoanApproval");

                entity.HasIndex(e => e.LoanKey)
                    .HasName("IX_PaydayLoanApproval_LOAN_KEY");

                entity.Property(e => e.PaydayLoanApprovalKey).HasColumnName("PAYDAY_LOAN_APPROVAL_KEY");

                entity.Property(e => e.ApprovalAmt)
                    .HasColumnName("APPROVAL_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.ApprovalBaseAmt)
                    .HasColumnName("APPROVAL_BASE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.ApprovalBaseIncomeAmt)
                    .HasColumnName("APPROVAL_BASE_INCOME_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.ApprovalCcardAmt)
                    .HasColumnName("APPROVAL_CCARD_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.ApprovalDirDepAmt)
                    .HasColumnName("APPROVAL_DIR_DEP_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.ApprovalEnabled).HasColumnName("APPROVAL_ENABLED");

                entity.Property(e => e.ApprovalNetOrGross)
                    .IsRequired()
                    .HasColumnName("APPROVAL_NET_OR_GROSS")
                    .HasColumnType("char(1)");

                entity.Property(e => e.ApprovalPctOfIncome).HasColumnName("APPROVAL_PCT_OF_INCOME");

                entity.Property(e => e.ApprovalStateMaxAdjAmt)
                    .HasColumnName("APPROVAL_STATE_MAX_ADJ_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.ApprovalSuccessfulAmt)
                    .HasColumnName("APPROVAL_SUCCESSFUL_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.GrossIncomeAmt)
                    .HasColumnName("GROSS_INCOME_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.IncludeFeeMaxLoanAmt)
                    .HasColumnName("INCLUDE_FEE_MAX_LOAN_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.IncludeFeeMaxPrincAmt)
                    .HasColumnName("INCLUDE_FEE_MAX_PRINC_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.MgrOverrideAmt)
                    .HasColumnName("MGR_OVERRIDE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.MgrOverrideInits)
                    .IsRequired()
                    .HasColumnName("MGR_OVERRIDE_INITS")
                    .HasColumnType("char(3)");

                entity.Property(e => e.NetIncomeAmt)
                    .HasColumnName("NET_INCOME_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.OpenLoansPrincAmt)
                    .HasColumnName("OPEN_LOANS_PRINC_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PrevPrincOverrideAmt)
                    .HasColumnName("PREV_PRINC_OVERRIDE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.ScoredIncrementAmount).HasColumnName("SCORED_INCREMENT_AMOUNT");

                entity.Property(e => e.ScoredIncrementNum).HasColumnName("SCORED_INCREMENT_NUM");

                entity.Property(e => e.StateMaxAmt)
                    .HasColumnName("STATE_MAX_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.StateMaxIncomeAmt)
                    .HasColumnName("STATE_MAX_INCOME_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.StateMaxMultiLoanAmt)
                    .HasColumnName("STATE_MAX_MULTI_LOAN_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.StateMaxNetOrGross)
                    .IsRequired()
                    .HasColumnName("STATE_MAX_NET_OR_GROSS")
                    .HasColumnType("char(1)");

                entity.Property(e => e.StateMaxPctOfIncome).HasColumnName("STATE_MAX_PCT_OF_INCOME");

                entity.Property(e => e.StateMaxPerLoanAmt)
                    .HasColumnName("STATE_MAX_PER_LOAN_AMT")
                    .HasColumnType("smallmoney");

                entity.HasOne(d => d.LoanKeyNavigation)
                    .WithMany(p => p.PaydayLoanApproval)
                    .HasForeignKey(d => d.LoanKey)
                    .HasConstraintName("FK_PaydayLoanApproval_Loan");
            });

            modelBuilder.Entity<PaydayLoanQualification>(entity =>
            {
                entity.HasKey(e => e.PaydayLoanQualificationKey)
                    .HasName("PK_PaydayLoanQualification");

                entity.Property(e => e.PaydayLoanQualificationKey).HasColumnName("PAYDAY_LOAN_QUALIFICATION_KEY");

                entity.Property(e => e.BankContacted).HasColumnName("BANK_CONTACTED");

                entity.Property(e => e.BankDirectDeposit).HasColumnName("BANK_DIRECT_DEPOSIT");

                entity.Property(e => e.BankStatement).HasColumnName("BANK_STATEMENT");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.HomePhoneWorking).HasColumnName("HOME_PHONE_WORKING");

                entity.Property(e => e.IncomeDeposits).HasColumnName("INCOME_DEPOSITS");

                entity.Property(e => e.IncomePayStub).HasColumnName("INCOME_PAY_STUB");

                entity.Property(e => e.IncomeStatement).HasColumnName("INCOME_STATEMENT");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.PaydayLoanQualification)
                    .HasForeignKey(d => d.CustomerKey)
                    .HasConstraintName("FK_PaydayLoanQualification_Customer");
            });

            modelBuilder.Entity<PaymentPlan>(entity =>
            {
                entity.HasKey(e => e.PaymentPlanKey)
                    .HasName("PK__PaymentP__F194B98B64C6A598");

                entity.Property(e => e.PaymentPlanKey).HasColumnName("PAYMENT_PLAN_KEY");

                entity.Property(e => e.PpCommission)
                    .HasColumnName("PP_COMMISSION")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PpPrincipal)
                    .HasColumnName("PP_PRINCIPAL")
                    .HasColumnType("smallmoney");
            });

            modelBuilder.Entity<Payroll1>(entity =>
            {
                entity.HasKey(e => e.Payroll1Key)
                    .HasName("PK_Payroll1");

                entity.ToTable("PAYROLL1");

                entity.Property(e => e.Payroll1Key).HasColumnName("Payroll1_key");

                entity.Property(e => e.ChkType)
                    .IsRequired()
                    .HasColumnName("chk_type")
                    .HasColumnType("char(1)");

                entity.Property(e => e.Fee)
                    .HasColumnName("FEE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Price)
                    .HasColumnName("PRICE")
                    .HasColumnType("money");

                entity.Property(e => e.Rate)
                    .HasColumnName("RATE")
                    .HasColumnType("numeric");
            });

            modelBuilder.Entity<PersonTitle>(entity =>
            {
                entity.HasKey(e => e.PersonTitleKey)
                    .HasName("PK_PersonTitle");

                entity.Property(e => e.PersonTitleKey).HasColumnName("PERSON_TITLE_KEY");

                entity.Property(e => e.Abbreviation)
                    .IsRequired()
                    .HasColumnName("ABBREVIATION")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DateUpdated)
                    .HasColumnName("DATE_UPDATED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(70)");

                entity.Property(e => e.IsActive).HasColumnName("IS_ACTIVE");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasColumnName("UPDATED_BY")
                    .HasColumnType("char(3)");
            });

            modelBuilder.Entity<PhoneSkillsCall>(entity =>
            {
                entity.HasKey(e => e.PhoneSkillsCallKey)
                    .HasName("PK_PhoneSkillsCall");

                entity.Property(e => e.PhoneSkillsCallKey).HasColumnName("PHONE_SKILLS_CALL_KEY");

                entity.Property(e => e.CallMonth).HasColumnName("CALL_MONTH");

                entity.Property(e => e.CallYear).HasColumnName("CALL_YEAR");

                entity.Property(e => e.Comments)
                    .HasColumnName("COMMENTS")
                    .HasColumnType("varchar(max)");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Deleted).HasColumnName("DELETED");

                entity.Property(e => e.DeletedBy)
                    .HasColumnName("DELETED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.DeletedDate)
                    .HasColumnName("DELETED_DATE")
                    .HasColumnType("varchar(12)");

                entity.Property(e => e.DistrictKey).HasColumnName("DISTRICT_KEY");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.PhoneSkillsGradeKey).HasColumnName("PHONE_SKILLS_GRADE_KEY");

                entity.Property(e => e.PhoneSkillsSequenceKey).HasColumnName("PHONE_SKILLS_SEQUENCE_KEY");

                entity.Property(e => e.ReasonKey).HasColumnName("REASON_KEY");

                entity.Property(e => e.StoreManager)
                    .IsRequired()
                    .HasColumnName("STORE_MANAGER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.StoreTeller)
                    .HasColumnName("STORE_TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.Subreason1Key).HasColumnName("SUBREASON1_KEY");

                entity.Property(e => e.Subreason2Key).HasColumnName("SUBREASON2_KEY");

                entity.Property(e => e.UnknownTeller)
                    .HasColumnName("UNKNOWN_TELLER")
                    .HasColumnType("varchar(60)");

                entity.HasOne(d => d.LocationNavigation)
                    .WithMany(p => p.PhoneSkillsCall)
                    .HasForeignKey(d => d.Location)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_PhoneSkillsCall_Company");

                entity.HasOne(d => d.PhoneSkillsGradeKeyNavigation)
                    .WithMany(p => p.PhoneSkillsCall)
                    .HasForeignKey(d => d.PhoneSkillsGradeKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_PhoneSkillsCall_PhoneSkillsGrade");

                entity.HasOne(d => d.PhoneSkillsSequenceKeyNavigation)
                    .WithMany(p => p.PhoneSkillsCall)
                    .HasForeignKey(d => d.PhoneSkillsSequenceKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_PhoneSkillsCall_PhoneSkillsSequence");
            });

            modelBuilder.Entity<PhoneSkillsGrade>(entity =>
            {
                entity.HasKey(e => e.PhoneSkillsGradeKey)
                    .HasName("PK_PhoneSkillsGrade");

                entity.Property(e => e.PhoneSkillsGradeKey).HasColumnName("PHONE_SKILLS_GRADE_KEY");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.IsActive).HasColumnName("IS_ACTIVE");
            });

            modelBuilder.Entity<PhoneSkillsGrader>(entity =>
            {
                entity.HasKey(e => e.PhoneSkillsGraderKey)
                    .HasName("PK_PhoneSkillsGrader");

                entity.Property(e => e.PhoneSkillsGraderKey).HasColumnName("PHONE_SKILLS_GRADER_KEY");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");
            });

            modelBuilder.Entity<PhoneSkillsReason>(entity =>
            {
                entity.HasKey(e => e.PhoneSkillsReasonKey)
                    .HasName("PK_PhoneSkillsReason");

                entity.Property(e => e.PhoneSkillsReasonKey).HasColumnName("PHONE_SKILLS_REASON_KEY");

                entity.Property(e => e.IsActive).HasColumnName("IS_ACTIVE");

                entity.Property(e => e.ReasonDescription)
                    .IsRequired()
                    .HasColumnName("REASON_DESCRIPTION")
                    .HasColumnType("varchar(max)");

                entity.Property(e => e.ReasonLevel).HasColumnName("REASON_LEVEL");

                entity.Property(e => e.ReasonText)
                    .IsRequired()
                    .HasColumnName("REASON_TEXT")
                    .HasColumnType("varchar(50)");
            });

            modelBuilder.Entity<PhoneSkillsSequence>(entity =>
            {
                entity.HasKey(e => e.PhoneSkillsSequenceKey)
                    .HasName("PK_PhoneSkillsSequence");

                entity.Property(e => e.PhoneSkillsSequenceKey).HasColumnName("PHONE_SKILLS_SEQUENCE_KEY");

                entity.Property(e => e.IsActive).HasColumnName("IS_ACTIVE");

                entity.Property(e => e.ReasonKey).HasColumnName("REASON_KEY");

                entity.Property(e => e.Subreason1Key).HasColumnName("SUBREASON1_KEY");

                entity.Property(e => e.Subreason2Key).HasColumnName("SUBREASON2_KEY");

                entity.HasOne(d => d.ReasonKeyNavigation)
                    .WithMany(p => p.PhoneSkillsSequence)
                    .HasForeignKey(d => d.ReasonKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_PhoneSkillsSequence_Reason");
            });

            modelBuilder.Entity<PrepaidCardBin>(entity =>
            {
                entity.HasKey(e => e.PrepaidCardBinKey)
                    .HasName("PK_PrepaidCardBin");

                entity.Property(e => e.PrepaidCardBinKey).HasColumnName("PREPAID_CARD_BIN_KEY");

                entity.Property(e => e.BinBankname)
                    .IsRequired()
                    .HasColumnName("BIN_BANKNAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.BinDescription)
                    .IsRequired()
                    .HasColumnName("BIN_DESCRIPTION")
                    .HasColumnType("varchar(300)");

                entity.Property(e => e.BinNumber)
                    .IsRequired()
                    .HasColumnName("BIN_NUMBER")
                    .HasColumnType("varchar(6)");

                entity.Property(e => e.CardBrand).HasColumnName("CARD_BRAND");

                entity.Property(e => e.CardType).HasColumnName("CARD_TYPE");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DateTerminated)
                    .HasColumnName("DATE_TERMINATED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IdVerifyMethod).HasColumnName("ID_VERIFY_METHOD");

                entity.Property(e => e.RoutingNo)
                    .HasColumnName("ROUTING_NO")
                    .HasColumnType("varchar(9)");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.WsConfigKey).HasColumnName("WS_CONFIG_KEY");
            });

            modelBuilder.Entity<PrepaidCardBinCompany>(entity =>
            {
                entity.HasKey(e => e.PrepaidCardBinCompanyKey)
                    .HasName("PK_PrepaidCardBinCompany");

                entity.HasIndex(e => new { e.Location, e.PrepaidCardBinKey })
                    .HasName("UX_Location_PrepaidCardBinKey")
                    .IsUnique();

                entity.Property(e => e.PrepaidCardBinCompanyKey).HasColumnName("PREPAID_CARD_BIN_COMPANY_KEY");

                entity.Property(e => e.AllowAssignCards).HasColumnName("ALLOW_ASSIGN_CARDS");

                entity.Property(e => e.AllowChangeProduct).HasColumnName("ALLOW_CHANGE_PRODUCT");

                entity.Property(e => e.AllowDirectDeposit).HasColumnName("ALLOW_DIRECT_DEPOSIT");

                entity.Property(e => e.AllowLoads).HasColumnName("ALLOW_LOADS");

                entity.Property(e => e.AllowLostStolen).HasColumnName("ALLOW_LOST_STOLEN");

                entity.Property(e => e.AllowUnloads).HasColumnName("ALLOW_UNLOADS");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.PrepaidCardBinKey).HasColumnName("PREPAID_CARD_BIN_KEY");

                entity.Property(e => e.PrepaidCardGroupKey).HasColumnName("PREPAID_CARD_GROUP_KEY");

                entity.Property(e => e.VendorProdClientid)
                    .HasColumnName("VENDOR_PROD_CLIENTID")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.VendorUatClientid)
                    .HasColumnName("VENDOR_UAT_CLIENTID")
                    .HasColumnType("varchar(30)");

                entity.HasOne(d => d.LocationNavigation)
                    .WithMany(p => p.PrepaidCardBinCompany)
                    .HasForeignKey(d => d.Location)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_PrepaidCardBinCompany_Company");

                entity.HasOne(d => d.PrepaidCardBinKeyNavigation)
                    .WithMany(p => p.PrepaidCardBinCompany)
                    .HasForeignKey(d => d.PrepaidCardBinKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_PrepaidCardBinCompany_PrepaidCardBin");

                entity.HasOne(d => d.PrepaidCardGroupKeyNavigation)
                    .WithMany(p => p.PrepaidCardBinCompany)
                    .HasForeignKey(d => d.PrepaidCardGroupKey)
                    .HasConstraintName("FK_PrepaidCardBinCompany_PrepaidCardGroup");
            });

            modelBuilder.Entity<PrepaidCardGroup>(entity =>
            {
                entity.HasKey(e => e.PrepaidCardGroupKey)
                    .HasName("PK_PrepaidCardGroup");

                entity.Property(e => e.PrepaidCardGroupKey).HasColumnName("PREPAID_CARD_GROUP_KEY");

                entity.Property(e => e.CardAmountGlAcct).HasColumnName("CARD_AMOUNT_GL_ACCT");

                entity.Property(e => e.DateActiveChanged)
                    .HasColumnName("DATE_ACTIVE_CHANGED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.GroupDescription)
                    .IsRequired()
                    .HasColumnName("GROUP_DESCRIPTION")
                    .HasColumnType("varchar(250)");

                entity.Property(e => e.GroupName)
                    .IsRequired()
                    .HasColumnName("GROUP_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.IsActive).HasColumnName("IS_ACTIVE");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.TellerActiveChanged)
                    .HasColumnName("TELLER_ACTIVE_CHANGED")
                    .HasColumnType("char(3)");
            });

            modelBuilder.Entity<PrepaidCardStopPayment>(entity =>
            {
                entity.HasKey(e => e.PrepaidCardStopPaymentKey)
                    .HasName("PK__PrepaidC__ACFA067E0347B46F");

                entity.Property(e => e.PrepaidCardStopPaymentKey).HasColumnName("PREPAID_CARD_STOP_PAYMENT_KEY");

                entity.Property(e => e.CancelledBy)
                    .HasColumnName("CANCELLED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.CancelledDate)
                    .HasColumnName("CANCELLED_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.CreditCardKey).HasColumnName("CREDIT_CARD_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EffectiveDate)
                    .HasColumnName("EFFECTIVE_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.LastUpdatedBy)
                    .HasColumnName("LAST_UPDATED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnName("LAST_UPDATED_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.OtherReasonDescribe)
                    .HasColumnName("OTHER_REASON_DESCRIBE")
                    .HasColumnType("varchar(120)");

                entity.Property(e => e.PrepaidCardStopPaymentReasonKey).HasColumnName("PREPAID_CARD_STOP_PAYMENT_REASON_KEY");

                entity.Property(e => e.ReportedToVendor).HasColumnName("REPORTED_TO_VENDOR");

                entity.Property(e => e.ReportedToVendorDate)
                    .HasColumnName("REPORTED_TO_VENDOR_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.SourceInstitution)
                    .IsRequired()
                    .HasColumnName("SOURCE_INSTITUTION")
                    .HasColumnType("varchar(22)");

                entity.Property(e => e.StopPaymentAmount)
                    .HasColumnName("STOP_PAYMENT_AMOUNT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.CreditCardKeyNavigation)
                    .WithMany(p => p.PrepaidCardStopPayment)
                    .HasForeignKey(d => d.CreditCardKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_PrepaidCardStopPayment_CreditCards");

                entity.HasOne(d => d.PrepaidCardStopPaymentReasonKeyNavigation)
                    .WithMany(p => p.PrepaidCardStopPayment)
                    .HasForeignKey(d => d.PrepaidCardStopPaymentReasonKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_PrepaidCardStopPayment_PrepaidCardStopPaymentReason");
            });

            modelBuilder.Entity<PrepaidCardStopPaymentEdit>(entity =>
            {
                entity.HasKey(e => e.PrepaidCardStopPaymentEditKey)
                    .HasName("PK__PrepaidC__C19472F7015C711C");

                entity.Property(e => e.PrepaidCardStopPaymentEditKey).HasColumnName("PREPAID_CARD_STOP_PAYMENT_EDIT_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.FieldName)
                    .IsRequired()
                    .HasColumnName("FIELD_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.NewValue)
                    .IsRequired()
                    .HasColumnName("NEW_VALUE")
                    .HasColumnType("varchar(120)");

                entity.Property(e => e.OldValue)
                    .IsRequired()
                    .HasColumnName("OLD_VALUE")
                    .HasColumnType("varchar(120)");

                entity.Property(e => e.PrepaidCardStopPaymentKey).HasColumnName("PREPAID_CARD_STOP_PAYMENT_KEY");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.PrepaidCardStopPaymentKeyNavigation)
                    .WithMany(p => p.PrepaidCardStopPaymentEdit)
                    .HasForeignKey(d => d.PrepaidCardStopPaymentKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_PrepaidCardStopPaymentEdit_PrepaidCardStopPayment");
            });

            modelBuilder.Entity<PrepaidCardStopPaymentReason>(entity =>
            {
                entity.HasKey(e => e.PrepaidCardStopPaymentReasonKey)
                    .HasName("PK__PrepaidC__F3F428F67F94EF29");

                entity.Property(e => e.PrepaidCardStopPaymentReasonKey).HasColumnName("PREPAID_CARD_STOP_PAYMENT_REASON_KEY");

                entity.Property(e => e.AllowOtherNote).HasColumnName("ALLOW_OTHER_NOTE");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.IsActive).HasColumnName("IS_ACTIVE");
            });

            modelBuilder.Entity<PrepaidCardTrans>(entity =>
            {
                entity.HasKey(e => e.PrepaidCardTransKey)
                    .HasName("PK_PrepaidCardTrans");

                entity.HasIndex(e => new { e.CustomerKey, e.TransDetailKey })
                    .HasName("IX_PrepaidCardTrans_CustomerTrans");

                entity.HasIndex(e => new { e.WsResponseKey, e.DateEntered })
                    .HasName("IX_PrepaidCardTrans_DATE_ENTERED");

                entity.HasIndex(e => new { e.CreditCardKey, e.TransDetailKey, e.WsOperationKey })
                    .HasName("IX_PrepaidCardTrans_WS_OPERATION_KEY");

                entity.Property(e => e.PrepaidCardTransKey).HasColumnName("PREPAID_CARD_TRANS_KEY");

                entity.Property(e => e.Amount)
                    .HasColumnName("AMOUNT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.ComputerName)
                    .IsRequired()
                    .HasColumnName("COMPUTER_NAME")
                    .HasColumnType("varchar(255)")
                    .HasDefaultValueSql("''");

                entity.Property(e => e.CreditCardKey).HasColumnName("CreditCard_Key");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.OperationParms)
                    .IsRequired()
                    .HasColumnName("OPERATION_PARMS")
                    .HasColumnType("varchar(4000)");

                entity.Property(e => e.OperationResults)
                    .IsRequired()
                    .HasColumnName("OPERATION_RESULTS")
                    .HasColumnType("varchar(max)");

                entity.Property(e => e.PrepaidCardTransActionKey).HasColumnName("PREPAID_CARD_TRANS_ACTION_KEY");

                entity.Property(e => e.ServerName)
                    .IsRequired()
                    .HasColumnName("SERVER_NAME")
                    .HasColumnType("varchar(50)")
                    .HasDefaultValueSql("''");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");

                entity.Property(e => e.WsOperationKey).HasColumnName("WS_OPERATION_KEY");

                entity.Property(e => e.WsResponseKey).HasColumnName("WS_RESPONSE_KEY");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.PrepaidCardTrans)
                    .HasForeignKey(d => d.CustomerKey)
                    .HasConstraintName("FK_PrepaidCardTrans_Customer");

                entity.HasOne(d => d.LocationNavigation)
                    .WithMany(p => p.PrepaidCardTrans)
                    .HasForeignKey(d => d.Location)
                    .HasConstraintName("FK_PrepaidCardTrans_Company");

                entity.HasOne(d => d.PrepaidCardTransActionKeyNavigation)
                    .WithMany(p => p.PrepaidCardTrans)
                    .HasForeignKey(d => d.PrepaidCardTransActionKey)
                    .HasConstraintName("FK_PrepaidCardTrans_PrepaidCardTransAction");

                entity.HasOne(d => d.WsOperationKeyNavigation)
                    .WithMany(p => p.PrepaidCardTrans)
                    .HasForeignKey(d => d.WsOperationKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_PrepaidCardTrans_WSOperation");

                entity.HasOne(d => d.WsResponseKeyNavigation)
                    .WithMany(p => p.PrepaidCardTrans)
                    .HasForeignKey(d => d.WsResponseKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_PrepaidCardTrans_WSResponse");
            });

            modelBuilder.Entity<PrepaidCardTransAction>(entity =>
            {
                entity.HasKey(e => e.PrepaidCardTransActionKey)
                    .HasName("PK_PrepaidCardTransAction");

                entity.Property(e => e.PrepaidCardTransActionKey).HasColumnName("PREPAID_CARD_TRANS_ACTION_KEY");

                entity.Property(e => e.ActionName)
                    .IsRequired()
                    .HasColumnName("ACTION_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.DateActiveChanged)
                    .HasColumnName("DATE_ACTIVE_CHANGED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsActive).HasColumnName("IS_ACTIVE");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.TellerActiveChanged)
                    .HasColumnName("TELLER_ACTIVE_CHANGED")
                    .HasColumnType("char(3)");
            });

            modelBuilder.Entity<PrepaidFisaccountBalance>(entity =>
            {
                entity.HasKey(e => e.AccountBalanceKey)
                    .HasName("PK_PrepaidFISAccountBalance");

                entity.ToTable("PrepaidFISAccountBalance");

                entity.HasIndex(e => e.PersonId)
                    .HasName("IX_PrepaidFISAccountBalance_PERSON_ID");

                entity.Property(e => e.AccountBalanceKey).HasColumnName("ACCOUNT_BALANCE_KEY");

                entity.Property(e => e.BankName)
                    .HasColumnName("BANK_NAME")
                    .HasColumnType("varchar(23)");

                entity.Property(e => e.BinCurrAlpha)
                    .HasColumnName("BIN_CURR_ALPHA")
                    .HasColumnType("varchar(3)");

                entity.Property(e => e.BinCurrCode)
                    .HasColumnName("BIN_CURR_CODE")
                    .HasColumnType("varchar(3)");

                entity.Property(e => e.BinNum).HasColumnName("BIN_NUM");

                entity.Property(e => e.ClientName)
                    .HasColumnName("CLIENT_NAME")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.ClosingBalance)
                    .HasColumnName("CLOSING_BALANCE")
                    .HasColumnType("decimal");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateUpdated)
                    .HasColumnName("DATE_UPDATED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IssuerClientId).HasColumnName("ISSUER_CLIENT_ID");

                entity.Property(e => e.OpeningBal)
                    .HasColumnName("OPENING_BAL")
                    .HasColumnType("decimal");

                entity.Property(e => e.OthCrAmt)
                    .HasColumnName("OTH_CR_AMT")
                    .HasColumnType("decimal");

                entity.Property(e => e.OthCrCnt).HasColumnName("OTH_CR_CNT");

                entity.Property(e => e.OthDbAmt)
                    .HasColumnName("OTH_DB_AMT")
                    .HasColumnType("decimal");

                entity.Property(e => e.OthDbCnt).HasColumnName("OTH_DB_CNT");

                entity.Property(e => e.PanProxyNum)
                    .HasColumnName("PAN_PROXY_NUM")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.PersonId).HasColumnName("PERSON_ID");

                entity.Property(e => e.PrimeAcctNum)
                    .HasColumnName("PRIME_ACCT_NUM")
                    .HasColumnType("varchar(19)");

                entity.Property(e => e.ProcessStatus).HasColumnName("PROCESS_STATUS");

                entity.Property(e => e.TotAdjAmt)
                    .HasColumnName("TOT_ADJ_AMT")
                    .HasColumnType("decimal");

                entity.Property(e => e.TotAdjCnt).HasColumnName("TOT_ADJ_CNT");

                entity.Property(e => e.TotAtmWdAmt)
                    .HasColumnName("TOT_ATM_WD_AMT")
                    .HasColumnType("decimal");

                entity.Property(e => e.TotAtmWdCnt).HasColumnName("TOT_ATM_WD_CNT");

                entity.Property(e => e.TotCrAmt)
                    .HasColumnName("TOT_CR_AMT")
                    .HasColumnType("decimal");

                entity.Property(e => e.TotCreCnt).HasColumnName("TOT_CRE_CNT");

                entity.Property(e => e.TotDbAmt)
                    .HasColumnName("TOT_DB_AMT")
                    .HasColumnType("decimal");

                entity.Property(e => e.TotDbCnt).HasColumnName("TOT_DB_CNT");

                entity.Property(e => e.TotFeeAmt)
                    .HasColumnName("TOT_FEE_AMT")
                    .HasColumnType("decimal");

                entity.Property(e => e.TotFeeCnt).HasColumnName("TOT_FEE_CNT");

                entity.Property(e => e.TotOtcAmt)
                    .HasColumnName("TOT_OTC_AMT")
                    .HasColumnType("decimal");

                entity.Property(e => e.TotOtcCnt).HasColumnName("TOT_OTC_CNT");

                entity.Property(e => e.TotPurchaseAmt)
                    .HasColumnName("TOT_PURCHASE_AMT")
                    .HasColumnType("decimal");

                entity.Property(e => e.TotPurchaseCnt).HasColumnName("TOT_PURCHASE_CNT");

                entity.Property(e => e.TotRtnAmt)
                    .HasColumnName("TOT_RTN_AMT")
                    .HasColumnType("decimal");

                entity.Property(e => e.TotRtnCnt).HasColumnName("TOT_RTN_CNT");

                entity.Property(e => e.TotTransAmt)
                    .HasColumnName("TOT_TRANS_AMT")
                    .HasColumnType("decimal");

                entity.Property(e => e.TotTransCnt).HasColumnName("TOT_TRANS_CNT");

                entity.Property(e => e.TotValLoadAmt)
                    .HasColumnName("TOT_VAL_LOAD_AMT")
                    .HasColumnType("decimal");

                entity.Property(e => e.TotValLoadCnt).HasColumnName("TOT_VAL_LOAD_CNT");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.PrepaidFisaccountBalance)
                    .HasForeignKey(d => d.CustomerKey)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_PrepaidFISAccountBalance_Customer");
            });

            modelBuilder.Entity<PrepaidFisauthTrans>(entity =>
            {
                entity.HasKey(e => e.AuthTransKey)
                    .HasName("PK_PrepaidFISAuthTrans");

                entity.ToTable("PrepaidFISAuthTrans");

                entity.Property(e => e.AuthTransKey).HasColumnName("AUTH_TRANS_KEY");

                entity.Property(e => e.AcqId)
                    .HasColumnName("ACQ_ID")
                    .HasColumnType("varchar(18)");

                entity.Property(e => e.AuthBal)
                    .HasColumnName("AUTH_BAL")
                    .HasColumnType("decimal");

                entity.Property(e => e.AuthorizeAmt)
                    .HasColumnName("AUTHORIZE_AMT")
                    .HasColumnType("decimal");

                entity.Property(e => e.AuthorizeCode)
                    .HasColumnName("AUTHORIZE_CODE")
                    .HasColumnType("varchar(6)");

                entity.Property(e => e.AvsInfo)
                    .HasColumnName("AVS_INFO")
                    .HasColumnType("varchar(80)");

                entity.Property(e => e.AvsRespCode)
                    .HasColumnName("AVS_RESP_CODE")
                    .HasColumnType("varchar(1)");

                entity.Property(e => e.BankName)
                    .HasColumnName("BANK_NAME")
                    .HasColumnType("varchar(23)");

                entity.Property(e => e.BinCurrAlpha)
                    .HasColumnName("BIN_CURR_ALPHA")
                    .HasColumnType("varchar(3)");

                entity.Property(e => e.BinCurrCode)
                    .HasColumnName("BIN_CURR_CODE")
                    .HasColumnType("varchar(3)");

                entity.Property(e => e.BinNum).HasColumnName("BIN_NUM");

                entity.Property(e => e.CanProxyNum)
                    .HasColumnName("CAN_PROXY_NUM")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.CardAcctNum)
                    .HasColumnName("CARD_ACCT_NUM")
                    .HasColumnType("varchar(19)");

                entity.Property(e => e.CardVerifyMethod)
                    .HasColumnName("CARD_VERIFY_METHOD")
                    .HasColumnType("varchar(2)");

                entity.Property(e => e.ClientUniqueId)
                    .HasColumnName("CLIENT_UNIQUE_ID")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.CvcResponse)
                    .HasColumnName("CVC_RESPONSE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.DateUpdated)
                    .HasColumnName("DATE_UPDATED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IssuerClientId).HasColumnName("ISSUER_CLIENT_ID");

                entity.Property(e => e.IssuerClientName)
                    .HasColumnName("ISSUER_CLIENT_NAME")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.MccDescription)
                    .HasColumnName("MCC_DESCRIPTION")
                    .HasColumnType("varchar(80)");

                entity.Property(e => e.MercCity)
                    .HasColumnName("MERC_CITY")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.MercCtryCode)
                    .HasColumnName("MERC_CTRY_CODE")
                    .HasColumnType("varchar(3)");

                entity.Property(e => e.MercCtryName)
                    .HasColumnName("MERC_CTRY_NAME")
                    .HasColumnType("varchar(45)");

                entity.Property(e => e.MercCurrAlpha)
                    .HasColumnName("MERC_CURR_ALPHA")
                    .HasColumnType("varchar(3)");

                entity.Property(e => e.MercCurrCode)
                    .HasColumnName("MERC_CURR_CODE")
                    .HasColumnType("varchar(3)");

                entity.Property(e => e.MercMccCode)
                    .HasColumnName("MERC_MCC_CODE")
                    .HasColumnType("varchar(80)");

                entity.Property(e => e.MercName)
                    .HasColumnName("MERC_NAME")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.MercNum)
                    .HasColumnName("MERC_NUM")
                    .HasColumnType("varchar(16)");

                entity.Property(e => e.MercProv)
                    .HasColumnName("MERC_PROV")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.MercState)
                    .HasColumnName("MERC_STATE")
                    .HasColumnType("varchar(80)");

                entity.Property(e => e.MercStreet)
                    .HasColumnName("MERC_STREET")
                    .HasColumnType("varchar(80)");

                entity.Property(e => e.MercZip)
                    .HasColumnName("MERC_ZIP")
                    .HasColumnType("varchar(9)");

                entity.Property(e => e.PanProxyNum)
                    .HasColumnName("PAN_PROXY_NUM")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.Pin).HasColumnName("PIN");

                entity.Property(e => e.PosData)
                    .HasColumnName("POS_DATA")
                    .HasColumnType("varchar(26)");

                entity.Property(e => e.PosEntryCode).HasColumnName("POS_ENTRY_CODE");

                entity.Property(e => e.PosEntryDesc)
                    .HasColumnName("POS_ENTRY_DESC")
                    .HasColumnType("varchar(80)");

                entity.Property(e => e.PrimeAcctNum)
                    .HasColumnName("PRIME_ACCT_NUM")
                    .HasColumnType("varchar(19)");

                entity.Property(e => e.ProcessStatus).HasColumnName("PROCESS_STATUS");

                entity.Property(e => e.PurseName)
                    .HasColumnName("PURSE_NAME")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.PurseNum).HasColumnName("PURSE_NUM");

                entity.Property(e => e.ReasonCode).HasColumnName("REASON_CODE");

                entity.Property(e => e.ReasonDesc)
                    .HasColumnName("REASON_DESC")
                    .HasColumnType("varchar(80)");

                entity.Property(e => e.RequestCode).HasColumnName("REQUEST_CODE");

                entity.Property(e => e.RequestDesc)
                    .HasColumnName("REQUEST_DESC")
                    .HasColumnType("varchar(80)");

                entity.Property(e => e.ResponseCode).HasColumnName("RESPONSE_CODE");

                entity.Property(e => e.ResponseDesc)
                    .HasColumnName("RESPONSE_DESC")
                    .HasColumnType("varchar(80)");

                entity.Property(e => e.RetrievalRefno)
                    .HasColumnName("RETRIEVAL_REFNO")
                    .HasColumnType("varchar(23)");

                entity.Property(e => e.Reversed).HasColumnName("REVERSED");

                entity.Property(e => e.SettleBal)
                    .HasColumnName("SETTLE_BAL")
                    .HasColumnType("decimal");

                entity.Property(e => e.SourceCode).HasColumnName("SOURCE_CODE");

                entity.Property(e => e.SourceDesc)
                    .HasColumnName("SOURCE_DESC")
                    .HasColumnType("varchar(80)");

                entity.Property(e => e.SubprogramId).HasColumnName("SUBPROGRAM_ID");

                entity.Property(e => e.SubprogramName)
                    .HasColumnName("SUBPROGRAM_NAME")
                    .HasColumnType("varchar(80)");

                entity.Property(e => e.TermNum)
                    .HasColumnName("TERM_NUM")
                    .HasColumnType("varchar(8)");

                entity.Property(e => e.ToleranceAmt)
                    .HasColumnName("TOLERANCE_AMT")
                    .HasColumnType("decimal");

                entity.Property(e => e.TransCurrAlpha)
                    .HasColumnName("TRANS_CURR_ALPHA")
                    .HasColumnType("varchar(3)");

                entity.Property(e => e.TransCurrCode).HasColumnName("TRANS_CURR_CODE");

                entity.Property(e => e.TransDatetime)
                    .HasColumnName("TRANS_DATETIME")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.TransSign).HasColumnName("TRANS_SIGN");

                entity.Property(e => e.TxnLocalAmt)
                    .HasColumnName("TXN_LOCAL_AMT")
                    .HasColumnType("decimal");

                entity.Property(e => e.TxnTypeCode).HasColumnName("TXN_TYPE_CODE");

                entity.Property(e => e.TxnTypeName)
                    .HasColumnName("TXN_TYPE_NAME")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.TxnUid)
                    .HasColumnName("TXN_UID")
                    .HasColumnType("varchar(36)");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.PrepaidFisauthTrans)
                    .HasForeignKey(d => d.CustomerKey)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_PrepaidFISAuthTrans_Customer");
            });

            modelBuilder.Entity<PrepaidFiscustomerMaster>(entity =>
            {
                entity.HasKey(e => e.CustomerMasterKey)
                    .HasName("PK_PrepaidFISCustomerMaster");

                entity.ToTable("PrepaidFISCustomerMaster");

                entity.HasIndex(e => e.CustomerKey)
                    .HasName("IX_PrepaidFISCustomerMaster_CUSTOMER_KEY");

                entity.HasIndex(e => e.PersonId)
                    .HasName("IX_PrepaidFISCustomerMaster_PERSON_ID");

                entity.HasIndex(e => new { e.BinNum, e.CardAcctNum })
                    .HasName("IX_PrepaidFISCustomerMaster_CARD_NUMBER");

                entity.Property(e => e.CustomerMasterKey).HasColumnName("CUSTOMER_MASTER_KEY");

                entity.Property(e => e.AccountCreateDate)
                    .HasColumnName("ACCOUNT_CREATE_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.ActivateDate)
                    .HasColumnName("ACTIVATE_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.AlertsEmail)
                    .HasColumnName("ALERTS_EMAIL")
                    .HasColumnType("varchar(80)");

                entity.Property(e => e.BinCurrAlpha)
                    .HasColumnName("BIN_CURR_ALPHA")
                    .HasColumnType("varchar(3)");

                entity.Property(e => e.BinCurrCode)
                    .HasColumnName("BIN_CURR_CODE")
                    .HasColumnType("varchar(3)");

                entity.Property(e => e.BinNum).HasColumnName("BIN_NUM");

                entity.Property(e => e.CanCreateDate)
                    .HasColumnName("CAN_CREATE_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.CanExpireDate)
                    .HasColumnName("CAN_EXPIRE_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.CanProxyNum)
                    .HasColumnName("CAN_PROXY_NUM")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.CanStatusEffectiveDate)
                    .HasColumnName("CAN_STATUS_EFFECTIVE_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.CardAcctNum)
                    .HasColumnName("CARD_ACCT_NUM")
                    .HasColumnType("varchar(19)");

                entity.Property(e => e.CardStatus).HasColumnName("CARD_STATUS");

                entity.Property(e => e.CardStatusDesc)
                    .HasColumnName("CARD_STATUS_DESC")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.CardholderCtryCode).HasColumnName("CARDHOLDER_CTRY_CODE");

                entity.Property(e => e.CardholderDob)
                    .HasColumnName("CARDHOLDER_DOB")
                    .HasColumnType("date");

                entity.Property(e => e.CardholderEmail)
                    .HasColumnName("CARDHOLDER_EMAIL")
                    .HasColumnType("varchar(80)");

                entity.Property(e => e.CardholderFirstname)
                    .HasColumnName("CARDHOLDER_FIRSTNAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.CardholderLastname)
                    .HasColumnName("CARDHOLDER_LASTNAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.CardholderMiddlename)
                    .HasColumnName("CARDHOLDER_MIDDLENAME")
                    .HasColumnType("char(1)");

                entity.Property(e => e.CardholderPhone)
                    .HasColumnName("CARDHOLDER_PHONE")
                    .HasColumnType("varchar(23)");

                entity.Property(e => e.CardholderPhoneExt)
                    .HasColumnName("CARDHOLDER_PHONE_EXT")
                    .HasColumnType("varchar(8)");

                entity.Property(e => e.CardholderSsn)
                    .HasColumnName("CARDHOLDER_SSN")
                    .HasColumnType("varchar(9)");

                entity.Property(e => e.CardholderSuffix)
                    .HasColumnName("CARDHOLDER_SUFFIX")
                    .HasColumnType("varchar(3)");

                entity.Property(e => e.ClientMemo)
                    .HasColumnName("CLIENT_MEMO")
                    .HasColumnType("varchar(512)");

                entity.Property(e => e.ClientName)
                    .HasColumnName("CLIENT_NAME")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.ClientUniqueId)
                    .HasColumnName("CLIENT_UNIQUE_ID")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateUpdated)
                    .HasColumnName("DATE_UPDATED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DirectAccessNumber)
                    .HasColumnName("DIRECT_ACCESS_NUMBER")
                    .HasColumnType("varchar(13)");

                entity.Property(e => e.InitValueLoad)
                    .HasColumnName("INIT_VALUE_LOAD")
                    .HasColumnType("date");

                entity.Property(e => e.IssuerClientId).HasColumnName("ISSUER_CLIENT_ID");

                entity.Property(e => e.MailAddrLine1)
                    .HasColumnName("MAIL_ADDR_LINE1")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.MailAddrLine2)
                    .HasColumnName("MAIL_ADDR_LINE2")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.MailCity)
                    .HasColumnName("MAIL_CITY")
                    .HasColumnType("varchar(35)");

                entity.Property(e => e.MailCtry)
                    .HasColumnName("MAIL_CTRY")
                    .HasColumnType("varchar(45)");

                entity.Property(e => e.MailState)
                    .HasColumnName("MAIL_STATE")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.MailZip)
                    .HasColumnName("MAIL_ZIP")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.MarketSegDesc)
                    .HasColumnName("MARKET_SEG_DESC")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.MarketSegId).HasColumnName("MARKET_SEG_ID");

                entity.Property(e => e.PackageId).HasColumnName("PACKAGE_ID");

                entity.Property(e => e.PackageName)
                    .HasColumnName("PACKAGE_NAME")
                    .HasColumnType("varchar(80)");

                entity.Property(e => e.PanProxyNum)
                    .HasColumnName("PAN_PROXY_NUM")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.PersonCreateDate)
                    .HasColumnName("PERSON_CREATE_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.PersonId).HasColumnName("PERSON_ID");

                entity.Property(e => e.PrimaryRelationship)
                    .HasColumnName("PRIMARY_RELATIONSHIP")
                    .HasColumnType("varchar(12)");

                entity.Property(e => e.PrimeAcctNum)
                    .HasColumnName("PRIME_ACCT_NUM")
                    .HasColumnType("varchar(19)");

                entity.Property(e => e.PrivacyOptOut)
                    .HasColumnName("PRIVACY_OPT_OUT")
                    .HasColumnType("varchar(3)");

                entity.Property(e => e.ProcessStatus).HasColumnName("PROCESS_STATUS");

                entity.Property(e => e.ProgramId).HasColumnName("PROGRAM_ID");

                entity.Property(e => e.ProgramName)
                    .HasColumnName("PROGRAM_NAME")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.RequestCode).HasColumnName("REQUEST_CODE");

                entity.Property(e => e.RequestCodeDesc)
                    .HasColumnName("REQUEST_CODE_DESC")
                    .HasColumnType("varchar(80)");

                entity.Property(e => e.SmsMobilePhone)
                    .HasColumnName("SMS_MOBILE_PHONE")
                    .HasColumnType("varchar(23)");

                entity.Property(e => e.SourceCode).HasColumnName("SOURCE_CODE");

                entity.Property(e => e.SourceCodeDesc)
                    .HasColumnName("SOURCE_CODE_DESC")
                    .HasColumnType("varchar(80)");

                entity.Property(e => e.SubprogramId).HasColumnName("SUBPROGRAM_ID");

                entity.Property(e => e.SubprogramName)
                    .HasColumnName("SUBPROGRAM_NAME")
                    .HasColumnType("varchar(80)");

                entity.Property(e => e.TopClientId).HasColumnName("TOP_CLIENT_ID");

                entity.Property(e => e.TopClientName)
                    .HasColumnName("TOP_CLIENT_NAME")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.WcsutcInserted)
                    .HasColumnName("WCSUTC_INSERTED")
                    .HasColumnType("smalldatetime");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.PrepaidFiscustomerMaster)
                    .HasForeignKey(d => d.CustomerKey)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_PrepaidFISCustomerMaster_Customer");
            });

            modelBuilder.Entity<PrepaidFispostedTrans>(entity =>
            {
                entity.HasKey(e => e.PostedTransKey)
                    .HasName("PK_PrepaidFISPostedTrans");

                entity.ToTable("PrepaidFISPostedTrans");

                entity.Property(e => e.PostedTransKey).HasColumnName("POSTED_TRANS_KEY");

                entity.Property(e => e.AcqId)
                    .HasColumnName("ACQ_ID")
                    .HasColumnType("varchar(18)");

                entity.Property(e => e.AcqRefNum)
                    .HasColumnName("ACQ_REF_NUM")
                    .HasColumnType("varchar(23)");

                entity.Property(e => e.ActualReqCode).HasColumnName("ACTUAL_REQ_CODE");

                entity.Property(e => e.ActualReqDesc)
                    .HasColumnName("ACTUAL_REQ_DESC")
                    .HasColumnType("varchar(80)");

                entity.Property(e => e.AddrVerifyResp)
                    .HasColumnName("ADDR_VERIFY_RESP")
                    .HasColumnType("char(1)");

                entity.Property(e => e.AdjustAmt)
                    .HasColumnName("ADJUST_AMT")
                    .HasColumnType("decimal");

                entity.Property(e => e.AuthorizeAmt)
                    .HasColumnName("AUTHORIZE_AMT")
                    .HasColumnType("decimal");

                entity.Property(e => e.AuthorizeCode)
                    .HasColumnName("AUTHORIZE_CODE")
                    .HasColumnType("varchar(6)");

                entity.Property(e => e.AuthorizeResp)
                    .HasColumnName("AUTHORIZE_RESP")
                    .HasColumnType("varchar(35)");

                entity.Property(e => e.AvsInfo)
                    .HasColumnName("AVS_INFO")
                    .HasColumnType("varchar(80)");

                entity.Property(e => e.Bankname)
                    .HasColumnName("BANKNAME")
                    .HasColumnType("varchar(23)");

                entity.Property(e => e.BinCurrAlpha)
                    .HasColumnName("BIN_CURR_ALPHA")
                    .HasColumnType("varchar(3)");

                entity.Property(e => e.BinCurrCode)
                    .HasColumnName("BIN_CURR_CODE")
                    .HasColumnType("varchar(3)");

                entity.Property(e => e.BinNum).HasColumnName("BIN_NUM");

                entity.Property(e => e.CanProxyNum)
                    .HasColumnName("CAN_PROXY_NUM")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.CardAcctNum)
                    .HasColumnName("CARD_ACCT_NUM")
                    .HasColumnType("varchar(19)");

                entity.Property(e => e.ClientRefNum)
                    .HasColumnName("CLIENT_REF_NUM")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.ClientSpecificId)
                    .HasColumnName("CLIENT_SPECIFIC_ID")
                    .HasColumnType("varchar(36)");

                entity.Property(e => e.ClientUniqueId)
                    .HasColumnName("CLIENT_UNIQUE_ID")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.Comment)
                    .HasColumnName("COMMENT")
                    .HasColumnType("varchar(512)");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateUpdated)
                    .HasColumnName("DATE_UPDATED")
                    .HasColumnType("datetime");

                entity.Property(e => e.Denomination)
                    .HasColumnName("DENOMINATION")
                    .HasColumnType("decimal");

                entity.Property(e => e.DirectAccessNum)
                    .HasColumnName("DIRECT_ACCESS_NUM")
                    .HasColumnType("varchar(13)");

                entity.Property(e => e.FudgeAmt)
                    .HasColumnName("FUDGE_AMT")
                    .HasColumnType("decimal");

                entity.Property(e => e.InitLoadDateFlag)
                    .HasColumnName("INIT_LOAD_DATE_FLAG")
                    .HasColumnType("date");

                entity.Property(e => e.IssuerClientId).HasColumnName("ISSUER_CLIENT_ID");

                entity.Property(e => e.IssuerClientName)
                    .HasColumnName("ISSUER_CLIENT_NAME")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.MatchStatusCode).HasColumnName("MATCH_STATUS_CODE");

                entity.Property(e => e.MatchStatusDesc)
                    .HasColumnName("MATCH_STATUS_DESC")
                    .HasColumnType("varchar(80)");

                entity.Property(e => e.MatchTypeCode).HasColumnName("MATCH_TYPE_CODE");

                entity.Property(e => e.MatchTypeDesc)
                    .HasColumnName("MATCH_TYPE_DESC")
                    .HasColumnType("varchar(80)");

                entity.Property(e => e.MccDesc)
                    .HasColumnName("MCC_DESC")
                    .HasColumnType("varchar(80)");

                entity.Property(e => e.MercCity)
                    .HasColumnName("MERC_CITY")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.MercCtryCode)
                    .HasColumnName("MERC_CTRY_CODE")
                    .HasColumnType("varchar(3)");

                entity.Property(e => e.MercCtryName)
                    .HasColumnName("MERC_CTRY_NAME")
                    .HasColumnType("varchar(45)");

                entity.Property(e => e.MercCurrAlpha)
                    .HasColumnName("MERC_CURR_ALPHA")
                    .HasColumnType("varchar(3)");

                entity.Property(e => e.MercCurrCode)
                    .HasColumnName("MERC_CURR_CODE")
                    .HasColumnType("varchar(3)");

                entity.Property(e => e.MercMccCode).HasColumnName("MERC_MCC_CODE");

                entity.Property(e => e.MercName)
                    .HasColumnName("MERC_NAME")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.MercNum)
                    .HasColumnName("MERC_NUM")
                    .HasColumnType("varchar(16)");

                entity.Property(e => e.MercProv)
                    .HasColumnName("MERC_PROV")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.MercState)
                    .HasColumnName("MERC_STATE")
                    .HasColumnType("varchar(2)");

                entity.Property(e => e.MercStreet)
                    .HasColumnName("MERC_STREET")
                    .HasColumnType("varchar(80)");

                entity.Property(e => e.MercZip)
                    .HasColumnName("MERC_ZIP")
                    .HasColumnType("varchar(9)");

                entity.Property(e => e.PanProxyNum)
                    .HasColumnName("PAN_PROXY_NUM")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.PayMethodId).HasColumnName("PAY_METHOD_ID");

                entity.Property(e => e.PayRefNum)
                    .HasColumnName("PAY_REF_NUM")
                    .HasColumnType("varchar(17)");

                entity.Property(e => e.Pin).HasColumnName("PIN");

                entity.Property(e => e.PosData)
                    .HasColumnName("POS_DATA")
                    .HasColumnType("varchar(26)");

                entity.Property(e => e.PosEntryCode).HasColumnName("POS_ENTRY_CODE");

                entity.Property(e => e.PosEntryDesc)
                    .HasColumnName("POS_ENTRY_DESC")
                    .HasColumnType("varchar(80)");

                entity.Property(e => e.PrimeAcctNum)
                    .HasColumnName("PRIME_ACCT_NUM")
                    .HasColumnType("varchar(19)");

                entity.Property(e => e.ProcessStatus).HasColumnName("PROCESS_STATUS");

                entity.Property(e => e.PurseNum).HasColumnName("PURSE_NUM");

                entity.Property(e => e.ReasonCode).HasColumnName("REASON_CODE");

                entity.Property(e => e.ReasonDesc)
                    .HasColumnName("REASON_DESC")
                    .HasColumnType("varchar(80)");

                entity.Property(e => e.RequestCode).HasColumnName("REQUEST_CODE");

                entity.Property(e => e.RequestDesc)
                    .HasColumnName("REQUEST_DESC")
                    .HasColumnType("varchar(80)");

                entity.Property(e => e.RespDesc)
                    .HasColumnName("RESP_DESC")
                    .HasColumnType("varchar(80)");

                entity.Property(e => e.ResponseCode).HasColumnName("RESPONSE_CODE");

                entity.Property(e => e.RetrievalRefno)
                    .HasColumnName("RETRIEVAL_REFNO")
                    .HasColumnType("varchar(23)");

                entity.Property(e => e.Reversed).HasColumnName("REVERSED");

                entity.Property(e => e.SettleAmt)
                    .HasColumnName("SETTLE_AMT")
                    .HasColumnType("decimal");

                entity.Property(e => e.SourceCode).HasColumnName("SOURCE_CODE");

                entity.Property(e => e.SourceDesc)
                    .HasColumnName("SOURCE_DESC")
                    .HasColumnType("varchar(80)");

                entity.Property(e => e.SubprogramId).HasColumnName("SUBPROGRAM_ID");

                entity.Property(e => e.SubprogramName)
                    .HasColumnName("SUBPROGRAM_NAME")
                    .HasColumnType("varchar(80)");

                entity.Property(e => e.TermNum)
                    .HasColumnName("TERM_NUM")
                    .HasColumnType("varchar(8)");

                entity.Property(e => e.TransCurrAlpha)
                    .HasColumnName("TRANS_CURR_ALPHA")
                    .HasColumnType("varchar(3)");

                entity.Property(e => e.TransCurrCode).HasColumnName("TRANS_CURR_CODE");

                entity.Property(e => e.TxnLocalAmt)
                    .HasColumnName("TXN_LOCAL_AMT")
                    .HasColumnType("decimal");

                entity.Property(e => e.TxnLocalDate)
                    .HasColumnName("TXN_LOCAL_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.TxnSign).HasColumnName("TXN_SIGN");

                entity.Property(e => e.TxnTypeCode).HasColumnName("TXN_TYPE_CODE");

                entity.Property(e => e.TxnTypeName)
                    .HasColumnName("TXN_TYPE_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.TxnUid)
                    .HasColumnName("TXN_UID")
                    .HasColumnType("varchar(36)");

                entity.Property(e => e.UserFirstName)
                    .HasColumnName("USER_FIRST_NAME")
                    .HasColumnType("varchar(15)");

                entity.Property(e => e.UserId)
                    .HasColumnName("USER_ID")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.UserLastName)
                    .HasColumnName("USER_LAST_NAME")
                    .HasColumnType("varchar(15)");

                entity.Property(e => e.WcsLocalPostDate)
                    .HasColumnName("WCS_LOCAL_POST_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.WcsutcPostDate)
                    .HasColumnName("WCSUTC_POST_DATE")
                    .HasColumnType("smalldatetime");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.PrepaidFispostedTrans)
                    .HasForeignKey(d => d.CustomerKey)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_PrepaidFISPostedTrans_Customer");
            });

            modelBuilder.Entity<PrescreenQuestion>(entity =>
            {
                entity.HasKey(e => e.PrescreenQuestionKey)
                    .HasName("pk_PrescreenQuestion");

                entity.Property(e => e.PrescreenQuestionKey).HasColumnName("PRESCREEN_QUESTION_KEY");

                entity.Property(e => e.Color).HasColumnName("COLOR");

                entity.Property(e => e.DetailText)
                    .IsRequired()
                    .HasColumnName("DETAIL_TEXT")
                    .HasColumnType("varchar(1000)");

                entity.Property(e => e.IsActive).HasColumnName("IS_ACTIVE");

                entity.Property(e => e.MainText)
                    .IsRequired()
                    .HasColumnName("MAIN_TEXT")
                    .HasColumnType("varchar(1000)");

                entity.Property(e => e.PrescreenQuestionTypeKey).HasColumnName("PRESCREEN_QUESTION_TYPE_KEY");

                entity.Property(e => e.QuestionName)
                    .HasColumnName("QUESTION_NAME")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");

                entity.Property(e => e.ValidResponse).HasColumnName("VALID_RESPONSE");

                entity.Property(e => e.ValidationMessage)
                    .IsRequired()
                    .HasColumnName("VALIDATION_MESSAGE")
                    .HasColumnType("varchar(1000)");

                entity.Property(e => e.ValidationMessageColor).HasColumnName("VALIDATION_MESSAGE_COLOR");

                entity.HasOne(d => d.PrescreenQuestionTypeKeyNavigation)
                    .WithMany(p => p.PrescreenQuestion)
                    .HasForeignKey(d => d.PrescreenQuestionTypeKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_PrescreenQuestion_PrescreenQuestionType");
            });

            modelBuilder.Entity<PrescreenQuestionState>(entity =>
            {
                entity.HasKey(e => e.PrescreenQuestionStateKey)
                    .HasName("pk_PrescreenQuestionState");

                entity.Property(e => e.PrescreenQuestionStateKey).HasColumnName("PRESCREEN_QUESTION_STATE_KEY");

                entity.Property(e => e.PrescreenQuestionKey).HasColumnName("PRESCREEN_QUESTION_KEY");

                entity.Property(e => e.StateAbbreviation)
                    .IsRequired()
                    .HasColumnName("STATE_ABBREVIATION")
                    .HasColumnType("char(2)");

                entity.HasOne(d => d.PrescreenQuestionKeyNavigation)
                    .WithMany(p => p.PrescreenQuestionState)
                    .HasForeignKey(d => d.PrescreenQuestionKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_PrescreenQuestionState_PrescreenQuestion");

                entity.HasOne(d => d.StateAbbreviationNavigation)
                    .WithMany(p => p.PrescreenQuestionState)
                    .HasPrincipalKey(p => p.StateAbbrv)
                    .HasForeignKey(d => d.StateAbbreviation)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_PrescreenQuestionState_GlobalStates");
            });

            modelBuilder.Entity<PrescreenQuestionType>(entity =>
            {
                entity.HasKey(e => e.PrescreenQuestionTypeKey)
                    .HasName("pk_PrescreenQuestionType");

                entity.Property(e => e.PrescreenQuestionTypeKey).HasColumnName("PRESCREEN_QUESTION_TYPE_KEY");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(20)");
            });

            modelBuilder.Entity<Prices>(entity =>
            {
                entity.HasKey(e => e.Location)
                    .HasName("PK_Prices");

                entity.ToTable("PRICES");

                entity.Property(e => e.Location)
                    .HasColumnName("location")
                    .HasColumnType("numeric")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Askkk).HasColumnName("ASKKK");

                entity.Property(e => e.Pfee1)
                    .HasColumnName("PFEE1")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Pfee2)
                    .HasColumnName("PFEE2")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Pfee3)
                    .HasColumnName("PFEE3")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Pfee4)
                    .HasColumnName("PFEE4")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Pfee5)
                    .HasColumnName("PFEE5")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Pfee6)
                    .HasColumnName("PFEE6")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Pfee7)
                    .HasColumnName("PFEE7")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Pfee8)
                    .HasColumnName("PFEE8")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Pfee9)
                    .HasColumnName("PFEE9")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Pfeea)
                    .HasColumnName("PFEEA")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Pfeeb)
                    .HasColumnName("PFEEB")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Pfeec)
                    .HasColumnName("PFEEC")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Pfeed)
                    .HasColumnName("PFEED")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Pfeee)
                    .HasColumnName("PFEEE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Pfeef)
                    .HasColumnName("PFEEF")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Pfeeg)
                    .HasColumnName("PFEEG")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Pfeeh)
                    .HasColumnName("PFEEH")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Pfeei)
                    .HasColumnName("PFEEI")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Pfeej)
                    .HasColumnName("PFEEJ")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Pfeek)
                    .HasColumnName("PFEEK")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Pfeel)
                    .HasColumnName("PFEEL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Pfeem)
                    .HasColumnName("PFEEM")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Pfeen)
                    .HasColumnName("PFEEN")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Pfeeo)
                    .HasColumnName("PFEEO")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Pfeep)
                    .HasColumnName("PFEEP")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Pfeeq)
                    .HasColumnName("PFEEQ")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Pfeer)
                    .HasColumnName("PFEER")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Pfees)
                    .HasColumnName("PFEES")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Pfeet)
                    .HasColumnName("PFEET")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Pfeeu)
                    .HasColumnName("PFEEU")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Pfeev)
                    .HasColumnName("PFEEV")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Pfeew)
                    .HasColumnName("PFEEW")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Pfeex)
                    .HasColumnName("PFEEX")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Pfeey).HasColumnName("PFEEY");

                entity.Property(e => e.Pfeez).HasColumnName("PFEEZ");

                entity.Property(e => e.Ptable1)
                    .HasColumnName("PTABLE1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Ptable2)
                    .HasColumnName("PTABLE2")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Ptable3)
                    .HasColumnName("PTABLE3")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Ptable4)
                    .HasColumnName("PTABLE4")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Ptable5)
                    .HasColumnName("PTABLE5")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Ptable6)
                    .HasColumnName("PTABLE6")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Ptable7)
                    .HasColumnName("PTABLE7")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Ptable8)
                    .HasColumnName("PTABLE8")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Ptable9)
                    .HasColumnName("PTABLE9")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Ptablea)
                    .HasColumnName("PTABLEA")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Ptableb)
                    .HasColumnName("PTABLEB")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Ptablec)
                    .HasColumnName("PTABLEC")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Ptabled)
                    .HasColumnName("PTABLED")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Ptablee)
                    .HasColumnName("PTABLEE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Ptablef)
                    .HasColumnName("PTABLEF")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Ptableg)
                    .HasColumnName("PTABLEG")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Ptableh)
                    .HasColumnName("PTABLEH")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Ptablei)
                    .HasColumnName("PTABLEI")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Ptablej)
                    .HasColumnName("PTABLEJ")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Ptablek)
                    .HasColumnName("PTABLEK")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Ptablel)
                    .HasColumnName("PTABLEL")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Ptablem)
                    .HasColumnName("PTABLEM")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Ptablen)
                    .HasColumnName("PTABLEN")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Ptableo)
                    .HasColumnName("PTABLEO")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Ptablep)
                    .HasColumnName("PTABLEP")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Ptableq)
                    .HasColumnName("PTABLEQ")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Ptabler)
                    .HasColumnName("PTABLER")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Ptables)
                    .HasColumnName("PTABLES")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Ptablet)
                    .HasColumnName("PTABLET")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Ptableu)
                    .HasColumnName("PTABLEU")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Ptablev)
                    .HasColumnName("PTABLEV")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Ptablew)
                    .HasColumnName("PTABLEW")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Ptablex)
                    .HasColumnName("PTABLEX")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Ptabley)
                    .HasColumnName("PTABLEY")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Ptablez)
                    .HasColumnName("PTABLEZ")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Ptfee1)
                    .HasColumnName("PTFEE1")
                    .HasColumnType("numeric");

                entity.Property(e => e.Ptfee2)
                    .HasColumnName("PTFEE2")
                    .HasColumnType("numeric");

                entity.Property(e => e.Ptfee3)
                    .HasColumnName("PTFEE3")
                    .HasColumnType("numeric");

                entity.Property(e => e.Ptfee4)
                    .HasColumnName("PTFEE4")
                    .HasColumnType("numeric");

                entity.Property(e => e.Ptfee5)
                    .HasColumnName("PTFEE5")
                    .HasColumnType("numeric");

                entity.Property(e => e.Ptfee6)
                    .HasColumnName("PTFEE6")
                    .HasColumnType("numeric");

                entity.Property(e => e.Ptfee7)
                    .HasColumnName("PTFEE7")
                    .HasColumnType("numeric");

                entity.Property(e => e.Ptfee8)
                    .HasColumnName("PTFEE8")
                    .HasColumnType("numeric");

                entity.Property(e => e.Ptfee9)
                    .HasColumnName("PTFEE9")
                    .HasColumnType("numeric");

                entity.Property(e => e.Ptfeea)
                    .HasColumnName("PTFEEA")
                    .HasColumnType("numeric");

                entity.Property(e => e.Ptfeeb)
                    .HasColumnName("PTFEEB")
                    .HasColumnType("numeric");

                entity.Property(e => e.Ptfeec)
                    .HasColumnName("PTFEEC")
                    .HasColumnType("numeric");

                entity.Property(e => e.Ptfeed)
                    .HasColumnName("PTFEED")
                    .HasColumnType("numeric");

                entity.Property(e => e.Ptfeee)
                    .HasColumnName("PTFEEE")
                    .HasColumnType("numeric");

                entity.Property(e => e.Ptfeef)
                    .HasColumnName("PTFEEF")
                    .HasColumnType("numeric");

                entity.Property(e => e.Ptfeeg)
                    .HasColumnName("PTFEEG")
                    .HasColumnType("numeric");

                entity.Property(e => e.Ptfeeh)
                    .HasColumnName("PTFEEH")
                    .HasColumnType("numeric");

                entity.Property(e => e.Ptfeei)
                    .HasColumnName("PTFEEI")
                    .HasColumnType("numeric");

                entity.Property(e => e.Ptfeej)
                    .HasColumnName("PTFEEJ")
                    .HasColumnType("numeric");

                entity.Property(e => e.Ptfeek)
                    .HasColumnName("PTFEEK")
                    .HasColumnType("numeric");

                entity.Property(e => e.Ptfeel)
                    .HasColumnName("PTFEEL")
                    .HasColumnType("numeric");

                entity.Property(e => e.Ptfeem)
                    .HasColumnName("PTFEEM")
                    .HasColumnType("numeric");

                entity.Property(e => e.Ptfeen)
                    .HasColumnName("PTFEEN")
                    .HasColumnType("numeric");

                entity.Property(e => e.Ptfeeo)
                    .HasColumnName("PTFEEO")
                    .HasColumnType("numeric");

                entity.Property(e => e.Ptfeep)
                    .HasColumnName("PTFEEP")
                    .HasColumnType("numeric");

                entity.Property(e => e.Ptfeeq)
                    .HasColumnName("PTFEEQ")
                    .HasColumnType("numeric");

                entity.Property(e => e.Ptfeer)
                    .HasColumnName("PTFEER")
                    .HasColumnType("numeric");

                entity.Property(e => e.Ptfees)
                    .HasColumnName("PTFEES")
                    .HasColumnType("numeric");

                entity.Property(e => e.Ptfeet)
                    .HasColumnName("PTFEET")
                    .HasColumnType("numeric");

                entity.Property(e => e.Ptfeeu)
                    .HasColumnName("PTFEEU")
                    .HasColumnType("numeric");

                entity.Property(e => e.Ptfeev)
                    .HasColumnName("PTFEEV")
                    .HasColumnType("numeric");

                entity.Property(e => e.Ptfeew)
                    .HasColumnName("PTFEEW")
                    .HasColumnType("numeric");

                entity.Property(e => e.Ptfeex)
                    .HasColumnName("PTFEEX")
                    .HasColumnType("numeric");

                entity.Property(e => e.Ptfeey).HasColumnName("PTFEEY");

                entity.Property(e => e.Ptfeez).HasColumnName("PTFEEZ");
            });

            modelBuilder.Entity<ProcessConfig>(entity =>
            {
                entity.HasKey(e => e.ProcessConfigKey)
                    .HasName("PK_ProcessConfig");

                entity.HasIndex(e => new { e.ProcessConfigKey, e.ProcessName, e.ProcessCommand })
                    .HasName("IX_ProcessConfig_PROCESS_COMMAND")
                    .IsUnique();

                entity.Property(e => e.ProcessConfigKey).HasColumnName("PROCESS_CONFIG_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ProcessCommand)
                    .IsRequired()
                    .HasColumnName("PROCESS_COMMAND")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.ProcessName)
                    .IsRequired()
                    .HasColumnName("PROCESS_NAME")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.UpdatedBy)
                    .HasColumnName("UPDATED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("UPDATED_DATE")
                    .HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<ProcessConfigDetail>(entity =>
            {
                entity.HasKey(e => e.ProcessConfigDetailKey)
                    .HasName("PK_ProcessConfigDetail");

                entity.HasIndex(e => new { e.ConfigName, e.ProcessConfigInstanceKey })
                    .HasName("IX_ProcessConfigDetail_CONFIG_NAME_And_KEY")
                    .IsUnique();

                entity.HasIndex(e => new { e.ProcessConfigDetailKey, e.ConfigName, e.ConfigValue, e.ProcessConfigInstanceKey })
                    .HasName("IX_ProcessConfigDetail_PROCESS_CONFIG_INSTANCE_KEY");

                entity.Property(e => e.ProcessConfigDetailKey).HasColumnName("PROCESS_CONFIG_DETAIL_KEY");

                entity.Property(e => e.ConfigName)
                    .IsRequired()
                    .HasColumnName("CONFIG_NAME")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.ConfigValue)
                    .IsRequired()
                    .HasColumnName("CONFIG_VALUE")
                    .HasColumnType("varchar(max)");

                entity.Property(e => e.ProcessConfigInstanceKey).HasColumnName("PROCESS_CONFIG_INSTANCE_KEY");

                entity.HasOne(d => d.ProcessConfigInstanceKeyNavigation)
                    .WithMany(p => p.ProcessConfigDetail)
                    .HasForeignKey(d => d.ProcessConfigInstanceKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_ProcessConfigDetail_ProcessConfigInstance");
            });

            modelBuilder.Entity<ProcessConfigDetailHistory>(entity =>
            {
                entity.HasKey(e => new { e.ProcessConfigDetailHistKey, e.ProcessConfigDetailKey })
                    .HasName("PK_ProcessConfigDetailHist");

                entity.HasIndex(e => new { e.ProcessConfigDetailHistKey, e.ConfigName, e.ConfigOldValue, e.DateEntered, e.ProcessConfigInstanceKey })
                    .HasName("IX_ProcessConfigDetailHistory_PROCESS_CONFIG_INSTANCE_KEY");

                entity.Property(e => e.ProcessConfigDetailHistKey)
                    .HasColumnName("PROCESS_CONFIG_DETAIL_HIST_KEY")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ProcessConfigDetailKey).HasColumnName("PROCESS_CONFIG_DETAIL_KEY");

                entity.Property(e => e.ConfigName)
                    .IsRequired()
                    .HasColumnName("CONFIG_NAME")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.ConfigNewValue)
                    .HasColumnName("CONFIG_NEW_VALUE")
                    .HasColumnType("varchar(max)");

                entity.Property(e => e.ConfigOldValue)
                    .IsRequired()
                    .HasColumnName("CONFIG_OLD_VALUE")
                    .HasColumnType("varchar(max)");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ProcessConfigInstanceKey).HasColumnName("PROCESS_CONFIG_INSTANCE_KEY");

                entity.HasOne(d => d.ProcessConfigInstanceKeyNavigation)
                    .WithMany(p => p.ProcessConfigDetailHistory)
                    .HasForeignKey(d => d.ProcessConfigInstanceKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_ProcessConfigDetailHistory_ProcessConfigInstance");
            });

            modelBuilder.Entity<ProcessConfigInstance>(entity =>
            {
                entity.HasKey(e => e.ProcessConfigInstanceKey)
                    .HasName("PK_ProcessConfigInstance");

                entity.HasIndex(e => new { e.ProcessConfigInstanceKey, e.InstanceName, e.IsPrivate, e.IsActive, e.DateEntered, e.UpdatedBy, e.UpdatedDate, e.LastusedDate, e.ProcessConfigKey, e.Teller })
                    .HasName("IX_ProcessConfigInstance_PROCESS_CONFIG_KEY_And_TELLER");

                entity.Property(e => e.ProcessConfigInstanceKey).HasColumnName("PROCESS_CONFIG_INSTANCE_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.InstanceName)
                    .IsRequired()
                    .HasColumnName("INSTANCE_NAME")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.IsActive).HasColumnName("IS_ACTIVE");

                entity.Property(e => e.IsPrivate).HasColumnName("IS_PRIVATE");

                entity.Property(e => e.LastusedDate)
                    .HasColumnName("LASTUSED_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ProcessConfigKey).HasColumnName("PROCESS_CONFIG_KEY");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.UpdatedBy)
                    .HasColumnName("UPDATED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("UPDATED_DATE")
                    .HasColumnType("smalldatetime");

                entity.HasOne(d => d.ProcessConfigKeyNavigation)
                    .WithMany(p => p.ProcessConfigInstance)
                    .HasForeignKey(d => d.ProcessConfigKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_ProcessConfigInstance_ProcessConfig");
            });

            modelBuilder.Entity<ProcessConfigInstanceGroup>(entity =>
            {
                entity.HasKey(e => e.ProcessConfigInstanceGroupKey)
                    .HasName("PK_ProcessConfigInstanceGroup");

                entity.Property(e => e.ProcessConfigInstanceGroupKey).HasColumnName("PROCESS_CONFIG_INSTANCE_GROUP_KEY");

                entity.Property(e => e.ProcessConfigInstanceKey).HasColumnName("PROCESS_CONFIG_INSTANCE_KEY");

                entity.Property(e => e.SecuritygroupKey).HasColumnName("SECURITYGROUP_KEY");

                entity.HasOne(d => d.ProcessConfigInstanceKeyNavigation)
                    .WithMany(p => p.ProcessConfigInstanceGroup)
                    .HasForeignKey(d => d.ProcessConfigInstanceKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("PK_ProcessConfigInstanceGroup_ProcessConfig");

                entity.HasOne(d => d.SecuritygroupKeyNavigation)
                    .WithMany(p => p.ProcessConfigInstanceGroup)
                    .HasForeignKey(d => d.SecuritygroupKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("PK_ProcessConfigInstanceTeller_SecurityGroup");
            });

            modelBuilder.Entity<ProcessConfigInstanceTeller>(entity =>
            {
                entity.HasKey(e => e.ProcessConfigInstanceTellerKey)
                    .HasName("PK_ProcessConfigInstanceTeller");

                entity.Property(e => e.ProcessConfigInstanceTellerKey).HasColumnName("PROCESS_CONFIG_INSTANCE_TELLER_KEY");

                entity.Property(e => e.ProcessConfigInstanceKey).HasColumnName("PROCESS_CONFIG_INSTANCE_KEY");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.ProcessConfigInstanceKeyNavigation)
                    .WithMany(p => p.ProcessConfigInstanceTeller)
                    .HasForeignKey(d => d.ProcessConfigInstanceKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("PK_ProcessConfigInstanceTeller_ProcessConfig");

                entity.HasOne(d => d.TellerNavigation)
                    .WithMany(p => p.ProcessConfigInstanceTeller)
                    .HasPrincipalKey(p => p.Teller)
                    .HasForeignKey(d => d.Teller)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("PK_ProcessConfigInstanceTeller_TellerID");
            });

            modelBuilder.Entity<ProcessSchedule>(entity =>
            {
                entity.HasKey(e => e.ProcessScheduleKey)
                    .HasName("PK_ProcessScheduleKey");

                entity.Property(e => e.ProcessScheduleKey).HasColumnName("PROCESS_SCHEDULE_KEY");

                entity.Property(e => e.EndDate)
                    .HasColumnName("END_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Fri).HasColumnName("FRI");

                entity.Property(e => e.IsRestart).HasColumnName("IS_RESTART");

                entity.Property(e => e.JobName)
                    .HasColumnName("JOB_NAME")
                    .HasColumnType("varchar(64)");

                entity.Property(e => e.Mon).HasColumnName("MON");

                entity.Property(e => e.MonthlyDay).HasColumnName("MONTHLY_DAY");

                entity.Property(e => e.ProcessConfigInstanceKey).HasColumnName("PROCESS_CONFIG_INSTANCE_KEY");

                entity.Property(e => e.Sat).HasColumnName("SAT");

                entity.Property(e => e.StartDate)
                    .HasColumnName("START_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StartTime)
                    .HasColumnName("START_TIME")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Sun).HasColumnName("SUN");

                entity.Property(e => e.Thurs).HasColumnName("THURS");

                entity.Property(e => e.TimeZone)
                    .HasColumnName("TIME_ZONE")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Tues).HasColumnName("TUES");

                entity.Property(e => e.Wed).HasColumnName("WED");

                entity.HasOne(d => d.ProcessConfigInstanceKeyNavigation)
                    .WithMany(p => p.ProcessSchedule)
                    .HasForeignKey(d => d.ProcessConfigInstanceKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_ProcessSchedule_PROCESS_CONFIG_INSTANCE_KEY");
            });

            modelBuilder.Entity<ProductOpenLoanMatrix>(entity =>
            {
                entity.HasKey(e => e.ProductOpenLoanMatrixKey)
                    .HasName("PK_ProductOpenLoanMatrix");

                entity.Property(e => e.ProductOpenLoanMatrixKey).HasColumnName("PRODUCT_OPEN_LOAN_MATRIX_KEY");

                entity.Property(e => e.LoanProductKeyAllowed).HasColumnName("LOAN_PRODUCT_KEY_ALLOWED");

                entity.Property(e => e.LoanProductKeyOpen).HasColumnName("LOAN_PRODUCT_KEY_OPEN");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.HasOne(d => d.LoanProductKeyAllowedNavigation)
                    .WithMany(p => p.ProductOpenLoanMatrixLoanProductKeyAllowedNavigation)
                    .HasForeignKey(d => d.LoanProductKeyAllowed)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_ProductOpenLoanMatrix_ProductAllowed");

                entity.HasOne(d => d.LoanProductKeyOpenNavigation)
                    .WithMany(p => p.ProductOpenLoanMatrixLoanProductKeyOpenNavigation)
                    .HasForeignKey(d => d.LoanProductKeyOpen)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_ProductOpenLoanMatrix_ProductOpen");

                entity.HasOne(d => d.LocationNavigation)
                    .WithMany(p => p.ProductOpenLoanMatrix)
                    .HasForeignKey(d => d.Location)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_ProductOpenLoanMatrix_Company");
            });

            modelBuilder.Entity<PromiseToPay>(entity =>
            {
                entity.HasKey(e => e.PromiseToPayKey)
                    .HasName("PK_PromiseToPay");

                entity.HasIndex(e => e.CollectionActionKey)
                    .HasName("IX_PromiseToPay_COLLECTION_ACTION_KEY");

                entity.HasIndex(e => e.CustomerKey)
                    .HasName("IX_PromiseToPay_CUSTOMER_KEY");

                entity.HasIndex(e => e.RisreptKey)
                    .HasName("IX_PromiseToPay_RISREPT_KEY");

                entity.HasIndex(e => new { e.RisreptKey, e.Cancelled, e.Reversed })
                    .HasName("IX_PromiseToPay_RISREPT_KEY_CANCELLED_REVERSED");

                entity.HasIndex(e => new { e.RisreptKey, e.PromiseToPayKey, e.Cancelled, e.PtpConfigKey })
                    .HasName("IX_PromiseToPay_CANCELLED_PTP_CONFIG_KEY");

                entity.Property(e => e.PromiseToPayKey).HasColumnName("PROMISE_TO_PAY_KEY");

                entity.Property(e => e.ApprovedBy)
                    .HasColumnName("APPROVED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.Cancelled)
                    .HasColumnName("CANCELLED")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.CancelledBy)
                    .HasColumnName("CANCELLED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.CancelledDate)
                    .HasColumnName("CANCELLED_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.CollectionActionKey).HasColumnName("COLLECTION_ACTION_KEY");

                entity.Property(e => e.CustomerDocumentKey).HasColumnName("CUSTOMER_DOCUMENT_KEY");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.PtpConfigKey).HasColumnName("PTP_CONFIG_KEY");

                entity.Property(e => e.PtpCourtesyCall)
                    .IsRequired()
                    .HasColumnName("PTP_COURTESY_CALL")
                    .HasColumnType("char(1)");

                entity.Property(e => e.PtpLocation).HasColumnName("PTP_LOCATION");

                entity.Property(e => e.PtpPmts).HasColumnName("PTP_PMTS");

                entity.Property(e => e.Reversed).HasColumnName("REVERSED");

                entity.Property(e => e.ReversedDate)
                    .HasColumnName("REVERSED_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RisreptKey).HasColumnName("RISREPT_KEY");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");

                entity.Property(e => e.WaiveFee)
                    .HasColumnName("WAIVE_FEE")
                    .HasDefaultValueSql("0");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.PromiseToPay)
                    .HasForeignKey(d => d.CustomerKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_PromiseToPay_Customer");

                entity.HasOne(d => d.PtpConfigKeyNavigation)
                    .WithMany(p => p.PromiseToPay)
                    .HasForeignKey(d => d.PtpConfigKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_PromiseToPay_RIPTPPaymentPlanConfig");

                entity.HasOne(d => d.RisreptKeyNavigation)
                    .WithMany(p => p.PromiseToPay)
                    .HasForeignKey(d => d.RisreptKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_PromiseToPay_RisRept");
            });

            modelBuilder.Entity<PromiseToPayDetail>(entity =>
            {
                entity.HasKey(e => e.PtpDetailKey)
                    .HasName("PK_PTPDetail");

                entity.HasIndex(e => e.TransDetailKey)
                    .HasName("IX_PromiseToPayDetail_TRANSDETAILKEY");

                entity.HasIndex(e => new { e.PtpPromiseKey, e.PtpStatus })
                    .HasName("IX_PTPDetail");

                entity.HasIndex(e => new { e.PtpStatus, e.PtpPromiseKey })
                    .HasName("IX_PromiseToPayDetail_PTP_STATUS_PTP_PROMISE_KEY");

                entity.HasIndex(e => new { e.PtpCardBrand, e.PtpCardType, e.PtpCcBillingAddress1, e.PtpCcExpYear, e.PtpCcNameOnCard, e.PtpCcBillingCity, e.PtpCcBillingState, e.PtpCcBillingZipcode, e.PtpCcExpMonth, e.PtpToken, e.PtpDetailKey, e.PtpPromiseKey, e.PtpCcNumber, e.PtpMethod, e.PtpStatus, e.PtpCurrDueDate, e.PtpDueAmt, e.PtpCcTimeSlot })
                    .HasName("IX_PromiseToPayDetail_PTP_METHOD_PTP_STATUS_PTP_CURR_DUE_DATE_PTP_DUE_AMT_PTP_CC_TIME_SLOT");

                entity.Property(e => e.PtpDetailKey).HasColumnName("PTP_DETAIL_KEY");

                entity.Property(e => e.AddressFormat)
                    .IsRequired()
                    .HasColumnName("ADDRESS_FORMAT")
                    .HasColumnType("char(3)");

                entity.Property(e => e.PtpAcctNo)
                    .HasColumnName("PTP_ACCT_NO")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.PtpBankId)
                    .HasColumnName("PTP_BANK_ID")
                    .HasColumnType("varchar(9)");

                entity.Property(e => e.PtpCardBrand).HasColumnName("PTP_CARD_BRAND");

                entity.Property(e => e.PtpCardType).HasColumnName("PTP_CARD_TYPE");

                entity.Property(e => e.PtpCcBillingAddrStreet)
                    .IsRequired()
                    .HasColumnName("PTP_CC_BILLING_ADDR_STREET")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.PtpCcBillingAddress1)
                    .IsRequired()
                    .HasColumnName("PTP_CC_BILLING_ADDRESS1")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.PtpCcBillingAddressCsz)
                    .HasColumnName("PTP_CC_BILLING_ADDRESS_CSZ")
                    .HasColumnType("varchar(100)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_CSZ]([ADDRESS_FORMAT],[PTP_CC_BILLING_CITY],[PTP_CC_BILLING_STATE],[PTP_CC_BILLING_ZIPCODE])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.PtpCcBillingAddressLine)
                    .HasColumnName("PTP_CC_BILLING_ADDRESS_LINE")
                    .HasColumnType("varchar(100)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE]([ADDRESS_FORMAT],[PTP_CC_BILLING_ADDRESS1],'','',[PTP_CC_BILLING_ADDR_STREET],'','','','',[PTP_CC_BILLING_FLAT_NUM],[PTP_CC_BILLING_BUILDING_NAME],[PTP_CC_BILLING_BUILDING_NUM])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.PtpCcBillingAddressLine1)
                    .HasColumnName("PTP_CC_BILLING_ADDRESS_LINE_1")
                    .HasColumnType("varchar(100)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE_1]([ADDRESS_FORMAT],[PTP_CC_BILLING_ADDRESS1],'','',[PTP_CC_BILLING_ADDR_STREET],'','',[PTP_CC_BILLING_FLAT_NUM],[PTP_CC_BILLING_BUILDING_NAME],'','')")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.PtpCcBillingAddressLine2)
                    .HasColumnName("PTP_CC_BILLING_ADDRESS_LINE_2")
                    .HasColumnType("varchar(150)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE_2]([ADDRESS_FORMAT],'','',[PTP_CC_BILLING_CITY],[PTP_CC_BILLING_STATE],[PTP_CC_BILLING_ZIPCODE],[PTP_CC_BILLING_BUILDING_NUM],[PTP_CC_BILLING_ADDR_STREET],[PTP_CC_BILLING_ADDRESS1],'','','','')")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.PtpCcBillingAddressLine3)
                    .HasColumnName("PTP_CC_BILLING_ADDRESS_LINE_3")
                    .HasColumnType("varchar(150)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_ADDRESS_LINE_3]([ADDRESS_FORMAT],'','',[PTP_CC_BILLING_CITY],[PTP_CC_BILLING_STATE],[PTP_CC_BILLING_ZIPCODE])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.PtpCcBillingBuildingName)
                    .IsRequired()
                    .HasColumnName("PTP_CC_BILLING_BUILDING_NAME")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.PtpCcBillingBuildingNum)
                    .IsRequired()
                    .HasColumnName("PTP_CC_BILLING_BUILDING_NUM")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.PtpCcBillingCity)
                    .IsRequired()
                    .HasColumnName("PTP_CC_BILLING_CITY")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.PtpCcBillingCountry)
                    .IsRequired()
                    .HasColumnName("PTP_CC_BILLING_COUNTRY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.PtpCcBillingCounty)
                    .IsRequired()
                    .HasColumnName("PTP_CC_BILLING_COUNTY")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.PtpCcBillingFlatNum)
                    .IsRequired()
                    .HasColumnName("PTP_CC_BILLING_FLAT_NUM")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.PtpCcBillingState)
                    .IsRequired()
                    .HasColumnName("PTP_CC_BILLING_STATE")
                    .HasColumnType("char(2)");

                entity.Property(e => e.PtpCcBillingZipcode)
                    .IsRequired()
                    .HasColumnName("PTP_CC_BILLING_ZIPCODE")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.PtpCcCcv)
                    .HasColumnName("PTP_CC_CCV")
                    .HasColumnType("char(4)");

                entity.Property(e => e.PtpCcExpMonth).HasColumnName("PTP_CC_EXP_MONTH");

                entity.Property(e => e.PtpCcExpYear).HasColumnName("PTP_CC_EXP_YEAR");

                entity.Property(e => e.PtpCcNameOnCard)
                    .HasColumnName("PTP_CC_NAME_ON_CARD")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.PtpCcNumber)
                    .HasColumnName("PTP_CC_NUMBER")
                    .HasColumnType("varchar(19)");

                entity.Property(e => e.PtpCcTimeSlot).HasColumnName("PTP_CC_TIME_SLOT");

                entity.Property(e => e.PtpCurrDueDate)
                    .HasColumnName("PTP_CURR_DUE_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.PtpDueAmt)
                    .HasColumnName("PTP_DUE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PtpMethod).HasColumnName("PTP_METHOD");

                entity.Property(e => e.PtpNameOnAccount)
                    .HasColumnName("PTP_NAME_ON_ACCOUNT")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.PtpOrigDueDate)
                    .HasColumnName("PTP_ORIG_DUE_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.PtpPaidAmt)
                    .HasColumnName("PTP_PAID_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PtpPaidDate)
                    .HasColumnName("PTP_PAID_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.PtpPromiseKey).HasColumnName("PTP_PROMISE_KEY");

                entity.Property(e => e.PtpStatus)
                    .IsRequired()
                    .HasColumnName("PTP_STATUS")
                    .HasColumnType("char(1)");

                entity.Property(e => e.PtpToken)
                    .IsRequired()
                    .HasColumnName("PTP_TOKEN")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");

                entity.HasOne(d => d.PtpPromiseKeyNavigation)
                    .WithMany(p => p.PromiseToPayDetail)
                    .HasForeignKey(d => d.PtpPromiseKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_PTPDetail_PromiseKey");
            });

            modelBuilder.Entity<PromiseToPayDetailEdit>(entity =>
            {
                entity.HasKey(e => e.PromiseToPayDetailEditKey)
                    .HasName("PK_PromiseToPayDetailEdit");

                entity.HasIndex(e => e.PtpDetailKey)
                    .HasName("IX_PromiseToPayDetailEdit_PTP_DETAIL_KEY");

                entity.Property(e => e.PromiseToPayDetailEditKey).HasColumnName("PROMISE_TO_PAY_DETAIL_EDIT_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DmlType)
                    .IsRequired()
                    .HasColumnName("DML_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.FieldName)
                    .IsRequired()
                    .HasColumnName("FIELD_NAME")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.NewValue)
                    .HasColumnName("NEW_VALUE")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.OldValue)
                    .HasColumnName("OLD_VALUE")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.PtpDetailKey).HasColumnName("PTP_DETAIL_KEY");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.PtpDetailKeyNavigation)
                    .WithMany(p => p.PromiseToPayDetailEdit)
                    .HasForeignKey(d => d.PtpDetailKey)
                    .HasConstraintName("FK_PromiseToPayDetailEdit_PromiseToPayDetail");
            });

            modelBuilder.Entity<PromiseToPayDetailTrans>(entity =>
            {
                entity.HasKey(e => e.PtpDetailTransKey)
                    .HasName("PK_PromiseToPayDetailTrans");

                entity.HasIndex(e => e.PtpDetailKey)
                    .HasName("IX_PromiseToPayDetailTrans_PTP_DETAIL_KEY");

                entity.HasIndex(e => e.TransDetailKey)
                    .HasName("IX_PromiseToPayDetailTrans_TRANS_DETAIL_KEY");

                entity.Property(e => e.PtpDetailTransKey).HasColumnName("PTP_DETAIL_TRANS_KEY");

                entity.Property(e => e.PtpAmount)
                    .HasColumnName("PTP_AMOUNT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PtpDetailKey).HasColumnName("PTP_DETAIL_KEY");

                entity.Property(e => e.Reversed).HasColumnName("REVERSED");

                entity.Property(e => e.ReversedDate)
                    .HasColumnName("REVERSED_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");

                entity.HasOne(d => d.PtpDetailKeyNavigation)
                    .WithMany(p => p.PromiseToPayDetailTrans)
                    .HasForeignKey(d => d.PtpDetailKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_PromiseToPayDetailTrans_PTP_DETAIL_KEY");

                entity.HasOne(d => d.TransDetailKeyNavigation)
                    .WithMany(p => p.PromiseToPayDetailTrans)
                    .HasForeignKey(d => d.TransDetailKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_PromiseToPayDetailTrans_TRANS_DETAIL_KEY");
            });

            modelBuilder.Entity<PromiseToPayTimeSlotConfig>(entity =>
            {
                entity.HasKey(e => e.PtpCcTimeSlot)
                    .HasName("PTP_CC_TIME_SLOT");

                entity.Property(e => e.PtpCcTimeSlot)
                    .HasColumnName("PTP_CC_TIME_SLOT")
                    .ValueGeneratedNever();

                entity.Property(e => e.PtpRunTime).HasColumnName("PTP_RUN_TIME");

                entity.Property(e => e.PtpTimeslotDesc)
                    .IsRequired()
                    .HasColumnName("PTP_TIMESLOT_DESC")
                    .HasColumnType("varchar(30)");
            });

            modelBuilder.Entity<PurchaseService>(entity =>
            {
                entity.HasKey(e => e.PurchaseServiceKey)
                    .HasName("PK_PurchaseService");

                entity.HasIndex(e => e.TransDetailKey)
                    .HasName("IX_PurchaseService_TRANS_DETAIL_KEY");

                entity.Property(e => e.PurchaseServiceKey).HasColumnName("PURCHASE_SERVICE_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.GlAcct).HasColumnName("GL_ACCT");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.OptplusCardFirst)
                    .IsRequired()
                    .HasColumnName("OPTPLUS_CARD_FIRST")
                    .HasColumnType("varchar(16)");

                entity.Property(e => e.OptplusCardLast)
                    .IsRequired()
                    .HasColumnName("OPTPLUS_CARD_LAST")
                    .HasColumnType("varchar(16)");

                entity.Property(e => e.PaymentFrom).HasColumnName("PAYMENT_FROM");

                entity.Property(e => e.Reversed).HasColumnName("REVERSED");

                entity.Property(e => e.ReversedDate)
                    .HasColumnName("REVERSED_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.TotCost)
                    .HasColumnName("TOT_COST")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");

                entity.HasOne(d => d.TellerNavigation)
                    .WithMany(p => p.PurchaseService)
                    .HasPrincipalKey(p => p.Teller)
                    .HasForeignKey(d => d.Teller)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_PurchaseService_TellerID");

                entity.HasOne(d => d.TransDetailKeyNavigation)
                    .WithMany(p => p.PurchaseService)
                    .HasForeignKey(d => d.TransDetailKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_PurchaseService_TransDetail");
            });

            modelBuilder.Entity<PushNotification>(entity =>
            {
                entity.HasKey(e => e.PushNotificationKey)
                    .HasName("PK_PushNotification");

                entity.Property(e => e.PushNotificationKey).HasColumnName("PUSH_NOTIFICATION_KEY");

                entity.Property(e => e.Arguments)
                    .HasColumnName("ARGUMENTS")
                    .HasColumnType("varchar(200)");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateScheduled)
                    .HasColumnName("DATE_SCHEDULED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DateUpdated)
                    .HasColumnName("DATE_UPDATED")
                    .HasColumnType("datetime");

                entity.Property(e => e.Status).HasColumnName("STATUS");

                entity.Property(e => e.Type).HasColumnName("TYPE");

                entity.Property(e => e.VisitorDeviceKey).HasColumnName("VISITOR_DEVICE_KEY");

                entity.HasOne(d => d.VisitorDeviceKeyNavigation)
                    .WithMany(p => p.PushNotification)
                    .HasForeignKey(d => d.VisitorDeviceKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_PushNotification_VisitorDevice");
            });

            modelBuilder.Entity<RbcEfundBatch>(entity =>
            {
                entity.HasKey(e => e.RbcEfundBatchKey)
                    .HasName("PK_RbcEFundBatch");

                entity.ToTable("RbcEFundBatch");

                entity.Property(e => e.RbcEfundBatchKey).HasColumnName("RBC_EFUND_BATCH_KEY");

                entity.Property(e => e.Accepted).HasColumnName("ACCEPTED");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DetailCount).HasColumnName("DETAIL_COUNT");

                entity.Property(e => e.DetailValue)
                    .HasColumnName("DETAIL_VALUE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.FileWritten).HasColumnName("FILE_WRITTEN");

                entity.Property(e => e.ResponseDate)
                    .HasColumnName("RESPONSE_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.SendFileName)
                    .IsRequired()
                    .HasColumnName("SEND_FILE_NAME")
                    .HasColumnType("varchar(50)");
            });

            modelBuilder.Entity<RbcEfundBatchDetail>(entity =>
            {
                entity.HasKey(e => e.RbcEfundBatchDetailKey)
                    .HasName("PK_RbcEFundBatchDetail");

                entity.ToTable("RbcEFundBatchDetail");

                entity.Property(e => e.RbcEfundBatchDetailKey).HasColumnName("RBC_EFUND_BATCH_DETAIL_KEY");

                entity.Property(e => e.AcctNo)
                    .IsRequired()
                    .HasColumnName("ACCT_NO")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.Amount)
                    .HasColumnName("AMOUNT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.BankId).HasColumnName("BANK_ID");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasColumnName("EMAIL")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.Funded).HasColumnName("FUNDED");

                entity.Property(e => e.IssuerKey).HasColumnName("ISSUER_KEY");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.Processed).HasColumnName("PROCESSED");

                entity.Property(e => e.RbcEfundBatchKey).HasColumnName("RBC_EFUND_BATCH_KEY");

                entity.Property(e => e.RbcEfundBatchSummaryKey).HasColumnName("RBC_EFUND_BATCH_SUMMARY_KEY");

                entity.Property(e => e.RbcEfundResponseCodeKey).HasColumnName("RBC_EFUND_RESPONSE_CODE_KEY");

                entity.Property(e => e.ResponseText)
                    .HasColumnName("RESPONSE_TEXT")
                    .HasColumnType("varchar(2000)");

                entity.Property(e => e.Voided).HasColumnName("VOIDED");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.RbcEfundBatchDetail)
                    .HasForeignKey(d => d.CustomerKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_RbcEFundBatchDetail_CUSTOMER_KEY");

                entity.HasOne(d => d.IssuerKeyNavigation)
                    .WithMany(p => p.RbcEfundBatchDetail)
                    .HasForeignKey(d => d.IssuerKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_RbcEFundBatchDetail_ISSUER_KEY");

                entity.HasOne(d => d.LoanKeyNavigation)
                    .WithMany(p => p.RbcEfundBatchDetail)
                    .HasForeignKey(d => d.LoanKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_RbcEFundBatchDetail_LOAN_KEY");

                entity.HasOne(d => d.RbcEfundBatchKeyNavigation)
                    .WithMany(p => p.RbcEfundBatchDetail)
                    .HasForeignKey(d => d.RbcEfundBatchKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_RbcEFundBatchDetail_RbcEFundBatch");

                entity.HasOne(d => d.RbcEfundResponseCodeKeyNavigation)
                    .WithMany(p => p.RbcEfundBatchDetail)
                    .HasForeignKey(d => d.RbcEfundResponseCodeKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_RbcFundBatchDetail_RbcEFundResponseCode");
            });

            modelBuilder.Entity<RbcEfundBatchSummary>(entity =>
            {
                entity.HasKey(e => e.RbcEfundBatchSummaryKey)
                    .HasName("PK_RbcEFundBatchSummary");

                entity.ToTable("RbcEFundBatchSummary");

                entity.Property(e => e.RbcEfundBatchSummaryKey).HasColumnName("RBC_EFUND_BATCH_SUMMARY_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Processed).HasColumnName("PROCESSED");

                entity.Property(e => e.RbcEfundBatchKey).HasColumnName("RBC_EFUND_BATCH_KEY");

                entity.Property(e => e.SuccessAmount)
                    .HasColumnName("SUCCESS_AMOUNT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.SuccessCount).HasColumnName("SUCCESS_COUNT");

                entity.Property(e => e.UnsuccessAmount)
                    .HasColumnName("UNSUCCESS_AMOUNT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.UnsuccessCount).HasColumnName("UNSUCCESS_COUNT");

                entity.HasOne(d => d.RbcEfundBatchKeyNavigation)
                    .WithMany(p => p.RbcEfundBatchSummary)
                    .HasForeignKey(d => d.RbcEfundBatchKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_RbcEFundBatchSummary_RbcEFundBatch");
            });

            modelBuilder.Entity<RbcEfundResponseCode>(entity =>
            {
                entity.HasKey(e => e.RbcEfundResponseCodeKey)
                    .HasName("PK_RbcEfundResponseCode");

                entity.ToTable("RbcEFundResponseCode");

                entity.Property(e => e.RbcEfundResponseCodeKey).HasColumnName("RBC_EFUND_RESPONSE_CODE_KEY");

                entity.Property(e => e.Comments)
                    .IsRequired()
                    .HasColumnName("COMMENTS")
                    .HasColumnType("varchar(300)");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(300)");

                entity.Property(e => e.RbcCode)
                    .IsRequired()
                    .HasColumnName("RBC_CODE")
                    .HasColumnType("char(5)");
            });

            modelBuilder.Entity<RbcEfundSecurity>(entity =>
            {
                entity.HasKey(e => e.RbcEfundSecurityKey)
                    .HasName("PK_RbcEFundSecurity");

                entity.ToTable("RbcEFundSecurity");

                entity.HasIndex(e => e.LoanKey)
                    .HasName("UX_RbcEFundSecurity_LOAN_KEY")
                    .IsUnique();

                entity.Property(e => e.RbcEfundSecurityKey).HasColumnName("RBC_EFUND_SECURITY_KEY");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.SecurityCode).HasColumnName("SECURITY_CODE");

                entity.HasOne(d => d.LoanKeyNavigation)
                    .WithOne(p => p.RbcEfundSecurity)
                    .HasForeignKey<RbcEfundSecurity>(d => d.LoanKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_RbcEFundSecurity_Loan");
            });

            modelBuilder.Entity<ReasonForArrears>(entity =>
            {
                entity.HasKey(e => e.ReasonForArrearsKey)
                    .HasName("PK_ReasonForArrears");

                entity.Property(e => e.ReasonForArrearsKey).HasColumnName("REASON_FOR_ARREARS_KEY");

                entity.Property(e => e.DateUpdated)
                    .HasColumnName("DATE_UPDATED")
                    .HasColumnType("date");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.IsActive).HasColumnName("IS_ACTIVE");

                entity.Property(e => e.UpdatedTellerIdKey).HasColumnName("UPDATED_TELLER_ID_KEY");

                entity.HasOne(d => d.UpdatedTellerIdKeyNavigation)
                    .WithMany(p => p.ReasonForArrears)
                    .HasForeignKey(d => d.UpdatedTellerIdKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_ReasonForArrears_TellerId");
            });

            modelBuilder.Entity<Receipt>(entity =>
            {
                entity.HasKey(e => e.ReceiptKey)
                    .HasName("PK_Receipt");

                entity.HasIndex(e => e.TransDetailKey)
                    .HasName("IX_Receipt_TRANS_DETAIL_KEY")
                    .IsUnique();

                entity.Property(e => e.ReceiptKey).HasColumnName("RECEIPT_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ReceiptData)
                    .IsRequired()
                    .HasColumnName("RECEIPT_DATA")
                    .HasColumnType("text");

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");

                entity.HasOne(d => d.TransDetailKeyNavigation)
                    .WithOne(p => p.Receipt)
                    .HasForeignKey<Receipt>(d => d.TransDetailKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_Receipt_TransDetail");
            });

            modelBuilder.Entity<RedactedWords>(entity =>
            {
                entity.HasKey(e => e.RedactedWordsKey)
                    .HasName("PK_RedactedWords");

                entity.Property(e => e.RedactedWordsKey).HasColumnName("REDACTED_WORDS_KEY");

                entity.Property(e => e.Word)
                    .IsRequired()
                    .HasColumnName("WORD")
                    .HasColumnType("varchar(50)");
            });

            modelBuilder.Entity<ReferralMethod>(entity =>
            {
                entity.HasKey(e => e.ReferralMethodKey)
                    .HasName("PK_ReferralMethod");

                entity.HasIndex(e => e.ReferralCode)
                    .HasName("IX_ReferralMethod_REFERRAL_CODE")
                    .IsUnique();

                entity.Property(e => e.ReferralMethodKey).HasColumnName("REFERRAL_METHOD_KEY");

                entity.Property(e => e.CuroOrder).HasColumnName("CURO_ORDER");

                entity.Property(e => e.ReferralCode)
                    .IsRequired()
                    .HasColumnName("REFERRAL_CODE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.ReferralDesc)
                    .IsRequired()
                    .HasColumnName("REFERRAL_DESC")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.WebOrder).HasColumnName("WEB_ORDER");
            });

            modelBuilder.Entity<Region>(entity =>
            {
                entity.HasKey(e => e.RegionKey)
                    .HasName("PK_Region");

                entity.Property(e => e.RegionKey).HasColumnName("REGION_KEY");

                entity.Property(e => e.RegionManager)
                    .IsRequired()
                    .HasColumnName("REGION_MANAGER")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.RegionName)
                    .IsRequired()
                    .HasColumnName("REGION_NAME")
                    .HasColumnType("varchar(50)");
            });

            modelBuilder.Entity<Rels>(entity =>
            {
                entity.HasKey(e => e.RelCode)
                    .HasName("PK_RELS");

                entity.ToTable("RELS");

                entity.Property(e => e.RelCode)
                    .HasColumnType("char(1)")
                    .HasDefaultValueSql("'0'");

                entity.Property(e => e.RelDesc).HasColumnType("varchar(50)");

                entity.Property(e => e.RelsKey)
                    .HasColumnName("RELS_KEY")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<RemovedReason>(entity =>
            {
                entity.HasKey(e => e.RemovedReasonKey)
                    .HasName("PK_RemovedReason");

                entity.Property(e => e.RemovedReasonKey).HasColumnName("REMOVED_REASON_KEY");

                entity.Property(e => e.Reason)
                    .IsRequired()
                    .HasColumnName("REASON")
                    .HasColumnType("varchar(50)");
            });

            modelBuilder.Entity<RepoCaseHistory>(entity =>
            {
                entity.HasKey(e => e.RepoCaseHistoryKey)
                    .HasName("PK_RepoCaseHistory");

                entity.Property(e => e.RepoCaseHistoryKey).HasColumnName("REPO_CASE_HISTORY_KEY");

                entity.Property(e => e.CollectionNoteKey).HasColumnName("COLLECTION_NOTE_KEY");

                entity.Property(e => e.PreviousRepoCaseNum)
                    .IsRequired()
                    .HasColumnName("PREVIOUS_REPO_CASE_NUM")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.RisreptKey).HasColumnName("RISREPT_KEY");

                entity.Property(e => e.TitleloanKey).HasColumnName("TITLELOAN_KEY");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasColumnName("UPDATED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("UPDATED_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedRepoCaseNum)
                    .IsRequired()
                    .HasColumnName("UPDATED_REPO_CASE_NUM")
                    .HasColumnType("varchar(20)");

                entity.HasOne(d => d.CollectionNoteKeyNavigation)
                    .WithMany(p => p.RepoCaseHistory)
                    .HasForeignKey(d => d.CollectionNoteKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_RepoCaseHistory_CollectionNote");

                entity.HasOne(d => d.RisreptKeyNavigation)
                    .WithMany(p => p.RepoCaseHistory)
                    .HasForeignKey(d => d.RisreptKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_RepoCaseHistory_RISREPT");

                entity.HasOne(d => d.TitleloanKeyNavigation)
                    .WithMany(p => p.RepoCaseHistory)
                    .HasForeignKey(d => d.TitleloanKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_RepoCaseHistory_TitleLoan");
            });

            modelBuilder.Entity<ReturnCheckDetail>(entity =>
            {
                entity.HasKey(e => e.ReturnCheckDetailKey)
                    .HasName("PK_ReturnCheckDetail");

                entity.Property(e => e.ReturnCheckDetailKey).HasColumnName("RETURN_CHECK_DETAIL_KEY");

                entity.Property(e => e.AcctNo)
                    .IsRequired()
                    .HasColumnName("ACCT_NO")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.BankId)
                    .IsRequired()
                    .HasColumnName("BANK_ID")
                    .HasColumnType("varchar(9)");

                entity.Property(e => e.ChargebackAmt)
                    .HasColumnName("CHARGEBACK_AMT")
                    .HasColumnType("decimal");

                entity.Property(e => e.CurrencyKey).HasColumnName("CURRENCY_KEY");

                entity.Property(e => e.CustomerName)
                    .IsRequired()
                    .HasColumnName("CUSTOMER_NAME")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.CustomerNumber)
                    .HasColumnName("CUSTOMER_NUMBER")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.OriginalDepositDate)
                    .HasColumnName("ORIGINAL_DEPOSIT_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.ParsedLocation)
                    .HasColumnName("PARSED_LOCATION")
                    .HasColumnType("varchar(12)");

                entity.Property(e => e.ReturnCheckFileKey).HasColumnName("RETURN_CHECK_FILE_KEY");

                entity.Property(e => e.ReturnReasonCode)
                    .IsRequired()
                    .HasColumnName("RETURN_REASON_CODE")
                    .HasColumnType("char(3)");

                entity.Property(e => e.SequenceNumber)
                    .IsRequired()
                    .HasColumnName("SEQUENCE_NUMBER")
                    .HasColumnType("varchar(10)");

                entity.HasOne(d => d.ReturnCheckFileKeyNavigation)
                    .WithMany(p => p.ReturnCheckDetail)
                    .HasForeignKey(d => d.ReturnCheckFileKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_ReturnCheckDetail_ReturnCheckFile");
            });

            modelBuilder.Entity<ReturnCheckFile>(entity =>
            {
                entity.HasKey(e => e.ReturnCheckFileKey)
                    .HasName("PK_ReturnCheckFile");

                entity.Property(e => e.ReturnCheckFileKey).HasColumnName("RETURN_CHECK_FILE_KEY");

                entity.Property(e => e.CurrencyKey).HasColumnName("CURRENCY_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.FileCreationDate)
                    .HasColumnName("FILE_CREATION_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.FileCreationNumber).HasColumnName("FILE_CREATION_NUMBER");

                entity.Property(e => e.TotalChargebacks)
                    .HasColumnName("TOTAL_CHARGEBACKS")
                    .HasColumnType("decimal");

                entity.Property(e => e.TotalRecords).HasColumnName("TOTAL_RECORDS");
            });

            modelBuilder.Entity<ReturnCheckMatch>(entity =>
            {
                entity.HasKey(e => e.ReturnCheckMatchKey)
                    .HasName("PK_ReturnCheckMatch");

                entity.Property(e => e.ReturnCheckMatchKey).HasColumnName("RETURN_CHECK_MATCH_KEY");

                entity.Property(e => e.CashedCheckKey).HasColumnName("CASHED_CHECK_KEY");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.ReturnCheckDetailKey).HasColumnName("RETURN_CHECK_DETAIL_KEY");

                entity.HasOne(d => d.ReturnCheckDetailKeyNavigation)
                    .WithMany(p => p.ReturnCheckMatch)
                    .HasForeignKey(d => d.ReturnCheckDetailKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_ReturnCheckMatch_ReturnCheckDetail");
            });

            modelBuilder.Entity<RiBalanceHistory>(entity =>
            {
                entity.HasKey(e => e.RiBalanceHistoryKey)
                    .HasName("PK_RiBalanceHistory");

                entity.HasIndex(e => e.RisreptKey)
                    .HasName("IX_RiBalanceHistory_RISREPT_KEY");

                entity.HasIndex(e => new { e.RisreptKey, e.DateEntered })
                    .HasName("IX_RiBalanceHistory_RISREPT_KEY_DATE_ENTERED");

                entity.Property(e => e.RiBalanceHistoryKey).HasColumnName("RI_BALANCE_HISTORY_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RiBalance)
                    .HasColumnName("RI_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.RisreptKey).HasColumnName("RISREPT_KEY");

                entity.HasOne(d => d.RisreptKeyNavigation)
                    .WithMany(p => p.RiBalanceHistory)
                    .HasForeignKey(d => d.RisreptKey)
                    .HasConstraintName("FK_RiBalanceHistory_RisRept");
            });

            modelBuilder.Entity<RiUrgentNote>(entity =>
            {
                entity.HasKey(e => e.RiUrgentNoteKey)
                    .HasName("PK_RiUrgentNote");

                entity.Property(e => e.RiUrgentNoteKey).HasColumnName("RI_URGENT_NOTE_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("date");

                entity.Property(e => e.IsActive).HasColumnName("IS_ACTIVE");

                entity.Property(e => e.TellerIdKey).HasColumnName("TELLER_ID_KEY");

                entity.Property(e => e.UrgentNoteText)
                    .IsRequired()
                    .HasColumnName("URGENT_NOTE_TEXT")
                    .HasColumnType("varchar(max)");

                entity.HasOne(d => d.TellerIdKeyNavigation)
                    .WithMany(p => p.RiUrgentNote)
                    .HasForeignKey(d => d.TellerIdKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_RiUrgentNote_TellerId");
            });

            modelBuilder.Entity<RiagingHistory>(entity =>
            {
                entity.HasKey(e => e.RiAgingHistoryKey)
                    .HasName("PK_RiAgingHistory");

                entity.ToTable("RIAgingHistory");

                entity.HasIndex(e => new { e.CustomerKey, e.LoanKey })
                    .HasName("IX_RiAgingHistory_CustomerKeyLoanKey");

                entity.HasIndex(e => new { e.EventType, e.LoanKey })
                    .HasName("IX_RIAgingHistory_EVENT_TYPE_LOAN_KEY");

                entity.HasIndex(e => new { e.RisreptKey, e.DateEntered })
                    .HasName("IX_RiAgingHistory_RisreptKeyDateEntered");

                entity.Property(e => e.RiAgingHistoryKey).HasColumnName("RI_AGING_HISTORY_KEY");

                entity.Property(e => e.CollStrategy).HasColumnName("COLL_STRATEGY");

                entity.Property(e => e.CustEventNum)
                    .HasColumnName("CUST_EVENT_NUM")
                    .HasComputedColumnSql("[dbo].[FN_CALC_RI_EVENT_COUNT]([CUSTOMER_KEY],'C',[EVENT_TYPE])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EventDate)
                    .HasColumnName("EVENT_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EventType).HasColumnName("EVENT_TYPE");

                entity.Property(e => e.IsPayoff).HasColumnName("IS_PAYOFF");

                entity.Property(e => e.LoanEventNum)
                    .HasColumnName("LOAN_EVENT_NUM")
                    .HasComputedColumnSql("[dbo].[FN_CALC_RI_EVENT_COUNT]([LOAN_KEY],'L',[EVENT_TYPE])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.LoanPrincAmt)
                    .HasColumnName("LOAN_PRINC_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanpaymentKey).HasColumnName("LOANPAYMENT_KEY");

                entity.Property(e => e.MinPaymentNeeded)
                    .HasColumnName("MIN_PAYMENT_NEEDED")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PaidAmt)
                    .HasColumnName("PAID_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PaymentMethod).HasColumnName("PAYMENT_METHOD");

                entity.Property(e => e.RiBalance)
                    .HasColumnName("RI_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.RiskAssessment).HasColumnName("RISK_ASSESSMENT");

                entity.Property(e => e.RisreptKey).HasColumnName("RISREPT_KEY");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.VoluntaryPtp).HasColumnName("VOLUNTARY_PTP");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.RiagingHistory)
                    .HasForeignKey(d => d.CustomerKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_RiAgingHistory_Customer");

                entity.HasOne(d => d.LoanKeyNavigation)
                    .WithMany(p => p.RiagingHistory)
                    .HasForeignKey(d => d.LoanKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_RiAgingHistory_Loan");

                entity.HasOne(d => d.RisreptKeyNavigation)
                    .WithMany(p => p.RiagingHistory)
                    .HasForeignKey(d => d.RisreptKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_RiAgingHistory_Risrept");

                entity.HasOne(d => d.TellerNavigation)
                    .WithMany(p => p.RiagingHistory)
                    .HasPrincipalKey(p => p.Teller)
                    .HasForeignKey(d => d.Teller)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_RiAgingHistory_Tellerid");
            });

            modelBuilder.Entity<RiccAutoRoll>(entity =>
            {
                entity.HasKey(e => e.RiccAutoRollKey)
                    .HasName("PK_RiccAutoRoll");

                entity.HasIndex(e => new { e.DateEntered, e.OrigLoanKey, e.NewLoanKey, e.RisreptKey })
                    .HasName("IX_RiccAutoRoll_RisreptKey");

                entity.Property(e => e.RiccAutoRollKey).HasColumnName("RICC_AUTO_ROLL_KEY");

                entity.Property(e => e.CollectedAmt)
                    .HasColumnName("COLLECTED_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("date");

                entity.Property(e => e.EmailSent)
                    .HasColumnName("EMAIL_SENT")
                    .HasColumnType("date");

                entity.Property(e => e.FeeAmt)
                    .HasColumnName("FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LetterSent)
                    .HasColumnName("LETTER_SENT")
                    .HasColumnType("date");

                entity.Property(e => e.NewLoanKey).HasColumnName("NEW_LOAN_KEY");

                entity.Property(e => e.OrigLoanKey).HasColumnName("ORIG_LOAN_KEY");

                entity.Property(e => e.RisreptKey).HasColumnName("RISREPT_KEY");

                entity.Property(e => e.SurchargeAmt)
                    .HasColumnName("SURCHARGE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.ZeroLoanKey).HasColumnName("ZERO_LOAN_KEY");

                entity.HasOne(d => d.NewLoanKeyNavigation)
                    .WithMany(p => p.RiccAutoRollNewLoanKeyNavigation)
                    .HasForeignKey(d => d.NewLoanKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_RiccAutoRoll_Loan2");

                entity.HasOne(d => d.OrigLoanKeyNavigation)
                    .WithMany(p => p.RiccAutoRollOrigLoanKeyNavigation)
                    .HasForeignKey(d => d.OrigLoanKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_RiccAutoRoll_Loan1");

                entity.HasOne(d => d.RisreptKeyNavigation)
                    .WithMany(p => p.RiccAutoRoll)
                    .HasForeignKey(d => d.RisreptKey)
                    .HasConstraintName("FK_RiccAutoRoll_Risrept");
            });

            modelBuilder.Entity<RiccHold>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AppErrCode)
                    .IsRequired()
                    .HasColumnName("APP_ERR_CODE")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.Approved).HasColumnName("APPROVED");

                entity.Property(e => e.AutoRoll).HasColumnName("AUTO_ROLL");

                entity.Property(e => e.BillingAddress)
                    .IsRequired()
                    .HasColumnName("BILLING_ADDRESS")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.BillingCity)
                    .IsRequired()
                    .HasColumnName("BILLING_CITY")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.BillingState)
                    .IsRequired()
                    .HasColumnName("BILLING_STATE")
                    .HasColumnType("char(2)");

                entity.Property(e => e.BillingZipcode)
                    .IsRequired()
                    .HasColumnName("BILLING_ZIPCODE")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.CardBrand).HasColumnName("CARD_BRAND");

                entity.Property(e => e.CardType).HasColumnName("CARD_TYPE");

                entity.Property(e => e.Cardnum)
                    .HasColumnName("CARDNUM")
                    .HasColumnType("varchar(19)");

                entity.Property(e => e.CashedCheckKey).HasColumnName("CASHED_CHECK_KEY");

                entity.Property(e => e.CcardTransKey).HasColumnName("CCARD_TRANS_KEY");

                entity.Property(e => e.CreditcardKey).HasColumnName("CREDITCARD_KEY");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.Cvv)
                    .IsRequired()
                    .HasColumnName("CVV")
                    .HasColumnType("varchar(4)");

                entity.Property(e => e.Cvvinvalid).HasColumnName("CVVINVALID");

                entity.Property(e => e.Date)
                    .HasColumnName("DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DepositMethod)
                    .IsRequired()
                    .HasColumnName("DEPOSIT_METHOD")
                    .HasColumnType("char(1)");

                entity.Property(e => e.Dupe).HasColumnName("DUPE");

                entity.Property(e => e.Expired).HasColumnName("EXPIRED");

                entity.Property(e => e.Expmonth).HasColumnName("EXPMONTH");

                entity.Property(e => e.Expyear).HasColumnName("EXPYEAR");

                entity.Property(e => e.FeeAmt)
                    .HasColumnName("FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.IsAdAstra).HasColumnName("IS_AD_ASTRA");

                entity.Property(e => e.IssuerKey).HasColumnName("ISSUER_KEY");

                entity.Property(e => e.LienHolderKey).HasColumnName("LIEN_HOLDER_KEY");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.LoanType)
                    .IsRequired()
                    .HasColumnName("LOAN_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.Nameoncard)
                    .IsRequired()
                    .HasColumnName("NAMEONCARD")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.OptplusCardDetailKey).HasColumnName("OPTPLUS_CARD_DETAIL_KEY");

                entity.Property(e => e.PinlessEligible).HasColumnName("PINLESS_ELIGIBLE");

                entity.Property(e => e.Posted).HasColumnName("POSTED");

                entity.Property(e => e.Processed).HasColumnName("PROCESSED");

                entity.Property(e => e.ProductType)
                    .IsRequired()
                    .HasColumnName("PRODUCT_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.PtpDetailKey).HasColumnName("PTP_DETAIL_KEY");

                entity.Property(e => e.PtpHeaderKey).HasColumnName("PTP_HEADER_KEY");

                entity.Property(e => e.Reference)
                    .HasColumnName("REFERENCE")
                    .HasColumnType("varchar(43)");

                entity.Property(e => e.RiBalance)
                    .HasColumnName("RI_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Riage).HasColumnName("riage");

                entity.Property(e => e.RisAuditId).HasColumnName("RIS_AUDIT_ID");

                entity.Property(e => e.RisreptKey).HasColumnName("RISREPT_KEY");

                entity.Property(e => e.RolloverNum).HasColumnName("ROLLOVER_NUM");

                entity.Property(e => e.Selected).HasColumnName("SELECTED");

                entity.Property(e => e.Surchg)
                    .HasColumnName("SURCHG")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.Token)
                    .IsRequired()
                    .HasColumnName("TOKEN")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.Void).HasColumnName("VOID");
            });

            modelBuilder.Entity<RiccPayments>(entity =>
            {
                entity.HasKey(e => e.RiccPaymentsKey)
                    .HasName("PK_RiccPayments");

                entity.Property(e => e.RiccPaymentsKey).HasColumnName("RICC_PAYMENTS_KEY");

                entity.Property(e => e.Amount)
                    .HasColumnName("AMOUNT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.OptplusCardDetailKey).HasColumnName("OPTPLUS_CARD_DETAIL_KEY");
            });

            modelBuilder.Entity<RiccUpdates>(entity =>
            {
                entity.HasKey(e => e.RiccUpdatesKey)
                    .HasName("PK_RiccUpdates");

                entity.Property(e => e.RiccUpdatesKey).HasColumnName("RICC_UPDATES_KEY");

                entity.Property(e => e.Processed).HasColumnName("PROCESSED");

                entity.Property(e => e.Sql)
                    .IsRequired()
                    .HasColumnName("SQL")
                    .HasColumnType("varchar(2000)");

                entity.Property(e => e.UpdateTable)
                    .HasColumnName("UPDATE_TABLE")
                    .HasColumnType("varchar(30)");
            });

            modelBuilder.Entity<Riccconfig>(entity =>
            {
                entity.HasKey(e => e.RiccConfigKey)
                    .HasName("PK_RICCConfig");

                entity.ToTable("RICCConfig");

                entity.Property(e => e.RiccConfigKey).HasColumnName("RICC_CONFIG_KEY");

                entity.Property(e => e.AgeFrom).HasColumnName("AGE_FROM");

                entity.Property(e => e.AgeTo).HasColumnName("AGE_TO");

                entity.Property(e => e.AuditCategories)
                    .IsRequired()
                    .HasColumnName("AUDIT_CATEGORIES")
                    .HasColumnType("varchar(300)");

                entity.Property(e => e.Balance)
                    .HasColumnName("BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.IncludeDebit).HasColumnName("INCLUDE_DEBIT");

                entity.Property(e => e.IncludeNetspend).HasColumnName("INCLUDE_NETSPEND");

                entity.Property(e => e.Locations)
                    .IsRequired()
                    .HasColumnName("LOCATIONS")
                    .HasColumnType("varchar(1000)");

                entity.Property(e => e.NumberThreads).HasColumnName("NUMBER_THREADS");

                entity.Property(e => e.ProcessMpay).HasColumnName("PROCESS_MPAY");

                entity.Property(e => e.ProcessOend).HasColumnName("PROCESS_OEND");

                entity.Property(e => e.ProcessSpay).HasColumnName("PROCESS_SPAY");
            });

            modelBuilder.Entity<RiptppaymentPlanConfig>(entity =>
            {
                entity.HasKey(e => e.PtpConfigKey)
                    .HasName("PK_PTPConfigKey");

                entity.ToTable("RIPTPPaymentPlanConfig");

                entity.Property(e => e.PtpConfigKey).HasColumnName("PTP_CONFIG_KEY");

                entity.Property(e => e.BrokenPtpFee)
                    .HasColumnName("BROKEN_PTP_FEE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.ExtendedPaymentPlan).HasColumnName("EXTENDED_PAYMENT_PLAN");

                entity.Property(e => e.IsInternet).HasColumnName("IS_INTERNET");

                entity.Property(e => e.IsLoanInactive).HasColumnName("IS_LOAN_INACTIVE");

                entity.Property(e => e.IsLoanMatured).HasColumnName("IS_LOAN_MATURED");

                entity.Property(e => e.IsLoanNotInactive).HasColumnName("IS_LOAN_NOT_INACTIVE");

                entity.Property(e => e.IsLoanNotMatured).HasColumnName("IS_LOAN_NOT_MATURED");

                entity.Property(e => e.PtpAllowWaiveFee).HasColumnName("PTP_ALLOW_WAIVE_FEE");

                entity.Property(e => e.PtpAuditCategory).HasColumnName("PTP_AUDIT_CATEGORY");

                entity.Property(e => e.PtpDefDaysBetweenPmts).HasColumnName("PTP_DEF_DAYS_BETWEEN_PMTS");

                entity.Property(e => e.PtpDefaultPaymentNumber).HasColumnName("PTP_DEFAULT_PAYMENT_NUMBER");

                entity.Property(e => e.PtpDmCrmApprovalReq).HasColumnName("PTP_DM_CRM_APPROVAL_REQ");

                entity.Property(e => e.PtpFirstPaymentPercent).HasColumnName("PTP_FIRST_PAYMENT_PERCENT");

                entity.Property(e => e.PtpGraceDays).HasColumnName("PTP_GRACE_DAYS");

                entity.Property(e => e.PtpLocations)
                    .HasColumnName("PTP_LOCATIONS")
                    .HasColumnType("varchar(1000)");

                entity.Property(e => e.PtpMaxDaysExtDays).HasColumnName("PTP_MAX_DAYS_EXT_DAYS");

                entity.Property(e => e.PtpMaxNumberPayments).HasColumnName("PTP_MAX_NUMBER_PAYMENTS");

                entity.Property(e => e.PtpMaxNumberPlanDays).HasColumnName("PTP_MAX_NUMBER_PLAN_DAYS");

                entity.Property(e => e.PtpMinNumberPayments).HasColumnName("PTP_MIN_NUMBER_PAYMENTS");

                entity.Property(e => e.PtpModApprovalReq).HasColumnName("PTP_MOD_APPROVAL_REQ");

                entity.Property(e => e.PtpPaymentMethods)
                    .IsRequired()
                    .HasColumnName("PTP_PAYMENT_METHODS")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.PtpPlTypes)
                    .IsRequired()
                    .HasColumnName("PTP_PL_TYPES")
                    .HasColumnType("varchar(36)");

                entity.Property(e => e.PtpPlanName)
                    .IsRequired()
                    .HasColumnName("PTP_PLAN_NAME")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.RequireSignature).HasColumnName("REQUIRE_SIGNATURE");

                entity.Property(e => e.Security)
                    .HasColumnName("SECURITY")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.StateSpecificPaymentPlan).HasColumnName("STATE_SPECIFIC_PAYMENT_PLAN");
            });

            modelBuilder.Entity<Ris>(entity =>
            {
                entity.ToTable("RIS");

                entity.HasIndex(e => e.Date)
                    .HasName("IX_date");

                entity.HasIndex(e => e.Location)
                    .HasName("IX_location");

                entity.HasIndex(e => e.RisAuditId)
                    .HasName("IX_ris_audit_id");

                entity.HasIndex(e => e.RisTaskId)
                    .HasName("IX_ris_task_id");

                entity.HasIndex(e => e.RisreptKey)
                    .HasName("IX_risrept_key");

                entity.HasIndex(e => e.Tlr)
                    .HasName("IX_tlr");

                entity.HasIndex(e => e.TransDetailKey)
                    .HasName("IX_Ris_TRANS_DETAIL_KEY");

                entity.Property(e => e.RisId).HasColumnName("RIS_Id");

                entity.Property(e => e.Amount)
                    .HasColumnName("AMOUNT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Btime)
                    .HasColumnName("btime")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Btime2)
                    .HasColumnName("BTIME2")
                    .HasColumnType("datetime");

                entity.Property(e => e.Date)
                    .HasColumnName("DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DosMigratedId)
                    .HasColumnName("DOS_MIGRATED_ID")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.DosRefno).HasColumnName("dos_refno");

                entity.Property(e => e.Followup)
                    .HasColumnName("FOLLOWUP")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.GlAcct).HasColumnName("GL_ACCT");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.Notes)
                    .HasColumnName("NOTES")
                    .HasColumnType("varchar(500)");

                entity.Property(e => e.Prepay)
                    .HasColumnName("prepay")
                    .HasColumnType("LOGICAL");

                entity.Property(e => e.Ptyp).HasColumnName("PTYP");

                entity.Property(e => e.ReverseRisId).HasColumnName("reverse_ris_id");

                entity.Property(e => e.RisAuditId).HasColumnName("Ris_Audit_ID");

                entity.Property(e => e.RisTaskId).HasColumnName("Ris_Task_ID");

                entity.Property(e => e.RisreptKey)
                    .HasColumnName("risrept_key")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Tlr)
                    .IsRequired()
                    .HasColumnName("TLR")
                    .HasColumnType("char(3)");

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");

                entity.Property(e => e.Xtime)
                    .HasColumnName("xtime")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Ztime)
                    .HasColumnName("ztime")
                    .HasColumnType("smalldatetime");

                entity.HasOne(d => d.RisAudit)
                    .WithMany(p => p.Ris)
                    .HasForeignKey(d => d.RisAuditId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_Ris_RisAudit");

                entity.HasOne(d => d.RisTask)
                    .WithMany(p => p.Ris)
                    .HasForeignKey(d => d.RisTaskId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_Ris_RisTask");

                entity.HasOne(d => d.RisreptKeyNavigation)
                    .WithMany(p => p.Ris)
                    .HasForeignKey(d => d.RisreptKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_Ris_RisRept");

                entity.HasOne(d => d.TlrNavigation)
                    .WithMany(p => p.Ris)
                    .HasPrincipalKey(p => p.Teller)
                    .HasForeignKey(d => d.Tlr)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_Ris_Tellerid");
            });

            modelBuilder.Entity<RisTask>(entity =>
            {
                entity.Property(e => e.RisTaskId).HasColumnName("RIS_TASK_ID");

                entity.Property(e => e.Desc)
                    .IsRequired()
                    .HasColumnName("DESC")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Displayed)
                    .HasColumnName("DISPLAYED")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Short)
                    .IsRequired()
                    .HasColumnName("SHORT")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.Task)
                    .IsRequired()
                    .HasColumnName("TASK")
                    .HasColumnType("char(1)");
            });

            modelBuilder.Entity<Risaudit>(entity =>
            {
                entity.ToTable("RISAUDIT");

                entity.HasIndex(e => e.Audit)
                    .HasName("UNIQUE_RISAUDIT_AUDIT")
                    .IsUnique();

                entity.HasIndex(e => new { e.RisAuditId, e.IsAdAstra })
                    .HasName("IX_RISAUDIT_RISAUDITID");

                entity.Property(e => e.RisAuditId).HasColumnName("RIS_Audit_Id");

                entity.Property(e => e.Audit)
                    .IsRequired()
                    .HasColumnName("AUDIT")
                    .HasColumnType("varchar(2)");

                entity.Property(e => e.BlockEmails).HasColumnName("BLOCK_EMAILS");

                entity.Property(e => e.BlockStatements).HasColumnName("BLOCK_STATEMENTS");

                entity.Property(e => e.Desc)
                    .HasColumnName("DESC")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.DialerExclude).HasColumnName("DIALER_EXCLUDE");

                entity.Property(e => e.Displayed).HasDefaultValueSql("1");

                entity.Property(e => e.IsAdAstra).HasColumnName("IS_AD_ASTRA");

                entity.Property(e => e.IsEligibleForRepo)
                    .HasColumnName("IS_ELIGIBLE_FOR_REPO")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.IsInLegalStatus).HasColumnName("IS_IN_LEGAL_STATUS");

                entity.Property(e => e.IsPtp).HasColumnName("IS_PTP");

                entity.Property(e => e.Repossession)
                    .HasColumnName("REPOSSESSION")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.RisAuditKey)
                    .HasColumnName("RIS_AUDIT_KEY")
                    .HasComputedColumnSql("[RIS_AUDIT_ID]")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.Short)
                    .HasColumnName("SHORT")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.SuspendInterest).HasColumnName("SUSPEND_INTEREST");
            });

            modelBuilder.Entity<Risrept>(entity =>
            {
                entity.HasKey(e => e.RisreptKey)
                    .HasName("PK_RISREPT");

                entity.ToTable("RISREPT");

                entity.HasIndex(e => e.CashedCheckKey)
                    .HasName("IX_RisRept_CASHED_CHECK_KEY");

                entity.HasIndex(e => e.CustomerKey)
                    .HasName("IX_RisRept_CUSTOMER_KEY");

                entity.HasIndex(e => e.Date)
                    .HasName("IX_date");

                entity.HasIndex(e => e.IssuerKey)
                    .HasName("IX_RisRept_ISSUER_KEY");

                entity.HasIndex(e => e.LoanKey)
                    .HasName("IX_RisRept_LOAN_KEY");

                entity.HasIndex(e => e.Location)
                    .HasName("IX_location");

                entity.HasIndex(e => e.RisAuditId)
                    .HasName("IX_ris_audit_id");

                entity.HasIndex(e => new { e.RisreptKey, e.Location })
                    .HasName("ix_Risrept_RisreptKey_Location");

                entity.HasIndex(e => new { e.Date, e.RiBalance, e.OptplusCardDetailKey })
                    .HasName("IX_RisRept_OPTPLUS_CARD_DETAIL_KEY");

                entity.HasIndex(e => new { e.Date, e.RisAuditId, e.RiBalance, e.LoanKey })
                    .HasName("IX_RisRept_DATE_INCLUDEd");

                entity.HasIndex(e => new { e.Followup, e.RiBalance, e.RisAuditId, e.RisreptKey })
                    .HasName("IX_RisRept_FOLLOWUP_RI_BALANCE_RIS_AUDIT_ID");

                entity.HasIndex(e => new { e.Pra, e.RisAuditId, e.Location, e.RisreptKey, e.CollectionAgencyKey, e.AssignmentNumber, e.RiBalance })
                    .HasName("IX_RisRept_ASSIGNMENT_NUMBER_RI_BALANCE");

                entity.HasIndex(e => new { e.CustomerKey, e.LastDcardAttemptDate, e.CashedCheckKey, e.OptplusCardDetailKey, e.Date, e.RisreptKey, e.LoanKey, e.RiBalance, e.RisAuditId })
                    .HasName("IX_RISREPT_Ris_Audit_ID_DATE_CUSTOMER_KEY_RISREPT_KEY_LOAN_KEY_RI_BALANCE");

                entity.HasIndex(e => new { e.CustomerKey, e.CashedCheckKey, e.OptplusCardDetailKey, e.RisreptKey, e.DoNotSendLetters, e.RiskAssessment, e.Date, e.LoanKey, e.RiBalance, e.RisAuditId })
                    .HasName("IX_RisRept_DO_NOT_SEND_LETTERS_RISK_ASSESSMENT_DATE_LOAN_KEY_RI_BALANCE_Ris_Audit_ID");

                entity.HasIndex(e => new { e.CustomerKey, e.RisreptKey, e.CashedCheckKey, e.OptplusCardDetailKey, e.DoNotSendLetters, e.RiskAssessment, e.Date, e.LoanKey, e.RiBalance, e.RisAuditId })
                    .HasName("IX_RisRept_DONOTSENDLETTERS");

                entity.HasIndex(e => new { e.CustomerKey, e.RisreptKey, e.CashedCheckKey, e.OptplusCardDetailKey, e.RisAuditId, e.DoNotSendLetters, e.RiskAssessment, e.Date, e.LoanKey, e.RiBalance })
                    .HasName("IX_RisRept_RIS_AUDIT_ID_DO_NOT_SEND_LETTERS");

                entity.HasIndex(e => new { e.Date, e.Amount, e.CashedCheckKey, e.Location, e.IssuerKey, e.RiBalance, e.Pra, e.RisAuditId, e.CustomerKey, e.LoanKey })
                    .HasName("IX_RisRept_COVERING");

                entity.HasIndex(e => new { e.CustomerKey, e.Date, e.Location, e.OptplusCardDetailKey, e.Amount, e.Followup, e.IssuerKey, e.RisreptKey, e.LoanKey, e.Pra, e.CashedCheckKey, e.RisAuditId, e.Reversed, e.RiBalance })
                    .HasName("IX_RisRept_RIS_AUDIT_ID_REVERSED_RI_BALANCE");

                entity.HasIndex(e => new { e.CashedCheckKey, e.ManualAchPtp, e.OptplusCardDetailKey, e.CustomerKey, e.IssuerKey, e.LoanKey, e.RiBalance, e.Pra, e.StopPayment, e.Date, e.Location, e.Followup, e.RisreptKey, e.ManualAchDate, e.RisAuditId })
                    .HasName("IX_RisRept_RISREPT_MANUAL_ACH_DATE_Ris_Audit_ID");

                entity.HasIndex(e => new { e.CustomerKey, e.Surchg, e.Followup, e.Date, e.Amount, e.Pra, e.DosRefno, e.IssuerKey, e.RisreptKey, e.LoanKey, e.Location, e.Reversed, e.RisAuditId, e.RiBalance, e.CashedCheckKey })
                    .HasName("IX_RisRept_SKT_1");

                entity.HasIndex(e => new { e.Date, e.LastCallDate, e.CustomerKey, e.IssuerKey, e.RisreptKey, e.LastCallHostCode, e.DoNotCallHome, e.DoNotCallWork, e.LoanKey, e.Pra, e.DoNotCallCell, e.Reversed, e.RisAuditId, e.Location, e.Followup, e.RiBalance, e.CashedCheckKey })
                    .HasName("IX_RisRept_SKT_2");

                entity.Property(e => e.RisreptKey).HasColumnName("RISREPT_KEY");

                entity.Property(e => e.AdAstraAssignedDate)
                    .HasColumnName("AD_ASTRA_ASSIGNED_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.Amount)
                    .HasColumnName("AMOUNT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.AssignmentNumber).HasColumnName("ASSIGNMENT_NUMBER");

                entity.Property(e => e.CashedCheckKey).HasColumnName("CASHED_CHECK_KEY");

                entity.Property(e => e.CollectionAgencyKey).HasColumnName("COLLECTION_AGENCY_KEY");

                entity.Property(e => e.CrTeller)
                    .IsRequired()
                    .HasColumnName("CR_TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.Date)
                    .HasColumnName("DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DoNotCallCell).HasColumnName("DO_NOT_CALL_CELL");

                entity.Property(e => e.DoNotCallHome).HasColumnName("DO_NOT_CALL_HOME");

                entity.Property(e => e.DoNotCallVerbalDnc).HasColumnName("DO_NOT_CALL_VERBAL_DNC");

                entity.Property(e => e.DoNotCallWork).HasColumnName("DO_NOT_CALL_WORK");

                entity.Property(e => e.DoNotSendLetters).HasColumnName("DO_NOT_SEND_LETTERS");

                entity.Property(e => e.DosMigratedId)
                    .HasColumnName("DOS_MIGRATED_ID")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.DosRefno).HasColumnName("DOS_REFNO");

                entity.Property(e => e.Followup)
                    .HasColumnName("FOLLOWUP")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IssuerKey).HasColumnName("ISSUER_KEY");

                entity.Property(e => e.KeepWithAgency).HasColumnName("KEEP_WITH_AGENCY");

                entity.Property(e => e.LastCallDate)
                    .HasColumnName("LAST_CALL_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.LastCallHostCode).HasColumnName("LAST_CALL_HOST_CODE");

                entity.Property(e => e.LastDcardAttemptDate)
                    .HasColumnName("LAST_DCARD_ATTEMPT_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.ManualAchAmount)
                    .HasColumnName("MANUAL_ACH_AMOUNT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.ManualAchDate)
                    .HasColumnName("MANUAL_ACH_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ManualAchPtp).HasColumnName("MANUAL_ACH_PTP");

                entity.Property(e => e.ManualTeller)
                    .HasColumnName("MANUAL_TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.OptplusCardDetailKey).HasColumnName("OPTPLUS_CARD_DETAIL_KEY");

                entity.Property(e => e.Pra).HasColumnName("PRA");

                entity.Property(e => e.ReasonForArrearsKey).HasColumnName("REASON_FOR_ARREARS_KEY");

                entity.Property(e => e.Reference)
                    .HasColumnName("REFERENCE")
                    .HasColumnType("varchar(43)")
                    .HasComputedColumnSql("[dbo].[FN_Calc_REFERENCE]([LOCATION],[PRA],[RISREPT_KEY])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.Reversed)
                    .HasColumnName("reversed")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.ReversedDate)
                    .HasColumnName("reversed_date")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RiBalance)
                    .HasColumnName("RI_BALANCE")
                    .HasColumnType("smallmoney")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.RiUrgentNoteKey)
                    .HasColumnName("RI_URGENT_NOTE_KEY")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.RisAuditId).HasColumnName("Ris_Audit_ID");

                entity.Property(e => e.RisTypeId).HasColumnName("ris_type_id");

                entity.Property(e => e.RiskAssessment).HasColumnName("RISK_ASSESSMENT");

                entity.Property(e => e.StopPayment)
                    .HasColumnName("STOP_PAYMENT")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Surchg)
                    .HasColumnName("SURCHG")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Tlr)
                    .IsRequired()
                    .HasColumnName("TLR")
                    .HasColumnType("char(3)")
                    .HasDefaultValueSql("''");

                entity.HasOne(d => d.CashedCheckKeyNavigation)
                    .WithMany(p => p.Risrept)
                    .HasForeignKey(d => d.CashedCheckKey)
                    .HasConstraintName("FK_RisRept_CashedCheck");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.Risrept)
                    .HasForeignKey(d => d.CustomerKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_RisRept_Customer");

                entity.HasOne(d => d.IssuerKeyNavigation)
                    .WithMany(p => p.Risrept)
                    .HasForeignKey(d => d.IssuerKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_RisRept_Issuer");

                entity.HasOne(d => d.LocationNavigation)
                    .WithMany(p => p.Risrept)
                    .HasForeignKey(d => d.Location)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_RisRept_Company");

                entity.HasOne(d => d.ManualTellerNavigation)
                    .WithMany(p => p.RisreptManualTellerNavigation)
                    .HasPrincipalKey(p => p.Teller)
                    .HasForeignKey(d => d.ManualTeller)
                    .HasConstraintName("FK_Risrept_mteller_Tellerid");

                entity.HasOne(d => d.OptplusCardDetailKeyNavigation)
                    .WithMany(p => p.Risrept)
                    .HasForeignKey(d => d.OptplusCardDetailKey)
                    .HasConstraintName("FK_RisRept_OptPlusCardKey");

                entity.HasOne(d => d.RisAudit)
                    .WithMany(p => p.Risrept)
                    .HasForeignKey(d => d.RisAuditId)
                    .HasConstraintName("FK_Risrept_RisAudit");

                entity.HasOne(d => d.RisType)
                    .WithMany(p => p.Risrept)
                    .HasForeignKey(d => d.RisTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_Risrept_Ristype");

                entity.HasOne(d => d.TlrNavigation)
                    .WithMany(p => p.RisreptTlrNavigation)
                    .HasPrincipalKey(p => p.Teller)
                    .HasForeignKey(d => d.Tlr)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_Risrept_Tellerid");
            });

            modelBuilder.Entity<Ristype>(entity =>
            {
                entity.ToTable("RISTYPE");

                entity.Property(e => e.RisTypeId).HasColumnName("RIS_Type_Id");

                entity.Property(e => e.Desc)
                    .HasColumnName("DESC")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.Short)
                    .HasColumnName("SHORT")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.Type)
                    .HasColumnName("TYPE")
                    .HasColumnType("varchar(1)");
            });

            modelBuilder.Entity<RolloverRequest>(entity =>
            {
                entity.HasKey(e => e.RolloverRequestKey)
                    .HasName("pk_RolloverRequest");

                entity.Property(e => e.RolloverRequestKey).HasColumnName("ROLLOVER_REQUEST_KEY");

                entity.Property(e => e.CcLastFour).HasColumnName("CC_LAST_FOUR");

                entity.Property(e => e.CreditCardKey).HasColumnName("CREDIT_CARD_KEY");

                entity.Property(e => e.DeferralReason)
                    .HasColumnName("DEFERRAL_REASON")
                    .HasColumnType("varchar(200)");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.EnteredDate)
                    .HasColumnName("ENTERED_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.HaveFinancialsChanged).HasColumnName("HAVE_FINANCIALS_CHANGED");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.NextPayDate)
                    .HasColumnName("NEXT_PAY_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.RequestSource).HasColumnName("REQUEST_SOURCE");

                entity.Property(e => e.RolloverRequestDeclineReasonKey).HasColumnName("ROLLOVER_REQUEST_DECLINE_REASON_KEY");

                entity.Property(e => e.RolloverRequestStatusKey).HasColumnName("ROLLOVER_REQUEST_STATUS_KEY");

                entity.Property(e => e.SmsInboundKey).HasColumnName("SMS_INBOUND_KEY");

                entity.Property(e => e.UpdatedBy)
                    .HasColumnName("UPDATED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("UPDATED_DATE")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.CreditCardKeyNavigation)
                    .WithMany(p => p.RolloverRequest)
                    .HasForeignKey(d => d.CreditCardKey)
                    .HasConstraintName("fk_RolloverRequest_CreditCard");

                entity.HasOne(d => d.LoanKeyNavigation)
                    .WithMany(p => p.RolloverRequest)
                    .HasForeignKey(d => d.LoanKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_RolloverRequest_Loan");

                entity.HasOne(d => d.RolloverRequestDeclineReasonKeyNavigation)
                    .WithMany(p => p.RolloverRequest)
                    .HasForeignKey(d => d.RolloverRequestDeclineReasonKey)
                    .HasConstraintName("fk_RolloverRequest_RolloverRequestDeclineReason");

                entity.HasOne(d => d.RolloverRequestStatusKeyNavigation)
                    .WithMany(p => p.RolloverRequest)
                    .HasForeignKey(d => d.RolloverRequestStatusKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_RolloverRequest_RolloverRequestStatus");

                entity.HasOne(d => d.SmsInboundKeyNavigation)
                    .WithMany(p => p.RolloverRequest)
                    .HasForeignKey(d => d.SmsInboundKey)
                    .HasConstraintName("fk_RolloverRequest_SMSInbound");
            });

            modelBuilder.Entity<RolloverRequestDeclineReason>(entity =>
            {
                entity.HasKey(e => e.RolloverRequestDeclineReasonKey)
                    .HasName("pk_RolloverRequestDeclineReason");

                entity.Property(e => e.RolloverRequestDeclineReasonKey).HasColumnName("ROLLOVER_REQUEST_DECLINE_REASON_KEY");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(200)");

                entity.Property(e => e.IsEnabled).HasColumnName("IS_ENABLED");
            });

            modelBuilder.Entity<RolloverRequestStatus>(entity =>
            {
                entity.HasKey(e => e.RolloverRequestStatusKey)
                    .HasName("pk_RolloverRequestStatus");

                entity.Property(e => e.RolloverRequestStatusKey).HasColumnName("ROLLOVER_REQUEST_STATUS_KEY");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.RolloverRequestStatusCode).HasColumnName("ROLLOVER_REQUEST_STATUS_CODE");
            });

            modelBuilder.Entity<RuleDef>(entity =>
            {
                entity.HasKey(e => e.RuleDefKey)
                    .HasName("PK_RuleDefKey");

                entity.HasIndex(e => e.Name)
                    .HasName("UX_NAME")
                    .IsUnique();

                entity.Property(e => e.RuleDefKey).HasColumnName("RULE_DEF_KEY");

                entity.Property(e => e.Content)
                    .IsRequired()
                    .HasColumnName("CONTENT")
                    .HasColumnType("varchar(max)");

                entity.Property(e => e.DateDeleted)
                    .HasColumnName("DATE_DELETED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DateUpdated)
                    .HasColumnName("DATE_UPDATED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DeletedBy)
                    .HasColumnName("DELETED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(200)");

                entity.Property(e => e.DisplayName)
                    .IsRequired()
                    .HasColumnName("DISPLAY_NAME")
                    .HasColumnType("varchar(200)");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.IsDeleted).HasColumnName("IS_DELETED");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.RuleDefTypeKey).HasColumnName("RULE_DEF_TYPE_KEY");

                entity.Property(e => e.UpdatedBy)
                    .HasColumnName("UPDATED_BY")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.RuleDefTypeKeyNavigation)
                    .WithMany(p => p.RuleDef)
                    .HasForeignKey(d => d.RuleDefTypeKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_RuleDef_RULE_DEF_TYPE_KEY");
            });

            modelBuilder.Entity<RuleDefEdit>(entity =>
            {
                entity.HasKey(e => e.RuleDefEditKey)
                    .HasName("PK_RuleDefEdit");

                entity.Property(e => e.RuleDefEditKey).HasColumnName("RULE_DEF_EDIT_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.FieldName)
                    .IsRequired()
                    .HasColumnName("FIELD_NAME")
                    .HasColumnType("varchar(128)");

                entity.Property(e => e.NewValue)
                    .HasColumnName("NEW_VALUE")
                    .HasColumnType("varchar(max)");

                entity.Property(e => e.OldValue)
                    .HasColumnName("OLD_VALUE")
                    .HasColumnType("varchar(max)");

                entity.Property(e => e.RuleDefKey).HasColumnName("RULE_DEF_KEY");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.RuleDefKeyNavigation)
                    .WithMany(p => p.RuleDefEdit)
                    .HasForeignKey(d => d.RuleDefKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_RuleDefEdit_RULE_DEF_KEY");
            });

            modelBuilder.Entity<RuleDefSet>(entity =>
            {
                entity.HasKey(e => e.RuleDefSetKey)
                    .HasName("PK_RuleDefSetKey");

                entity.HasIndex(e => e.Name)
                    .HasName("UX_NAME")
                    .IsUnique();

                entity.Property(e => e.RuleDefSetKey).HasColumnName("RULE_DEF_SET_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DateUpdated)
                    .HasColumnName("DATE_UPDATED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(200)");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.RuleDefTypeKey).HasColumnName("RULE_DEF_TYPE_KEY");

                entity.Property(e => e.UpdatedBy)
                    .HasColumnName("UPDATED_BY")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.RuleDefTypeKeyNavigation)
                    .WithMany(p => p.RuleDefSet)
                    .HasForeignKey(d => d.RuleDefTypeKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_RuleDefSet_RULE_DEF_TYPE_KEY");
            });

            modelBuilder.Entity<RuleDefSetDetail>(entity =>
            {
                entity.HasKey(e => e.RuleDefSetDetailKey)
                    .HasName("PK_RuleDefSetDetailKey");

                entity.HasIndex(e => new { e.RuleDefSetKey, e.RuleDefKey })
                    .HasName("UX_RULE_DEF_SET_KEY_RULE_DEF_KEY")
                    .IsUnique();

                entity.Property(e => e.RuleDefSetDetailKey).HasColumnName("RULE_DEF_SET_DETAIL_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.Priority).HasColumnName("PRIORITY");

                entity.Property(e => e.RuleDefKey).HasColumnName("RULE_DEF_KEY");

                entity.Property(e => e.RuleDefSetKey).HasColumnName("RULE_DEF_SET_KEY");

                entity.HasOne(d => d.RuleDefKeyNavigation)
                    .WithMany(p => p.RuleDefSetDetail)
                    .HasForeignKey(d => d.RuleDefKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_RuleDefSetDetail_RULE_DEF_KEY");

                entity.HasOne(d => d.RuleDefSetKeyNavigation)
                    .WithMany(p => p.RuleDefSetDetail)
                    .HasForeignKey(d => d.RuleDefSetKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_RuleDefSetDetail_RULE_DEF_SET_KEY");
            });

            modelBuilder.Entity<RuleDefSetDetailEdit>(entity =>
            {
                entity.HasKey(e => e.RuleDefSetDetailEditKey)
                    .HasName("PK_RuleDefSetDetailEdit");

                entity.Property(e => e.RuleDefSetDetailEditKey).HasColumnName("RULE_DEF_SET_DETAIL_EDIT_KEY");

                entity.Property(e => e.ActionType)
                    .IsRequired()
                    .HasColumnName("ACTION_TYPE")
                    .HasColumnType("varchar(1)");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.FieldName)
                    .IsRequired()
                    .HasColumnName("FIELD_NAME")
                    .HasColumnType("varchar(128)");

                entity.Property(e => e.NewValue)
                    .HasColumnName("NEW_VALUE")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.OldValue)
                    .HasColumnName("OLD_VALUE")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.RuleDefSetKey).HasColumnName("RULE_DEF_SET_KEY");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.RuleDefSetKeyNavigation)
                    .WithMany(p => p.RuleDefSetDetailEdit)
                    .HasForeignKey(d => d.RuleDefSetKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_RuleDefSetDetailEdit_RULE_DEF_SET_KEY");
            });

            modelBuilder.Entity<RuleDefType>(entity =>
            {
                entity.HasKey(e => e.RuleDefTypeKey)
                    .HasName("PK_RuleDefTypeKey");

                entity.HasIndex(e => e.Name)
                    .HasName("UX_NAME")
                    .IsUnique();

                entity.Property(e => e.RuleDefTypeKey)
                    .HasColumnName("RULE_DEF_TYPE_KEY")
                    .ValueGeneratedNever();

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DateUpdated)
                    .HasColumnName("DATE_UPDATED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(200)");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.UpdatedBy)
                    .HasColumnName("UPDATED_BY")
                    .HasColumnType("char(3)");
            });

            modelBuilder.Entity<ScannedDocument>(entity =>
            {
                entity.HasKey(e => e.ScannedDocumentKey)
                    .HasName("PK_ScannedDocument");

                entity.HasIndex(e => e.DocumentSystemKey)
                    .HasName("IX_ScannedDocument_DOCUMENT_SYSTEM_KEY");

                entity.HasIndex(e => new { e.ScannedDocumentKey, e.DocumentSystemScanDate, e.DocumentSystemKey })
                    .HasName("IX_ScannedDocument_DOCUMENT_SYSTEM_SCAN_DATE");

                entity.HasIndex(e => new { e.TransDetailKey, e.LoanDocKey, e.DocumentSystemKey })
                    .HasName("IX_ScannedDocument_TRANS_DETAIL_KEY");

                entity.Property(e => e.ScannedDocumentKey).HasColumnName("SCANNED_DOCUMENT_KEY");

                entity.Property(e => e.DocumentSystemKey).HasColumnName("DOCUMENT_SYSTEM_KEY");

                entity.Property(e => e.DocumentSystemScanDate)
                    .HasColumnName("DOCUMENT_SYSTEM_SCAN_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.LoanDocKey).HasColumnName("LOAN_DOC_KEY");

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");

                entity.HasOne(d => d.LoanDocKeyNavigation)
                    .WithMany(p => p.ScannedDocument)
                    .HasForeignKey(d => d.LoanDocKey)
                    .HasConstraintName("FK_ScannedDocument_LoanDoc");

                entity.HasOne(d => d.TransDetailKeyNavigation)
                    .WithMany(p => p.ScannedDocument)
                    .HasForeignKey(d => d.TransDetailKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_ScannedDocument_TransDetail");
            });

            modelBuilder.Entity<ScannedDocumentOverride>(entity =>
            {
                entity.HasKey(e => e.ScannedDocumentOverrideKey)
                    .HasName("PK_ScannedDocumentOverride");

                entity.Property(e => e.ScannedDocumentOverrideKey).HasColumnName("SCANNED_DOCUMENT_OVERRIDE_KEY");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ScannedDocumentKey).HasColumnName("SCANNED_DOCUMENT_KEY");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.ScannedDocumentKeyNavigation)
                    .WithMany(p => p.ScannedDocumentOverride)
                    .HasForeignKey(d => d.ScannedDocumentKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_ScannedDocumentOverride_ScannedDocument");
            });

            modelBuilder.Entity<SdnMatch>(entity =>
            {
                entity.HasKey(e => e.SdnMatchKey)
                    .HasName("PK__SdnMatch__D14C354681B9F692");

                entity.Property(e => e.SdnMatchKey).HasColumnName("SDN_MATCH_KEY");

                entity.Property(e => e.AddAddress)
                    .HasColumnName("ADD_ADDRESS")
                    .HasColumnType("varchar(750)");

                entity.Property(e => e.AddCity)
                    .HasColumnName("ADD_CITY")
                    .HasColumnType("varchar(75)");

                entity.Property(e => e.AddCountry)
                    .HasColumnName("ADD_COUNTRY")
                    .HasColumnType("varchar(250)");

                entity.Property(e => e.AddRemarks)
                    .HasColumnName("ADD_REMARKS")
                    .HasColumnType("varchar(200)");

                entity.Property(e => e.AltName)
                    .HasColumnName("ALT_NAME")
                    .HasColumnType("varchar(350)");

                entity.Property(e => e.AltType)
                    .HasColumnName("ALT_TYPE")
                    .HasColumnType("varchar(8)");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("date");

                entity.Property(e => e.SdnCertKey).HasColumnName("SDN_CERT_KEY");

                entity.Property(e => e.SdnName)
                    .HasColumnName("SDN_NAME")
                    .HasColumnType("varchar(350)");

                entity.Property(e => e.SdnProgram)
                    .HasColumnName("SDN_PROGRAM")
                    .HasColumnType("varchar(75)");

                entity.Property(e => e.SdnRemarks)
                    .HasColumnName("SDN_REMARKS")
                    .HasColumnType("varchar(1500)");

                entity.Property(e => e.SdnTitle)
                    .HasColumnName("SDN_TITLE")
                    .HasColumnType("varchar(200)");

                entity.Property(e => e.SdnType)
                    .HasColumnName("SDN_TYPE")
                    .HasColumnType("varchar(16)");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");
            });

            modelBuilder.Entity<Sdnadd>(entity =>
            {
                entity.HasKey(e => e.AddNum)
                    .HasName("PK_SDNAdd");

                entity.ToTable("SDNAdd");

                entity.HasIndex(e => e.Country)
                    .HasName("IX_SDNAdd_ALT_NAME");

                entity.HasIndex(e => new { e.AddNum, e.Address, e.City, e.Country, e.AddRemarks, e.EntNum })
                    .HasName("IX_SDNAdd_ENT_NUM_MORE");

                entity.Property(e => e.AddNum)
                    .HasColumnName("ADD_NUM")
                    .ValueGeneratedNever();

                entity.Property(e => e.AddRemarks)
                    .HasColumnName("ADD_REMARKS")
                    .HasColumnType("varchar(200)");

                entity.Property(e => e.Address)
                    .HasColumnName("ADDRESS")
                    .HasColumnType("varchar(750)");

                entity.Property(e => e.City)
                    .HasColumnName("CITY")
                    .HasColumnType("varchar(75)");

                entity.Property(e => e.Country)
                    .HasColumnName("COUNTRY")
                    .HasColumnType("varchar(250)");

                entity.Property(e => e.EntNum).HasColumnName("ENT_NUM");

                entity.HasOne(d => d.EntNumNavigation)
                    .WithMany(p => p.Sdnadd)
                    .HasForeignKey(d => d.EntNum)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_SDNAdd_SDNMain");
            });

            modelBuilder.Entity<Sdnalt>(entity =>
            {
                entity.HasKey(e => e.AltNum)
                    .HasName("PK_SDNAlt");

                entity.ToTable("SDNAlt");

                entity.HasIndex(e => e.AltName)
                    .HasName("IX_SDNAlt_ALT_NAME");

                entity.HasIndex(e => new { e.AltNum, e.AltType, e.AltName, e.AltRemarks, e.EntNum })
                    .HasName("IX_SDNAlt_ENT_NUM_MORE");

                entity.Property(e => e.AltNum)
                    .HasColumnName("ALT_NUM")
                    .ValueGeneratedNever();

                entity.Property(e => e.AltName)
                    .HasColumnName("ALT_NAME")
                    .HasColumnType("varchar(350)");

                entity.Property(e => e.AltRemarks)
                    .HasColumnName("ALT_REMARKS")
                    .HasColumnType("varchar(200)");

                entity.Property(e => e.AltType)
                    .HasColumnName("ALT_TYPE")
                    .HasColumnType("varchar(8)");

                entity.Property(e => e.EntNum).HasColumnName("ENT_NUM");

                entity.HasOne(d => d.EntNumNavigation)
                    .WithMany(p => p.Sdnalt)
                    .HasForeignKey(d => d.EntNum)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_SDNAlt_SDNMain");
            });

            modelBuilder.Entity<Sdnlist>(entity =>
            {
                entity.HasKey(e => e.SdnListKey)
                    .HasName("PK_SDNList");

                entity.ToTable("SDNList");

                entity.Property(e => e.SdnListKey).HasColumnName("SDN_LIST_KEY");

                entity.Property(e => e.Name).HasColumnType("varchar(255)");

                entity.Property(e => e.State).HasColumnType("varchar(25)");

                entity.Property(e => e.Type).HasColumnType("varchar(15)");
            });

            modelBuilder.Entity<Sdnmain>(entity =>
            {
                entity.HasKey(e => e.EntNum)
                    .HasName("PK_SDNMain");

                entity.ToTable("SDNMain");

                entity.Property(e => e.EntNum)
                    .HasColumnName("ENT_NUM")
                    .ValueGeneratedNever();

                entity.Property(e => e.Program)
                    .HasColumnName("PROGRAM")
                    .HasColumnType("varchar(75)");

                entity.Property(e => e.Remarks)
                    .HasColumnName("REMARKS")
                    .HasColumnType("varchar(1500)");

                entity.Property(e => e.SdnName)
                    .HasColumnName("SDN_NAME")
                    .HasColumnType("varchar(350)");

                entity.Property(e => e.SdnType)
                    .HasColumnName("SDN_TYPE")
                    .HasColumnType("varchar(16)");

                entity.Property(e => e.Title)
                    .HasColumnName("TITLE")
                    .HasColumnType("varchar(300)");
            });

            modelBuilder.Entity<SecurityAnswer>(entity =>
            {
                entity.HasKey(e => e.SecurityAnswerKey)
                    .HasName("PK_SecurityAnswer");

                entity.Property(e => e.SecurityAnswerKey).HasColumnName("SECURITY_ANSWER_KEY");

                entity.Property(e => e.Answer)
                    .IsRequired()
                    .HasColumnName("ANSWER")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.SecurityQuestionKey).HasColumnName("SECURITY_QUESTION_KEY");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.SecurityQuestionKeyNavigation)
                    .WithMany(p => p.SecurityAnswer)
                    .HasForeignKey(d => d.SecurityQuestionKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_SecurityAnswer_SecurityQuestion");

                entity.HasOne(d => d.TellerNavigation)
                    .WithMany(p => p.SecurityAnswer)
                    .HasPrincipalKey(p => p.Teller)
                    .HasForeignKey(d => d.Teller)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_SecurityAnswer_TELLERID");
            });

            modelBuilder.Entity<SecurityGroup>(entity =>
            {
                entity.HasKey(e => e.SecuritygroupKey)
                    .HasName("PK__Security__0A090ED910DBE422");

                entity.Property(e => e.SecuritygroupKey).HasColumnName("SECURITYGROUP_KEY");

                entity.Property(e => e.IsAccountant).HasColumnName("IS_ACCOUNTANT");

                entity.Property(e => e.IsActive).HasColumnName("IS_ACTIVE");

                entity.Property(e => e.IsAdAstra).HasColumnName("IS_AD_ASTRA");

                entity.Property(e => e.IsCollector).HasColumnName("IS_COLLECTOR");

                entity.Property(e => e.IsCorporate).HasColumnName("IS_CORPORATE");

                entity.Property(e => e.IsManager).HasColumnName("IS_MANAGER");

                entity.Property(e => e.SgName)
                    .IsRequired()
                    .HasColumnName("SG_NAME")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.SgValues)
                    .IsRequired()
                    .HasColumnName("SG_VALUES")
                    .HasColumnType("varchar(256)");
            });

            modelBuilder.Entity<SecurityQuestion>(entity =>
            {
                entity.HasKey(e => e.SecurityQuestionKey)
                    .HasName("PK_SecurityQuestion");

                entity.Property(e => e.SecurityQuestionKey).HasColumnName("SECURITY_QUESTION_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsActive).HasColumnName("IS_ACTIVE");

                entity.Property(e => e.Question)
                    .IsRequired()
                    .HasColumnName("QUESTION")
                    .HasColumnType("varchar(50)");
            });

            modelBuilder.Entity<ServiceDetail>(entity =>
            {
                entity.HasKey(e => e.ServiceDetailKey)
                    .HasName("PK_ServiceDetail");

                entity.HasIndex(e => e.ServiceMasterKey)
                    .HasName("IX_ServiceDetail_SERVICE_MASTER_KEY");

                entity.HasIndex(e => new { e.ServiceMasterKey, e.ServiceDetailKey })
                    .HasName("IX_ServiceDetail_SERVICE_MASTER_KEY_SERVICE_DETAIL_KEY");

                entity.HasIndex(e => new { e.ServiceDetailKey, e.ServiceMasterKey, e.Location, e.Enabled })
                    .HasName("IX_ServiceDetail_LOCATION_ENABLED");

                entity.Property(e => e.ServiceDetailKey).HasColumnName("SERVICE_DETAIL_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Enabled).HasColumnName("ENABLED");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.GlAcctAmt).HasColumnName("GL_ACCT_AMT");

                entity.Property(e => e.GlAcctCost).HasColumnName("GL_ACCT_COST");

                entity.Property(e => e.GlAcctFee).HasColumnName("GL_ACCT_FEE");

                entity.Property(e => e.GlAcctProfit).HasColumnName("GL_ACCT_PROFIT");

                entity.Property(e => e.GovtIdRequired).HasColumnName("GOVT_ID_REQUIRED");

                entity.Property(e => e.LastUpdated)
                    .HasColumnName("LAST_UPDATED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.MaxCharge)
                    .HasColumnName("MAX_CHARGE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.MinCharge)
                    .HasColumnName("MIN_CHARGE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.ServiceCost)
                    .HasColumnName("SERVICE_COST")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.ServiceFee)
                    .HasColumnName("SERVICE_FEE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.ServiceMasterKey).HasColumnName("SERVICE_MASTER_KEY");

                entity.Property(e => e.UpdatedBy)
                    .HasColumnName("UPDATED_BY")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.ServiceMasterKeyNavigation)
                    .WithMany(p => p.ServiceDetail)
                    .HasForeignKey(d => d.ServiceMasterKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_ServiceDetail_ServiceMaster");
            });

            modelBuilder.Entity<ServiceMaster>(entity =>
            {
                entity.HasKey(e => e.ServiceMasterKey)
                    .HasName("PK_ServiceMaster");

                entity.Property(e => e.ServiceMasterKey).HasColumnName("SERVICE_MASTER_KEY");

                entity.Property(e => e.AmtPrompt).HasColumnName("AMT_PROMPT");

                entity.Property(e => e.CashOnly).HasColumnName("CASH_ONLY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DisplayOrder).HasColumnName("DISPLAY_ORDER");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.FeePrompt).HasColumnName("FEE_PROMPT");

                entity.Property(e => e.FunctionAs)
                    .IsRequired()
                    .HasColumnName("FUNCTION_AS")
                    .HasColumnType("char(2)");

                entity.Property(e => e.Inventoried).HasColumnName("INVENTORIED");

                entity.Property(e => e.IsAutoInventory).HasColumnName("IS_AUTO_INVENTORY");

                entity.Property(e => e.IsIndependent).HasColumnName("IS_INDEPENDENT");

                entity.Property(e => e.IsPrepaid).HasColumnName("IS_PREPAID");

                entity.Property(e => e.IsSubitem).HasColumnName("IS_SUBITEM");

                entity.Property(e => e.IsTaxable).HasColumnName("IS_TAXABLE");

                entity.Property(e => e.IsTracked).HasColumnName("IS_TRACKED");

                entity.Property(e => e.LastUpdated)
                    .HasColumnName("LAST_UPDATED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Payout).HasColumnName("PAYOUT");

                entity.Property(e => e.QtyPrompt).HasColumnName("QTY_PROMPT");

                entity.Property(e => e.ReqCustId).HasColumnName("REQ_CUST_ID");

                entity.Property(e => e.ReqCustPhone).HasColumnName("REQ_CUST_PHONE");

                entity.Property(e => e.RequireCust).HasColumnName("REQUIRE_CUST");

                entity.Property(e => e.ServiceName)
                    .IsRequired()
                    .HasColumnName("SERVICE_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.ServiceNum).HasColumnName("SERVICE_NUM");

                entity.Property(e => e.UpdatedBy)
                    .HasColumnName("UPDATED_BY")
                    .HasColumnType("char(3)");
            });

            modelBuilder.Entity<ServiceSubItem>(entity =>
            {
                entity.HasKey(e => e.ServiceSubitemKey)
                    .HasName("PK_ServiceSubItem");

                entity.HasIndex(e => e.ServiceMasterKeyRequisite)
                    .HasName("IX_ServiceSubItem_SERVICE_MASTER_KEY_REQUISITE");

                entity.HasIndex(e => e.ServiceMasterKeySubitem)
                    .HasName("IX_ServiceSubItem_SERVICE_MASTER_KEY_SUBITEM");

                entity.Property(e => e.ServiceSubitemKey).HasColumnName("SERVICE_SUBITEM_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.LastUpdated)
                    .HasColumnName("LAST_UPDATED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ServiceMasterKeyRequisite).HasColumnName("SERVICE_MASTER_KEY_REQUISITE");

                entity.Property(e => e.ServiceMasterKeySubitem).HasColumnName("SERVICE_MASTER_KEY_SUBITEM");

                entity.Property(e => e.UpdatedBy)
                    .HasColumnName("UPDATED_BY")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.ServiceMasterKeyRequisiteNavigation)
                    .WithMany(p => p.ServiceSubItemServiceMasterKeyRequisiteNavigation)
                    .HasForeignKey(d => d.ServiceMasterKeyRequisite)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_ServiceSubItem_ServiceMasterRequisite");

                entity.HasOne(d => d.ServiceMasterKeySubitemNavigation)
                    .WithMany(p => p.ServiceSubItemServiceMasterKeySubitemNavigation)
                    .HasForeignKey(d => d.ServiceMasterKeySubitem)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_ServiceSubItem_ServiceMasterSubitem");
            });

            modelBuilder.Entity<ServiceTrans>(entity =>
            {
                entity.HasKey(e => e.ServiceTransKey)
                    .HasName("PK_ServiceTrans");

                entity.HasIndex(e => e.CustomerKey)
                    .HasName("IX_ServiceTrans_CUSTOMER_KEY");

                entity.HasIndex(e => e.TransDetailKey)
                    .HasName("IX_ServiceTrans_TRANS_DETAIL_KEY");

                entity.HasIndex(e => new { e.TransDetailKey, e.ServiceDetailKey })
                    .HasName("IX_ServiceTrans_TRANS_DETAIL_KEY_SERVICE_DETAIL_KEY");

                entity.HasIndex(e => new { e.ServiceTransKey, e.TransDetailKey, e.QtySold, e.GlAcctAmt, e.PaymentMethod, e.ReversedDate, e.ServiceFee, e.ServiceAmt, e.GlAcctFee, e.Reversed, e.Location, e.DateEntered, e.ServiceDetailKey, e.CustomerKey, e.MoStatusKey, e.EnteredBy })
                    .HasName("IX_ServiceTrans_REVERSED");

                entity.Property(e => e.ServiceTransKey).HasColumnName("SERVICE_TRANS_KEY");

                entity.Property(e => e.CalcExtend)
                    .HasColumnName("CALC_EXTEND")
                    .HasColumnType("smallmoney")
                    .HasComputedColumnSql("[QTY_SOLD]*([SERVICE_FEE]+[SERVICE_AMT])")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.GlAcctAmt).HasColumnName("GL_ACCT_AMT");

                entity.Property(e => e.GlAcctFee).HasColumnName("GL_ACCT_FEE");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.MoStatusKey).HasColumnName("MO_STATUS_KEY");

                entity.Property(e => e.PaymentMethod).HasColumnName("PAYMENT_METHOD");

                entity.Property(e => e.QtySold).HasColumnName("QTY_SOLD");

                entity.Property(e => e.Reversed).HasColumnName("REVERSED");

                entity.Property(e => e.ReversedDate)
                    .HasColumnName("REVERSED_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ServiceAmt)
                    .HasColumnName("SERVICE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.ServiceDetailKey).HasColumnName("SERVICE_DETAIL_KEY");

                entity.Property(e => e.ServiceFee)
                    .HasColumnName("SERVICE_FEE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.ServiceTrans)
                    .HasForeignKey(d => d.CustomerKey)
                    .HasConstraintName("FK_ServiceTrans_Customer");

                entity.HasOne(d => d.GlAcctAmtNavigation)
                    .WithMany(p => p.ServiceTransGlAcctAmtNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.GlAcctAmt)
                    .HasConstraintName("FK_ServiceTrans_GL_ACCT_AMT");

                entity.HasOne(d => d.GlAcctFeeNavigation)
                    .WithMany(p => p.ServiceTransGlAcctFeeNavigation)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.GlAcctFee)
                    .HasConstraintName("FK_ServiceTrans_GL_ACCT_FEE");

                entity.HasOne(d => d.ServiceDetailKeyNavigation)
                    .WithMany(p => p.ServiceTrans)
                    .HasForeignKey(d => d.ServiceDetailKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_ServiceTrans_ServiceDetail");
            });

            modelBuilder.Entity<ServiceTransDetail>(entity =>
            {
                entity.HasKey(e => e.ServiceTransDetailKey)
                    .HasName("PK_ServiceTransDetail");

                entity.HasIndex(e => new { e.ServiceTransDetailKey, e.PersonReceived, e.Purpose, e.BillerName, e.BillpayCode, e.BillpayAccountNum, e.ServiceTransKey })
                    .HasName("IX_ServiceTransDetail_SERVICE_TRANS_KEY");

                entity.Property(e => e.ServiceTransDetailKey).HasColumnName("SERVICE_TRANS_DETAIL_KEY");

                entity.Property(e => e.BillerName)
                    .IsRequired()
                    .HasColumnName("BILLER_NAME")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.BillpayAccountNum)
                    .IsRequired()
                    .HasColumnName("BILLPAY_ACCOUNT_NUM")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.BillpayCode)
                    .IsRequired()
                    .HasColumnName("BILLPAY_CODE")
                    .HasColumnType("varchar(6)");

                entity.Property(e => e.CountryTo)
                    .HasColumnName("COUNTRY_TO")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Exported).HasColumnName("EXPORTED");

                entity.Property(e => e.IsDomestic).HasColumnName("IS_DOMESTIC");

                entity.Property(e => e.Occupation)
                    .HasColumnName("OCCUPATION")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.PersonReceived)
                    .HasColumnName("PERSON_RECEIVED")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Purpose)
                    .HasColumnName("PURPOSE")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.ServiceTransKey).HasColumnName("SERVICE_TRANS_KEY");

                entity.Property(e => e.ThirdPartyDetails)
                    .HasColumnName("THIRD_PARTY_DETAILS")
                    .HasColumnType("varchar(500)");

                entity.Property(e => e.VendorId).HasColumnName("VENDOR_ID");

                entity.Property(e => e.WireTransferReceipt)
                    .HasColumnName("WIRE_TRANSFER_RECEIPT")
                    .HasColumnType("varchar(15)");

                entity.HasOne(d => d.ServiceTransKeyNavigation)
                    .WithMany(p => p.ServiceTransDetail)
                    .HasForeignKey(d => d.ServiceTransKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_ServiceTransDetail_ServiceTrans");
            });

            modelBuilder.Entity<SgRights>(entity =>
            {
                entity.HasKey(e => e.SgRightsKey)
                    .HasName("PK_SG_RIGHTS");

                entity.ToTable("SG_RIGHTS");

                entity.HasIndex(e => e.GlobalRightName)
                    .HasName("IX_GLOBAL_RIGHT_NAME")
                    .IsUnique();

                entity.HasIndex(e => e.RightName)
                    .HasName("IX_RIGHT_NAME")
                    .IsUnique();

                entity.HasIndex(e => e.ValuePosition)
                    .HasName("IX_VALUE_POSITION")
                    .IsUnique();

                entity.Property(e => e.SgRightsKey).HasColumnName("SG_RIGHTS_KEY");

                entity.Property(e => e.GlobalRightName)
                    .IsRequired()
                    .HasColumnName("GLOBAL_RIGHT_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.ParentRightName)
                    .IsRequired()
                    .HasColumnName("PARENT_RIGHT_NAME")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.ParentRightsKey).HasColumnName("PARENT_RIGHTS_KEY");

                entity.Property(e => e.RightName)
                    .IsRequired()
                    .HasColumnName("RIGHT_NAME")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.RightType)
                    .IsRequired()
                    .HasColumnName("RIGHT_TYPE")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.ValuePosition).HasColumnName("VALUE_POSITION");
            });

            modelBuilder.Entity<SignatureLoanApproval>(entity =>
            {
                entity.HasKey(e => e.SignatureLoanApprovalKey)
                    .HasName("PK_SignatureLoanApproval");

                entity.Property(e => e.SignatureLoanApprovalKey).HasColumnName("SIGNATURE_LOAN_APPROVAL_KEY");

                entity.Property(e => e.ApprovalAmt)
                    .HasColumnName("APPROVAL_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.ApprovalBaseAmt)
                    .HasColumnName("APPROVAL_BASE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.ApprovalBaseIncomeAmt)
                    .HasColumnName("APPROVAL_BASE_INCOME_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.ApprovalSuccessfulAmt)
                    .HasColumnName("APPROVAL_SUCCESSFUL_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.GrossIncomeAmt)
                    .HasColumnName("GROSS_INCOME_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.MgrOverrideAmt)
                    .HasColumnName("MGR_OVERRIDE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.MgrOverrideInits)
                    .IsRequired()
                    .HasColumnName("MGR_OVERRIDE_INITS")
                    .HasColumnType("char(3)");

                entity.Property(e => e.NetIncomeAmt)
                    .HasColumnName("NET_INCOME_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.OpenLoansPrincAmt)
                    .HasColumnName("OPEN_LOANS_PRINC_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PrevPrincOverrideAmt)
                    .HasColumnName("PREV_PRINC_OVERRIDE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.ScoredIncrementAmount).HasColumnName("SCORED_INCREMENT_AMOUNT");

                entity.Property(e => e.ScoredIncrementNum).HasColumnName("SCORED_INCREMENT_NUM");

                entity.HasOne(d => d.LoanKeyNavigation)
                    .WithMany(p => p.SignatureLoanApproval)
                    .HasForeignKey(d => d.LoanKey)
                    .HasConstraintName("FK_SignatureLoanApproval_Loan");
            });

            modelBuilder.Entity<SkipTraceConfig>(entity =>
            {
                entity.HasKey(e => e.SkipTraceConfigKey)
                    .HasName("PK_SkipTraceConfig");

                entity.Property(e => e.SkipTraceConfigKey).HasColumnName("SKIP_TRACE_CONFIG_KEY");

                entity.Property(e => e.BalanceRangeFrom)
                    .HasColumnName("BALANCE_RANGE_FROM")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.BalanceRangeTo)
                    .HasColumnName("BALANCE_RANGE_TO")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.DaysBetweenCycles).HasColumnName("DAYS_BETWEEN_CYCLES");

                entity.Property(e => e.IsAdAstra).HasColumnName("IS_AD_ASTRA");

                entity.Property(e => e.MaxCyclesPerCustomer).HasColumnName("MAX_CYCLES_PER_CUSTOMER");

                entity.Property(e => e.WatchListVendorKey).HasColumnName("WATCH_LIST_VENDOR_KEY");
            });

            modelBuilder.Entity<SkipTraceEventsNotUsed>(entity =>
            {
                entity.HasKey(e => e.SkipTraceEventsKey)
                    .HasName("PK_SkipTraceEvents");

                entity.ToTable("SkipTraceEvents_NotUsed");

                entity.HasIndex(e => e.EventCode)
                    .HasName("IX_SkipTraceEvents_EVENT_CODE");

                entity.HasIndex(e => e.SkipTraceThreadKey)
                    .HasName("IX_SkipTraceEvents_SKIP_TRACE_THREAD_KEY");

                entity.Property(e => e.SkipTraceEventsKey).HasColumnName("SKIP_TRACE_EVENTS_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EventCode)
                    .IsRequired()
                    .HasColumnName("EVENT_CODE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.SkipTraceThreadKey).HasColumnName("SKIP_TRACE_THREAD_KEY");

                entity.Property(e => e.SkipTraceVendorKey).HasColumnName("SKIP_TRACE_VENDOR_KEY");
            });

            modelBuilder.Entity<SkipTraceStep>(entity =>
            {
                entity.HasKey(e => e.SkipTraceStepKey)
                    .HasName("PK_SkipTraceStep");

                entity.HasIndex(e => new { e.StepPriority, e.SkipTraceConfigKey })
                    .HasName("IX_SkipTraceStep_STEP_PRIORITY_SKIP_TRACE_CONFIG_KEY");

                entity.Property(e => e.SkipTraceStepKey).HasColumnName("SKIP_TRACE_STEP_KEY");

                entity.Property(e => e.BalanceRangeFrom)
                    .HasColumnName("BALANCE_RANGE_FROM")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.BalanceRangeTo)
                    .HasColumnName("BALANCE_RANGE_TO")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.DaysSinceLastContact).HasColumnName("DAYS_SINCE_LAST_CONTACT");

                entity.Property(e => e.DelinquencyDaysFrom).HasColumnName("DELINQUENCY_DAYS_FROM");

                entity.Property(e => e.DelinquencyDaysTo).HasColumnName("DELINQUENCY_DAYS_TO");

                entity.Property(e => e.ProcessWhenNoCellPhone).HasColumnName("PROCESS_WHEN_NO_CELL_PHONE");

                entity.Property(e => e.ProcessWhenNoHomeAddress).HasColumnName("PROCESS_WHEN_NO_HOME_ADDRESS");

                entity.Property(e => e.ProcessWhenNoHomePhone).HasColumnName("PROCESS_WHEN_NO_HOME_PHONE");

                entity.Property(e => e.ProcessWhenNoWorkPhone).HasColumnName("PROCESS_WHEN_NO_WORK_PHONE");

                entity.Property(e => e.SkipTraceConfigKey).HasColumnName("SKIP_TRACE_CONFIG_KEY");

                entity.Property(e => e.StepActive)
                    .HasColumnName("STEP_ACTIVE")
                    .HasComputedColumnSql("CONVERT([bit],case isnull([STEP_ACTIVE_ALIAS],(0)) when [SKIP_TRACE_STEP_KEY] then (1) else (0) end,(0))")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.StepActiveAlias).HasColumnName("STEP_ACTIVE_ALIAS");

                entity.Property(e => e.StepCurrent)
                    .HasColumnName("STEP_CURRENT")
                    .HasComputedColumnSql("CONVERT([bit],case isnull([STEP_ACTIVE_ALIAS],[SKIP_TRACE_STEP_KEY]) when [SKIP_TRACE_STEP_KEY] then (1) else (0) end,(0))")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.StepName)
                    .IsRequired()
                    .HasColumnName("STEP_NAME")
                    .HasColumnType("varchar(28)");

                entity.Property(e => e.StepPriority).HasColumnName("STEP_PRIORITY");

                entity.HasOne(d => d.SkipTraceConfigKeyNavigation)
                    .WithMany(p => p.SkipTraceStep)
                    .HasForeignKey(d => d.SkipTraceConfigKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_SkipTraceStep_SkipTraceConfig");

                entity.HasOne(d => d.StepActiveAliasNavigation)
                    .WithMany(p => p.InverseStepActiveAliasNavigation)
                    .HasForeignKey(d => d.StepActiveAlias)
                    .HasConstraintName("FK_SkipTraceStep_SkipTraceStep");
            });

            modelBuilder.Entity<SkipTraceStepAuditCategory>(entity =>
            {
                entity.HasKey(e => e.SkipTraceStepAuditCategoryKey)
                    .HasName("PK_SkipTraceStep_AuditCategory");

                entity.ToTable("SkipTraceStep_AuditCategory");

                entity.Property(e => e.SkipTraceStepAuditCategoryKey).HasColumnName("SKIP_TRACE_STEP_AUDIT_CATEGORY_KEY");

                entity.Property(e => e.RisAuditKey).HasColumnName("RIS_AUDIT_KEY");

                entity.Property(e => e.SkipTraceStepKey).HasColumnName("SKIP_TRACE_STEP_KEY");

                entity.HasOne(d => d.RisAuditKeyNavigation)
                    .WithMany(p => p.SkipTraceStepAuditCategory)
                    .HasForeignKey(d => d.RisAuditKey)
                    .HasConstraintName("FK_SkipTraceStep_AuditCategory_RisAudit");

                entity.HasOne(d => d.SkipTraceStepKeyNavigation)
                    .WithMany(p => p.SkipTraceStepAuditCategory)
                    .HasForeignKey(d => d.SkipTraceStepKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_SkipTraceStep_AuditCategory_SkipTraceStep");
            });

            modelBuilder.Entity<SkipTraceStepLocation>(entity =>
            {
                entity.HasKey(e => e.SkipTraceStepLocationKey)
                    .HasName("PK_SkipTraceStep_Location");

                entity.ToTable("SkipTraceStep_Location");

                entity.Property(e => e.SkipTraceStepLocationKey).HasColumnName("SKIP_TRACE_STEP_LOCATION_KEY");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.SkipTraceStepKey).HasColumnName("SKIP_TRACE_STEP_KEY");

                entity.HasOne(d => d.LocationNavigation)
                    .WithMany(p => p.SkipTraceStepLocation)
                    .HasForeignKey(d => d.Location)
                    .HasConstraintName("FK_SkipTraceStep_Location_Company");

                entity.HasOne(d => d.SkipTraceStepKeyNavigation)
                    .WithMany(p => p.SkipTraceStepLocation)
                    .HasForeignKey(d => d.SkipTraceStepKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_SkipTraceStep_Location_SkipTraceStep");
            });

            modelBuilder.Entity<SkipTraceStepProductCode>(entity =>
            {
                entity.HasKey(e => e.SkipTraceStepProductCodeKey)
                    .HasName("PK_SkipTraceStep_ProductCode");

                entity.ToTable("SkipTraceStep_ProductCode");

                entity.Property(e => e.SkipTraceStepProductCodeKey).HasColumnName("SKIP_TRACE_STEP_PRODUCT_CODE_KEY");

                entity.Property(e => e.ProductCode)
                    .IsRequired()
                    .HasColumnName("PRODUCT_CODE")
                    .HasColumnType("varchar(3)");

                entity.Property(e => e.SkipTraceStepKey).HasColumnName("SKIP_TRACE_STEP_KEY");

                entity.HasOne(d => d.SkipTraceStepKeyNavigation)
                    .WithMany(p => p.SkipTraceStepProductCode)
                    .HasForeignKey(d => d.SkipTraceStepKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_SkipTraceStep_ProductCode_SkipTraceStep");
            });

            modelBuilder.Entity<SkipTraceThread>(entity =>
            {
                entity.HasKey(e => e.SkipTraceThreadKey)
                    .HasName("PK_SkipTraceThread");

                entity.HasIndex(e => e.CustomerKey)
                    .HasName("IX_SkipTraceThread_CUSTOMER_KEY");

                entity.HasIndex(e => e.RisreptKey)
                    .HasName("IX_SkipTraceThread_RISREPT_KEY");

                entity.Property(e => e.SkipTraceThreadKey).HasColumnName("SKIP_TRACE_THREAD_KEY");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateActive)
                    .HasColumnName("DATE_ACTIVE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DateLastContact)
                    .HasColumnName("DATE_LAST_CONTACT")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IfNoAddress).HasColumnName("IF_NO_ADDRESS");

                entity.Property(e => e.IfNoCellPhone).HasColumnName("IF_NO_CELL_PHONE");

                entity.Property(e => e.IfNoHomePhone).HasColumnName("IF_NO_HOME_PHONE");

                entity.Property(e => e.IfNoWorkPhone).HasColumnName("IF_NO_WORK_PHONE");

                entity.Property(e => e.PassCounter).HasColumnName("PASS_COUNTER");

                entity.Property(e => e.RisreptKey).HasColumnName("RISREPT_KEY");

                entity.Property(e => e.SkipTraceConfigKey).HasColumnName("SKIP_TRACE_CONFIG_KEY");

                entity.Property(e => e.SkipTraceStepKey).HasColumnName("SKIP_TRACE_STEP_KEY");

                entity.Property(e => e.SkipTraceVendorKey).HasColumnName("SKIP_TRACE_VENDOR_KEY");

                entity.Property(e => e.StepNumber).HasColumnName("STEP_NUMBER");

                entity.Property(e => e.TraceStatus)
                    .IsRequired()
                    .HasColumnName("TRACE_STATUS")
                    .HasColumnType("char(1)")
                    .HasDefaultValueSql("'U'");

                entity.Property(e => e.VendorNumber).HasColumnName("VENDOR_NUMBER");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.SkipTraceThread)
                    .HasForeignKey(d => d.CustomerKey)
                    .HasConstraintName("FK_SkipTraceThread_Customer");

                entity.HasOne(d => d.RisreptKeyNavigation)
                    .WithMany(p => p.SkipTraceThread)
                    .HasForeignKey(d => d.RisreptKey)
                    .HasConstraintName("FK_SkipTraceThread_RisRept");

                entity.HasOne(d => d.SkipTraceConfigKeyNavigation)
                    .WithMany(p => p.SkipTraceThread)
                    .HasForeignKey(d => d.SkipTraceConfigKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_SkipTraceThread_SkipTraceConfig");

                entity.HasOne(d => d.SkipTraceStepKeyNavigation)
                    .WithMany(p => p.SkipTraceThread)
                    .HasForeignKey(d => d.SkipTraceStepKey)
                    .HasConstraintName("FK_SkipTraceThread_SkipTraceStep");

                entity.HasOne(d => d.SkipTraceVendorKeyNavigation)
                    .WithMany(p => p.SkipTraceThread)
                    .HasForeignKey(d => d.SkipTraceVendorKey)
                    .HasConstraintName("FK_SkipTraceThread_SkipTraceVendor");
            });

            modelBuilder.Entity<SkipTraceVendor>(entity =>
            {
                entity.HasKey(e => e.SkipTraceVendorKey)
                    .HasName("PK_SkipTraceVendor");

                entity.HasIndex(e => e.VendorDeleted)
                    .HasName("IX_SkipTraceVendor_VENDOR_DELETED");

                entity.HasIndex(e => e.VendorName)
                    .HasName("IX_SkipTraceVendor_VENDOR_NAME");

                entity.Property(e => e.SkipTraceVendorKey).HasColumnName("SKIP_TRACE_VENDOR_KEY");

                entity.Property(e => e.CryptoKey)
                    .HasColumnName("CRYPTO_KEY")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.FromVendorUri)
                    .HasColumnName("FROM_VENDOR_URI")
                    .HasColumnType("varchar(250)");

                entity.Property(e => e.SkipTraceConfigKey).HasColumnName("SKIP_TRACE_CONFIG_KEY");

                entity.Property(e => e.ToVendorUri)
                    .HasColumnName("TO_VENDOR_URI")
                    .HasColumnType("varchar(250)");

                entity.Property(e => e.VendorActive).HasColumnName("VENDOR_ACTIVE");

                entity.Property(e => e.VendorCost)
                    .HasColumnName("VENDOR_COST")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.VendorDeleted).HasColumnName("VENDOR_DELETED");

                entity.Property(e => e.VendorLogin)
                    .HasColumnName("VENDOR_LOGIN")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.VendorName)
                    .IsRequired()
                    .HasColumnName("VENDOR_NAME")
                    .HasColumnType("varchar(28)");

                entity.Property(e => e.VendorPassword)
                    .HasColumnName("VENDOR_PASSWORD")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.VendorPath)
                    .IsRequired()
                    .HasColumnName("VENDOR_PATH")
                    .HasColumnType("varchar(250)");

                entity.Property(e => e.VendorPriority).HasColumnName("VENDOR_PRIORITY");

                entity.HasOne(d => d.SkipTraceConfigKeyNavigation)
                    .WithMany(p => p.SkipTraceVendor)
                    .HasForeignKey(d => d.SkipTraceConfigKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_SkipTraceVendor_SkipTraceConfig");
            });

            modelBuilder.Entity<SmscommandMapping>(entity =>
            {
                entity.HasKey(e => e.SmsCommandMappingKey)
                    .HasName("PK_SMSCommandMapping");

                entity.ToTable("SMSCommandMapping");

                entity.HasIndex(e => e.Keyword)
                    .HasName("IX_KEYWORD")
                    .IsUnique();

                entity.Property(e => e.SmsCommandMappingKey).HasColumnName("SMS_COMMAND_MAPPING_KEY");

                entity.Property(e => e.Command)
                    .IsRequired()
                    .HasColumnName("COMMAND")
                    .HasColumnType("varchar(16)");

                entity.Property(e => e.Keyword)
                    .IsRequired()
                    .HasColumnName("KEYWORD")
                    .HasColumnType("varchar(32)");
            });

            modelBuilder.Entity<SmsfailedSend>(entity =>
            {
                entity.HasKey(e => e.SmsFailedSendKey)
                    .HasName("PK__SMSFaile__78C8732AAF82E59C");

                entity.ToTable("SMSFailedSend");

                entity.Property(e => e.SmsFailedSendKey).HasColumnName("SMS_FAILED_SEND_KEY");

                entity.Property(e => e.Response)
                    .HasColumnName("RESPONSE")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Sent)
                    .HasColumnName("SENT")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.SentDate)
                    .HasColumnName("SENT_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.SentUsing)
                    .HasColumnName("SENT_USING")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.SmsOutboundKey).HasColumnName("SMS_OUTBOUND_KEY");

                entity.HasOne(d => d.SmsOutboundKeyNavigation)
                    .WithMany(p => p.SmsfailedSend)
                    .HasForeignKey(d => d.SmsOutboundKey)
                    .HasConstraintName("FK_SMSFailedSend_SMSOutbound");
            });

            modelBuilder.Entity<Smsinbound>(entity =>
            {
                entity.HasKey(e => e.SmsInboundKey)
                    .HasName("PK__SMSInbou__9F91A4805F9EF494");

                entity.ToTable("SMSInbound");

                entity.Property(e => e.SmsInboundKey).HasColumnName("SMS_INBOUND_KEY");

                entity.Property(e => e.CallingFromNumber)
                    .HasColumnName("CALLING_FROM_NUMBER")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.CallingToNumber)
                    .HasColumnName("CALLING_TO_NUMBER")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Closed).HasColumnName("CLOSED");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.EmailAddress)
                    .HasColumnName("EMAIL_ADDRESS")
                    .HasColumnType("varchar(128)");

                entity.Property(e => e.LoanApplicationKey).HasColumnName("LOAN_APPLICATION_KEY");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.LockedDate)
                    .HasColumnName("LOCKED_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.LockedGuid).HasColumnName("LOCKED_GUID");

                entity.Property(e => e.Message)
                    .HasColumnName("MESSAGE")
                    .HasColumnType("varchar(800)");

                entity.Property(e => e.ReceivedDate)
                    .HasColumnName("RECEIVED_DATE")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.SmsOutboundKey).HasColumnName("SMS_OUTBOUND_KEY");

                entity.Property(e => e.SmsSource)
                    .HasColumnName("SMS_SOURCE")
                    .HasColumnType("varchar(64)");

                entity.Property(e => e.VisitorKey).HasColumnName("VISITOR_KEY");

                entity.Property(e => e.WebCallQueueKey).HasColumnName("WEB_CALL_QUEUE_KEY");

                entity.HasOne(d => d.LoanApplicationKeyNavigation)
                    .WithMany(p => p.Smsinbound)
                    .HasForeignKey(d => d.LoanApplicationKey)
                    .HasConstraintName("FK_SMSInbound_LoanApplication");

                entity.HasOne(d => d.LoanKeyNavigation)
                    .WithMany(p => p.Smsinbound)
                    .HasForeignKey(d => d.LoanKey)
                    .HasConstraintName("FK_SMSInbound_Loan");

                entity.HasOne(d => d.SmsOutboundKeyNavigation)
                    .WithMany(p => p.Smsinbound)
                    .HasForeignKey(d => d.SmsOutboundKey)
                    .HasConstraintName("FK_SMSInbound_SMSOutbound");

                entity.HasOne(d => d.VisitorKeyNavigation)
                    .WithMany(p => p.Smsinbound)
                    .HasForeignKey(d => d.VisitorKey)
                    .HasConstraintName("FK_SMSInbound_Visitor");

                entity.HasOne(d => d.WebCallQueueKeyNavigation)
                    .WithMany(p => p.Smsinbound)
                    .HasForeignKey(d => d.WebCallQueueKey)
                    .HasConstraintName("FK_SMSInbound_WebCallQueue");
            });

            modelBuilder.Entity<Smsoutbound>(entity =>
            {
                entity.HasKey(e => e.SmsOutboundKey)
                    .HasName("PK__SMSOutbo__8A0C786D582E70C2");

                entity.ToTable("SMSOutbound");

                entity.HasIndex(e => new { e.LockedGuid, e.SentDate })
                    .HasName("IX_SMSOutbound_LOCKED_GUID_SENT_DATE");

                entity.HasIndex(e => new { e.LockedDate, e.LockedGuid, e.SentDate })
                    .HasName("IX_SMSOutbound_LOCKED_DATE_LOCKED_GUID_SENT_DATE");

                entity.Property(e => e.SmsOutboundKey).HasColumnName("SMS_OUTBOUND_KEY");

                entity.Property(e => e.InitiatedDate)
                    .HasColumnName("INITIATED_DATE")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.LoanApplicationKey).HasColumnName("LOAN_APPLICATION_KEY");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.LockedDate)
                    .HasColumnName("LOCKED_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.LockedGuid).HasColumnName("LOCKED_GUID");

                entity.Property(e => e.Message)
                    .HasColumnName("MESSAGE")
                    .HasColumnType("varchar(800)");

                entity.Property(e => e.MobileNumber)
                    .HasColumnName("MOBILE_NUMBER")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.SentDate)
                    .HasColumnName("SENT_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.SmsSenderKey).HasColumnName("SMS_SENDER_KEY");

                entity.Property(e => e.VisitorKey).HasColumnName("VISITOR_KEY");

                entity.HasOne(d => d.LoanApplicationKeyNavigation)
                    .WithMany(p => p.Smsoutbound)
                    .HasForeignKey(d => d.LoanApplicationKey)
                    .HasConstraintName("FK_SMSOutbound_LoanApplication");

                entity.HasOne(d => d.LoanKeyNavigation)
                    .WithMany(p => p.Smsoutbound)
                    .HasForeignKey(d => d.LoanKey)
                    .HasConstraintName("FK_SMSOutbound_Loan");

                entity.HasOne(d => d.SmsSenderKeyNavigation)
                    .WithMany(p => p.Smsoutbound)
                    .HasForeignKey(d => d.SmsSenderKey)
                    .HasConstraintName("FK_SMSOutbound_SMMSender");

                entity.HasOne(d => d.VisitorKeyNavigation)
                    .WithMany(p => p.Smsoutbound)
                    .HasForeignKey(d => d.VisitorKey)
                    .HasConstraintName("FK_SMSOutbound_Visitor");
            });

            modelBuilder.Entity<SmsoxygenErrorCodes>(entity =>
            {
                entity.HasKey(e => e.Code)
                    .HasName("PK__SMSOxyge__AA1D437845C37165");

                entity.ToTable("SMSOxygenErrorCodes");

                entity.Property(e => e.Code)
                    .HasColumnName("CODE")
                    .ValueGeneratedNever();

                entity.Property(e => e.Error)
                    .HasColumnName("ERROR")
                    .HasColumnType("varchar(100)");
            });

            modelBuilder.Entity<Smsresponse>(entity =>
            {
                entity.HasKey(e => e.SmsResponseKey)
                    .HasName("PK__SMSRespo__62AABD82FF2441BE");

                entity.ToTable("SMSResponse");

                entity.Property(e => e.SmsResponseKey).HasColumnName("SMS_RESPONSE_KEY");

                entity.Property(e => e.Response)
                    .HasColumnName("RESPONSE")
                    .HasColumnType("varchar(800)");

                entity.Property(e => e.Sent)
                    .HasColumnName("SENT")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.SentDate)
                    .HasColumnName("SENT_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.SentUsing)
                    .HasColumnName("SENT_USING")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.SmsOutboundKey).HasColumnName("SMS_OUTBOUND_KEY");

                entity.HasOne(d => d.SmsOutboundKeyNavigation)
                    .WithMany(p => p.Smsresponse)
                    .HasForeignKey(d => d.SmsOutboundKey)
                    .HasConstraintName("FK_SMSResponse_SMSOutbound");
            });

            modelBuilder.Entity<Smssender>(entity =>
            {
                entity.HasKey(e => e.SmsSenderKey)
                    .HasName("PK__SMSSende__0847E1A7DF31C03B");

                entity.ToTable("SMSSender");

                entity.Property(e => e.SmsSenderKey)
                    .HasColumnName("SMS_SENDER_KEY")
                    .ValueGeneratedNever();

                entity.Property(e => e.Description)
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Value)
                    .HasColumnName("VALUE")
                    .HasColumnType("varchar(50)");
            });

            modelBuilder.Entity<Smstemplate>(entity =>
            {
                entity.HasKey(e => e.SmsTemplateKey)
                    .HasName("PK_SMSTemplate");

                entity.ToTable("SMSTemplate");

                entity.Property(e => e.SmsTemplateKey).HasColumnName("SMS_TEMPLATE_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.Description)
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(512)");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IsActive)
                    .HasColumnName("IS_ACTIVE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.IsSystem)
                    .HasColumnName("IS_SYSTEM")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Template)
                    .IsRequired()
                    .HasColumnName("TEMPLATE")
                    .HasColumnType("varchar(1024)");

                entity.Property(e => e.Version).HasColumnName("VERSION");
            });

            modelBuilder.Entity<SpayInterest>(entity =>
            {
                entity.HasKey(e => e.SpayInterestKey)
                    .HasName("PK_SPayInterest");

                entity.ToTable("SPayInterest");

                entity.HasIndex(e => new { e.InterestDate, e.LoanKey })
                    .HasName("IX_SPayInterest_LOAN_KEY");

                entity.Property(e => e.SpayInterestKey).HasColumnName("SPAY_INTEREST_KEY");

                entity.Property(e => e.CabInterestAdded)
                    .HasColumnName("CAB_INTEREST_ADDED")
                    .HasColumnType("numeric");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.InterestAdded)
                    .HasColumnName("INTEREST_ADDED")
                    .HasColumnType("numeric");

                entity.Property(e => e.InterestDate)
                    .HasColumnName("INTEREST_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsErrAdj).HasColumnName("IS_ERR_ADJ");

                entity.Property(e => e.IsMinInterestAdjustment).HasColumnName("IS_MIN_INTEREST_ADJUSTMENT");

                entity.Property(e => e.LoanBalance)
                    .HasColumnName("LOAN_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanFeeDue)
                    .HasColumnName("LOAN_FEE_DUE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.PrincDue)
                    .HasColumnName("PRINC_DUE")
                    .HasColumnType("smallmoney");

                entity.HasOne(d => d.LoanKeyNavigation)
                    .WithMany(p => p.SpayInterest)
                    .HasForeignKey(d => d.LoanKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_SPayInterest_Loan");
            });

            modelBuilder.Entity<SpayLoan>(entity =>
            {
                entity.HasKey(e => e.SpayLoanKey)
                    .HasName("PK_SPayLoan");

                entity.ToTable("SPayLoan");

                entity.HasIndex(e => e.LoanKey)
                    .HasName("IX_SPayLoan_LOAN_KEY")
                    .IsUnique();

                entity.Property(e => e.SpayLoanKey).HasColumnName("SPAY_LOAN_KEY");

                entity.Property(e => e.AnnualRatePct)
                    .HasColumnName("ANNUAL_RATE_PCT")
                    .HasColumnType("numeric");

                entity.Property(e => e.CabAnnualRatePct)
                    .HasColumnName("CAB_ANNUAL_RATE_PCT")
                    .HasColumnType("numeric");

                entity.Property(e => e.CabDailyRatePct)
                    .HasColumnName("CAB_DAILY_RATE_PCT")
                    .HasColumnType("numeric");

                entity.Property(e => e.CabInterestDueBalance)
                    .HasColumnName("CAB_INTEREST_DUE_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CabLenderCollFeePastDueBalance)
                    .HasColumnName("CAB_LENDER_COLL_FEE_PAST_DUE_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.ChargeInterestOnLoanFees).HasColumnName("CHARGE_INTEREST_ON_LOAN_FEES");

                entity.Property(e => e.CollAnnualRatePct)
                    .HasColumnName("COLL_ANNUAL_RATE_PCT")
                    .HasColumnType("numeric");

                entity.Property(e => e.CollDailyRatePct)
                    .HasColumnName("COLL_DAILY_RATE_PCT")
                    .HasColumnType("numeric");

                entity.Property(e => e.CollFeeDueBalance)
                    .HasColumnName("COLL_FEE_DUE_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.DailyInterestAmt)
                    .HasColumnName("DAILY_INTEREST_AMT")
                    .HasColumnType("numeric")
                    .HasComputedColumnSql("round((case when [PRINC_DUE_BALANCE]>=(0) then [PRINC_DUE_BALANCE] else (0) end*[DAILY_RATE_PCT])/(100),(2),(1))")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.DailyRatePct)
                    .HasColumnName("DAILY_RATE_PCT")
                    .HasColumnType("numeric");

                entity.Property(e => e.InterestAmt)
                    .HasColumnName("INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.InterestDueBalance)
                    .HasColumnName("INTEREST_DUE_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.InterestPaid)
                    .HasColumnName("INTEREST_PAID")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.IsAutoRoll).HasColumnName("IS_AUTO_ROLL");

                entity.Property(e => e.IsInterestSuspended).HasColumnName("IS_INTEREST_SUSPENDED");

                entity.Property(e => e.LegalFeeDueBalance)
                    .HasColumnName("LEGAL_FEE_DUE_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanFeeDueBalance)
                    .HasColumnName("LOAN_FEE_DUE_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.MinInterestAmt)
                    .HasColumnName("MIN_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.MinInterestDays).HasColumnName("MIN_INTEREST_DAYS");

                entity.Property(e => e.NsfFeeDueBalance)
                    .HasColumnName("NSF_FEE_DUE_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PrincDueBalance)
                    .HasColumnName("PRINC_DUE_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.RiFeeRequiresBankAccount).HasColumnName("RI_FEE_REQUIRES_BANK_ACCOUNT");

                entity.Property(e => e.RolloverAmortPaymentAmt)
                    .HasColumnName("ROLLOVER_AMORT_PAYMENT_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TotCabInterest)
                    .HasColumnName("TOT_CAB_INTEREST")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TotCabLenderCollFee)
                    .HasColumnName("TOT_CAB_LENDER_COLL_FEE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TotInterest)
                    .HasColumnName("TOT_INTEREST")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TransFeeDueBalance)
                    .HasColumnName("TRANS_FEE_DUE_BALANCE")
                    .HasColumnType("smallmoney");

                entity.HasOne(d => d.LoanKeyNavigation)
                    .WithOne(p => p.SpayLoan)
                    .HasForeignKey<SpayLoan>(d => d.LoanKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_SPayLoan");
            });

            modelBuilder.Entity<SpayLoanInSyncAdj>(entity =>
            {
                entity.HasKey(e => e.SpayLoanInSyncAdjKey)
                    .HasName("PK_SPayLoanInSyncAdj");

                entity.ToTable("SPayLoanInSyncAdj");

                entity.Property(e => e.SpayLoanInSyncAdjKey).HasColumnName("SPAY_LOAN_IN_SYNC_ADJ_KEY");

                entity.Property(e => e.CAdjCntInt).HasColumnName("C_ADJ_CNT_INT");

                entity.Property(e => e.CAdjCntLpSpayRecord).HasColumnName("C_ADJ_CNT_LP_SPAY_RECORD");

                entity.Property(e => e.CCabInterestBalance)
                    .HasColumnName("C_CAB_INTEREST_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CCabLenderCollFeePastDueBalance)
                    .HasColumnName("C_CAB_LENDER_COLL_FEE_PAST_DUE_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CCashAmt)
                    .HasColumnName("C_CASH_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CChargeLienFee).HasColumnName("C_CHARGE_LIEN_FEE");

                entity.Property(e => e.CCollFeeBalance)
                    .HasColumnName("C_COLL_FEE_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CDefaultDate)
                    .HasColumnName("C_DEFAULT_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.CDefaulted).HasColumnName("C_DEFAULTED");

                entity.Property(e => e.CInterestBalance)
                    .HasColumnName("C_INTEREST_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CInventoryAmt)
                    .HasColumnName("C_INVENTORY_AMT")
                    .HasColumnType("smallmoney")
                    .HasComputedColumnSql("case when [C_DEFAULTED]=(1) then (0) else [C_PRINC_BALANCE] end")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.CLegalFeeBalance)
                    .HasColumnName("C_LEGAL_FEE_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CLienFeeAmt)
                    .HasColumnName("C_LIEN_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CLoanAmt)
                    .HasColumnName("C_LOAN_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CLoanBalance)
                    .HasColumnName("C_LOAN_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CLoanFeeAmt)
                    .HasColumnName("C_LOAN_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CLoanFeeBalance)
                    .HasColumnName("C_LOAN_FEE_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CLoanStatus)
                    .IsRequired()
                    .HasColumnName("C_LOAN_STATUS")
                    .HasColumnType("char(1)");

                entity.Property(e => e.CNsfFeeDueBalance)
                    .HasColumnName("C_NSF_FEE_DUE_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CPendingSchedAchAmt)
                    .HasColumnName("C_PENDING_SCHED_ACH_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CPendingSchedAchSent)
                    .HasColumnName("C_PENDING_SCHED_ACH_SENT")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.CPrincAmt)
                    .HasColumnName("C_PRINC_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CPrincBalance)
                    .HasColumnName("C_PRINC_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CRiBalance)
                    .HasColumnName("C_RI_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CTotCabInterest)
                    .HasColumnName("C_TOT_CAB_INTEREST")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CTotalInterestAmt)
                    .HasColumnName("C_TOTAL_INTEREST_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CabInterestBalance)
                    .HasColumnName("CAB_INTEREST_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CabLenderCollFeePastDueBalance)
                    .HasColumnName("CAB_LENDER_COLL_FEE_PAST_DUE_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CashAmt)
                    .HasColumnName("CASH_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.ChargeLienFee).HasColumnName("CHARGE_LIEN_FEE");

                entity.Property(e => e.CollFeeBalance)
                    .HasColumnName("COLL_FEE_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DefaultDate)
                    .HasColumnName("DEFAULT_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Defaulted).HasColumnName("DEFAULTED");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.InterestBalance)
                    .HasColumnName("INTEREST_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.InventoryAmt)
                    .HasColumnName("INVENTORY_AMT")
                    .HasColumnType("smallmoney")
                    .HasComputedColumnSql("case when [DEFAULTED]=(1) then (0) else [PRINC_BALANCE] end")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.IsInLegalStatus).HasColumnName("IS_IN_LEGAL_STATUS");

                entity.Property(e => e.LegalFeeBalance)
                    .HasColumnName("LEGAL_FEE_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LienFeeAmt)
                    .HasColumnName("LIEN_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanAmt)
                    .HasColumnName("LOAN_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanBalance)
                    .HasColumnName("LOAN_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanFeeAmt)
                    .HasColumnName("LOAN_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanFeeBalance)
                    .HasColumnName("LOAN_FEE_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.LoanStatus)
                    .IsRequired()
                    .HasColumnName("LOAN_STATUS")
                    .HasColumnType("char(1)");

                entity.Property(e => e.NsfFeeDueBalance)
                    .HasColumnName("NSF_FEE_DUE_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PendingSchedAchAmt)
                    .HasColumnName("PENDING_SCHED_ACH_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PendingSchedAchSent)
                    .HasColumnName("PENDING_SCHED_ACH_SENT")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.PrincAmt)
                    .HasColumnName("PRINC_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PrincBalance)
                    .HasColumnName("PRINC_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.RiBalance)
                    .HasColumnName("RI_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TotCabInterest)
                    .HasColumnName("TOT_CAB_INTEREST")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TotalInterestAmt)
                    .HasColumnName("TOTAL_INTEREST_AMT")
                    .HasColumnType("smallmoney");
            });

            modelBuilder.Entity<SpaySchedRollover>(entity =>
            {
                entity.HasKey(e => e.SpaySchedRolloverKey)
                    .HasName("PK_SPaySchedRollover");

                entity.ToTable("SPaySchedRollover");

                entity.HasIndex(e => e.CustomerKey)
                    .HasName("IX_SPaySchedRollover_CUSTOMER_KEY");

                entity.HasIndex(e => e.LoanKey)
                    .HasName("IX_SPaySchedRollover_LOAN_KEY");

                entity.HasIndex(e => e.ZeroRecLoanKey)
                    .HasName("IX_SPaySchedRollover_ZERO_REC_LOAN_KEY");

                entity.HasIndex(e => new { e.SpaySchedRolloverKey, e.ZeroRecLoanKey })
                    .HasName("IX_SPaySchedRollover_SPAY_SCHED_ROLLOVER_KEY_ZERO_REC_LOAN_KEY");

                entity.HasIndex(e => new { e.NumRollovers, e.LoanPaymentKey, e.SpaySchedRolloverKey, e.ZeroRecLoanKey })
                    .HasName("IX_SPaySchedRollover_LOAN_PAYMENT_KEY_SPAY_SCHED_ROLLOVER_KEY");

                entity.Property(e => e.SpaySchedRolloverKey).HasColumnName("SPAY_SCHED_ROLLOVER_KEY");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.LoanPaymentKey).HasColumnName("LOAN_PAYMENT_KEY");

                entity.Property(e => e.NumRollovers).HasColumnName("NUM_ROLLOVERS");

                entity.Property(e => e.ZeroRecLoanKey).HasColumnName("ZERO_REC_LOAN_KEY");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.SpaySchedRollover)
                    .HasForeignKey(d => d.CustomerKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_SPaySchedRollover_CUSTOMER_KEY");

                entity.HasOne(d => d.LoanKeyNavigation)
                    .WithMany(p => p.SpaySchedRollover)
                    .HasForeignKey(d => d.LoanKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_SPaySchedRollover_LOAN_KEY");
            });

            modelBuilder.Entity<SpaySchedRolloverDetail>(entity =>
            {
                entity.HasKey(e => e.SpaySchedRolloverDetailKey)
                    .HasName("PK_SPaySchedRolloverDetail");

                entity.ToTable("SPaySchedRolloverDetail");

                entity.HasIndex(e => e.AchHistoryKey)
                    .HasName("IX_SPaySchedRolloverDetail_ACH_HISTORY_KEY");

                entity.HasIndex(e => e.CancelLoanPaymentKey)
                    .HasName("IX_SPaySchedRolloverDetail_CANCEL_LOAN_PAYMENT_KEY");

                entity.HasIndex(e => e.SpaySchedRolloverKey)
                    .HasName("IX_SPaySchedRolloverDetail_SPAY_SCHED_ROLLOVER_KEY");

                entity.HasIndex(e => e.TransDetailKey)
                    .HasName("IX_SPaySchedRolloverDetail_TRANS_DETAIL_KEY");

                entity.HasIndex(e => new { e.RolloverDate, e.RolloverNum, e.VoidLoanPaymentKey })
                    .HasName("IX_SpaySchedRolloverDetail_VOID_LOAN_PAYMENT_KEY");

                entity.HasIndex(e => new { e.DueDate, e.RolloverDate, e.RolloverNum, e.TransDetailKey, e.CancelLoanPaymentKey, e.VoidLoanPaymentKey, e.SpaySchedRolloverKey, e.SchedLoanPaymentKey })
                    .HasName("IX_SPaySchedRolloverDetail_TRANS_DETAIL_KEY_CANCEL_LOAN_PAYMENT_KEY");

                entity.HasIndex(e => new { e.RolloverDate, e.RolloverNum, e.DueDate, e.SchedLoanPaymentKey, e.TransDetailKey, e.CancelLoanPaymentKey, e.VoidLoanPaymentKey, e.SpaySchedRolloverKey })
                    .HasName("IX_SPaySchedRolloverDetail_SCHED_LOAN_PAYMENT_KEY_TRANS_DETAIL_KEY");

                entity.Property(e => e.SpaySchedRolloverDetailKey).HasColumnName("SPAY_SCHED_ROLLOVER_DETAIL_KEY");

                entity.Property(e => e.AchHistoryKey).HasColumnName("ACH_HISTORY_KEY");

                entity.Property(e => e.CancelLoanPaymentKey).HasColumnName("CANCEL_LOAN_PAYMENT_KEY");

                entity.Property(e => e.DueDate)
                    .HasColumnName("DUE_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.LoanAmt)
                    .HasColumnName("LOAN_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanAtr)
                    .HasColumnName("LOAN_ATR")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.OptBuydownAmt)
                    .HasColumnName("OPT_BUYDOWN_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PrincAmt)
                    .HasColumnName("PRINC_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.RolloverDate)
                    .HasColumnName("ROLLOVER_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.RolloverNum).HasColumnName("ROLLOVER_NUM");

                entity.Property(e => e.SchedLoanPaymentKey).HasColumnName("SCHED_LOAN_PAYMENT_KEY");

                entity.Property(e => e.SpaySchedRolloverKey).HasColumnName("SPAY_SCHED_ROLLOVER_KEY");

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");

                entity.Property(e => e.VoidLoanPaymentKey).HasColumnName("VOID_LOAN_PAYMENT_KEY");

                entity.HasOne(d => d.SpaySchedRolloverKeyNavigation)
                    .WithMany(p => p.SpaySchedRolloverDetail)
                    .HasForeignKey(d => d.SpaySchedRolloverKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_SPaySchedRolloverDetail_LOAN_KEY");
            });

            modelBuilder.Entity<SpecialMessage>(entity =>
            {
                entity.HasKey(e => e.SpecialMessageKey)
                    .HasName("PK_SpecialMessage");

                entity.Property(e => e.SpecialMessageKey).HasColumnName("SPECIAL_MESSAGE_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EndDate)
                    .HasColumnName("END_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ForCashedChecks).HasColumnName("FOR_CASHED_CHECKS");

                entity.Property(e => e.ForCustomerNotice).HasColumnName("FOR_CUSTOMER_NOTICE");

                entity.Property(e => e.ForGold).HasColumnName("FOR_GOLD");

                entity.Property(e => e.ForServicesNotice).HasColumnName("FOR_SERVICES_NOTICE");

                entity.Property(e => e.MessageFile)
                    .HasColumnName("MESSAGE_FILE")
                    .HasColumnType("text");

                entity.Property(e => e.MessageName)
                    .IsRequired()
                    .HasColumnName("MESSAGE_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.ProcedureName)
                    .IsRequired()
                    .HasColumnName("PROCEDURE_NAME")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.StartDate)
                    .HasColumnName("START_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.TellerNavigation)
                    .WithMany(p => p.SpecialMessage)
                    .HasPrincipalKey(p => p.Teller)
                    .HasForeignKey(d => d.Teller)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_SpecialMessage_Teller");
            });

            modelBuilder.Entity<SpecialMessageAzCusts>(entity =>
            {
                entity.HasKey(e => e.SpecialMessageAzCustsKey)
                    .HasName("PK_SpecialMessage_AzCusts");

                entity.ToTable("SpecialMessage_AzCusts");

                entity.Property(e => e.SpecialMessageAzCustsKey).HasColumnName("SPECIAL_MESSAGE_AZ_CUSTS_KEY");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");
            });

            modelBuilder.Entity<SpecialMessageLoanProduct>(entity =>
            {
                entity.HasKey(e => e.SpecialMessageLoanProductKey)
                    .HasName("PK_SpecialMessageLoanProduct");

                entity.HasIndex(e => new { e.SpecialMessageKey, e.LoanProductKey })
                    .HasName("CK_SpecialMessageLoanProduct_SPECIAL_MESSAGE_KEY_LOAN_PRODUCT_KEY")
                    .IsUnique();

                entity.Property(e => e.SpecialMessageLoanProductKey).HasColumnName("SPECIAL_MESSAGE_LOAN_PRODUCT_KEY");

                entity.Property(e => e.LoanProductKey).HasColumnName("LOAN_PRODUCT_KEY");

                entity.Property(e => e.SpecialMessageKey).HasColumnName("SPECIAL_MESSAGE_KEY");

                entity.HasOne(d => d.LoanProductKeyNavigation)
                    .WithMany(p => p.SpecialMessageLoanProduct)
                    .HasForeignKey(d => d.LoanProductKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_SpecialMessageLoanProduct_LOAN_PRODUCT_KEY");

                entity.HasOne(d => d.SpecialMessageKeyNavigation)
                    .WithMany(p => p.SpecialMessageLoanProduct)
                    .HasForeignKey(d => d.SpecialMessageKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_SpecialMessageLoanProduct_SPECIAL_MESSAGE_KEY");
            });

            modelBuilder.Entity<SpecialMessageLocation>(entity =>
            {
                entity.HasKey(e => e.SpecialMessageLocationKey)
                    .HasName("PK_SpecialMessageLocation");

                entity.Property(e => e.SpecialMessageLocationKey).HasColumnName("SPECIAL_MESSAGE_LOCATION_KEY");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.SpecialMessageKey).HasColumnName("SPECIAL_MESSAGE_KEY");

                entity.HasOne(d => d.SpecialMessageKeyNavigation)
                    .WithMany(p => p.SpecialMessageLocation)
                    .HasForeignKey(d => d.SpecialMessageKey)
                    .HasConstraintName("FK_SpecialMessageLocation_SPECIAL_MESSAGE_KEY");
            });

            modelBuilder.Entity<StoreClosed>(entity =>
            {
                entity.HasKey(e => e.StoreclosedKey)
                    .HasName("PK_StoreClosed");

                entity.HasIndex(e => e.Closedate)
                    .HasName("IX_CLOSEDATE")
                    .IsUnique();

                entity.Property(e => e.StoreclosedKey).HasColumnName("STORECLOSED_KEY");

                entity.Property(e => e.Bank).HasColumnName("BANK");

                entity.Property(e => e.Closedate)
                    .HasColumnName("CLOSEDATE")
                    .HasColumnType("date");

                entity.Property(e => e.Comment)
                    .IsRequired()
                    .HasColumnName("COMMENT")
                    .HasColumnType("varchar(40)");
            });

            modelBuilder.Entity<StoreClosedDetail>(entity =>
            {
                entity.HasKey(e => e.StorecloseddetailKey)
                    .HasName("PK_StoreClosedDetail");

                entity.HasIndex(e => new { e.Closedate, e.Location })
                    .HasName("IX_CLOSEDATE")
                    .IsUnique();

                entity.Property(e => e.StorecloseddetailKey).HasColumnName("STORECLOSEDDETAIL_KEY");

                entity.Property(e => e.Closedate)
                    .HasColumnName("CLOSEDATE")
                    .HasColumnType("date");

                entity.Property(e => e.Location).HasColumnName("LOCATION");
            });

            modelBuilder.Entity<StoreWindows>(entity =>
            {
                entity.HasKey(e => e.StoreWindowsKey)
                    .HasName("PK_Store_Windows");

                entity.ToTable("Store_Windows");

                entity.HasIndex(e => new { e.Location, e.ComputerName })
                    .HasName("IX_Store_Windows")
                    .IsUnique();

                entity.Property(e => e.StoreWindowsKey).HasColumnName("Store_Windows_Key");

                entity.Property(e => e.Agreement)
                    .HasColumnName("AGREEMENT")
                    .HasColumnType("varchar(500)");

                entity.Property(e => e.CitrixName)
                    .HasColumnName("Citrix_Name")
                    .HasColumnType("varchar(1000)");

                entity.Property(e => e.ComputerName)
                    .IsRequired()
                    .HasColumnName("Computer_Name")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.CustomerKeyboard)
                    .HasColumnName("CUSTOMER_KEYBOARD")
                    .HasColumnType("varchar(200)")
                    .HasDefaultValueSql("''");

                entity.Property(e => e.Dotmatrix)
                    .HasColumnName("DOTMATRIX")
                    .HasColumnType("varchar(500)");

                entity.Property(e => e.MoFormsRemaining)
                    .HasColumnName("MO_FORMS_REMAINING")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.MoneyOrderComPort)
                    .HasColumnName("MONEY_ORDER_COM_PORT")
                    .HasColumnType("varchar(6)");

                entity.Property(e => e.MoneyOrders).HasColumnName("MONEY_ORDERS");

                entity.Property(e => e.Receipt)
                    .HasColumnName("RECEIPT")
                    .HasColumnType("varchar(500)");

                entity.Property(e => e.Report)
                    .HasColumnName("REPORT")
                    .HasColumnType("varchar(500)");

                entity.Property(e => e.SharedPrinters).HasColumnName("SHARED_PRINTERS");

                entity.Property(e => e.SystemDate)
                    .HasColumnName("SYSTEM_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.SystemDateSet)
                    .HasColumnName("SYSTEM_DATE_SET")
                    .HasColumnType("date");

                entity.Property(e => e.TellerKeyboard)
                    .HasColumnName("TELLER_KEYBOARD")
                    .HasColumnType("varchar(200)")
                    .HasDefaultValueSql("''");

                entity.Property(e => e.WindowsVersion)
                    .HasColumnName("WINDOWS_VERSION")
                    .HasColumnType("char(2)");
            });

            modelBuilder.Entity<TaskActionResult>(entity =>
            {
                entity.HasKey(e => e.TaskActionResultKey)
                    .HasName("PK_TaskActionResult");

                entity.Property(e => e.TaskActionResultKey).HasColumnName("TASK_ACTION_RESULT_KEY");

                entity.Property(e => e.AgentActionKey).HasColumnName("AGENT_ACTION_KEY");

                entity.Property(e => e.AgentResultKey1)
                    .HasColumnName("AGENT_RESULT_KEY1")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.AgentResultKey2)
                    .HasColumnName("AGENT_RESULT_KEY2")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.AllowNote)
                    .HasColumnName("ALLOW_NOTE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.CbrOutOrInCall).HasColumnName("CBR_OUT_OR_IN_CALL");

                entity.Property(e => e.CollectorBonusRpt).HasColumnName("COLLECTOR_BONUS_RPT");

                entity.Property(e => e.FollowupDefault).HasColumnName("FOLLOWUP_DEFAULT");

                entity.Property(e => e.FollowupMax)
                    .HasColumnName("FOLLOWUP_MAX")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.HotKey).HasColumnName("HOT_KEY");

                entity.Property(e => e.OptAuditCatCode).HasColumnName("OPT_AUDIT_CAT_CODE");

                entity.Property(e => e.RequireReasonForArrears).HasColumnName("REQUIRE_REASON_FOR_ARREARS");

                entity.Property(e => e.RisAuditId)
                    .HasColumnName("RIS_AUDIT_ID")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.ShowFlodForm).HasColumnName("SHOW_FLOD_FORM");

                entity.Property(e => e.ShowPaymentForm)
                    .HasColumnName("SHOW_PAYMENT_FORM")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.ShowPtpForm).HasColumnName("SHOW_PTP_FORM");

                entity.Property(e => e.ShowRepoVendorList).HasColumnName("SHOW_REPO_VENDOR_LIST");

                entity.HasOne(d => d.AgentActionKeyNavigation)
                    .WithMany(p => p.TaskActionResult)
                    .HasForeignKey(d => d.AgentActionKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_TaskActionResult_AgentAction");
            });

            modelBuilder.Entity<TaskActionResultXref>(entity =>
            {
                entity.HasKey(e => e.TaskActionResultXrefKey)
                    .HasName("PK_TaskActionResultXref");

                entity.HasIndex(e => e.Code)
                    .HasName("IX_TaskActionResultXref_CODE");

                entity.Property(e => e.TaskActionResultXrefKey).HasColumnName("TASK_ACTION_RESULT_XREF_KEY");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(200)");

                entity.Property(e => e.TaskActionResultKey).HasColumnName("TASK_ACTION_RESULT_KEY");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.UpdateDate)
                    .HasColumnName("UPDATE_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdateTeller)
                    .HasColumnName("UPDATE_TELLER")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.TaskActionResultKeyNavigation)
                    .WithMany(p => p.TaskActionResultXref)
                    .HasForeignKey(d => d.TaskActionResultKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_TaskActionResultXref_TaskActionResult");
            });

            modelBuilder.Entity<TellerComputer>(entity =>
            {
                entity.HasKey(e => e.TellerComputerKey)
                    .HasName("PK_TellerComputer");

                entity.Property(e => e.TellerComputerKey).HasColumnName("TELLER_COMPUTER_KEY");

                entity.Property(e => e.ComputerName)
                    .HasColumnName("COMPUTER_NAME")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.TellerNavigation)
                    .WithMany(p => p.TellerComputer)
                    .HasPrincipalKey(p => p.Teller)
                    .HasForeignKey(d => d.Teller)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_TellerComputer_TellerId");
            });

            modelBuilder.Entity<TellerIdedit>(entity =>
            {
                entity.HasKey(e => e.TellerIdEditKey)
                    .HasName("PK_TellerIDEdit");

                entity.ToTable("TellerIDEdit");

                entity.Property(e => e.TellerIdEditKey).HasColumnName("TELLER_ID_EDIT_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.NewSecuritygroupKey).HasColumnName("NEW_SECURITYGROUP_KEY");

                entity.Property(e => e.OldSecuritygroupKey).HasColumnName("OLD_SECURITYGROUP_KEY");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");
            });

            modelBuilder.Entity<TellerLogin>(entity =>
            {
                entity.HasKey(e => e.TellerLoginKey)
                    .HasName("PK_TellerLogin");

                entity.HasIndex(e => new { e.Hostname, e.LoggedIn })
                    .HasName("IX_TellerLogin_HOSTNAME_LOGGED_IN");

                entity.HasIndex(e => new { e.LoginDate, e.Teller })
                    .HasName("IX_TellerLogin_LOGIN_DATE");

                entity.HasIndex(e => new { e.TellerLoginKey, e.Teller, e.Location, e.Hostname })
                    .HasName("IX_TellerLogin_HOSTNAME");

                entity.Property(e => e.TellerLoginKey).HasColumnName("TELLER_LOGIN_KEY");

                entity.Property(e => e.Hostname)
                    .IsRequired()
                    .HasColumnName("HOSTNAME")
                    .HasColumnType("varchar(255)");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.LoggedIn)
                    .HasColumnName("LOGGED_IN")
                    .HasColumnType("LOGICAL");

                entity.Property(e => e.LoginDate)
                    .HasColumnName("LOGIN_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.LogoutDate)
                    .HasColumnName("LOGOUT_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ServerName)
                    .IsRequired()
                    .HasColumnName("SERVER_NAME")
                    .HasColumnType("varchar(50)")
                    .HasDefaultValueSql("''");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");
            });

            modelBuilder.Entity<TellerParsedCashException>(entity =>
            {
                entity.HasKey(e => e.TellerParsedcashexceptionKey)
                    .HasName("PK_TellerParsedCashException");

                entity.Property(e => e.TellerParsedcashexceptionKey).HasColumnName("TELLER_PARSEDCASHEXCEPTION_KEY");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EnteredAmount)
                    .HasColumnName("ENTERED_AMOUNT")
                    .HasColumnType("money");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.TransactionAmount)
                    .HasColumnName("TRANSACTION_AMOUNT")
                    .HasColumnType("money");

                entity.Property(e => e.TransactionKey).HasColumnName("TRANSACTION_KEY");
            });

            modelBuilder.Entity<TellerPwdHistory>(entity =>
            {
                entity.HasKey(e => e.TellerPwdHistoryKey)
                    .HasName("PK_TellerPwdHistory");

                entity.Property(e => e.TellerPwdHistoryKey).HasColumnName("TELLER_PWD_HISTORY_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.IsReset).HasColumnName("IS_RESET");

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasColumnName("PASSWORD")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.TellerNavigation)
                    .WithMany(p => p.TellerPwdHistory)
                    .HasPrincipalKey(p => p.Teller)
                    .HasForeignKey(d => d.Teller)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_TellerPwdHistory_TellerID");
            });

            modelBuilder.Entity<TellerSecurity>(entity =>
            {
                entity.HasKey(e => e.TellerSecurityKey)
                    .HasName("PK_TellerSecurity");

                entity.Property(e => e.TellerSecurityKey).HasColumnName("TELLER_SECURITY_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateUpdated)
                    .HasColumnName("DATE_UPDATED")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndDate)
                    .HasColumnName("END_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.EndedOnDate)
                    .HasColumnName("ENDED_ON_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.IsTemporary).HasColumnName("IS_TEMPORARY");

                entity.Property(e => e.SgValues)
                    .HasColumnName("SG_VALUES")
                    .HasColumnType("varchar(256)");

                entity.Property(e => e.StartDate)
                    .HasColumnName("START_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.TellerIdKey).HasColumnName("TELLER_ID_KEY");

                entity.Property(e => e.UpdatedBy)
                    .HasColumnName("UPDATED_BY")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.TellerIdKeyNavigation)
                    .WithMany(p => p.TellerSecurity)
                    .HasForeignKey(d => d.TellerIdKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_TellerSecurity_TELLERID");
            });

            modelBuilder.Entity<TellerTitle>(entity =>
            {
                entity.HasKey(e => e.TitleKey)
                    .HasName("PK__TellerTi__E75B9190259D7A1C");

                entity.Property(e => e.TitleKey).HasColumnName("TITLE_KEY");

                entity.Property(e => e.Active).HasColumnName("ACTIVE");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Deleted).HasColumnName("DELETED");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasColumnName("TITLE")
                    .HasColumnType("varchar(50)");
            });

            modelBuilder.Entity<TellerTitleEdit>(entity =>
            {
                entity.HasKey(e => e.TitleEditKey)
                    .HasName("PK__TellerTi__8E0C4C0C6C8C6E01");

                entity.Property(e => e.TitleEditKey).HasColumnName("TITLE_EDIT_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.Modification)
                    .IsRequired()
                    .HasColumnName("MODIFICATION")
                    .HasColumnType("varchar(63)");

                entity.Property(e => e.TitleKey).HasColumnName("TITLE_KEY");

                entity.HasOne(d => d.TitleKeyNavigation)
                    .WithMany(p => p.TellerTitleEdit)
                    .HasForeignKey(d => d.TitleKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_TellerTitleEdit_TellerTitle");
            });

            modelBuilder.Entity<TellerType>(entity =>
            {
                entity.HasKey(e => e.TellerType1)
                    .HasName("PK_TellerType");

                entity.Property(e => e.TellerType1)
                    .HasColumnName("TELLER_TYPE")
                    .ValueGeneratedNever();

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(255)");
            });

            modelBuilder.Entity<Tellerid>(entity =>
            {
                entity.HasKey(e => e.TellerIdKey)
                    .HasName("PK_TellerId");

                entity.ToTable("TELLERID");

                entity.HasIndex(e => e.Password)
                    .HasName("IX_TellerID_PASSWORD");

                entity.HasIndex(e => e.Teller)
                    .HasName("telleridndx")
                    .IsUnique();

                entity.HasIndex(e => new { e.Location, e.SecuritygroupKey })
                    .HasName("IX_TellerID_LOCATION_SECURITYGROUP_KEY");

                entity.HasIndex(e => new { e.Lstname, e.Firstname, e.Teller })
                    .HasName("IX_TellerID_TELLER_FIRSTNAME_LSTNAME");

                entity.HasIndex(e => new { e.Teller, e.Firstname, e.Lstname, e.LastLogin, e.SwipeId, e.CertDate, e.CertBy, e.Location, e.LastPwchg, e.SecuritygroupKey })
                    .HasName("IX_TellerID_SECURITYGROUP_KEY_1");

                entity.Property(e => e.TellerIdKey).HasColumnName("TELLER_ID_KEY");

                entity.Property(e => e.AccountLocked).HasColumnName("ACCOUNT_LOCKED");

                entity.Property(e => e.AdpId)
                    .IsRequired()
                    .HasColumnName("ADP_ID")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.Attempts).HasColumnName("ATTEMPTS");

                entity.Property(e => e.AuditRequired)
                    .HasColumnName("AUDIT_REQUIRED")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.CashcountEndDate)
                    .HasColumnName("CASHCOUNT_END_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.CashcountStartDate)
                    .HasColumnName("CASHCOUNT_START_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.CertBy)
                    .HasColumnName("CERT_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.CertDate)
                    .HasColumnName("CERT_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.DisplayReleaseInfo).HasDefaultValueSql("1");

                entity.Property(e => e.Firstname)
                    .IsRequired()
                    .HasColumnName("FIRSTNAME")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.HireDate)
                    .HasColumnName("HIRE_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.LastLocation).HasColumnName("LAST_LOCATION");

                entity.Property(e => e.LastLogin)
                    .HasColumnName("LAST_LOGIN")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.LastPwchg)
                    .HasColumnName("LastPWChg")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.LastSelectedCustomerKey).HasColumnName("LAST_SELECTED_CUSTOMER_KEY");

                entity.Property(e => e.LastSelectedLoanKey).HasColumnName("LAST_SELECTED_LOAN_KEY");

                entity.Property(e => e.Location).HasColumnName("location");

                entity.Property(e => e.LocationListviewColumnWidths)
                    .IsRequired()
                    .HasColumnName("LOCATION_LISTVIEW_COLUMN_WIDTHS")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.LocationListviewColumns)
                    .IsRequired()
                    .HasColumnName("LOCATION_LISTVIEW_COLUMNS")
                    .HasColumnType("varchar(500)");

                entity.Property(e => e.LocationListviewSort)
                    .IsRequired()
                    .HasColumnName("LOCATION_LISTVIEW_SORT")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.Lstname)
                    .IsRequired()
                    .HasColumnName("LSTNAME")
                    .HasColumnType("varchar(15)");

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasColumnName("PASSWORD")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.QuestionAttempts).HasColumnName("QUESTION_ATTEMPTS");

                entity.Property(e => e.Rsapassword)
                    .HasColumnName("RSAPassword")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.SamAccountName)
                    .HasColumnName("SAM_ACCOUNT_NAME")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.SecuritygroupKey).HasColumnName("SECURITYGROUP_KEY");

                entity.Property(e => e.ShowOpsNews)
                    .HasColumnName("SHOW_OPS_NEWS")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Ssn)
                    .IsRequired()
                    .HasColumnName("SSN")
                    .HasColumnType("char(9)");

                entity.Property(e => e.SwipeId)
                    .HasColumnName("SWIPE_ID")
                    .HasColumnType("varchar(12)");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.TellerType).HasColumnName("TELLER_TYPE");

                entity.Property(e => e.TitleKey).HasColumnName("TITLE_KEY");

                entity.HasOne(d => d.SecuritygroupKeyNavigation)
                    .WithMany(p => p.Tellerid)
                    .HasForeignKey(d => d.SecuritygroupKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK__TELLERID__SECURI__28CDE297");

                entity.HasOne(d => d.TellerTypeNavigation)
                    .WithMany(p => p.Tellerid)
                    .HasForeignKey(d => d.TellerType)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_TellerID_TELLER_TYPE");

                entity.HasOne(d => d.TitleKeyNavigation)
                    .WithMany(p => p.Tellerid)
                    .HasForeignKey(d => d.TitleKey)
                    .HasConstraintName("FK_TELLERID_TELLERTITLE");
            });

            modelBuilder.Entity<TempLoanProductSplit>(entity =>
            {
                entity.HasKey(e => e.TempLoanProductSplitKey)
                    .HasName("PK_TempLoanProductSplit");

                entity.Property(e => e.TempLoanProductSplitKey).HasColumnName("TEMP_LOAN_PRODUCT_SPLIT_KEY");

                entity.Property(e => e.LoanType)
                    .IsRequired()
                    .HasColumnName("LOAN_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.NewLoanProductConfigKey).HasColumnName("NEW_LOAN_PRODUCT_CONFIG_KEY");

                entity.Property(e => e.NewLoanProductKey).HasColumnName("NEW_LOAN_PRODUCT_KEY");

                entity.Property(e => e.NewLoanProductName)
                    .IsRequired()
                    .HasColumnName("NEW_LOAN_PRODUCT_NAME")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.OrigLoanProductConfigKey).HasColumnName("ORIG_LOAN_PRODUCT_CONFIG_KEY");

                entity.Property(e => e.OrigLoanProductKey).HasColumnName("ORIG_LOAN_PRODUCT_KEY");

                entity.Property(e => e.OrigLoanProductName)
                    .IsRequired()
                    .HasColumnName("ORIG_LOAN_PRODUCT_NAME")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.ProductType)
                    .IsRequired()
                    .HasColumnName("PRODUCT_TYPE")
                    .HasColumnType("char(1)");

                entity.HasOne(d => d.NewLoanProductConfigKeyNavigation)
                    .WithMany(p => p.TempLoanProductSplitNewLoanProductConfigKeyNavigation)
                    .HasForeignKey(d => d.NewLoanProductConfigKey)
                    .HasConstraintName("FK_TempLoanProductSplit_NEW_LOAN_PRODUCT_CONFIG_KEY");

                entity.HasOne(d => d.NewLoanProductKeyNavigation)
                    .WithMany(p => p.TempLoanProductSplitNewLoanProductKeyNavigation)
                    .HasForeignKey(d => d.NewLoanProductKey)
                    .HasConstraintName("FK_TempLoanProductSplit_NEW_LOAN_PRODUCT_KEY");

                entity.HasOne(d => d.OrigLoanProductConfigKeyNavigation)
                    .WithMany(p => p.TempLoanProductSplitOrigLoanProductConfigKeyNavigation)
                    .HasForeignKey(d => d.OrigLoanProductConfigKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_TempLoanProductSplit_ORIG_LOAN_PRODUCT_CONFIG_KEY");

                entity.HasOne(d => d.OrigLoanProductKeyNavigation)
                    .WithMany(p => p.TempLoanProductSplitOrigLoanProductKeyNavigation)
                    .HasForeignKey(d => d.OrigLoanProductKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_TempLoanProductSplit_ORIG_LOAN_PRODUCT_KEY");
            });

            modelBuilder.Entity<TestCreditCard>(entity =>
            {
                entity.HasKey(e => e.TestCreditCardKey)
                    .HasName("PK_TestCreditCard");

                entity.Property(e => e.TestCreditCardKey).HasColumnName("TEST_CREDIT_CARD_KEY");

                entity.Property(e => e.CardNumber)
                    .IsRequired()
                    .HasColumnName("CARD_NUMBER")
                    .HasColumnType("char(16)");

                entity.Property(e => e.GuaranteeAmt)
                    .HasColumnName("GUARANTEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.InUse).HasColumnName("IN_USE");

                entity.Property(e => e.Mc).HasColumnName("MC");

                entity.Property(e => e.TestScenario).HasDefaultValueSql("0");

                entity.Property(e => e.Token)
                    .IsRequired()
                    .HasColumnName("TOKEN")
                    .HasColumnType("varchar(40)")
                    .HasDefaultValueSql("''");

                entity.Property(e => e.Visa).HasColumnName("VISA");
            });

            modelBuilder.Entity<TitleLoan>(entity =>
            {
                entity.HasKey(e => e.TitleloanKey)
                    .HasName("PK_TitleLoan");

                entity.HasIndex(e => e.CustomerKey)
                    .HasName("IX_TitleLoan_CUSTOMER_KEY");

                entity.HasIndex(e => e.LienHolderKey)
                    .HasName("IX_TitleLoan_LIEN_HOLDER_KEY");

                entity.HasIndex(e => e.LoanKey)
                    .HasName("IX_TitleLoan_LOAN_KEY");

                entity.HasIndex(e => e.VehicleKey)
                    .HasName("IX_TitleLoan_VEHICLE_KEY");

                entity.HasIndex(e => new { e.LoanKey, e.LienHolderKey })
                    .HasName("IX_TitleLoan_LIEN_HOLDER_KEY_LOAN_KEY");

                entity.HasIndex(e => new { e.LoanKey, e.VehVin })
                    .HasName("IX_VEH_VIN");

                entity.HasIndex(e => new { e.VehVin, e.LoanKey, e.TitleloanKey })
                    .HasName("IX_TitleLoan_VEH_VIN_LOAN_KEY");

                entity.Property(e => e.TitleloanKey).HasColumnName("TITLELOAN_KEY");

                entity.Property(e => e.AgreementNumber).HasColumnName("AGREEMENT_NUMBER");

                entity.Property(e => e.AndOrFirstname)
                    .IsRequired()
                    .HasColumnName("AND_OR_FIRSTNAME")
                    .HasColumnType("varchar(24)");

                entity.Property(e => e.AndOrLastname)
                    .IsRequired()
                    .HasColumnName("AND_OR_LASTNAME")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.AndOrMidname)
                    .IsRequired()
                    .HasColumnName("AND_OR_MIDNAME")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.AndOrName)
                    .HasColumnName("AND_OR_NAME")
                    .HasColumnType("varchar(59)");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.EyeColor).HasColumnName("EYE_COLOR");

                entity.Property(e => e.FuelType)
                    .HasColumnName("FUEL_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.Gender)
                    .IsRequired()
                    .HasColumnName("GENDER")
                    .HasColumnType("char(1)");

                entity.Property(e => e.HairColor).HasColumnName("HAIR_COLOR");

                entity.Property(e => e.HeightFeet).HasColumnName("HEIGHT_FEET");

                entity.Property(e => e.HeightInches).HasColumnName("HEIGHT_INCHES");

                entity.Property(e => e.InsFullCover)
                    .HasColumnName("INS_FULL_COVER")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.InsName)
                    .IsRequired()
                    .HasColumnName("INS_NAME")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.InsPhone)
                    .IsRequired()
                    .HasColumnName("INS_PHONE")
                    .HasColumnType("varchar(12)");

                entity.Property(e => e.InsPolicyNum)
                    .IsRequired()
                    .HasColumnName("INS_POLICY_NUM")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.IsClearTitle).HasColumnName("IS_CLEAR_TITLE");

                entity.Property(e => e.IsExpress).HasColumnName("IS_EXPRESS");

                entity.Property(e => e.LegalStatus)
                    .IsRequired()
                    .HasColumnName("LEGAL_STATUS")
                    .HasColumnType("char(1)");

                entity.Property(e => e.LenderCertificateId)
                    .IsRequired()
                    .HasColumnName("LENDER_CERTIFICATE_ID")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.LenderName)
                    .IsRequired()
                    .HasColumnName("LENDER_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.LienAcctNum)
                    .HasColumnName("LIEN_ACCT_NUM")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.LienBalance)
                    .HasColumnName("LIEN_BALANCE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LienHolderKey).HasColumnName("LIEN_HOLDER_KEY");

                entity.Property(e => e.ListPrice)
                    .HasColumnName("LIST_PRICE")
                    .HasColumnType("money");

                entity.Property(e => e.LoanCoPledgerKey).HasColumnName("LOAN_CO_PLEDGER_KEY");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.PayVerified)
                    .HasColumnName("PAY_VERIFIED")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Race).HasColumnName("RACE");

                entity.Property(e => e.RepoAgentTeller)
                    .IsRequired()
                    .HasColumnName("REPO_AGENT_TELLER")
                    .HasColumnType("char(3)")
                    .HasDefaultValueSql("''");

                entity.Property(e => e.RepoCaseNum)
                    .IsRequired()
                    .HasColumnName("REPO_CASE_NUM")
                    .HasColumnType("varchar(20)")
                    .HasDefaultValueSql("''");

                entity.Property(e => e.RepoDateEntered)
                    .HasColumnName("REPO_DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.StateCustNum)
                    .IsRequired()
                    .HasColumnName("STATE_CUST_NUM")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.TitleReleased).HasColumnName("TITLE_RELEASED");

                entity.Property(e => e.TransFeeInclDocPrepFeeAmt)
                    .HasColumnName("TRANS_FEE_INCL_DOC_PREP_FEE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.VehBody)
                    .HasColumnName("VEH_BODY")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.VehColor)
                    .HasColumnName("VEH_COLOR")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.VehCondition)
                    .IsRequired()
                    .HasColumnName("VEH_CONDITION")
                    .HasColumnType("char(1)");

                entity.Property(e => e.VehDrive)
                    .HasColumnName("VEH_DRIVE")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.VehEngine)
                    .HasColumnName("VEH_ENGINE")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.VehEngineNumber)
                    .IsRequired()
                    .HasColumnName("VEH_ENGINE_NUMBER")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.VehEngineSize)
                    .IsRequired()
                    .HasColumnName("VEH_ENGINE_SIZE")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.VehKov)
                    .HasColumnName("VEH_KOV")
                    .HasColumnType("char(1)");

                entity.Property(e => e.VehMake)
                    .HasColumnName("VEH_MAKE")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.VehMileage).HasColumnName("VEH_MILEAGE");

                entity.Property(e => e.VehMiscEquip1)
                    .HasColumnName("VEH_MISC_EQUIP1")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.VehMiscEquip2)
                    .HasColumnName("VEH_MISC_EQUIP2")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.VehMiscEquip3)
                    .HasColumnName("VEH_MISC_EQUIP3")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.VehModel)
                    .HasColumnName("VEH_MODEL")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.VehNoLongerOwnedByCust).HasColumnName("VEH_NO_LONGER_OWNED_BY_CUST");

                entity.Property(e => e.VehOdoCode)
                    .IsRequired()
                    .HasColumnName("VEH_ODO_CODE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.VehPlate)
                    .IsRequired()
                    .HasColumnName("VEH_PLATE")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.VehRegDate)
                    .HasColumnName("VEH_REG_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VehRegExpire)
                    .HasColumnName("VEH_REG_EXPIRE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.VehRegState)
                    .IsRequired()
                    .HasColumnName("VEH_REG_STATE")
                    .HasColumnType("char(2)");

                entity.Property(e => e.VehRetail)
                    .HasColumnName("VEH_RETAIL")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.VehSticker)
                    .IsRequired()
                    .HasColumnName("VEH_STICKER")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.VehTitleNum)
                    .IsRequired()
                    .HasColumnName("VEH_TITLE_NUM")
                    .HasColumnType("varchar(15)");

                entity.Property(e => e.VehTrans)
                    .HasColumnName("VEH_TRANS")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.VehVin)
                    .HasColumnName("VEH_VIN")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.VehWholesale)
                    .HasColumnName("VEH_WHOLESALE")
                    .HasColumnType("money");

                entity.Property(e => e.VehYear).HasColumnName("VEH_YEAR");

                entity.Property(e => e.VehicleKey).HasColumnName("VEHICLE_KEY");

                entity.Property(e => e.Weight).HasColumnName("WEIGHT");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.TitleLoan)
                    .HasForeignKey(d => d.CustomerKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_TitleLoan_Customer");

                entity.HasOne(d => d.LienHolderKeyNavigation)
                    .WithMany(p => p.TitleLoan)
                    .HasForeignKey(d => d.LienHolderKey)
                    .HasConstraintName("FK_TitleLoan_LienHolder");

                entity.HasOne(d => d.LoanCoPledgerKeyNavigation)
                    .WithMany(p => p.TitleLoan)
                    .HasForeignKey(d => d.LoanCoPledgerKey)
                    .HasConstraintName("FK_TitleLoan_LoanCoPledger");

                entity.HasOne(d => d.LocationNavigation)
                    .WithMany(p => p.TitleLoan)
                    .HasForeignKey(d => d.Location)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_TitleLoan_Company");

                entity.HasOne(d => d.VehicleKeyNavigation)
                    .WithMany(p => p.TitleLoan)
                    .HasForeignKey(d => d.VehicleKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_TitleLoan_Vehicle");
            });

            modelBuilder.Entity<TitleLoanApproval>(entity =>
            {
                entity.HasKey(e => e.TitleloanApprovalKey)
                    .HasName("PK_TitleLoanApproval");

                entity.HasIndex(e => e.TitleloanKey)
                    .HasName("IX_TitleLoanApproval_TITLELOAN_KEY");

                entity.HasIndex(e => new { e.ApprovalAmt, e.LoanKey, e.TitleloanApprovalKey })
                    .HasName("IX_TitleLoanApproval_LOAN_KEY_TITLELOAN_APPROVAL_KEY");

                entity.Property(e => e.TitleloanApprovalKey).HasColumnName("TITLELOAN_APPROVAL_KEY");

                entity.Property(e => e.ApprovalAmt)
                    .HasColumnName("APPROVAL_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.EnteredLocation).HasColumnName("ENTERED_LOCATION");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.MgrOverrideAmt)
                    .HasColumnName("MGR_OVERRIDE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.MgrOverrideInits)
                    .HasColumnName("MGR_OVERRIDE_INITS")
                    .HasColumnType("char(3)");

                entity.Property(e => e.ScoreAmount)
                    .HasColumnName("SCORE_AMOUNT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.ScoreValue).HasColumnName("SCORE_VALUE");

                entity.Property(e => e.TitleloanKey).HasColumnName("TITLELOAN_KEY");

                entity.Property(e => e.Tla2ndLienIncr)
                    .HasColumnName("TLA_2ND_LIEN_INCR")
                    .HasColumnType("LOGICAL");

                entity.Property(e => e.Tla2ndLienIncrAmt)
                    .HasColumnName("TLA_2ND_LIEN_INCR_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TlaBaseAmt)
                    .HasColumnName("TLA_BASE_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TlaBasePct)
                    .HasColumnName("TLA_BASE_PCT")
                    .HasColumnType("numeric");

                entity.Property(e => e.TlaCcardPct)
                    .HasColumnName("TLA_CCARD_PCT")
                    .HasColumnType("numeric");

                entity.Property(e => e.TlaChkAcctPct)
                    .HasColumnName("TLA_CHK_ACCT_PCT")
                    .HasColumnType("numeric");

                entity.Property(e => e.TlaEmp3Mon500)
                    .HasColumnName("TLA_EMP_3_MON_500")
                    .HasColumnType("LOGICAL");

                entity.Property(e => e.TlaEmpSinceMon).HasColumnName("TLA_EMP_SINCE_MON");

                entity.Property(e => e.TlaEmpSincePct)
                    .HasColumnName("TLA_EMP_SINCE_PCT")
                    .HasColumnType("numeric");

                entity.Property(e => e.TlaFullIns1000)
                    .HasColumnName("TLA_FULL_INS_1000")
                    .HasColumnType("LOGICAL");

                entity.Property(e => e.TlaMaxLoanAmt)
                    .HasColumnName("TLA_MAX_LOAN_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TlaMaxLoanUsed)
                    .HasColumnName("TLA_MAX_LOAN_USED")
                    .HasColumnType("LOGICAL");

                entity.Property(e => e.TlaMaxNetInc25)
                    .HasColumnName("TLA_MAX_NET_INC_25")
                    .HasColumnType("LOGICAL");

                entity.Property(e => e.TlaMinLoan150)
                    .HasColumnName("TLA_MIN_LOAN_150")
                    .HasColumnType("LOGICAL");

                entity.Property(e => e.TlaNetIncAmt)
                    .HasColumnName("TLA_NET_INC_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TlaNetIncLimit)
                    .HasColumnName("TLA_NET_INC_LIMIT")
                    .HasColumnType("LOGICAL");

                entity.Property(e => e.TlaNetIncPct)
                    .HasColumnName("TLA_NET_INC_PCT")
                    .HasColumnType("numeric");

                entity.Property(e => e.TlaNetIncUsed)
                    .HasColumnName("TLA_NET_INC_USED")
                    .HasColumnType("LOGICAL");

                entity.Property(e => e.TlaPayVer500)
                    .HasColumnName("TLA_PAY_VER_500")
                    .HasColumnType("LOGICAL");

                entity.Property(e => e.TlaWholeMinAmt)
                    .HasColumnName("TLA_WHOLE_MIN_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TlaWholeMinPct)
                    .HasColumnName("TLA_WHOLE_MIN_PCT")
                    .HasColumnType("numeric");

                entity.Property(e => e.TlaWholeMinUsed)
                    .HasColumnName("TLA_WHOLE_MIN_USED")
                    .HasColumnType("LOGICAL");

                entity.Property(e => e.TlaWholesalePct)
                    .HasColumnName("TLA_WHOLESALE_PCT")
                    .HasColumnType("numeric");

                entity.HasOne(d => d.TitleloanKeyNavigation)
                    .WithMany(p => p.TitleLoanApproval)
                    .HasForeignKey(d => d.TitleloanKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_TitleLoanApproval_TitleLoan");
            });

            modelBuilder.Entity<TotalDailyFees>(entity =>
            {
                entity.HasKey(e => e.TotalDailyFeesKey)
                    .HasName("PK_TotalDailyFees");

                entity.Property(e => e.TotalDailyFeesKey).HasColumnName("TOTAL_DAILY_FEES_KEY");

                entity.Property(e => e.AllFeesRank).HasColumnName("ALL_FEES_RANK");

                entity.Property(e => e.AllFeesTotal)
                    .HasColumnName("ALL_FEES_TOTAL")
                    .HasColumnType("money");

                entity.Property(e => e.InternetFees)
                    .HasColumnName("INTERNET_FEES")
                    .HasColumnType("money");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.StoreFeesCashChk)
                    .HasColumnName("STORE_FEES_CASH_CHK")
                    .HasColumnType("money");

                entity.Property(e => e.StoreFeesOther)
                    .HasColumnName("STORE_FEES_OTHER")
                    .HasColumnType("money");

                entity.Property(e => e.StoreFeesPayday)
                    .HasColumnName("STORE_FEES_PAYDAY")
                    .HasColumnType("money");

                entity.Property(e => e.StoreFeesRank).HasColumnName("STORE_FEES_RANK");

                entity.Property(e => e.StoreFeesSig)
                    .HasColumnName("STORE_FEES_SIG")
                    .HasColumnType("money");

                entity.Property(e => e.StoreFeesTitle)
                    .HasColumnName("STORE_FEES_TITLE")
                    .HasColumnType("money");

                entity.Property(e => e.StoreFeesTotal)
                    .HasColumnName("STORE_FEES_TOTAL")
                    .HasColumnType("money");
            });

            modelBuilder.Entity<TransDetail>(entity =>
            {
                entity.HasKey(e => e.TransDetailKey)
                    .HasName("PK_TransDetail");

                entity.HasIndex(e => e.CustomerKey)
                    .HasName("IX_TransDetail_CUSTOMER_KEY");

                entity.HasIndex(e => e.DrawerzKey)
                    .HasName("IX_TransDetail_DRAWERZ_KEY");

                entity.HasIndex(e => e.Location)
                    .HasName("IX_TransDetail_LOCATION");

                entity.HasIndex(e => e.ProductType)
                    .HasName("IX_TransDetail_PRODUCT_TYPE");

                entity.HasIndex(e => e.ReverseKey)
                    .HasName("IX_TransDetail_REVERSE_KEY");

                entity.HasIndex(e => e.TransCode)
                    .HasName("IX_TransDetail_TRANS_CODE");

                entity.HasIndex(e => e.TransPosKey)
                    .HasName("IX_TransDetail_TRANS_POS_KEY");

                entity.HasIndex(e => new { e.DrawerzKey, e.TransCode, e.TransDetailKey })
                    .HasName("IX_TransDetail_DRAWERZ_KEY_TRANS_CODE");

                entity.HasIndex(e => new { e.TransDetailKey, e.DateEntered, e.Location })
                    .HasName("IX_TransDetail_TRANS_DETAIL_KEY_LOCATION");

                entity.HasIndex(e => new { e.TransCode, e.TransPosKey, e.CustomerKey, e.TransDetailKey, e.Location })
                    .HasName("IX_TransDetail_TRANS_DETAIL_KEY_LOCATION_includeD");

                entity.HasIndex(e => new { e.Teller, e.TransCode, e.TransDetailKey, e.CustomerKey, e.DateEntered, e.Location })
                    .HasName("IX_Transdetail_TELLER_TRANS_CODE");

                entity.HasIndex(e => new { e.TransCode, e.Teller, e.TransDetailKey, e.CustomerKey, e.DateEntered, e.Location })
                    .HasName("IX_Transdetail_TRANS_CODE_TELLER");

                entity.HasIndex(e => new { e.CustomerKey, e.DrawerzKey, e.Teller, e.Location, e.TransCode, e.TransDetailKey, e.TransPosKey })
                    .HasName("IX_TransDetail_CUSTOMER_KEY_DRAWERZ_KEY_TELLER");

                entity.HasIndex(e => new { e.DateEntered, e.LoanType, e.DrawerzKey, e.Teller, e.TransCode, e.Location, e.TransDetailKey, e.TransPosKey, e.CustomerKey, e.ReverseKey })
                    .HasName("IX_Transdetail_DRAWERZ_KEY_TELLER");

                entity.HasIndex(e => new { e.DateEntered, e.LoanType, e.Location, e.Teller, e.TransCode, e.DrawerzKey, e.TransDetailKey, e.TransPosKey, e.CustomerKey, e.ReverseKey })
                    .HasName("IX_Transdetail_LOCATION_TELLER");

                entity.HasIndex(e => new { e.TransDetailKey, e.ReverseKey, e.ProductType, e.LoanType, e.DateEntered, e.TransCode, e.Teller, e.Location, e.CustomerKey, e.TransPosKey })
                    .HasName("IX_TransDetail_CUSTOMER_KEY_TRANS_POS_KEY");

                entity.HasIndex(e => new { e.DateEntered, e.ProductType, e.LoanType, e.DrawerzKey, e.Teller, e.Location, e.TransDetailKey, e.ReverseKey, e.TransCode, e.TransPosKey, e.CustomerKey })
                    .HasName("IX_Transdetail_DRAWERZ_KEY_TELLER_LOCATION");

                entity.HasIndex(e => new { e.TransDetailKey, e.CustomerKey, e.LoanType, e.Teller, e.TransCode, e.Location, e.DrawerzKey, e.DateEntered, e.ProductType, e.ReverseKey, e.TransPosKey })
                    .HasName("IX_TransDetail_SKT_1");

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DrawerzKey).HasColumnName("DRAWERZ_KEY");

                entity.Property(e => e.LoanType)
                    .IsRequired()
                    .HasColumnName("LOAN_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.ProductType)
                    .IsRequired()
                    .HasColumnName("PRODUCT_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.ReverseKey).HasColumnName("REVERSE_KEY");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.TransCode).HasColumnName("TRANS_CODE");

                entity.Property(e => e.TransPosKey).HasColumnName("TRANS_POS_KEY");

                entity.HasOne(d => d.DrawerzKeyNavigation)
                    .WithMany(p => p.TransDetail)
                    .HasForeignKey(d => d.DrawerzKey)
                    .HasConstraintName("FK_TransDetail_DrawerZ");

                entity.HasOne(d => d.ReverseKeyNavigation)
                    .WithMany(p => p.InverseReverseKeyNavigation)
                    .HasForeignKey(d => d.ReverseKey)
                    .HasConstraintName("FK_TransDetail_Reverse");

                entity.HasOne(d => d.TellerNavigation)
                    .WithMany(p => p.TransDetail)
                    .HasPrincipalKey(p => p.Teller)
                    .HasForeignKey(d => d.Teller)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_TransDetail_TellerID");

                entity.HasOne(d => d.TransPosKeyNavigation)
                    .WithMany(p => p.TransDetail)
                    .HasForeignKey(d => d.TransPosKey)
                    .HasConstraintName("FK_TransDetail_TransPOS");
            });

            modelBuilder.Entity<TransDetailAcct>(entity =>
            {
                entity.HasKey(e => new { e.TransDetailAcctKey, e.TransDetailKey })
                    .HasName("PK_TransDetailAcct");

                entity.HasIndex(e => e.Location)
                    .HasName("IX_TransDetailAcct_LOCATION");

                entity.HasIndex(e => new { e.Amount, e.Location, e.TransDetailKey })
                    .HasName("IX_TransDetailAcct_LOCATION_TRANS_DETAIL_KEY");

                entity.HasIndex(e => new { e.Amount, e.TransDetailKey, e.GlAcct })
                    .HasName("IX_TransDetailAcct_GL_ACCT_INCLUDEd");

                entity.HasIndex(e => new { e.Amount, e.AcctType, e.TransDetailKey, e.TransDetailAcctKey })
                    .HasName("IX_TransDetailAcct_ACCT_TYPE");

                entity.HasIndex(e => new { e.Amount, e.TransDetailKey, e.AcctType, e.TransDetailAcctKey })
                    .HasName("IX_TransDetailAcct_TRANS_DETAIL_ACCT_TYPE");

                entity.HasIndex(e => new { e.TransDetailKey, e.Amount, e.Location, e.GlAcct })
                    .HasName("IX_TransDetailAcct_LOCATION_GL_ACCT");

                entity.HasIndex(e => new { e.Location, e.AcctType, e.Amount, e.GlAcct, e.TransDetailKey })
                    .HasName("IX_TransDetailAcct_TRANS_DETAIL_KEY");

                entity.Property(e => e.TransDetailAcctKey)
                    .HasColumnName("TRANS_DETAIL_ACCT_KEY")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");

                entity.Property(e => e.AcctType).HasColumnName("ACCT_TYPE");

                entity.Property(e => e.Amount)
                    .HasColumnName("AMOUNT")
                    .HasColumnType("money");

                entity.Property(e => e.GlAcct).HasColumnName("GL_ACCT");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.HasOne(d => d.GlAcctNavigation)
                    .WithMany(p => p.TransDetailAcct)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.GlAcct)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_TransDetailAcct_GL_ACCT");

                entity.HasOne(d => d.TransDetailKeyNavigation)
                    .WithMany(p => p.TransDetailAcct)
                    .HasForeignKey(d => d.TransDetailKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_TransDetailAcct_TransDetail");
            });

            modelBuilder.Entity<TransDetailCash>(entity =>
            {
                entity.HasKey(e => new { e.TransDetailCashKey, e.TransDetailKey })
                    .HasName("PK_TransDetailCash");

                entity.HasIndex(e => e.TransDetailCashKey)
                    .HasName("IX_TransDetailCash_TRANS_DETAIL_CASH_KEY_UNIQUE")
                    .IsUnique();

                entity.HasIndex(e => new { e.TransDetailKey, e.CashAmt, e.CashTo, e.CurrencyKey })
                    .HasName("IX_TransDetailCash_CASH_TO_CURRENCY_KEY");

                entity.HasIndex(e => new { e.CcardAmt, e.TransDetailKey, e.CashAmt, e.CashFrom, e.CurrencyKey })
                    .HasName("IX_TransDetailCash_CASH_FROM_CURRENCY_KEY");

                entity.HasIndex(e => new { e.CcardAmt, e.CashAmt, e.CashTo, e.TransDetailKey, e.TransDetailCashKey, e.CashFrom })
                    .HasName("IX_TransDetailCash_CASH_TO");

                entity.HasIndex(e => new { e.CcardAmt, e.CashAmt, e.TransDetailKey, e.CashFrom, e.TransDetailCashKey, e.CashTo })
                    .HasName("IX_TransDetailCash_TRANS_DETAIL_CASH_FROM");

                entity.Property(e => e.TransDetailCashKey)
                    .HasColumnName("TRANS_DETAIL_CASH_KEY")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");

                entity.Property(e => e.CashAmt)
                    .HasColumnName("CASH_AMT")
                    .HasColumnType("money");

                entity.Property(e => e.CashFrom)
                    .IsRequired()
                    .HasColumnName("CASH_FROM")
                    .HasColumnType("char(1)");

                entity.Property(e => e.CashTo)
                    .IsRequired()
                    .HasColumnName("CASH_TO")
                    .HasColumnType("char(1)");

                entity.Property(e => e.CcardAmt)
                    .HasColumnName("CCARD_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CurrencyKey).HasColumnName("CURRENCY_KEY");

                entity.Property(e => e.DrawerKey).HasColumnName("DRAWER_KEY");

                entity.Property(e => e.ParseCashKey).HasColumnName("PARSE_CASH_KEY");

                entity.HasOne(d => d.CurrencyKeyNavigation)
                    .WithMany(p => p.TransDetailCash)
                    .HasForeignKey(d => d.CurrencyKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_TransDetailCash_Currency");

                entity.HasOne(d => d.ParseCashKeyNavigation)
                    .WithMany(p => p.TransDetailCash)
                    .HasForeignKey(d => d.ParseCashKey)
                    .HasConstraintName("FK_TransDetailCash_ParseCash");

                entity.HasOne(d => d.TransDetailKeyNavigation)
                    .WithMany(p => p.TransDetailCash)
                    .HasForeignKey(d => d.TransDetailKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_TransDetailCash_TransDetail");
            });

            modelBuilder.Entity<TransDetailCashParsedCash>(entity =>
            {
                entity.HasKey(e => e.TransDetailCashParsedCashKey)
                    .HasName("PK_TransDetailCashParsedCash");

                entity.Property(e => e.TransDetailCashParsedCashKey).HasColumnName("TRANS_DETAIL_CASH_PARSED_CASH_KEY");

                entity.Property(e => e.Amount)
                    .HasColumnName("AMOUNT")
                    .HasColumnType("money");

                entity.Property(e => e.DenominationKey).HasColumnName("DENOMINATION_KEY");

                entity.Property(e => e.TransDetailCashKey).HasColumnName("TRANS_DETAIL_CASH_KEY");

                entity.HasOne(d => d.DenominationKeyNavigation)
                    .WithMany(p => p.TransDetailCashParsedCash)
                    .HasForeignKey(d => d.DenominationKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_TransDetailCashParsedCash_Denomination");

                entity.HasOne(d => d.TransDetailCashKeyNavigation)
                    .WithMany(p => p.TransDetailCashParsedCash)
                    .HasPrincipalKey(p => p.TransDetailCashKey)
                    .HasForeignKey(d => d.TransDetailCashKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_TransDetailCashParsedCash_TransDetailCash");
            });

            modelBuilder.Entity<TransDetailCheck>(entity =>
            {
                entity.HasKey(e => new { e.TransDetailCheckKey, e.TransDetailKey })
                    .HasName("PK_TransDetailCheck");

                entity.HasIndex(e => e.TransDetailKey)
                    .HasName("IX_TransDetailCheck_TRANS_DETAIL_KEY");

                entity.Property(e => e.TransDetailCheckKey)
                    .HasColumnName("TRANS_DETAIL_CHECK_KEY")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");

                entity.Property(e => e.CheckAmt)
                    .HasColumnName("CHECK_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CheckFrom)
                    .IsRequired()
                    .HasColumnName("CHECK_FROM")
                    .HasColumnType("char(1)");

                entity.Property(e => e.CheckQty).HasColumnName("CHECK_QTY");

                entity.Property(e => e.CheckTo)
                    .IsRequired()
                    .HasColumnName("CHECK_TO")
                    .HasColumnType("char(1)");

                entity.Property(e => e.CheckType).HasColumnName("CHECK_TYPE");

                entity.Property(e => e.DepositMethod)
                    .IsRequired()
                    .HasColumnName("DEPOSIT_METHOD")
                    .HasColumnType("char(1)");

                entity.Property(e => e.DrawerKey).HasColumnName("DRAWER_KEY");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.HasOne(d => d.TransDetailKeyNavigation)
                    .WithMany(p => p.TransDetailCheck)
                    .HasForeignKey(d => d.TransDetailKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_TransDetailCheck_TransDetail");
            });

            modelBuilder.Entity<TransDetailIntShort>(entity =>
            {
                entity.HasKey(e => new { e.TransDetailIntShort1, e.TransDetailKey })
                    .HasName("PK_TransDetailIntShort");

                entity.HasIndex(e => e.CustomerKey)
                    .HasName("IX_TransDetailIntShort_CUSTOMER_KEY");

                entity.HasIndex(e => e.TransDetailIntShort1)
                    .HasName("IX_TransDetailIntShort_TRANS_DETAIL_INT_SHORT")
                    .IsUnique();

                entity.HasIndex(e => new { e.TransDetailIntShort1, e.TransDetailKey, e.BusinessDate })
                    .HasName("IX_TransDetailIntShort_BUSINESS_DATE");

                entity.Property(e => e.TransDetailIntShort1)
                    .HasColumnName("TRANS_DETAIL_INT_SHORT")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");

                entity.Property(e => e.BusinessDate)
                    .HasColumnName("BUSINESS_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.SpellTransCode)
                    .IsRequired()
                    .HasColumnName("SPELL_TRANS_CODE")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.TdDescription)
                    .IsRequired()
                    .HasColumnName("TD_DESCRIPTION")
                    .HasColumnType("varchar(240)");
            });

            modelBuilder.Entity<TransDetailLoan>(entity =>
            {
                entity.HasKey(e => new { e.TransDetailLoanKey, e.TransDetailKey })
                    .HasName("PK_TransDetailLoan");

                entity.HasIndex(e => e.TransDetailKey)
                    .HasName("IX_TransDetailLoan_TRANS_DETAIL_KEY");

                entity.Property(e => e.TransDetailLoanKey)
                    .HasColumnName("TRANS_DETAIL_LOAN_KEY")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");

                entity.Property(e => e.LoanAmt)
                    .HasColumnName("LOAN_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.LoanCnt).HasColumnName("LOAN_CNT");

                entity.Property(e => e.LoanFrom)
                    .IsRequired()
                    .HasColumnName("LOAN_FROM")
                    .HasColumnType("char(1)");

                entity.Property(e => e.LoanTo)
                    .IsRequired()
                    .HasColumnName("LOAN_TO")
                    .HasColumnType("char(1)");

                entity.Property(e => e.LoanType)
                    .IsRequired()
                    .HasColumnName("LOAN_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.ProductType)
                    .IsRequired()
                    .HasColumnName("PRODUCT_TYPE")
                    .HasColumnType("char(1)");

                entity.HasOne(d => d.TransDetailKeyNavigation)
                    .WithMany(p => p.TransDetailLoan)
                    .HasForeignKey(d => d.TransDetailKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_TransDetailLoan_TransDetail");
            });

            modelBuilder.Entity<TransDetailService>(entity =>
            {
                entity.HasKey(e => new { e.TransDetailServiceKey, e.TransDetailKey })
                    .HasName("PK_TransDetailService");

                entity.HasIndex(e => e.TransDetailKey)
                    .HasName("IX_TransDetailService_TRANS_DETAIL_KEY");

                entity.Property(e => e.TransDetailServiceKey)
                    .HasColumnName("TRANS_DETAIL_SERVICE_KEY")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");

                entity.Property(e => e.DrawerKey).HasColumnName("DRAWER_KEY");

                entity.Property(e => e.ServiceDetailKey).HasColumnName("SERVICE_DETAIL_KEY");

                entity.Property(e => e.ServiceFrom)
                    .IsRequired()
                    .HasColumnName("SERVICE_FROM")
                    .HasColumnType("char(1)");

                entity.Property(e => e.ServiceQty).HasColumnName("SERVICE_QTY");

                entity.Property(e => e.ServiceTo)
                    .IsRequired()
                    .HasColumnName("SERVICE_TO")
                    .HasColumnType("char(1)");

                entity.Property(e => e.TransDetailAcctKey).HasColumnName("TRANS_DETAIL_ACCT_KEY");

                entity.HasOne(d => d.ServiceDetailKeyNavigation)
                    .WithMany(p => p.TransDetailService)
                    .HasForeignKey(d => d.ServiceDetailKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_TransDetailService_ServiceDetail");

                entity.HasOne(d => d.TransDetailKeyNavigation)
                    .WithMany(p => p.TransDetailService)
                    .HasForeignKey(d => d.TransDetailKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_TransDetailService_TransDetail");
            });

            modelBuilder.Entity<TransPos>(entity =>
            {
                entity.HasKey(e => e.TransPosKey)
                    .HasName("PK_TransPOS");

                entity.ToTable("TransPOS");

                entity.HasIndex(e => new { e.TransPosKey, e.CustomerKey })
                    .HasName("IX_TransPOS_CUSTOMER_KEY_TRANS_POS_KEY");

                entity.HasIndex(e => new { e.CashRecv, e.CashPaid, e.TransPosKey })
                    .HasName("IX_TransPOS_TRANS_POS_KEY");

                entity.Property(e => e.TransPosKey).HasColumnName("TRANS_POS_KEY");

                entity.Property(e => e.CashPaid)
                    .HasColumnName("CASH_PAID")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CashRecv)
                    .HasColumnName("CASH_RECV")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CcardPaid)
                    .HasColumnName("CCARD_PAID")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CcardRecv)
                    .HasColumnName("CCARD_RECV")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.TransPos)
                    .HasForeignKey(d => d.CustomerKey)
                    .HasConstraintName("FK_TransPOS_Customer");

                entity.HasOne(d => d.TellerNavigation)
                    .WithMany(p => p.TransPos)
                    .HasPrincipalKey(p => p.Teller)
                    .HasForeignKey(d => d.Teller)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_TransPOS_TellerID");
            });

            modelBuilder.Entity<TransUnionCodes>(entity =>
            {
                entity.HasKey(e => e.TucKey)
                    .HasName("PK_TransUnionCodes");

                entity.Property(e => e.TucKey).HasColumnName("TUC_KEY");

                entity.Property(e => e.TucCode)
                    .IsRequired()
                    .HasColumnName("tuc_code")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.TucDesc)
                    .HasColumnName("tuc_desc")
                    .HasColumnType("varchar(200)");

                entity.Property(e => e.TucType)
                    .IsRequired()
                    .HasColumnName("tuc_type")
                    .HasColumnType("varchar(15)");
            });

            modelBuilder.Entity<TransferFunds>(entity =>
            {
                entity.HasKey(e => e.TransferFundsKey)
                    .HasName("PK_TransferFunds");

                entity.HasIndex(e => e.TransDetailKey)
                    .HasName("IX_TransferFunds_TRANS_DETAIL_KEY");

                entity.Property(e => e.TransferFundsKey).HasColumnName("TRANSFER_FUNDS_KEY");

                entity.Property(e => e.CurrencyKey).HasColumnName("CURRENCY_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(80)");

                entity.Property(e => e.FundsFrom)
                    .IsRequired()
                    .HasColumnName("FUNDS_FROM")
                    .HasColumnType("char(1)");

                entity.Property(e => e.FundsTo)
                    .IsRequired()
                    .HasColumnName("FUNDS_TO")
                    .HasColumnType("char(1)");

                entity.Property(e => e.GlAcct).HasColumnName("GL_ACCT");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.TotAmount)
                    .HasColumnName("TOT_AMOUNT")
                    .HasColumnType("money");

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");

                entity.HasOne(d => d.GlAcctNavigation)
                    .WithMany(p => p.TransferFunds)
                    .HasPrincipalKey(p => p.GlAcctNum)
                    .HasForeignKey(d => d.GlAcct)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_TransferFunds_GL_ACCT");

                entity.HasOne(d => d.TellerNavigation)
                    .WithMany(p => p.TransferFunds)
                    .HasPrincipalKey(p => p.Teller)
                    .HasForeignKey(d => d.Teller)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_TransferFunds_TellerID");

                entity.HasOne(d => d.TransDetailKeyNavigation)
                    .WithMany(p => p.TransferFunds)
                    .HasForeignKey(d => d.TransDetailKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_TransferFunds_TransDetail");
            });

            modelBuilder.Entity<Uddreport>(entity =>
            {
                entity.HasKey(e => e.UddReportKey)
                    .HasName("pk_UDDReport");

                entity.ToTable("UDDReport");

                entity.Property(e => e.UddReportKey).HasColumnName("UDD_REPORT_KEY");

                entity.Property(e => e.AchRecvKey).HasColumnName("ACH_RECV_KEY");

                entity.Property(e => e.AdviceNumber).HasColumnName("ADVICE_NUMBER");

                entity.Property(e => e.EnteredDate)
                    .HasColumnName("ENTERED_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.FileName)
                    .HasColumnName("FILE_NAME")
                    .HasColumnType("varchar(200)");

                entity.Property(e => e.ReportType)
                    .IsRequired()
                    .HasColumnName("REPORT_TYPE")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.UddProcessingDate)
                    .HasColumnName("UDD_PROCESSING_DATE")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.AchRecvKeyNavigation)
                    .WithMany(p => p.Uddreport)
                    .HasForeignKey(d => d.AchRecvKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_UDDReport_ACHRecv");
            });

            modelBuilder.Entity<UddreportDetail>(entity =>
            {
                entity.HasKey(e => e.UddReportDetailKey)
                    .HasName("pk_UDDReportDetail");

                entity.ToTable("UDDReportDetail");

                entity.Property(e => e.UddReportDetailKey).HasColumnName("UDD_REPORT_DETAIL_KEY");

                entity.Property(e => e.AchHistoryKey).HasColumnName("ACH_HISTORY_KEY");

                entity.Property(e => e.Amount)
                    .HasColumnName("AMOUNT")
                    .HasColumnType("money");

                entity.Property(e => e.CoreReference)
                    .HasColumnName("CORE_REFERENCE")
                    .HasColumnType("varchar(18)");

                entity.Property(e => e.IsProcessed).HasColumnName("IS_PROCESSED");

                entity.Property(e => e.OriginalProcessingDate)
                    .HasColumnName("ORIGINAL_PROCESSING_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasColumnName("REFERENCE")
                    .HasColumnType("varchar(18)");

                entity.Property(e => e.ReturnCode)
                    .IsRequired()
                    .HasColumnName("RETURN_CODE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.ReturnDescription)
                    .IsRequired()
                    .HasColumnName("RETURN_DESCRIPTION")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.TransCode)
                    .IsRequired()
                    .HasColumnName("TRANS_CODE")
                    .HasColumnType("char(2)");

                entity.Property(e => e.UddReportKey).HasColumnName("UDD_REPORT_KEY");

                entity.HasOne(d => d.AchHistoryKeyNavigation)
                    .WithMany(p => p.UddreportDetail)
                    .HasForeignKey(d => d.AchHistoryKey)
                    .HasConstraintName("fk_UDDReportDetail_ACHHistory");

                entity.HasOne(d => d.UddReportKeyNavigation)
                    .WithMany(p => p.UddreportDetail)
                    .HasForeignKey(d => d.UddReportKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_UDDReportDetail_UDDReport");
            });

            modelBuilder.Entity<UsStates>(entity =>
            {
                entity.HasKey(e => e.State)
                    .HasName("PK_us_states");

                entity.ToTable("US_States");

                entity.Property(e => e.State).HasColumnType("char(2)");

                entity.Property(e => e.IsCanadaProvince).HasColumnName("IS_CANADA_PROVINCE");

                entity.Property(e => e.IsUsState).HasColumnName("IS_US_STATE");

                entity.Property(e => e.StateName).HasColumnType("varchar(50)");
            });

            modelBuilder.Entity<UsZipcodes>(entity =>
            {
                entity.HasKey(e => e.Zipcode)
                    .HasName("PK_US_Zipcodes");

                entity.ToTable("US_Zipcodes");

                entity.HasIndex(e => new { e.Zipcode, e.Dma })
                    .HasName("IDX_ZIP_DMA");

                entity.HasIndex(e => new { e.Zipcode, e.State })
                    .HasName("IX_US_Zipcodes_STATE");

                entity.Property(e => e.Zipcode)
                    .HasColumnName("ZIPCODE")
                    .HasColumnType("char(7)");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasColumnName("CITY")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.County)
                    .IsRequired()
                    .HasColumnName("COUNTY")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Dma).HasColumnName("DMA");

                entity.Property(e => e.Latitude)
                    .HasColumnName("latitude")
                    .HasColumnType("decimal");

                entity.Property(e => e.Longitude)
                    .HasColumnName("longitude")
                    .HasColumnType("decimal");

                entity.Property(e => e.MsaCode)
                    .HasColumnName("MSA_CODE")
                    .HasColumnType("varchar(4)");

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasColumnName("STATE")
                    .HasColumnType("char(2)");

                entity.Property(e => e.Timezone).HasColumnName("TIMEZONE");

                entity.Property(e => e.ZipType)
                    .HasColumnName("ZIP_TYPE")
                    .HasColumnType("varchar(5)");

                entity.HasOne(d => d.MsaCodeNavigation)
                    .WithMany(p => p.UsZipcodes)
                    .HasForeignKey(d => d.MsaCode)
                    .HasConstraintName("FK_US_Zipcodes_MSA");
            });

            modelBuilder.Entity<UtilRecalcLog>(entity =>
            {
                entity.HasKey(e => e.UtilRecalcLogKey)
                    .HasName("PK_UtilRecalcLog");

                entity.Property(e => e.UtilRecalcLogKey).HasColumnName("UTIL_RECALC_LOG_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.RecalcType)
                    .IsRequired()
                    .HasColumnName("RECALC_TYPE")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.UserLogin)
                    .HasColumnName("USER_LOGIN")
                    .HasColumnType("varchar(50)");
            });

            modelBuilder.Entity<UtilRecalcLogDetail>(entity =>
            {
                entity.HasKey(e => e.UtilRecalcLogDetailKey)
                    .HasName("PK_UtilRecalcLogDetail");

                entity.Property(e => e.UtilRecalcLogDetailKey).HasColumnName("UTIL_RECALC_LOG_DETAIL_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.FieldName)
                    .IsRequired()
                    .HasColumnName("FIELD_NAME")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.NewValue)
                    .IsRequired()
                    .HasColumnName("NEW_VALUE")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.OldValue)
                    .IsRequired()
                    .HasColumnName("OLD_VALUE")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasColumnName("TABLE_NAME")
                    .HasColumnType("varchar(40)");
            });

            modelBuilder.Entity<VaultCount>(entity =>
            {
                entity.HasKey(e => e.VaultCountKey)
                    .HasName("PK_VaultCount");

                entity.HasIndex(e => e.DateEntered)
                    .HasName("IX_VaultCount_DATE_ENTERED");

                entity.HasIndex(e => e.TransDetailKey)
                    .HasName("IX_VaultCount_TRANS_DETAIL_KEY");

                entity.HasIndex(e => new { e.VaultCountKey, e.StartOfDay, e.Location })
                    .HasName("IX_VAULTCOUNT_EXPL");

                entity.HasIndex(e => new { e.VaultCountKey, e.Location, e.DateEntered, e.StartOfDay, e.BusinessDate })
                    .HasName("IX_VaultCount_START_OF_DAY_BUSINESS_DATE");

                entity.Property(e => e.VaultCountKey).HasColumnName("VAULT_COUNT_KEY");

                entity.Property(e => e.BagEodayAmt)
                    .HasColumnName("BAG_EODAY_AMT")
                    .HasColumnType("money");

                entity.Property(e => e.BagEodayChkCnt).HasColumnName("BAG_EODAY_CHK_CNT");

                entity.Property(e => e.BagEodayCnt).HasColumnName("BAG_EODAY_CNT");

                entity.Property(e => e.BagMiddayAmt)
                    .HasColumnName("BAG_MIDDAY_AMT")
                    .HasColumnType("money");

                entity.Property(e => e.BagMiddayChkCnt).HasColumnName("BAG_MIDDAY_CHK_CNT");

                entity.Property(e => e.BagMiddayCnt).HasColumnName("BAG_MIDDAY_CNT");

                entity.Property(e => e.BalsheetKey).HasColumnName("BALSHEET_KEY");

                entity.Property(e => e.BusinessDate)
                    .HasColumnName("BUSINESS_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.CalcParseCashKey).HasColumnName("CALC_PARSE_CASH_KEY");

                entity.Property(e => e.CashchkAmt)
                    .HasColumnName("CASHCHK_AMT")
                    .HasColumnType("money");

                entity.Property(e => e.CashchkCnt).HasColumnName("CASHCHK_CNT");

                entity.Property(e => e.CcardAmt)
                    .HasColumnName("CCARD_AMT")
                    .HasColumnType("money");

                entity.Property(e => e.CcardCnt).HasColumnName("CCARD_CNT");

                entity.Property(e => e.CollchkAmt)
                    .HasColumnName("COLLCHK_AMT")
                    .HasColumnType("money");

                entity.Property(e => e.CollchkCnt).HasColumnName("COLLCHK_CNT");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EnteredParseCashKey).HasColumnName("ENTERED_PARSE_CASH_KEY");

                entity.Property(e => e.GoldDailyBagsAmt)
                    .HasColumnName("GOLD_DAILY_BAGS_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.GoldDailyBagsCnt).HasColumnName("GOLD_DAILY_BAGS_CNT");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.MpayPaydayAmt)
                    .HasColumnName("MPAY_PAYDAY_AMT")
                    .HasColumnType("money");

                entity.Property(e => e.MpayPaydayCnt).HasColumnName("MPAY_PAYDAY_CNT");

                entity.Property(e => e.MpaySigAmt)
                    .HasColumnName("MPAY_SIG_AMT")
                    .HasColumnType("money");

                entity.Property(e => e.MpaySigCnt).HasColumnName("MPAY_SIG_CNT");

                entity.Property(e => e.MpayTitle2ndAmt)
                    .HasColumnName("MPAY_TITLE_2ND_AMT")
                    .HasColumnType("money");

                entity.Property(e => e.MpayTitle2ndCnt).HasColumnName("MPAY_TITLE_2ND_CNT");

                entity.Property(e => e.MpayTitleAmt)
                    .HasColumnName("MPAY_TITLE_AMT")
                    .HasColumnType("money");

                entity.Property(e => e.MpayTitleCnt).HasColumnName("MPAY_TITLE_CNT");

                entity.Property(e => e.OendPaydayAmt)
                    .HasColumnName("OEND_PAYDAY_AMT")
                    .HasColumnType("money");

                entity.Property(e => e.OendPaydayCnt).HasColumnName("OEND_PAYDAY_CNT");

                entity.Property(e => e.OendSigAmt)
                    .HasColumnName("OEND_SIG_AMT")
                    .HasColumnType("money");

                entity.Property(e => e.OendSigCnt).HasColumnName("OEND_SIG_CNT");

                entity.Property(e => e.OendTitle2ndAmt)
                    .HasColumnName("OEND_TITLE_2ND_AMT")
                    .HasColumnType("money");

                entity.Property(e => e.OendTitle2ndCnt).HasColumnName("OEND_TITLE_2ND_CNT");

                entity.Property(e => e.OendTitleAmt)
                    .HasColumnName("OEND_TITLE_AMT")
                    .HasColumnType("money");

                entity.Property(e => e.OendTitleCnt).HasColumnName("OEND_TITLE_CNT");

                entity.Property(e => e.OsCategory)
                    .HasColumnName("OS_CATEGORY")
                    .HasColumnType("char(1)");

                entity.Property(e => e.OsReason)
                    .HasColumnName("OS_REASON")
                    .HasColumnType("varchar(1000)");

                entity.Property(e => e.SpayPaydayChecksAmt)
                    .HasColumnName("SPAY_PAYDAY_CHECKS_AMT")
                    .HasColumnType("money");

                entity.Property(e => e.SpayPaydayChecksCnt).HasColumnName("SPAY_PAYDAY_CHECKS_CNT");

                entity.Property(e => e.SpayPaydayDebitCardsAmt)
                    .HasColumnName("SPAY_PAYDAY_DEBIT_CARDS_AMT")
                    .HasColumnType("money");

                entity.Property(e => e.SpayPaydayDebitCardsCnt).HasColumnName("SPAY_PAYDAY_DEBIT_CARDS_CNT");

                entity.Property(e => e.SpaySigAmt)
                    .HasColumnName("SPAY_SIG_AMT")
                    .HasColumnType("money");

                entity.Property(e => e.SpaySigCnt).HasColumnName("SPAY_SIG_CNT");

                entity.Property(e => e.SpayTitle2ndAmt)
                    .HasColumnName("SPAY_TITLE_2ND_AMT")
                    .HasColumnType("money");

                entity.Property(e => e.SpayTitle2ndCnt).HasColumnName("SPAY_TITLE_2ND_CNT");

                entity.Property(e => e.SpayTitleAmt)
                    .HasColumnName("SPAY_TITLE_AMT")
                    .HasColumnType("money");

                entity.Property(e => e.SpayTitleCnt).HasColumnName("SPAY_TITLE_CNT");

                entity.Property(e => e.StartOfDay).HasColumnName("START_OF_DAY");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");

                entity.HasOne(d => d.CalcParseCashKeyNavigation)
                    .WithMany(p => p.VaultCountCalcParseCashKeyNavigation)
                    .HasForeignKey(d => d.CalcParseCashKey)
                    .HasConstraintName("FK_VaultCount_ParseCash2");

                entity.HasOne(d => d.EnteredParseCashKeyNavigation)
                    .WithMany(p => p.VaultCountEnteredParseCashKeyNavigation)
                    .HasForeignKey(d => d.EnteredParseCashKey)
                    .HasConstraintName("FK_VaultCount_ParseCash1");

                entity.HasOne(d => d.TellerNavigation)
                    .WithMany(p => p.VaultCount)
                    .HasPrincipalKey(p => p.Teller)
                    .HasForeignKey(d => d.Teller)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_VaultCount_TellerID");

                entity.HasOne(d => d.TransDetailKeyNavigation)
                    .WithMany(p => p.VaultCount)
                    .HasForeignKey(d => d.TransDetailKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_VaultCount_TransDetail");
            });

            modelBuilder.Entity<VaultCountCalcParsedCash>(entity =>
            {
                entity.HasKey(e => e.VaultCountCalcParsedCashKey)
                    .HasName("PK_VaultCountCalcParsedCash");

                entity.Property(e => e.VaultCountCalcParsedCashKey).HasColumnName("VAULT_COUNT_CALC_PARSED_CASH_KEY");

                entity.Property(e => e.Amount)
                    .HasColumnName("AMOUNT")
                    .HasColumnType("money");

                entity.Property(e => e.DenominationKey).HasColumnName("DENOMINATION_KEY");

                entity.Property(e => e.VaultCountKey).HasColumnName("VAULT_COUNT_KEY");

                entity.HasOne(d => d.DenominationKeyNavigation)
                    .WithMany(p => p.VaultCountCalcParsedCash)
                    .HasForeignKey(d => d.DenominationKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_VaultCountCalcParsedCash_Denomination");

                entity.HasOne(d => d.VaultCountKeyNavigation)
                    .WithMany(p => p.VaultCountCalcParsedCash)
                    .HasForeignKey(d => d.VaultCountKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_VaultCountCalcParsedCash_VaultCount");
            });

            modelBuilder.Entity<VaultCountEnteredParsedCash>(entity =>
            {
                entity.HasKey(e => e.VaultCountEnteredParsedCashKey)
                    .HasName("PK_VaultCountEnteredParsedCash");

                entity.Property(e => e.VaultCountEnteredParsedCashKey).HasColumnName("VAULT_COUNT_ENTERED_PARSED_CASH_KEY");

                entity.Property(e => e.Amount)
                    .HasColumnName("AMOUNT")
                    .HasColumnType("money");

                entity.Property(e => e.DenominationKey).HasColumnName("DENOMINATION_KEY");

                entity.Property(e => e.VaultCountKey).HasColumnName("VAULT_COUNT_KEY");

                entity.HasOne(d => d.DenominationKeyNavigation)
                    .WithMany(p => p.VaultCountEnteredParsedCash)
                    .HasForeignKey(d => d.DenominationKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_VaultCountEnteredParsedCash_Denomination");

                entity.HasOne(d => d.VaultCountKeyNavigation)
                    .WithMany(p => p.VaultCountEnteredParsedCash)
                    .HasForeignKey(d => d.VaultCountKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_VaultCountEnteredParsedCash_VaultCount");
            });

            modelBuilder.Entity<VaultCountService>(entity =>
            {
                entity.HasKey(e => e.VaultCountServiceKey)
                    .HasName("PK_VaultCountService");

                entity.HasIndex(e => e.VaultCountKey)
                    .HasName("IX_VaultCountService_VAULT_COUNT_KEY");

                entity.Property(e => e.VaultCountServiceKey).HasColumnName("VAULT_COUNT_SERVICE_KEY");

                entity.Property(e => e.ServiceCalc).HasColumnName("SERVICE_CALC");

                entity.Property(e => e.ServiceCnt).HasColumnName("SERVICE_CNT");

                entity.Property(e => e.ServiceDetailKey).HasColumnName("SERVICE_DETAIL_KEY");

                entity.Property(e => e.VaultCountKey).HasColumnName("VAULT_COUNT_KEY");

                entity.HasOne(d => d.ServiceDetailKeyNavigation)
                    .WithMany(p => p.VaultCountService)
                    .HasForeignKey(d => d.ServiceDetailKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_VaultCountService_ServiceDetail");

                entity.HasOne(d => d.VaultCountKeyNavigation)
                    .WithMany(p => p.VaultCountService)
                    .HasForeignKey(d => d.VaultCountKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_VaultCountService_VaultCount");
            });

            modelBuilder.Entity<VaultMaster>(entity =>
            {
                entity.HasKey(e => e.VaultKey)
                    .HasName("PK_VaultMaster");

                entity.HasIndex(e => new { e.VaultMpayPaydayAmt, e.VaultMpayPaydayCnt, e.Location })
                    .HasName("IX_VaultMaster_LOCATION")
                    .IsUnique();

                entity.Property(e => e.VaultKey).HasColumnName("VAULT_KEY");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.MgrAuditComplete)
                    .HasColumnName("MGR_AUDIT_COMPLETE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Vault01)
                    .HasColumnName("VAULT_01")
                    .HasColumnType("money");

                entity.Property(e => e.Vault02)
                    .HasColumnName("VAULT_02")
                    .HasColumnType("money");

                entity.Property(e => e.Vault05)
                    .HasColumnName("VAULT_05")
                    .HasColumnType("money");

                entity.Property(e => e.Vault10)
                    .HasColumnName("VAULT_10")
                    .HasColumnType("money");

                entity.Property(e => e.Vault100)
                    .HasColumnName("VAULT_100")
                    .HasColumnType("money");

                entity.Property(e => e.Vault20)
                    .HasColumnName("VAULT_20")
                    .HasColumnType("money");

                entity.Property(e => e.Vault20p)
                    .HasColumnName("VAULT_20P")
                    .HasColumnType("money");

                entity.Property(e => e.Vault2p)
                    .HasColumnName("VAULT_2P")
                    .HasColumnType("money");

                entity.Property(e => e.Vault50)
                    .HasColumnName("VAULT_50")
                    .HasColumnType("money");

                entity.Property(e => e.VaultBagEodayAmt)
                    .HasColumnName("VAULT_BAG_EODAY_AMT")
                    .HasColumnType("money");

                entity.Property(e => e.VaultBagEodayChkCnt).HasColumnName("VAULT_BAG_EODAY_CHK_CNT");

                entity.Property(e => e.VaultBagEodayCnt).HasColumnName("VAULT_BAG_EODAY_CNT");

                entity.Property(e => e.VaultBagMiddayAmt)
                    .HasColumnName("VAULT_BAG_MIDDAY_AMT")
                    .HasColumnType("money");

                entity.Property(e => e.VaultBagMiddayChkCnt).HasColumnName("VAULT_BAG_MIDDAY_CHK_CNT");

                entity.Property(e => e.VaultBagMiddayCnt).HasColumnName("VAULT_BAG_MIDDAY_CNT");

                entity.Property(e => e.VaultCashchkAmt)
                    .HasColumnName("VAULT_CASHCHK_AMT")
                    .HasColumnType("money");

                entity.Property(e => e.VaultCashchkCnt).HasColumnName("VAULT_CASHCHK_CNT");

                entity.Property(e => e.VaultCcardAmt)
                    .HasColumnName("VAULT_CCARD_AMT")
                    .HasColumnType("money");

                entity.Property(e => e.VaultCcardCnt).HasColumnName("VAULT_CCARD_CNT");

                entity.Property(e => e.VaultDime)
                    .HasColumnName("VAULT_DIME")
                    .HasColumnType("money");

                entity.Property(e => e.VaultGoldDailyBagsAmt)
                    .HasColumnName("VAULT_GOLD_DAILY_BAGS_AMT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.VaultGoldDailyBagsCnt).HasColumnName("VAULT_GOLD_DAILY_BAGS_CNT");

                entity.Property(e => e.VaultHlf)
                    .HasColumnName("VAULT_HLF")
                    .HasColumnType("money");

                entity.Property(e => e.VaultMgr)
                    .HasColumnName("VAULT_MGR")
                    .HasColumnType("char(3)");

                entity.Property(e => e.VaultMisc)
                    .HasColumnName("VAULT_MISC")
                    .HasColumnType("money");

                entity.Property(e => e.VaultMpayPaydayAmt)
                    .HasColumnName("VAULT_MPAY_PAYDAY_AMT")
                    .HasColumnType("money");

                entity.Property(e => e.VaultMpayPaydayCnt).HasColumnName("VAULT_MPAY_PAYDAY_CNT");

                entity.Property(e => e.VaultMpaySigAmt)
                    .HasColumnName("VAULT_MPAY_SIG_AMT")
                    .HasColumnType("money");

                entity.Property(e => e.VaultMpaySigCnt).HasColumnName("VAULT_MPAY_SIG_CNT");

                entity.Property(e => e.VaultMpayTitle2ndAmt)
                    .HasColumnName("VAULT_MPAY_TITLE_2ND_AMT")
                    .HasColumnType("money");

                entity.Property(e => e.VaultMpayTitle2ndCnt).HasColumnName("VAULT_MPAY_TITLE_2ND_CNT");

                entity.Property(e => e.VaultMpayTitleAmt)
                    .HasColumnName("VAULT_MPAY_TITLE_AMT")
                    .HasColumnType("money");

                entity.Property(e => e.VaultMpayTitleCnt).HasColumnName("VAULT_MPAY_TITLE_CNT");

                entity.Property(e => e.VaultNic)
                    .HasColumnName("VAULT_NIC")
                    .HasColumnType("money");

                entity.Property(e => e.VaultOendPaydayAmt)
                    .HasColumnName("VAULT_OEND_PAYDAY_AMT")
                    .HasColumnType("money");

                entity.Property(e => e.VaultOendPaydayCnt).HasColumnName("VAULT_OEND_PAYDAY_CNT");

                entity.Property(e => e.VaultOendSigAmt)
                    .HasColumnName("VAULT_OEND_SIG_AMT")
                    .HasColumnType("money");

                entity.Property(e => e.VaultOendSigCnt).HasColumnName("VAULT_OEND_SIG_CNT");

                entity.Property(e => e.VaultOendTitle2ndAmt)
                    .HasColumnName("VAULT_OEND_TITLE_2ND_AMT")
                    .HasColumnType("money");

                entity.Property(e => e.VaultOendTitle2ndCnt).HasColumnName("VAULT_OEND_TITLE_2ND_CNT");

                entity.Property(e => e.VaultOendTitleAmt)
                    .HasColumnName("VAULT_OEND_TITLE_AMT")
                    .HasColumnType("money");

                entity.Property(e => e.VaultOendTitleCnt).HasColumnName("VAULT_OEND_TITLE_CNT");

                entity.Property(e => e.VaultPen)
                    .HasColumnName("VAULT_PEN")
                    .HasColumnType("money");

                entity.Property(e => e.VaultQtr)
                    .HasColumnName("VAULT_QTR")
                    .HasColumnType("money");

                entity.Property(e => e.VaultSpayPaydayChecksAmt)
                    .HasColumnName("VAULT_SPAY_PAYDAY_CHECKS_AMT")
                    .HasColumnType("money");

                entity.Property(e => e.VaultSpayPaydayChecksCnt).HasColumnName("VAULT_SPAY_PAYDAY_CHECKS_CNT");

                entity.Property(e => e.VaultSpayPaydayDebitCardsAmt)
                    .HasColumnName("VAULT_SPAY_PAYDAY_DEBIT_CARDS_AMT")
                    .HasColumnType("money");

                entity.Property(e => e.VaultSpayPaydayDebitCardsCnt).HasColumnName("VAULT_SPAY_PAYDAY_DEBIT_CARDS_CNT");

                entity.Property(e => e.VaultSpaySigAmt)
                    .HasColumnName("VAULT_SPAY_SIG_AMT")
                    .HasColumnType("money");

                entity.Property(e => e.VaultSpaySigCnt).HasColumnName("VAULT_SPAY_SIG_CNT");

                entity.Property(e => e.VaultSpayTitle2ndAmt)
                    .HasColumnName("VAULT_SPAY_TITLE_2ND_AMT")
                    .HasColumnType("money");

                entity.Property(e => e.VaultSpayTitle2ndCnt).HasColumnName("VAULT_SPAY_TITLE_2ND_CNT");

                entity.Property(e => e.VaultSpayTitleAmt)
                    .HasColumnName("VAULT_SPAY_TITLE_AMT")
                    .HasColumnType("money");

                entity.Property(e => e.VaultSpayTitleCnt).HasColumnName("VAULT_SPAY_TITLE_CNT");

                entity.Property(e => e.VaultTotCash)
                    .HasColumnName("Vault_Tot_Cash")
                    .HasColumnType("money")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.VmgrAuditComplete)
                    .HasColumnName("VMGR_AUDIT_COMPLETE")
                    .HasDefaultValueSql("0");
            });

            modelBuilder.Entity<VaultMasterParsedCash>(entity =>
            {
                entity.HasKey(e => e.VaultMasterParsedCashKey)
                    .HasName("PK_VaultMasterParsedCash");

                entity.Property(e => e.VaultMasterParsedCashKey).HasColumnName("VAULT_MASTER_PARSED_CASH_KEY");

                entity.Property(e => e.Amount)
                    .HasColumnName("AMOUNT")
                    .HasColumnType("money");

                entity.Property(e => e.DenominationKey).HasColumnName("DENOMINATION_KEY");

                entity.Property(e => e.VaultKey).HasColumnName("VAULT_KEY");

                entity.HasOne(d => d.DenominationKeyNavigation)
                    .WithMany(p => p.VaultMasterParsedCash)
                    .HasForeignKey(d => d.DenominationKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_VaultMasterParsedCash_Denomination");

                entity.HasOne(d => d.VaultKeyNavigation)
                    .WithMany(p => p.VaultMasterParsedCash)
                    .HasForeignKey(d => d.VaultKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_VaultMasterParsedCash_VaultMaster");
            });

            modelBuilder.Entity<VaultMgrAssignment>(entity =>
            {
                entity.HasKey(e => e.VmAssignKey)
                    .HasName("PK_VaultMgrAssignment");

                entity.Property(e => e.VmAssignKey).HasColumnName("VM_ASSIGN_KEY");

                entity.Property(e => e.CurrentVmInits)
                    .IsRequired()
                    .HasColumnName("CURRENT_VM_INITS")
                    .HasColumnType("char(3)");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.LoggedOnInits)
                    .IsRequired()
                    .HasColumnName("LOGGED_ON_INITS")
                    .HasColumnType("char(3)");

                entity.Property(e => e.NewVmInits)
                    .IsRequired()
                    .HasColumnName("NEW_VM_INITS")
                    .HasColumnType("char(3)");

                entity.Property(e => e.OtherAuthInits)
                    .HasColumnName("OTHER_AUTH_INITS")
                    .HasColumnType("char(3)");

                entity.Property(e => e.TimeAssigned)
                    .HasColumnName("TIME_ASSIGNED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("getdate()");

                entity.HasOne(d => d.LocationNavigation)
                    .WithMany(p => p.VaultMgrAssignment)
                    .HasForeignKey(d => d.Location)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_VaultMgrAssignment_Company");
            });

            modelBuilder.Entity<VaultMgrAuthorization>(entity =>
            {
                entity.HasKey(e => e.VmAuthKey)
                    .HasName("PK_VaultMgrAuthorization");

                entity.Property(e => e.VmAuthKey).HasColumnName("VM_AUTH_KEY");

                entity.Property(e => e.CurrentVmInits)
                    .IsRequired()
                    .HasColumnName("CURRENT_VM_INITS")
                    .HasColumnType("char(3)");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.LoggedOnInits)
                    .IsRequired()
                    .HasColumnName("LOGGED_ON_INITS")
                    .HasColumnType("char(3)");

                entity.Property(e => e.OtherAuthInits)
                    .HasColumnName("OTHER_AUTH_INITS")
                    .HasColumnType("char(3)");

                entity.Property(e => e.TimeAuthorized)
                    .HasColumnName("TIME_AUTHORIZED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.TransAmt)
                    .HasColumnName("TRANS_AMT")
                    .HasColumnType("money");

                entity.Property(e => e.TransRightsKey)
                    .HasColumnName("TRANS_RIGHTS_KEY")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.VmaTransTypeKey).HasColumnName("VMA_TRANS_TYPE_KEY");

                entity.HasOne(d => d.LocationNavigation)
                    .WithMany(p => p.VaultMgrAuthorization)
                    .HasForeignKey(d => d.Location)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_VaultMgrAuthorization_Company");

                entity.HasOne(d => d.VmaTransTypeKeyNavigation)
                    .WithMany(p => p.VaultMgrAuthorization)
                    .HasForeignKey(d => d.VmaTransTypeKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_VaultMgrAuthorization_VMATransType");
            });

            modelBuilder.Entity<VaultMgrAuthorizationDetail>(entity =>
            {
                entity.HasKey(e => e.VmAuthDetailKey)
                    .HasName("PK_VaultMgrAuthorizationDetail");

                entity.HasIndex(e => e.CustomerKey)
                    .HasName("IX_VaultMgrAuthorizationDetail_CUSTOMER_KEY");

                entity.HasIndex(e => e.LoanKey)
                    .HasName("IX_VaultMgrAuthorizationDetail_LOAN_KEY");

                entity.HasIndex(e => e.MessageId)
                    .HasName("IX_VaultMgrAuthorizationDetail_MESSAGE_ID");

                entity.HasIndex(e => e.TransPosKey)
                    .HasName("IX_VaultMgrAuthorizationDetail_TRANS_POS_KEY");

                entity.HasIndex(e => e.VmAuthKey)
                    .HasName("IX_VaultMgrAuthorizationDetail_VM_AUTH_KEY");

                entity.Property(e => e.VmAuthDetailKey).HasColumnName("VM_AUTH_DETAIL_KEY");

                entity.Property(e => e.ApprovalTime)
                    .HasColumnName("APPROVAL_TIME")
                    .HasColumnType("datetime");

                entity.Property(e => e.AuthValue)
                    .HasColumnName("AUTH_VALUE")
                    .HasColumnType("decimal");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.IsCurrency).HasColumnName("IS_CURRENCY");

                entity.Property(e => e.IsPercent).HasColumnName("IS_PERCENT");

                entity.Property(e => e.IsVmAuth).HasColumnName("IS_VM_AUTH");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.MessageData)
                    .HasColumnName("MESSAGE_DATA")
                    .HasColumnType("varchar(max)");

                entity.Property(e => e.MessageId).HasColumnName("MESSAGE_ID");

                entity.Property(e => e.OrigValue)
                    .HasColumnName("ORIG_VALUE")
                    .HasColumnType("decimal");

                entity.Property(e => e.TransPosKey).HasColumnName("TRANS_POS_KEY");

                entity.Property(e => e.VmAuthKey).HasColumnName("VM_AUTH_KEY");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.VaultMgrAuthorizationDetail)
                    .HasForeignKey(d => d.CustomerKey)
                    .HasConstraintName("FK_VaultMgrAuthorizationDetail_Customer");

                entity.HasOne(d => d.LoanKeyNavigation)
                    .WithMany(p => p.VaultMgrAuthorizationDetail)
                    .HasForeignKey(d => d.LoanKey)
                    .HasConstraintName("FK_VaultMgrAuthorizationDetail_Loan");

                entity.HasOne(d => d.Message)
                    .WithMany(p => p.VaultMgrAuthorizationDetail)
                    .HasPrincipalKey(p => p.MessageId)
                    .HasForeignKey(d => d.MessageId)
                    .HasConstraintName("FK_VaultMgrAuthorizationDetail_DualApprovalMessage");

                entity.HasOne(d => d.TransPosKeyNavigation)
                    .WithMany(p => p.VaultMgrAuthorizationDetail)
                    .HasForeignKey(d => d.TransPosKey)
                    .HasConstraintName("FK_VaultMgrAuthorizationDetail_TransPOS");

                entity.HasOne(d => d.VmAuthKeyNavigation)
                    .WithMany(p => p.VaultMgrAuthorizationDetail)
                    .HasForeignKey(d => d.VmAuthKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_VaultMgrAuthorizationDetail_VaultMgrAuthorization");
            });

            modelBuilder.Entity<VaultMgrAuthorizationNote>(entity =>
            {
                entity.HasKey(e => e.VmaNoteKey)
                    .HasName("PK_VaultMgrAuthoNote");

                entity.Property(e => e.VmaNoteKey).HasColumnName("VMA_NOTE_KEY");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasColumnType("varchar(500)");

                entity.Property(e => e.ScoreSummaryKey).HasColumnName("SCORE_SUMMARY_KEY");

                entity.Property(e => e.VmAuthKey).HasColumnName("VM_AUTH_KEY");

                entity.HasOne(d => d.VmAuthKeyNavigation)
                    .WithMany(p => p.VaultMgrAuthorizationNote)
                    .HasForeignKey(d => d.VmAuthKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_VaultMgrAuth_VaultMgrAuthNote");
            });

            modelBuilder.Entity<VaultRecalcAdj>(entity =>
            {
                entity.HasKey(e => e.VaultRecalcAdjKey)
                    .HasName("PK_VaultRecalcAdj");

                entity.Property(e => e.VaultRecalcAdjKey).HasColumnName("VAULT_RECALC_ADJ_KEY");

                entity.Property(e => e.AmtDiff)
                    .HasColumnName("AMT_DIFF")
                    .HasColumnType("numeric")
                    .HasComputedColumnSql("[CALC_AMT]-[VAULT_AMT]")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.CalcAmt)
                    .HasColumnName("CALC_AMT")
                    .HasColumnType("numeric");

                entity.Property(e => e.CalcCnt).HasColumnName("CALC_CNT");

                entity.Property(e => e.CntDiff)
                    .HasColumnName("CNT_DIFF")
                    .HasComputedColumnSql("[CALC_CNT]-[VAULT_CNT]")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.FieldName)
                    .IsRequired()
                    .HasColumnName("FIELD_NAME")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.VaultAmt)
                    .HasColumnName("VAULT_AMT")
                    .HasColumnType("numeric");

                entity.Property(e => e.VaultCnt).HasColumnName("VAULT_CNT");
            });

            modelBuilder.Entity<VaultService>(entity =>
            {
                entity.HasKey(e => e.VaultServiceKey)
                    .HasName("PK_VaultService");

                entity.Property(e => e.VaultServiceKey).HasColumnName("VAULT_SERVICE_KEY");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.ServiceDetailKey).HasColumnName("SERVICE_DETAIL_KEY");

                entity.Property(e => e.VaultQty).HasColumnName("VAULT_QTY");

                entity.HasOne(d => d.ServiceDetailKeyNavigation)
                    .WithMany(p => p.VaultService)
                    .HasForeignKey(d => d.ServiceDetailKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_VaultService_ServiceDetail");
            });

            modelBuilder.Entity<Vehicle>(entity =>
            {
                entity.HasKey(e => e.VehicleKey)
                    .HasName("PK_Vehicle");

                entity.HasIndex(e => e.VehVin)
                    .HasName("IN_Vehicle_VIN")
                    .IsUnique();

                entity.Property(e => e.VehicleKey).HasColumnName("VEHICLE_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.FuelType)
                    .IsRequired()
                    .HasColumnName("FUEL_TYPE")
                    .HasColumnType("char(1)");

                entity.Property(e => e.ListPrice)
                    .HasColumnName("LIST_PRICE")
                    .HasColumnType("money");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.Plate)
                    .IsRequired()
                    .HasColumnName("PLATE")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.VehBody)
                    .HasColumnName("VEH_BODY")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.VehColor)
                    .IsRequired()
                    .HasColumnName("VEH_COLOR")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.VehDrive)
                    .IsRequired()
                    .HasColumnName("VEH_DRIVE")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.VehEngine)
                    .IsRequired()
                    .HasColumnName("VEH_ENGINE")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.VehMake)
                    .IsRequired()
                    .HasColumnName("VEH_MAKE")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.VehMiscEquip1)
                    .IsRequired()
                    .HasColumnName("VEH_MISC_EQUIP1")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.VehMiscEquip2)
                    .IsRequired()
                    .HasColumnName("VEH_MISC_EQUIP2")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.VehMiscEquip3)
                    .IsRequired()
                    .HasColumnName("VEH_MISC_EQUIP3")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.VehModel)
                    .HasColumnName("VEH_MODEL")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.VehTrans)
                    .IsRequired()
                    .HasColumnName("VEH_TRANS")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.VehVin)
                    .IsRequired()
                    .HasColumnName("VEH_VIN")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.VehYear).HasColumnName("VEH_YEAR");

                entity.HasOne(d => d.LocationNavigation)
                    .WithMany(p => p.Vehicle)
                    .HasForeignKey(d => d.Location)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_Vehicle_Company");
            });

            modelBuilder.Entity<VehicleHistory>(entity =>
            {
                entity.HasKey(e => e.VehicleHistoryKey)
                    .HasName("PK_VehicleHistory");

                entity.Property(e => e.VehicleHistoryKey).HasColumnName("VEHICLE_HISTORY_KEY");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.VehCondition)
                    .IsRequired()
                    .HasColumnName("VEH_CONDITION")
                    .HasColumnType("char(1)");

                entity.Property(e => e.VehMileage).HasColumnName("VEH_MILEAGE");

                entity.Property(e => e.VehVerEst)
                    .IsRequired()
                    .HasColumnName("VEH_VER_EST")
                    .HasColumnType("char(1)");

                entity.Property(e => e.VehWholesale)
                    .HasColumnName("VEH_WHOLESALE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.VehicleKey).HasColumnName("VEHICLE_KEY");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.VehicleHistory)
                    .HasForeignKey(d => d.CustomerKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_VehicleHistory_Customer");

                entity.HasOne(d => d.LoanKeyNavigation)
                    .WithMany(p => p.VehicleHistory)
                    .HasForeignKey(d => d.LoanKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_VehicleHistory_Loan");

                entity.HasOne(d => d.VehicleKeyNavigation)
                    .WithMany(p => p.VehicleHistory)
                    .HasForeignKey(d => d.VehicleKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_VehicleHistory_Vehicle");
            });

            modelBuilder.Entity<VehicleQuote>(entity =>
            {
                entity.HasKey(e => e.VehicleQuoteKey)
                    .HasName("PK_VehicleQuote");

                entity.HasIndex(e => e.Vin)
                    .HasName("IX_VehicleQuote_VIN");

                entity.Property(e => e.VehicleQuoteKey).HasColumnName("VEHICLE_QUOTE_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.Mileage).HasColumnName("MILEAGE");

                entity.Property(e => e.MileageValue)
                    .HasColumnName("MILEAGE_VALUE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Plate)
                    .IsRequired()
                    .HasColumnName("PLATE")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.RetailPrice)
                    .HasColumnName("RETAIL_PRICE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.Vin)
                    .IsRequired()
                    .HasColumnName("VIN")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.WholesalePrice)
                    .HasColumnName("WHOLESALE_PRICE")
                    .HasColumnType("smallmoney");
            });

            modelBuilder.Entity<VeritecLoanId>(entity =>
            {
                entity.HasKey(e => e.VeritecLoanIdKey)
                    .HasName("PK_VeritecLoanID");

                entity.ToTable("VeritecLoanID");

                entity.HasIndex(e => e.LoanKey)
                    .HasName("IX_VeritecLoanID_LOAN_KEY");

                entity.Property(e => e.VeritecLoanIdKey).HasColumnName("VERITEC_LOAN_ID_KEY");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.ManuallyEntered).HasColumnName("MANUALLY_ENTERED");

                entity.Property(e => e.TransNum)
                    .IsRequired()
                    .HasColumnName("TRANS_NUM")
                    .HasColumnType("varchar(30)");
            });

            modelBuilder.Entity<Visitor>(entity =>
            {
                entity.HasKey(e => e.VisitorKey)
                    .HasName("PK_Visitor");

                entity.HasIndex(e => e.DateEntered)
                    .HasName("IX_Visitor_DATE_ENTERED");

                entity.HasIndex(e => e.LenderKey)
                    .HasName("IX_Visitor_LENDER_KEY");

                entity.HasIndex(e => new { e.VisitorKey, e.EmailAddr })
                    .HasName("IX_Visitor_VISITOR_KEY_EMAIL_ADDR");

                entity.HasIndex(e => new { e.VisitorKey, e.AccessId, e.LenderKey })
                    .HasName("IX_Visitor_ACCESS_ID");

                entity.HasIndex(e => new { e.VisitorKey, e.EmailAddr, e.LenderKey })
                    .HasName("IX_Visitor_EMAIL_ADDR")
                    .IsUnique();

                entity.HasIndex(e => new { e.VisitorKey, e.InvalidEmail, e.EmailDeleted })
                    .HasName("IX_Visitor_INVALID_EMAIL_EMAIL_DELETED");

                entity.Property(e => e.VisitorKey).HasColumnName("VISITOR_KEY");

                entity.Property(e => e.AccessId)
                    .HasColumnName("ACCESS_ID")
                    .HasColumnType("varchar(60)");

                entity.Property(e => e.AccessPassword)
                    .HasColumnName("ACCESS_PASSWORD")
                    .HasColumnType("varchar(75)");

                entity.Property(e => e.BlockReasonKey).HasColumnName("BLOCK_REASON_KEY");

                entity.Property(e => e.Blocked).HasColumnName("BLOCKED");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EmailAddr)
                    .IsRequired()
                    .HasColumnName("EMAIL_ADDR")
                    .HasColumnType("varchar(60)");

                entity.Property(e => e.EmailDeleted)
                    .HasColumnName("EMAIL_DELETED")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.EmailDeletedBy)
                    .HasColumnName("EMAIL_DELETED_BY")
                    .HasColumnType("varchar(3)");

                entity.Property(e => e.EmailDeletedDate)
                    .HasColumnName("EMAIL_DELETED_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EmailDeliveryFailureCount).HasColumnName("EMAIL_DELIVERY_FAILURE_COUNT");

                entity.Property(e => e.EmailDeliveryFailureDate)
                    .HasColumnName("EMAIL_DELIVERY_FAILURE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.FailedLoginCount).HasColumnName("FAILED_LOGIN_COUNT");

                entity.Property(e => e.InvalidEmail).HasColumnName("INVALID_EMAIL");

                entity.Property(e => e.IsPasswordSysGen).HasColumnName("IS_PASSWORD_SYS_GEN");

                entity.Property(e => e.LastFailedLogin)
                    .HasColumnName("LAST_FAILED_LOGIN")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.LastLogin)
                    .HasColumnName("LAST_LOGIN")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.LastUpdated)
                    .HasColumnName("LAST_UPDATED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.LenderKey).HasColumnName("LENDER_KEY");

                entity.Property(e => e.OowDate)
                    .HasColumnName("OOW_DATE")
                    .HasColumnType("date");

                entity.Property(e => e.OowStatus).HasColumnName("OOW_STATUS");

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasColumnName("PASSWORD")
                    .HasColumnType("varchar(75)");

                entity.Property(e => e.PasswordType)
                    .HasColumnName("PASSWORD_TYPE")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Salt)
                    .HasColumnName("SALT")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.SecurityAnswer)
                    .HasColumnName("SECURITY_ANSWER")
                    .HasColumnType("varchar(255)");

                entity.Property(e => e.SigninCount).HasColumnName("SIGNIN_COUNT");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.VStatusId)
                    .IsRequired()
                    .HasColumnName("V_STATUS_ID")
                    .HasColumnType("char(1)");

                entity.Property(e => e.VisitorSecurityQuestionKey).HasColumnName("VISITOR_SECURITY_QUESTION_KEY");

                entity.HasOne(d => d.BlockReasonKeyNavigation)
                    .WithMany(p => p.Visitor)
                    .HasForeignKey(d => d.BlockReasonKey)
                    .HasConstraintName("FK_Visitor_BlockReason");

                entity.HasOne(d => d.LenderKeyNavigation)
                    .WithMany(p => p.Visitor)
                    .HasForeignKey(d => d.LenderKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_Visitor_LENDER_KEY");

                entity.HasOne(d => d.VisitorSecurityQuestionKeyNavigation)
                    .WithMany(p => p.Visitor)
                    .HasForeignKey(d => d.VisitorSecurityQuestionKey)
                    .HasConstraintName("FK_Visitor_VISITOR_SECURITY_QUESTION_KEY");
            });

            modelBuilder.Entity<VisitorApiAuthorization>(entity =>
            {
                entity.HasKey(e => e.VisitorApiAuthorizationKey)
                    .HasName("PK_VisitorApiAuthorization");

                entity.HasIndex(e => e.Token)
                    .HasName("UC_VisitorApiAuthorization_Token")
                    .IsUnique();

                entity.HasIndex(e => e.VisitorKey)
                    .HasName("IX_VisitorApiAuthorization_VISITOR_KEY");

                entity.Property(e => e.VisitorApiAuthorizationKey).HasColumnName("VISITOR_API_AUTHORIZATION_KEY");

                entity.Property(e => e.ApiApplicationKey).HasColumnName("API_APPLICATION_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateTokenExpires)
                    .HasColumnName("DATE_TOKEN_EXPIRES")
                    .HasColumnType("datetime");

                entity.Property(e => e.Pin)
                    .IsRequired()
                    .HasColumnName("PIN")
                    .HasColumnType("varchar(75)");

                entity.Property(e => e.Token)
                    .IsRequired()
                    .HasColumnName("TOKEN");

                entity.Property(e => e.VisitorDeviceKey).HasColumnName("VISITOR_DEVICE_KEY");

                entity.Property(e => e.VisitorKey).HasColumnName("VISITOR_KEY");

                entity.HasOne(d => d.ApiApplicationKeyNavigation)
                    .WithMany(p => p.VisitorApiAuthorization)
                    .HasForeignKey(d => d.ApiApplicationKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_VisitorApiAuthorization_ApiApplication");

                entity.HasOne(d => d.VisitorDeviceKeyNavigation)
                    .WithMany(p => p.VisitorApiAuthorization)
                    .HasForeignKey(d => d.VisitorDeviceKey)
                    .HasConstraintName("FK_VisitorApiAuthorization_VisitorDevice");

                entity.HasOne(d => d.VisitorKeyNavigation)
                    .WithMany(p => p.VisitorApiAuthorization)
                    .HasForeignKey(d => d.VisitorKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_VisitorApiAuthorization_Visitor");
            });

            modelBuilder.Entity<VisitorDevice>(entity =>
            {
                entity.HasKey(e => e.VisitorDeviceKey)
                    .HasName("PK_VisitorDevice");

                entity.HasIndex(e => e.VisitorKey)
                    .HasName("IX_VisitorDevice_VISITOR_KEY");

                entity.Property(e => e.VisitorDeviceKey).HasColumnName("VISITOR_DEVICE_KEY");

                entity.Property(e => e.ApplicationVersion)
                    .IsRequired()
                    .HasColumnName("APPLICATION_VERSION")
                    .HasColumnType("varchar(20)")
                    .HasDefaultValueSql("''");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateLastPush)
                    .HasColumnName("DATE_LAST_PUSH")
                    .HasColumnType("datetime");

                entity.Property(e => e.DeviceType).HasColumnName("DEVICE_TYPE");

                entity.Property(e => e.IsExpired).HasColumnName("IS_EXPIRED");

                entity.Property(e => e.Name)
                    .HasColumnName("NAME")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.NumPushErrors).HasColumnName("NUM_PUSH_ERRORS");

                entity.Property(e => e.SubscriptionToken)
                    .IsRequired()
                    .HasColumnName("SUBSCRIPTION_TOKEN")
                    .HasColumnType("varchar(500)");

                entity.Property(e => e.Uuid)
                    .IsRequired()
                    .HasColumnName("UUID")
                    .HasColumnType("varchar(250)");

                entity.Property(e => e.VisitorKey).HasColumnName("VISITOR_KEY");

                entity.HasOne(d => d.VisitorKeyNavigation)
                    .WithMany(p => p.VisitorDevice)
                    .HasForeignKey(d => d.VisitorKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_VisitorDevice_Visitor");
            });

            modelBuilder.Entity<VisitorEdit>(entity =>
            {
                entity.HasKey(e => e.VisitorEditKey)
                    .HasName("PK_VisitorEdit");

                entity.HasIndex(e => new { e.VisitorEditKey, e.VisitorKey })
                    .HasName("IX_VisitorEdit_VISITOR_KEY");

                entity.Property(e => e.VisitorEditKey).HasColumnName("VISITOR_EDIT_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.FieldName)
                    .IsRequired()
                    .HasColumnName("FIELD_NAME")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.NewValue)
                    .HasColumnName("NEW_VALUE")
                    .HasColumnType("varchar(255)");

                entity.Property(e => e.OldValue)
                    .HasColumnName("OLD_VALUE")
                    .HasColumnType("varchar(255)");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.VisitorKey).HasColumnName("VISITOR_KEY");

                entity.HasOne(d => d.VisitorKeyNavigation)
                    .WithMany(p => p.VisitorEdit)
                    .HasForeignKey(d => d.VisitorKey)
                    .HasConstraintName("FK_VisitorEdit_Visitor");
            });

            modelBuilder.Entity<VisitorEmail>(entity =>
            {
                entity.HasKey(e => e.VisitorEmailKey)
                    .HasName("IX_VisitorEmail_VISITOR_EMAIL");

                entity.HasIndex(e => e.LoanApplicationKey)
                    .HasName("IX_VisitorEmail_LOAN_APPLICATION_KEY");

                entity.HasIndex(e => new { e.LoanKey, e.EmailId })
                    .HasName("ix_VisitorEmail_LOAN_KEY");

                entity.HasIndex(e => new { e.VisitorKey, e.LoanApplicationKey })
                    .HasName("IX_VisitorEmail_VISITOR_KEY");

                entity.Property(e => e.VisitorEmailKey).HasColumnName("VISITOR_EMAIL_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EmailAddress)
                    .IsRequired()
                    .HasColumnName("EMAIL_ADDRESS")
                    .HasColumnType("varchar(60)");

                entity.Property(e => e.EmailBody)
                    .IsRequired()
                    .HasColumnName("EMAIL_BODY")
                    .HasColumnType("text");

                entity.Property(e => e.EmailDate)
                    .HasColumnName("EMAIL_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.EmailFromAddress)
                    .HasColumnName("EMAIL_FROM_ADDRESS")
                    .HasColumnType("varchar(60)");

                entity.Property(e => e.EmailId).HasColumnName("EMAIL_ID");

                entity.Property(e => e.EmailOrigination)
                    .HasColumnName("EMAIL_ORIGINATION")
                    .HasColumnType("char(1)");

                entity.Property(e => e.EmailSubject)
                    .IsRequired()
                    .HasColumnName("EMAIL_SUBJECT")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.EmailTemplateKey).HasColumnName("EMAIL_TEMPLATE_KEY");

                entity.Property(e => e.LoanApplicationKey).HasColumnName("LOAN_APPLICATION_KEY");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.VisitorKey).HasColumnName("VISITOR_KEY");

                entity.HasOne(d => d.EmailTemplateKeyNavigation)
                    .WithMany(p => p.VisitorEmail)
                    .HasForeignKey(d => d.EmailTemplateKey)
                    .HasConstraintName("FK_VisitorEmail_EmailTemplate");

                entity.HasOne(d => d.LoanApplicationKeyNavigation)
                    .WithMany(p => p.VisitorEmail)
                    .HasForeignKey(d => d.LoanApplicationKey)
                    .HasConstraintName("FK_VisitorEmail_LoanApplication");

                entity.HasOne(d => d.LoanKeyNavigation)
                    .WithMany(p => p.VisitorEmail)
                    .HasForeignKey(d => d.LoanKey)
                    .HasConstraintName("FK_VisitorEmail_Loan");

                entity.HasOne(d => d.VisitorKeyNavigation)
                    .WithMany(p => p.VisitorEmail)
                    .HasForeignKey(d => d.VisitorKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_VisitorEmail_VISITOR_KEY");
            });

            modelBuilder.Entity<VisitorEmailDisposition>(entity =>
            {
                entity.HasKey(e => e.VisitorEmailDispositionKey)
                    .HasName("PK_VisitorEmailDisposition");

                entity.Property(e => e.VisitorEmailDispositionKey).HasColumnName("VISITOR_EMAIL_DISPOSITION_KEY");

                entity.Property(e => e.DispositionDate)
                    .HasColumnName("DISPOSITION_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.EmailDispositionKey).HasColumnName("EMAIL_DISPOSITION_KEY");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.VisitorEmailKey).HasColumnName("VISITOR_EMAIL_KEY");

                entity.HasOne(d => d.EmailDispositionKeyNavigation)
                    .WithMany(p => p.VisitorEmailDisposition)
                    .HasForeignKey(d => d.EmailDispositionKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_VisitorEmailDisposition_EmailDisposition_EmailDispositionKey");

                entity.HasOne(d => d.VisitorEmailKeyNavigation)
                    .WithMany(p => p.VisitorEmailDisposition)
                    .HasForeignKey(d => d.VisitorEmailKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_VisitorEmailDisposition_VisitorEmail_VisitoryEmailKey");
            });

            modelBuilder.Entity<VisitorEmailExcludedSenders>(entity =>
            {
                entity.HasKey(e => e.VisitorEmailExcludedSendersKey)
                    .HasName("PK_VisitorEmailExcludedSenders");

                entity.Property(e => e.VisitorEmailExcludedSendersKey).HasColumnName("VISITOR_EMAIL_EXCLUDED_SENDERS_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.EmailDomain)
                    .HasColumnName("EMAIL_DOMAIN")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.EmailUser)
                    .HasColumnName("EMAIL_USER")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("varchar(3)");
            });

            modelBuilder.Entity<VisitorHistory>(entity =>
            {
                entity.HasKey(e => e.VisitorHistoryKey)
                    .HasName("PK_VisitorHistory");

                entity.HasIndex(e => e.SessionGuid)
                    .HasName("IX_VisitorHistory_SESSION_GUID");

                entity.HasIndex(e => e.VisitorKey)
                    .HasName("IX_VisitorHistory_VISITOR_KEY");

                entity.HasIndex(e => new { e.DateEntered, e.SessionGuid })
                    .HasName("IX_VistitorHistory_SESSION_GUID_DATE_ENTERED");

                entity.Property(e => e.VisitorHistoryKey).HasColumnName("VISITOR_HISTORY_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DateEnteredWithSeconds)
                    .HasColumnName("DATE_ENTERED_WITH_SECONDS")
                    .HasColumnType("datetime");

                entity.Property(e => e.IpAddress)
                    .IsRequired()
                    .HasColumnName("IP_ADDRESS")
                    .HasColumnType("char(15)");

                entity.Property(e => e.MethodCall)
                    .IsRequired()
                    .HasColumnName("METHOD_CALL")
                    .HasColumnType("varchar(255)")
                    .HasDefaultValueSql("''");

                entity.Property(e => e.PageName)
                    .IsRequired()
                    .HasColumnName("PAGE_NAME")
                    .HasColumnType("varchar(1000)");

                entity.Property(e => e.SessionGuid)
                    .HasColumnName("SESSION_GUID")
                    .HasColumnType("varchar(38)");

                entity.Property(e => e.VisitorKey).HasColumnName("VISITOR_KEY");

                entity.Property(e => e.WebVisitKey).HasColumnName("WEB_VISIT_KEY");

                entity.HasOne(d => d.VisitorKeyNavigation)
                    .WithMany(p => p.VisitorHistory)
                    .HasForeignKey(d => d.VisitorKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_VisitorHistory_VISITOR_KEY");
            });

            modelBuilder.Entity<VisitorSecurityQuestion>(entity =>
            {
                entity.HasKey(e => e.VisitorSecurityQuestionKey)
                    .HasName("PK_VisitorSecurityQuestion");

                entity.Property(e => e.VisitorSecurityQuestionKey).HasColumnName("VISITOR_SECURITY_QUESTION_KEY");

                entity.Property(e => e.DisplayOrder).HasColumnName("DISPLAY_ORDER");

                entity.Property(e => e.Question)
                    .IsRequired()
                    .HasColumnName("QUESTION")
                    .HasColumnType("varchar(255)");
            });

            modelBuilder.Entity<VmatransType>(entity =>
            {
                entity.HasKey(e => e.VmaTransTypeKey)
                    .HasName("PK_VMATransType");

                entity.ToTable("VMATransType");

                entity.Property(e => e.VmaTransTypeKey)
                    .HasColumnName("VMA_TRANS_TYPE_KEY")
                    .ValueGeneratedNever();

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.VmaDesc)
                    .IsRequired()
                    .HasColumnName("VMA_DESC")
                    .HasColumnType("varchar(60)");
            });

            modelBuilder.Entity<WebArchive>(entity =>
            {
                entity.HasKey(e => e.WebArchiveKey)
                    .HasName("PK_WebArchive");

                entity.HasIndex(e => new { e.Path, e.WebArchiveKey })
                    .HasName("IX_WebArchive_Web_Archive_Key");

                entity.Property(e => e.WebArchiveKey).HasColumnName("WEB_ARCHIVE_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.Path)
                    .IsRequired()
                    .HasColumnName("PATH")
                    .HasColumnType("varchar(100)");
            });

            modelBuilder.Entity<WebBlob>(entity =>
            {
                entity.HasKey(e => e.WebBlobKey)
                    .HasName("PK_WebBlob");

                entity.HasIndex(e => new { e.WebBlobTypeKey, e.DateEntered, e.WebBlobKey })
                    .HasName("IX_WebBlob_DATE_ENTERED_WEB_BLOB_TYPE_KEY");

                entity.Property(e => e.WebBlobKey).HasColumnName("WEB_BLOB_KEY");

                entity.Property(e => e.Data)
                    .IsRequired()
                    .HasColumnName("DATA");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.WebBlobTypeKey).HasColumnName("WEB_BLOB_TYPE_KEY");

                entity.HasOne(d => d.WebBlobTypeKeyNavigation)
                    .WithMany(p => p.WebBlob)
                    .HasForeignKey(d => d.WebBlobTypeKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_WebBlob_WebBlobType");
            });

            modelBuilder.Entity<WebBlobLoanApplicationXref>(entity =>
            {
                entity.HasKey(e => e.WebBlobLoanApplicationXrefKey)
                    .HasName("PK_WebBlobLoanApplicationXref");

                entity.HasIndex(e => e.LoanApplicationKey)
                    .HasName("IX_WebBlobLoanApplicationXref_LOAN_APPLICATION_KEY");

                entity.Property(e => e.WebBlobLoanApplicationXrefKey).HasColumnName("WEB_BLOB_LOAN_APPLICATION_XREF_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(256)");

                entity.Property(e => e.LoanApplicationKey).HasColumnName("LOAN_APPLICATION_KEY");

                entity.Property(e => e.SourceUrl)
                    .IsRequired()
                    .HasColumnName("SOURCE_URL")
                    .HasColumnType("varchar(2085)");

                entity.Property(e => e.WebBlobKey).HasColumnName("WEB_BLOB_KEY");

                entity.HasOne(d => d.LoanApplicationKeyNavigation)
                    .WithMany(p => p.WebBlobLoanApplicationXref)
                    .HasForeignKey(d => d.LoanApplicationKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_WebBlobLoanApplicationXref_LoanApplication");

                entity.HasOne(d => d.WebBlobKeyNavigation)
                    .WithMany(p => p.WebBlobLoanApplicationXref)
                    .HasForeignKey(d => d.WebBlobKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_WebBlobLoanApplicationXref_WebBlob");
            });

            modelBuilder.Entity<WebBlobLoanXref>(entity =>
            {
                entity.HasKey(e => e.WebBlobLoanXrefKey)
                    .HasName("PK_WebBlobLoanXref");

                entity.Property(e => e.WebBlobLoanXrefKey).HasColumnName("WEB_BLOB_LOAN_XREF_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(256)");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.WebBlobKey).HasColumnName("WEB_BLOB_KEY");

                entity.HasOne(d => d.LoanKeyNavigation)
                    .WithMany(p => p.WebBlobLoanXref)
                    .HasForeignKey(d => d.LoanKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_WebBlobLoanXref_Loan");

                entity.HasOne(d => d.WebBlobKeyNavigation)
                    .WithMany(p => p.WebBlobLoanXref)
                    .HasForeignKey(d => d.WebBlobKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_WebBlobLoanXref_WebBlob");
            });

            modelBuilder.Entity<WebBlobType>(entity =>
            {
                entity.HasKey(e => e.WebBlobTypeKey)
                    .HasName("PK_WebBlobType");

                entity.Property(e => e.WebBlobTypeKey)
                    .HasColumnName("WEB_BLOB_TYPE_KEY")
                    .ValueGeneratedNever();

                entity.Property(e => e.Active).HasColumnName("ACTIVE");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(128)");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasColumnName("TYPE")
                    .HasColumnType("varchar(50)");
            });

            modelBuilder.Entity<WebBlobVisitorEmailXref>(entity =>
            {
                entity.HasKey(e => e.WebBlobVisitorEmailXrefKey)
                    .HasName("PK_WebBlobVisitorEmailXref");

                entity.HasIndex(e => e.VisitorEmailKey)
                    .HasName("IX_WebBlobVisitorEmailXref_VISITOR_EMAIL_KEY");

                entity.Property(e => e.WebBlobVisitorEmailXrefKey).HasColumnName("WEB_BLOB_VISITOR_EMAIL_XREF_KEY");

                entity.Property(e => e.AttachmentName)
                    .IsRequired()
                    .HasColumnName("ATTACHMENT_NAME")
                    .HasColumnType("varchar(200)");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(256)");

                entity.Property(e => e.VisitorEmailKey).HasColumnName("VISITOR_EMAIL_KEY");

                entity.Property(e => e.WebBlobKey).HasColumnName("WEB_BLOB_KEY");

                entity.HasOne(d => d.VisitorEmailKeyNavigation)
                    .WithMany(p => p.WebBlobVisitorEmailXref)
                    .HasForeignKey(d => d.VisitorEmailKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_WebBlobVisitorEmailXref_VisitorEmail");

                entity.HasOne(d => d.WebBlobKeyNavigation)
                    .WithMany(p => p.WebBlobVisitorEmailXref)
                    .HasForeignKey(d => d.WebBlobKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_WebBlobVisitorEmailXref_WebBlob");
            });

            modelBuilder.Entity<WebCallApplicationModeAudit>(entity =>
            {
                entity.HasKey(e => e.WebCallApplicationModeAuditKey)
                    .HasName("PK_WebCallApplicationModeAudit");

                entity.Property(e => e.WebCallApplicationModeAuditKey).HasColumnName("Web_Call_Application_Mode_Audit_Key");

                entity.Property(e => e.EndDate)
                    .HasColumnName("End_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.StartDate)
                    .HasColumnName("Start_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.User)
                    .IsRequired()
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.WebCallApplicationModeKey).HasColumnName("Web_Call_Application_Mode_Key");

                entity.HasOne(d => d.WebCallApplicationModeKeyNavigation)
                    .WithMany(p => p.WebCallApplicationModeAudit)
                    .HasForeignKey(d => d.WebCallApplicationModeKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_WebCallApplicationModeAudit_WebCallApplicationModes");
            });

            modelBuilder.Entity<WebCallApplicationModes>(entity =>
            {
                entity.HasKey(e => e.WebCallApplicationModeKey)
                    .HasName("PK_WebCallApplicationModes");

                entity.Property(e => e.WebCallApplicationModeKey).HasColumnName("Web_Call_Application_Mode_Key");

                entity.Property(e => e.ActivationEvent).HasColumnName("Activation_Event");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("Date_Entered")
                    .HasColumnType("datetime");

                entity.Property(e => e.DisplayOrder).HasColumnName("Display_Order");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.OnSelectedAction).HasColumnName("OnSelected_Action");
            });

            modelBuilder.Entity<WebCallApplicationStatusHistory>(entity =>
            {
                entity.HasKey(e => e.WebCallApplicationStatusHistoryKey)
                    .HasName("PK_WebCallApplicationStatusHistory");

                entity.HasIndex(e => e.ApplicationStatusChangeDate)
                    .HasName("IX_WebCallApplicationStatusHistory_App_Status_Change_Date");

                entity.HasIndex(e => e.LoanApplicationKey)
                    .HasName("IX_WebCallApplicationStatusHistory_LOAN_APPLICATION_KEY");

                entity.HasIndex(e => new { e.WebCallRarrHistoryKey, e.LoanApplicationKey })
                    .HasName("IX_WebCallApplicationStatusHistory_RarrHistory_ApplicationKey");

                entity.Property(e => e.WebCallApplicationStatusHistoryKey).HasColumnName("Web_Call_Application_Status_History_KEY");

                entity.Property(e => e.ApplicationStatusChangeDate)
                    .HasColumnName("Application_Status_Change_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createdate)
                    .HasColumnName("CREATEDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.LoanApplicationKey).HasColumnName("Loan_Application_Key");

                entity.Property(e => e.LoanApplicationStatus).HasColumnName("Loan_Application_Status");

                entity.Property(e => e.WebCallRarrHistoryKey).HasColumnName("Web_Call_RARR_History_Key");
            });

            modelBuilder.Entity<WebCallAuthorizedVisitorContact>(entity =>
            {
                entity.HasKey(e => e.WebCallAuthorizedVisitorContactKey)
                    .HasName("PK_WebCallAuthorizedVisitorContact");

                entity.HasIndex(e => e.VisitorKey)
                    .HasName("IX_WebCallAuthorizedVisitorContact_VISITOR_KEY");

                entity.Property(e => e.WebCallAuthorizedVisitorContactKey).HasColumnName("Web_Call_Authorized_Visitor_Contact_Key");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("Date_Entered")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Dob)
                    .HasColumnName("DOB")
                    .HasColumnType("date");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasColumnName("First_Name")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasColumnName("Last_Name")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Relationship).HasColumnType("char(1)");

                entity.Property(e => e.VisitorKey).HasColumnName("Visitor_Key");

                entity.HasOne(d => d.VisitorKeyNavigation)
                    .WithMany(p => p.WebCallAuthorizedVisitorContact)
                    .HasForeignKey(d => d.VisitorKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_WebCallAuthorizedVisitorContact_VISITOR_KEY");
            });

            modelBuilder.Entity<WebCallBatchAction>(entity =>
            {
                entity.HasKey(e => e.WebCallBatchTaskActionKey)
                    .HasName("PK_WebCallBatchAction");

                entity.Property(e => e.WebCallBatchTaskActionKey).HasColumnName("Web_Call_BatchTaskAction_Key");

                entity.Property(e => e.ActionType).HasColumnName("Action_Type");

                entity.Property(e => e.WebCallActionKey).HasColumnName("Web_Call_Action_Key");

                entity.Property(e => e.WebCallBatchTaskKey).HasColumnName("Web_Call_BatchTask_Key");

                entity.Property(e => e.WebCallCategoryKey).HasColumnName("Web_Call_Category_Key");

                entity.Property(e => e.WebCallRarrKey).HasColumnName("Web_Call_Rarr_Key");

                entity.Property(e => e.WebCallReasonKey).HasColumnName("Web_Call_Reason_Key");

                entity.Property(e => e.WebCallResult1Key).HasColumnName("Web_Call_Result1_Key");

                entity.Property(e => e.WebCallResult2Key).HasColumnName("Web_Call_Result2_Key");

                entity.HasOne(d => d.WebCallBatchTaskKeyNavigation)
                    .WithMany(p => p.WebCallBatchAction)
                    .HasForeignKey(d => d.WebCallBatchTaskKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_WebCallBatchAction_WebCallBatchTask");
            });

            modelBuilder.Entity<WebCallBatchCriteria>(entity =>
            {
                entity.HasKey(e => e.WebCallBatchTaskCriteriaKey)
                    .HasName("PK_WebCallBatchCriteria");

                entity.Property(e => e.WebCallBatchTaskCriteriaKey).HasColumnName("Web_Call_BatchTaskCriteria_Key");

                entity.Property(e => e.CriteriaType).HasColumnName("Criteria_Type");

                entity.Property(e => e.CriteriaValue).HasColumnName("Criteria_Value");

                entity.Property(e => e.WebCallActionKey).HasColumnName("Web_Call_Action_Key");

                entity.Property(e => e.WebCallBatchTaskKey).HasColumnName("Web_Call_BatchTask_Key");

                entity.Property(e => e.WebCallRarrKey).HasColumnName("Web_Call_Rarr_Key");

                entity.Property(e => e.WebCallReasonKey).HasColumnName("Web_Call_Reason_Key");

                entity.Property(e => e.WebCallResult1Key).HasColumnName("Web_Call_Result1_Key");

                entity.Property(e => e.WebCallResult2Key).HasColumnName("Web_Call_Result2_Key");

                entity.HasOne(d => d.WebCallBatchTaskKeyNavigation)
                    .WithMany(p => p.WebCallBatchCriteria)
                    .HasForeignKey(d => d.WebCallBatchTaskKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_WebCallBatchCriteria_WebCallBatchTask");
            });

            modelBuilder.Entity<WebCallBatchTask>(entity =>
            {
                entity.HasKey(e => e.WebCallBatchTaskKey)
                    .HasName("PK_WebCallBatchTask");

                entity.Property(e => e.WebCallBatchTaskKey).HasColumnName("Web_Call_BatchTask_Key");

                entity.Property(e => e.AllowScheduling).HasDefaultValueSql("0");

                entity.Property(e => e.CreateDate)
                    .HasColumnName("Create_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasColumnName("Created_By")
                    .HasColumnType("varchar(3)");

                entity.Property(e => e.TaskName)
                    .IsRequired()
                    .HasColumnType("varchar(50)");
            });

            modelBuilder.Entity<WebCallBatchTaskExecutionHistory>(entity =>
            {
                entity.HasKey(e => e.WebCallBatchTaskExecutionKey)
                    .HasName("PK_WebCallBatchTaskExecutionHistory");

                entity.Property(e => e.WebCallBatchTaskExecutionKey).HasColumnName("Web_Call_BatchTask_Execution_Key");

                entity.Property(e => e.ActionText)
                    .IsRequired()
                    .HasColumnType("varchar(4000)");

                entity.Property(e => e.CriteriaText)
                    .IsRequired()
                    .HasColumnType("varchar(4000)");

                entity.Property(e => e.RunBy)
                    .IsRequired()
                    .HasColumnType("varchar(3)");

                entity.Property(e => e.RunDate).HasColumnType("datetime");

                entity.Property(e => e.TargetWorkItemIds)
                    .IsRequired()
                    .HasColumnName("TargetWorkItemIDs")
                    .HasColumnType("varchar(4000)");

                entity.Property(e => e.WebCallBatchTaskKey).HasColumnName("Web_Call_BatchTask_Key");
            });

            modelBuilder.Entity<WebCallCampaign>(entity =>
            {
                entity.HasKey(e => e.WebCallCampaignKey)
                    .HasName("PK_CCCampaign");

                entity.Property(e => e.WebCallCampaignKey).HasColumnName("WEB_CALL_CAMPAIGN_KEY");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasColumnType("varchar(50)");
            });

            modelBuilder.Entity<WebCallCampaignCategory>(entity =>
            {
                entity.HasKey(e => e.WebCallCampaignCategoryKey)
                    .HasName("PK_CCCampaignCategory");

                entity.Property(e => e.WebCallCampaignCategoryKey).HasColumnName("WEB_CALL_CAMPAIGN_CATEGORY_KEY");

                entity.Property(e => e.SortPriority).HasColumnName("SORT_PRIORITY");

                entity.Property(e => e.WebCallCampaignKey).HasColumnName("WEB_CALL_CAMPAIGN_KEY");

                entity.Property(e => e.WebCallCategoryKey).HasColumnName("WEB_CALL_CATEGORY_KEY");

                entity.HasOne(d => d.WebCallCampaignKeyNavigation)
                    .WithMany(p => p.WebCallCampaignCategory)
                    .HasForeignKey(d => d.WebCallCampaignKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CCCampaignCategory_CCCampaign");

                entity.HasOne(d => d.WebCallCategoryKeyNavigation)
                    .WithMany(p => p.WebCallCampaignCategory)
                    .HasForeignKey(d => d.WebCallCategoryKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_WebCallCampaignCategory_WebCallCategory");
            });

            modelBuilder.Entity<WebCallCatRarrAlias>(entity =>
            {
                entity.HasKey(e => e.WebCallCatRarrAliasKey)
                    .HasName("PK_WebCallCatRarrAlias");

                entity.Property(e => e.WebCallCatRarrAliasKey).HasColumnName("Web_Call_CatRarrAlias_Key");

                entity.Property(e => e.AliasName)
                    .IsRequired()
                    .HasColumnName("Alias_Name")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.WebCallActionKey).HasColumnName("WEB_CALL_ACTION_KEY");

                entity.Property(e => e.WebCallCategoryKey).HasColumnName("Web_Call_Category_Key");

                entity.Property(e => e.WebCallRarrKey).HasColumnName("WEB_CALL_RARR_KEY");

                entity.Property(e => e.WebCallReasonKey).HasColumnName("WEB_CALL_REASON_KEY");

                entity.Property(e => e.WebCallResult1Key).HasColumnName("WEB_CALL_RESULT1_KEY");

                entity.Property(e => e.WebCallResult2Key).HasColumnName("WEB_CALL_RESULT2_KEY");
            });

            modelBuilder.Entity<WebCallCategory>(entity =>
            {
                entity.HasKey(e => e.WebCallCategoryKey)
                    .HasName("PK_CCCategory");

                entity.Property(e => e.WebCallCategoryKey).HasColumnName("WEB_CALL_CATEGORY_KEY");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("CATEGORY")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.ColorRgb).HasColumnName("COLOR_RGB");

                entity.Property(e => e.Deleted).HasColumnName("DELETED");

                entity.Property(e => e.DialerRefreshMinutes).HasColumnName("DIALER_REFRESH_MINUTES");

                entity.Property(e => e.DialerUpload).HasColumnName("DIALER_UPLOAD");

                entity.Property(e => e.IsCollections)
                    .HasColumnName("IS_COLLECTIONS")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.IsCujo).HasColumnName("IS_CUJO");

                entity.Property(e => e.LastResetDate)
                    .HasColumnName("LAST_RESET_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("'1/1/1900'");

                entity.Property(e => e.ResetDaily)
                    .HasColumnName("RESET_DAILY")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.SortPriority).HasColumnName("SORT_PRIORITY");
            });

            modelBuilder.Entity<WebCallCctimerLog>(entity =>
            {
                entity.HasKey(e => e.CallCenterTimerLogKey)
                    .HasName("PK_CCTimerLogKey");

                entity.ToTable("WebCallCCTimerLog");

                entity.Property(e => e.CallCenterTimerLogKey).HasColumnName("CALL_CENTER_TIMER_LOG_KEY");

                entity.Property(e => e.CalledFromName)
                    .HasColumnName("CALLED_FROM_NAME")
                    .HasColumnType("varchar(500)");

                entity.Property(e => e.CalledMethodName)
                    .HasColumnName("CALLED_METHOD_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Teller)
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.TimeStamp)
                    .HasColumnName("TIME_STAMP")
                    .HasColumnType("datetime");

                entity.Property(e => e.TimeStampType)
                    .HasColumnName("TIME_STAMP_TYPE")
                    .HasColumnType("varchar(5)");
            });

            modelBuilder.Entity<WebCallCenterLogin>(entity =>
            {
                entity.HasKey(e => e.CallCenterLoginKey)
                    .HasName("PK_WebCallCenterLogin");

                entity.HasIndex(e => new { e.Teller, e.LoggedIn })
                    .HasName("IX_usp_WebCallLogIn_Teller_LoggedIn");

                entity.Property(e => e.CallCenterLoginKey).HasColumnName("CallCenter_Login_Key");

                entity.Property(e => e.LoginDate)
                    .HasColumnName("Login_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.LogoutDate)
                    .HasColumnName("Logout_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Server)
                    .IsRequired()
                    .HasColumnType("varchar(255)");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnType("char(3)");
            });

            modelBuilder.Entity<WebCallChatCannedResponses>(entity =>
            {
                entity.HasKey(e => e.WebCallChatCannedResponsesKey)
                    .HasName("PK_WebCallChatCannedResponses");

                entity.Property(e => e.WebCallChatCannedResponsesKey).HasColumnName("WEB_CALL_CHAT_CANNED_RESPONSES_KEY");

                entity.Property(e => e.Deleted).HasColumnName("DELETED");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(4000)");

                entity.Property(e => e.SortPriority).HasColumnName("SORT_PRIORITY");
            });

            modelBuilder.Entity<WebCallChatMessage>(entity =>
            {
                entity.HasKey(e => e.WebUniqueIdentifierKey)
                    .HasName("PK_ChatMessages");

                entity.Property(e => e.WebUniqueIdentifierKey)
                    .HasColumnName("WEB_UNIQUE_IDENTIFIER_KEY")
                    .ValueGeneratedNever();

                entity.Property(e => e.DateSent)
                    .HasColumnName("DATE_SENT")
                    .HasColumnType("datetime");

                entity.Property(e => e.Message)
                    .HasColumnName("MESSAGE")
                    .HasColumnType("text");

                entity.Property(e => e.WebCallChatSessionKey).HasColumnName("WEB_CALL_CHAT_SESSION_KEY");

                entity.HasOne(d => d.WebCallChatSessionKeyNavigation)
                    .WithMany(p => p.WebCallChatMessage)
                    .HasForeignKey(d => d.WebCallChatSessionKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_WebCallChatMessage_WebCallChatSession");
            });

            modelBuilder.Entity<WebCallChatSession>(entity =>
            {
                entity.HasKey(e => e.WebCallChatSessionKey)
                    .HasName("PK_WebCallChatSession");

                entity.Property(e => e.WebCallChatSessionKey)
                    .HasColumnName("WEB_CALL_CHAT_SESSION_KEY")
                    .ValueGeneratedNever();

                entity.Property(e => e.DateAccepted)
                    .HasColumnName("DATE_ACCEPTED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateEnded)
                    .HasColumnName("DATE_ENDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateRequested)
                    .HasColumnName("DATE_REQUESTED")
                    .HasColumnType("datetime");

                entity.Property(e => e.Teller)
                    .HasColumnName("TELLER")
                    .HasColumnType("varchar(3)");

                entity.Property(e => e.WebCallChatTopicsKey).HasColumnName("WEB_CALL_CHAT_TOPICS_KEY");

                entity.Property(e => e.WebCallChatUserKey).HasColumnName("WEB_CALL_CHAT_USER_KEY");

                entity.Property(e => e.WebCallQueueKey).HasColumnName("WEB_CALL_QUEUE_KEY");

                entity.HasOne(d => d.WebCallQueueKeyNavigation)
                    .WithMany(p => p.WebCallChatSession)
                    .HasForeignKey(d => d.WebCallQueueKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_WebCallChatSession_WebCallQueue");
            });

            modelBuilder.Entity<WebCallChatStatus>(entity =>
            {
                entity.HasKey(e => e.WebCallChatStatusKey)
                    .HasName("PK_WebCallChatStatus");

                entity.Property(e => e.WebCallChatStatusKey).HasColumnName("WEB_CALL_CHAT_STATUS_KEY");

                entity.Property(e => e.Message)
                    .IsRequired()
                    .HasColumnName("MESSAGE")
                    .HasColumnType("varchar(500)");

                entity.Property(e => e.StatusDate)
                    .HasColumnName("STATUS_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.StatusType).HasColumnName("STATUS_TYPE");

                entity.Property(e => e.WebCallChatSessionKey).HasColumnName("WEB_CALL_CHAT_SESSION_KEY");

                entity.Property(e => e.WebCallChatUserKey).HasColumnName("WEB_CALL_CHAT_USER_KEY");

                entity.HasOne(d => d.WebCallChatSessionKeyNavigation)
                    .WithMany(p => p.WebCallChatStatus)
                    .HasForeignKey(d => d.WebCallChatSessionKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_WebCallChatStatus_WebCallChatSession");

                entity.HasOne(d => d.WebCallChatUserKeyNavigation)
                    .WithMany(p => p.WebCallChatStatus)
                    .HasForeignKey(d => d.WebCallChatUserKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_WebCallChatStatus_WebCallChatUser");
            });

            modelBuilder.Entity<WebCallChatTopics>(entity =>
            {
                entity.HasKey(e => e.WebCallChatTopicsKey)
                    .HasName("PK_WebCallChatsTopic");

                entity.Property(e => e.WebCallChatTopicsKey).HasColumnName("WEB_CALL_CHAT_TOPICS_KEY");

                entity.Property(e => e.Deleted).HasColumnName("DELETED");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.SortPriority).HasColumnName("SORT_PRIORITY");
            });

            modelBuilder.Entity<WebCallChatUser>(entity =>
            {
                entity.HasKey(e => e.WebCallChatUserKey)
                    .HasName("PK_WebCallChatUser");

                entity.Property(e => e.WebCallChatUserKey).HasColumnName("WEB_CALL_CHAT_USER_KEY");

                entity.Property(e => e.EmailAddress)
                    .IsRequired()
                    .HasColumnName("EMAIL_ADDRESS")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.PhoneNumber)
                    .IsRequired()
                    .HasColumnName("PHONE_NUMBER")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasColumnName("USER_NAME")
                    .HasColumnType("varchar(50)");
            });

            modelBuilder.Entity<WebCallCsrreportColumn>(entity =>
            {
                entity.HasKey(e => e.WebCallCsrreportColumnsKey)
                    .HasName("PK_WebCallCSRReportColumns");

                entity.ToTable("WebCallCSRReportColumn");

                entity.Property(e => e.WebCallCsrreportColumnsKey).HasColumnName("Web_Call_CSRReport_Columns_Key");

                entity.Property(e => e.ColumnName)
                    .IsRequired()
                    .HasColumnType("varchar(200)");
            });

            modelBuilder.Entity<WebCallCsrreportColumnRarr>(entity =>
            {
                entity.HasKey(e => e.WebCallCsrreportColumnRarrKey)
                    .HasName("PK_WebCallCSRReportColumnRARR");

                entity.ToTable("WebCallCSRReportColumnRARR");

                entity.Property(e => e.WebCallCsrreportColumnRarrKey).HasColumnName("Web_Call_CSRReport_ColumnRARR_Key");

                entity.Property(e => e.WebCallCsrreportColumnsKey).HasColumnName("Web_Call_CSRReport_Columns_Key");

                entity.Property(e => e.WebCallRarrKey).HasColumnName("Web_Call_RARR_Key");

                entity.HasOne(d => d.WebCallCsrreportColumnsKeyNavigation)
                    .WithMany(p => p.WebCallCsrreportColumnRarr)
                    .HasForeignKey(d => d.WebCallCsrreportColumnsKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_WebCallCSRReportColumnRARR_WebCallCSRReportColumnsKey");
            });

            modelBuilder.Entity<WebCallDualAuth>(entity =>
            {
                entity.Property(e => e.WebCallDualAuthId).HasColumnName("Web_Call_DualAuthId");

                entity.Property(e => e.AuthorizedBy)
                    .IsRequired()
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.AuthorizedDate).HasColumnType("datetime");

                entity.Property(e => e.LoanAmount).HasColumnType("money");

                entity.Property(e => e.RequestedBy)
                    .IsRequired()
                    .HasColumnType("varchar(50)");
            });

            modelBuilder.Entity<WebCallEmailTemplates>(entity =>
            {
                entity.HasKey(e => e.WebCallEmailTemplateKey)
                    .HasName("PK_EmailTemplates");

                entity.Property(e => e.WebCallEmailTemplateKey).HasColumnName("Web_Call_EmailTemplate_Key");

                entity.Property(e => e.Body)
                    .IsRequired()
                    .HasColumnType("varchar(max)");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.IsActive).HasColumnName("IS_ACTIVE");

                entity.Property(e => e.IsBodyHtml).HasColumnName("Is_Body_Html");

                entity.Property(e => e.Subject)
                    .IsRequired()
                    .HasColumnType("varchar(200)");

                entity.Property(e => e.TemplateDescription)
                    .IsRequired()
                    .HasColumnName("Template_Description")
                    .HasColumnType("varchar(300)");

                entity.Property(e => e.TemplateName)
                    .IsRequired()
                    .HasColumnName("Template_Name")
                    .HasColumnType("varchar(100)");
            });

            modelBuilder.Entity<WebCallFaq>(entity =>
            {
                entity.HasKey(e => e.WebCallFaqKey)
                    .HasName("PK_FAQ");

                entity.ToTable("WebCallFAQ");

                entity.Property(e => e.WebCallFaqKey).HasColumnName("Web_Call_FAQ_Key");

                entity.Property(e => e.FaqContent)
                    .IsRequired()
                    .HasColumnName("FAQ_Content")
                    .HasColumnType("text");

                entity.Property(e => e.FaqTitle)
                    .IsRequired()
                    .HasColumnName("FAQ_Title")
                    .HasColumnType("varchar(500)");

                entity.Property(e => e.WebCallFaqCategoryKey).HasColumnName("Web_Call_FAQ_Category_Key");

                entity.HasOne(d => d.WebCallFaqCategoryKeyNavigation)
                    .WithMany(p => p.WebCallFaq)
                    .HasForeignKey(d => d.WebCallFaqCategoryKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_FAQ_FAQCATEGORY");
            });

            modelBuilder.Entity<WebCallFaqattachment>(entity =>
            {
                entity.HasKey(e => e.WebCallFaqAttachmentKey)
                    .HasName("PK_WebCallFAQAttachment");

                entity.ToTable("WebCallFAQAttachment");

                entity.Property(e => e.WebCallFaqAttachmentKey).HasColumnName("Web_Call_FAQ_Attachment_Key");

                entity.Property(e => e.Attachment).IsRequired();

                entity.Property(e => e.AttachmentName)
                    .IsRequired()
                    .HasColumnName("Attachment_Name")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.WebCallFaqKey).HasColumnName("Web_Call_FAQ_Key");

                entity.HasOne(d => d.WebCallFaqKeyNavigation)
                    .WithMany(p => p.WebCallFaqattachment)
                    .HasForeignKey(d => d.WebCallFaqKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_WebCallFAQAttachment_WebCallFAQ");
            });

            modelBuilder.Entity<WebCallFaqcategory>(entity =>
            {
                entity.HasKey(e => e.WebCallFaqCategoryKey)
                    .HasName("PK_FAQCategory");

                entity.ToTable("WebCallFAQCategory");

                entity.Property(e => e.WebCallFaqCategoryKey).HasColumnName("Web_Call_FAQ_Category_Key");

                entity.Property(e => e.FaqCategoryDescription)
                    .IsRequired()
                    .HasColumnName("FAQ_Category_Description")
                    .HasColumnType("varchar(150)");
            });

            modelBuilder.Entity<WebCallFeatures>(entity =>
            {
                entity.HasKey(e => e.WebCallFeaturesKey)
                    .HasName("PK_WebCallFeatures");

                entity.Property(e => e.WebCallFeaturesKey).HasColumnName("WEB_CALL_FEATURES_KEY");

                entity.Property(e => e.CsrdualAuthEnabled).HasColumnName("CSRDualAuthEnabled");

                entity.Property(e => e.DisplayOrder).HasColumnName("DISPLAY_ORDER");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasColumnType("varchar(50)");
            });

            modelBuilder.Entity<WebCallIntraChatMessage>(entity =>
            {
                entity.HasKey(e => e.WebCallIntraChatMessageKey)
                    .HasName("PK_WebCallIntraChatMessage");

                entity.Property(e => e.WebCallIntraChatMessageKey).HasColumnName("Web_Call_IntraChat_Message_Key");

                entity.Property(e => e.DateSent)
                    .HasColumnName("Date_Sent")
                    .HasColumnType("datetime");

                entity.Property(e => e.FromUserId)
                    .IsRequired()
                    .HasColumnName("From_User_Id")
                    .HasColumnType("varchar(3)");

                entity.Property(e => e.Message)
                    .IsRequired()
                    .HasColumnType("text");

                entity.Property(e => e.ToUserId)
                    .IsRequired()
                    .HasColumnName("To_User_Id")
                    .HasColumnType("varchar(3)");

                entity.Property(e => e.WebCallIntraChatSessionKey).HasColumnName("Web_Call_IntraChat_Session_Key");

                entity.HasOne(d => d.WebCallIntraChatSessionKeyNavigation)
                    .WithMany(p => p.WebCallIntraChatMessage)
                    .HasForeignKey(d => d.WebCallIntraChatSessionKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_WebCallIntraChatSession_WebCallIntraChatMessage");
            });

            modelBuilder.Entity<WebCallIntraChatSession>(entity =>
            {
                entity.HasKey(e => e.WebCallIntraChatSessionKey)
                    .HasName("PK_WebCallIntraChatSession");

                entity.Property(e => e.WebCallIntraChatSessionKey).HasColumnName("Web_Call_IntraChat_Session_Key");

                entity.Property(e => e.DateCreated)
                    .HasColumnName("Date_Created")
                    .HasColumnType("datetime");

                entity.Property(e => e.FromUserId)
                    .IsRequired()
                    .HasColumnName("From_User_Id")
                    .HasColumnType("varchar(3)");

                entity.Property(e => e.FromUserLogOutDate)
                    .HasColumnName("From_User_LogOut_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.FromUserLoggedIn).HasColumnName("From_User_Logged_In");

                entity.Property(e => e.ToUserId)
                    .IsRequired()
                    .HasColumnName("To_User_Id")
                    .HasColumnType("varchar(3)");

                entity.Property(e => e.ToUserLogOutDate)
                    .HasColumnName("To_User_LogOut_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.ToUserLoggedIn).HasColumnName("To_User_Logged_In");
            });

            modelBuilder.Entity<WebCallInvalidPhoneNumber>(entity =>
            {
                entity.HasKey(e => e.WebCallInvalidPhoneNumberKey)
                    .HasName("PK_WebCallInvalidPhoneNumber");

                entity.HasIndex(e => e.PhoneNumber)
                    .HasName("IX_WebCallInvalidPhoneNumber_Phone_Number")
                    .IsUnique();

                entity.Property(e => e.WebCallInvalidPhoneNumberKey).HasColumnName("Web_Call_Invalid_Phone_Number_Key");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("Date_Entered")
                    .HasColumnType("datetime");

                entity.Property(e => e.InvalidUntil)
                    .HasColumnName("Invalid_Until")
                    .HasColumnType("datetime");

                entity.Property(e => e.PhoneNumber)
                    .IsRequired()
                    .HasColumnName("Phone_Number")
                    .HasColumnType("varchar(15)");
            });

            modelBuilder.Entity<WebCallLoanAppSourceApp>(entity =>
            {
                entity.HasKey(e => e.SourceAppKey)
                    .HasName("PK_WebCallLoanAppSourceApp");

                entity.Property(e => e.SourceAppKey)
                    .HasColumnName("Source_App_Key")
                    .HasColumnType("char(1)");

                entity.Property(e => e.SourceAppDescription)
                    .IsRequired()
                    .HasColumnName("Source_App_Description")
                    .HasColumnType("varchar(200)");
            });

            modelBuilder.Entity<WebCallLoanProductConfig>(entity =>
            {
                entity.HasKey(e => e.WebCallLoanProductConfigKey)
                    .HasName("PK_WebCallLoanProductConfig");

                entity.Property(e => e.WebCallLoanProductConfigKey).HasColumnName("Web_Call_Loan_Product_Config_Key");

                entity.Property(e => e.ConfigName)
                    .IsRequired()
                    .HasColumnName("Config_Name")
                    .HasColumnType("varchar(500)");

                entity.Property(e => e.ConfigValue)
                    .IsRequired()
                    .HasColumnName("Config_Value")
                    .HasColumnType("varchar(500)");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasColumnName("Created_By")
                    .HasColumnType("varchar(500)");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("Date_Entered")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateLastUpdated)
                    .HasColumnName("Date_Last_Updated")
                    .HasColumnType("datetime");

                entity.Property(e => e.DisplayOrder).HasColumnName("Display_Order");

                entity.Property(e => e.ExternalLink)
                    .IsRequired()
                    .HasColumnType("varchar(500)");

                entity.Property(e => e.ExternalLinkCaption)
                    .IsRequired()
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.LastUpdatedBy)
                    .IsRequired()
                    .HasColumnName("Last_Updated_By")
                    .HasColumnType("varchar(500)");

                entity.Property(e => e.LoanProductKey).HasColumnName("Loan_Product_Key");

                entity.HasOne(d => d.LoanProductKeyNavigation)
                    .WithMany(p => p.WebCallLoanProductConfig)
                    .HasForeignKey(d => d.LoanProductKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_WebCallLoanProductConfig_LoanProduct");
            });

            modelBuilder.Entity<WebCallLoggingCategory>(entity =>
            {
                entity.HasKey(e => e.WebCallLoggingCategoryKey)
                    .HasName("PK_Categories");

                entity.Property(e => e.WebCallLoggingCategoryKey).HasColumnName("WEB_CALL_LOGGING_CATEGORY_KEY");

                entity.Property(e => e.CategoryName)
                    .IsRequired()
                    .HasColumnName("CATEGORY_NAME")
                    .HasMaxLength(64);
            });

            modelBuilder.Entity<WebCallLoggingCategoryLog>(entity =>
            {
                entity.HasKey(e => e.WebCallLoggingCategoryLogKey)
                    .HasName("PK_CategoryLog");

                entity.Property(e => e.WebCallLoggingCategoryLogKey).HasColumnName("WEB_CALL_LOGGING_CATEGORY_LOG_KEY");

                entity.Property(e => e.WebCallLoggingCategoryKey).HasColumnName("WEB_CALL_LOGGING_CATEGORY_KEY");

                entity.Property(e => e.WebCallLoggingLogKey).HasColumnName("WEB_CALL_LOGGING_LOG_KEY");

                entity.HasOne(d => d.WebCallLoggingCategoryKeyNavigation)
                    .WithMany(p => p.WebCallLoggingCategoryLog)
                    .HasForeignKey(d => d.WebCallLoggingCategoryKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CategoryLog_Category");

                entity.HasOne(d => d.WebCallLoggingLogKeyNavigation)
                    .WithMany(p => p.WebCallLoggingCategoryLog)
                    .HasForeignKey(d => d.WebCallLoggingLogKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_CategoryLog_Log");
            });

            modelBuilder.Entity<WebCallLoggingLog>(entity =>
            {
                entity.HasKey(e => e.WebCallLoggingLogKey)
                    .HasName("PK_Log");

                entity.Property(e => e.WebCallLoggingLogKey).HasColumnName("WEB_CALL_LOGGING_LOG_KEY");

                entity.Property(e => e.AppDomainName)
                    .IsRequired()
                    .HasColumnName("APP_DOMAIN_NAME")
                    .HasMaxLength(512);

                entity.Property(e => e.FormattedMessage)
                    .HasColumnName("FORMATTED_MESSAGE")
                    .HasColumnType("ntext");

                entity.Property(e => e.MachineName)
                    .IsRequired()
                    .HasColumnName("MACHINE_NAME")
                    .HasMaxLength(32);

                entity.Property(e => e.Message)
                    .HasColumnName("MESSAGE")
                    .HasMaxLength(1500);

                entity.Property(e => e.Priority).HasColumnName("PRIORITY");

                entity.Property(e => e.ProcessName)
                    .IsRequired()
                    .HasColumnName("PROCESS_NAME")
                    .HasMaxLength(512);

                entity.Property(e => e.Severity)
                    .IsRequired()
                    .HasColumnName("SEVERITY")
                    .HasMaxLength(32);

                entity.Property(e => e.ThreadName)
                    .HasColumnName("THREAD_NAME")
                    .HasMaxLength(512);

                entity.Property(e => e.TimeStamp)
                    .HasColumnName("TIME_STAMP")
                    .HasColumnType("datetime");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasColumnName("TITLE")
                    .HasMaxLength(256);

                entity.Property(e => e.WebCallLoggingLogEventKey).HasColumnName("WEB_CALL_LOGGING_LOG_EVENT_KEY");

                entity.Property(e => e.WebCallLoggingLogKeyProcessKey)
                    .IsRequired()
                    .HasColumnName("WEB_CALL_LOGGING_LOG_KEY_PROCESS_KEY")
                    .HasMaxLength(256);

                entity.Property(e => e.Win32ThreadId)
                    .HasColumnName("WIN_32_THREAD_ID")
                    .HasMaxLength(128);
            });

            modelBuilder.Entity<WebCallOnlineStatusDisplayLookup>(entity =>
            {
                entity.HasKey(e => e.OnlineStatusKey)
                    .HasName("PK_WebCallOnlineStatusDisplayLookup");

                entity.Property(e => e.OnlineStatusKey).HasColumnName("Online_Status_Key");

                entity.Property(e => e.OnlineStatusDisplay)
                    .IsRequired()
                    .HasColumnName("Online_Status_Display")
                    .HasColumnType("varchar(200)");

                entity.Property(e => e.OnlineStatusValue)
                    .IsRequired()
                    .HasColumnName("Online_Status_Value")
                    .HasColumnType("varchar(200)");
            });

            modelBuilder.Entity<WebCallQueue>(entity =>
            {
                entity.HasKey(e => e.WebCallQueueKey)
                    .HasName("PK_CCQueue");

                entity.HasIndex(e => e.Completed)
                    .HasName("IX_WebCallQueue_COMPLETED");

                entity.HasIndex(e => e.OptplusCardDetailKey)
                    .HasName("IX_WebCallQueue_OPTPLUS_CARD_DETAIL_KEY");

                entity.HasIndex(e => e.WebCallCustomerKey)
                    .HasName("IX_WebCallQueue_Customer");

                entity.HasIndex(e => e.WebCallLoanAppKey)
                    .HasName("IX_WebCallQueue_LoanApp");

                entity.HasIndex(e => e.WebCallVisitorKey)
                    .HasName("IX_WebCallQueue_Visitor");

                entity.HasIndex(e => new { e.Teller, e.OfflineCreatedDateTime })
                    .HasName("IX_WebCallQueue_TELLER_OFFLINE_CREATED_DATE_TIME");

                entity.HasIndex(e => new { e.WebCallQueueSessionKey, e.Completed })
                    .HasName("IX_WebCallQueue_WEB_CALL_QUEUE_SESSION_KEY_COMPLETED");

                entity.HasIndex(e => new { e.WebCallQueueKey, e.WebCallCustomerKey, e.WebCallVisitorKey })
                    .HasName("IX_WebCallQueue_WEB_CALL_QUEUE_KEY_WEB_CALL_CUSTOMER_KEY");

                entity.HasIndex(e => new { e.WebCallCustomerKey, e.WebCallVisitorKey, e.WebCallQueueTypeKey, e.WebCallQueueKey })
                    .HasName("IX_WebCallQueue_WEB_CALL_QUEUE_KEY_CK");

                entity.HasIndex(e => new { e.WebCallQueueKey, e.WebCallCustomerKey, e.WebCallVisitorKey, e.WebCallLoanAppKey, e.LoanKey })
                    .HasName("IX_WebCallQueue_Customer_Visitor");

                entity.HasIndex(e => new { e.WebCallQueueKey, e.WebCallCustomerKey, e.WebCallVisitorKey, e.WebCallQueueTypeKey, e.LoanKey })
                    .HasName("IX_WebCallQueue_LOAN_KEY");

                entity.HasIndex(e => new { e.Completed, e.WebCallQueueKey, e.WebCallCustomerKey, e.WebCallVisitorKey, e.WebCallLoanAppKey, e.LoanKey })
                    .HasName("IX_WebCallQueue_COMPLETED_WEB_CALL_QUEUE_KEY");

                entity.HasIndex(e => new { e.WebCallQueueCategoryKey, e.FollowUpdate, e.WebCallQueueStatusKey, e.WebCallQueueAssignedCampaignKey, e.ParentIssueQueueKey, e.OfflineCreatedDateTime, e.Completed, e.WebCallLoanAppKey, e.WebCallQueueKey })
                    .HasName("IX_WebCallQueue_WEB_CALL_QUEUE_CATEGORY_KEY_FOLLOW_UPDATE_WEB_CALL_QUEUE_STATUS_KEY");

                entity.HasIndex(e => new { e.WebCallQueueCategoryKey, e.FollowUpdate, e.WebCallQueueStatusKey, e.WebCallQueueAssignedCampaignKey, e.ParentIssueQueueKey, e.OfflineCreatedDateTime, e.Completed, e.WebCallLoanAppKey, e.WebCallQueueKey, e.WebCallQueueSessionKey })
                    .HasName("IX_WebCallQueue_Queue_Category");

                entity.HasIndex(e => new { e.OfflineCreatedDateTime, e.WebCallQueueAssignedCampaignKey, e.EmailAddress, e.FollowUpdate, e.WebCallLoanAppKey, e.WebCallCustomerKey, e.WebCallVisitorKey, e.WebStatus, e.FirstName, e.LastName, e.HomePhone, e.CellPhone, e.WorkPhone, e.Notes, e.WebCallQueueStatusKey, e.Completed, e.ParentIssueQueueKey, e.WebCallActionKey, e.WebCallReasonKey, e.WebCallQueueEditedCampaignKey, e.WebCallQueueCategoryKey, e.WebCallResult1Key, e.WebCallResult2Key, e.WebCallQueueSessionKey, e.WebCallQueueKey, e.WebCallRarrKey, e.Checkedout, e.Csr, e.Page, e.Teller })
                    .HasName("IX_WebCallQueue_Name_Match");

                entity.HasIndex(e => new { e.LeadId, e.Buyer, e.SoldAmount, e.Page, e.Csr, e.WebSource, e.Location, e.Address, e.City, e.State, e.Zipcode, e.WorkPhone, e.Notes, e.Checkedout, e.WebCallCustomerKey, e.WebCallVisitorKey, e.WebStatus, e.Teller, e.EmailAddress, e.FirstName, e.LastName, e.HomePhone, e.CellPhone, e.ParentIssueQueueKey, e.WebCallQueueStatusKey, e.WebCallActionKey, e.WebCallResult2Key, e.WebCallResult1Key, e.WebCallReasonKey, e.WebCallQueueEditedCampaignKey, e.WebCallQueueCategoryKey, e.Completed, e.OfflineCreatedDateTime, e.WebCallQueueKey, e.FollowUpdate, e.WebCallQueueAssignedCampaignKey, e.WebCallQueueSessionKey, e.WebCallRarrKey, e.WebCallLoanAppKey })
                    .HasName("IX_WebcallQueue_Parent_Issue_Queue_Status");

                entity.Property(e => e.WebCallQueueKey).HasColumnName("WEB_CALL_QUEUE_KEY");

                entity.Property(e => e.Address).HasColumnType("varchar(50)");

                entity.Property(e => e.Buyer).HasColumnType("varchar(200)");

                entity.Property(e => e.CellPhone)
                    .IsRequired()
                    .HasColumnName("CELL_PHONE")
                    .HasColumnType("varchar(15)")
                    .HasDefaultValueSql("''");

                entity.Property(e => e.Checkedout).HasColumnName("CHECKEDOUT");

                entity.Property(e => e.City).HasColumnType("varchar(30)");

                entity.Property(e => e.Completed)
                    .HasColumnName("COMPLETED")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Csr)
                    .IsRequired()
                    .HasColumnName("CSR")
                    .HasColumnType("varchar(50)")
                    .HasDefaultValueSql("''");

                entity.Property(e => e.DdContactAttempts).HasColumnName("DD_CONTACT_ATTEMPTS");

                entity.Property(e => e.DdContactHr).HasColumnName("DD_CONTACT_HR");

                entity.Property(e => e.DdLastContactAttemptDate)
                    .HasColumnName("DD_LAST_CONTACT_ATTEMPT_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DialerCampaign).HasColumnName("DIALER_CAMPAIGN");

                entity.Property(e => e.DialerDate)
                    .HasColumnName("DIALER_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DialerStatus).HasColumnName("DIALER_STATUS");

                entity.Property(e => e.EmailAddress)
                    .IsRequired()
                    .HasColumnName("EMAIL_ADDRESS")
                    .HasColumnType("varchar(150)")
                    .HasDefaultValueSql("''");

                entity.Property(e => e.FinalScore).HasColumnType("varchar(100)");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasColumnName("FIRST_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.FollowUpdate)
                    .HasColumnName("FOLLOW_UPDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.HomePhone)
                    .IsRequired()
                    .HasColumnName("HOME_PHONE")
                    .HasColumnType("varchar(15)")
                    .HasDefaultValueSql("''");

                entity.Property(e => e.IsOnline).HasColumnName("IS_ONLINE");

                entity.Property(e => e.ItsupportEscallation).HasColumnName("ITSupportEscallation");

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasColumnName("LAST_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.LeadId).HasColumnType("varchar(100)");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.MarketingSentKey)
                    .HasColumnName("MARKETING_SENT_KEY")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnName("MODIFIED_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Notes)
                    .IsRequired()
                    .HasColumnName("NOTES")
                    .HasColumnType("varchar(4000)")
                    .HasDefaultValueSql("''");

                entity.Property(e => e.OfflineCreatedDateTime)
                    .HasColumnName("OFFLINE_CREATED_DATE_TIME")
                    .HasColumnType("datetime");

                entity.Property(e => e.OnlineCreatedDateTime)
                    .HasColumnName("ONLINE_CREATED_DATE_TIME")
                    .HasColumnType("datetime");

                entity.Property(e => e.OptplusCardDetailKey).HasColumnName("OPTPLUS_CARD_DETAIL_KEY");

                entity.Property(e => e.Page)
                    .HasColumnName("PAGE")
                    .HasColumnType("varchar(2000)")
                    .HasDefaultValueSql("''");

                entity.Property(e => e.ParentIssueQueueKey).HasColumnName("PARENT_ISSUE_QUEUE_KEY");

                entity.Property(e => e.RisreptKey).HasColumnName("RISREPT_KEY");

                entity.Property(e => e.SoldAmount).HasColumnType("smallmoney");

                entity.Property(e => e.State).HasColumnType("varchar(2)");

                entity.Property(e => e.SupervisorEscallation)
                    .HasColumnName("SUPERVISOR_ESCALLATION")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("varchar(3)")
                    .HasDefaultValueSql("''");

                entity.Property(e => e.WebCallActionKey).HasColumnName("WEB_CALL_ACTION_KEY");

                entity.Property(e => e.WebCallChatCsrKey)
                    .IsRequired()
                    .HasColumnName("WEB_CALL_CHAT_CSR_KEY")
                    .HasColumnType("varchar(3)")
                    .HasDefaultValueSql("''");

                entity.Property(e => e.WebCallChatSessionKey).HasColumnName("WEB_CALL_CHAT_SESSION_KEY");

                entity.Property(e => e.WebCallCustomerKey).HasColumnName("WEB_CALL_CUSTOMER_KEY");

                entity.Property(e => e.WebCallLoanAppKey).HasColumnName("WEB_CALL_LOAN_APP_KEY");

                entity.Property(e => e.WebCallQueueAssignedCampaignKey)
                    .HasColumnName("WEB_CALL_QUEUE_ASSIGNED_CAMPAIGN_KEY")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.WebCallQueueCategoryKey).HasColumnName("WEB_CALL_QUEUE_CATEGORY_KEY");

                entity.Property(e => e.WebCallQueueEditedCampaignKey)
                    .HasColumnName("WEB_CALL_QUEUE_EDITED_CAMPAIGN_KEY")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.WebCallQueueSessionKey)
                    .HasColumnName("WEB_CALL_QUEUE_SESSION_KEY")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.WebCallQueueStatusKey)
                    .HasColumnName("WEB_CALL_QUEUE_STATUS_KEY")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.WebCallQueueTypeKey).HasColumnName("WEB_CALL_QUEUE_TYPE_KEY");

                entity.Property(e => e.WebCallRarrKey).HasColumnName("WEB_CALL_RARR_KEY");

                entity.Property(e => e.WebCallReasonKey).HasColumnName("WEB_CALL_REASON_KEY");

                entity.Property(e => e.WebCallResult1Key).HasColumnName("WEB_CALL_RESULT1_KEY");

                entity.Property(e => e.WebCallResult2Key).HasColumnName("WEB_CALL_RESULT2_KEY");

                entity.Property(e => e.WebCallVisitorKey).HasColumnName("WEB_CALL_VISITOR_KEY");

                entity.Property(e => e.WebSource).HasColumnType("varchar(50)");

                entity.Property(e => e.WebStatus)
                    .HasColumnName("WEB_STATUS")
                    .HasColumnType("varchar(250)");

                entity.Property(e => e.WebVisitKey).HasColumnName("WEB_VISIT_KEY");

                entity.Property(e => e.WorkItemColor).HasColumnName("WORK_ITEM_COLOR");

                entity.Property(e => e.WorkPhone)
                    .IsRequired()
                    .HasColumnName("WORK_PHONE")
                    .HasColumnType("varchar(25)")
                    .HasDefaultValueSql("''");

                entity.Property(e => e.Zipcode).HasColumnType("varchar(5)");

                entity.HasOne(d => d.LoanKeyNavigation)
                    .WithMany(p => p.WebCallQueue)
                    .HasForeignKey(d => d.LoanKey)
                    .HasConstraintName("FK_WebCallQueue_Loan");

                entity.HasOne(d => d.OptplusCardDetailKeyNavigation)
                    .WithMany(p => p.WebCallQueue)
                    .HasForeignKey(d => d.OptplusCardDetailKey)
                    .HasConstraintName("FK_WebCallQueue_OPTPLUS_CARD_DETAIL_KEY");

                entity.HasOne(d => d.WebCallActionKeyNavigation)
                    .WithMany(p => p.WebCallQueue)
                    .HasForeignKey(d => d.WebCallActionKey)
                    .HasConstraintName("FK_WebCallQueue_WebCallRARRAction");

                entity.HasOne(d => d.WebCallCustomerKeyNavigation)
                    .WithMany(p => p.WebCallQueue)
                    .HasForeignKey(d => d.WebCallCustomerKey)
                    .HasConstraintName("FK_WebCallQueue_Customer");

                entity.HasOne(d => d.WebCallLoanAppKeyNavigation)
                    .WithMany(p => p.WebCallQueue)
                    .HasForeignKey(d => d.WebCallLoanAppKey)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_WebCallQueue_LoanApplication");

                entity.HasOne(d => d.WebCallQueueStatusKeyNavigation)
                    .WithMany(p => p.WebCallQueue)
                    .HasForeignKey(d => d.WebCallQueueStatusKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_WebCallQueue_WebCallQueueStatus");

                entity.HasOne(d => d.WebCallQueueTypeKeyNavigation)
                    .WithMany(p => p.WebCallQueue)
                    .HasForeignKey(d => d.WebCallQueueTypeKey)
                    .HasConstraintName("FK_WebCallQueue_WEB_CALL_QUEUE_TYPE_KEY");

                entity.HasOne(d => d.WebCallRarrKeyNavigation)
                    .WithMany(p => p.WebCallQueue)
                    .HasForeignKey(d => d.WebCallRarrKey)
                    .HasConstraintName("FK_WebCallQueue_WebCallRARR");

                entity.HasOne(d => d.WebCallReasonKeyNavigation)
                    .WithMany(p => p.WebCallQueue)
                    .HasForeignKey(d => d.WebCallReasonKey)
                    .HasConstraintName("FK_WebCallQueue_WebCallRARReason");

                entity.HasOne(d => d.WebCallResult1KeyNavigation)
                    .WithMany(p => p.WebCallQueue)
                    .HasForeignKey(d => d.WebCallResult1Key)
                    .HasConstraintName("FK_WebCallQueue_WebCallRARResult1");

                entity.HasOne(d => d.WebCallResult2KeyNavigation)
                    .WithMany(p => p.WebCallQueue)
                    .HasForeignKey(d => d.WebCallResult2Key)
                    .HasConstraintName("FK_WebCallQueue_WebCallRARResult2");

                entity.HasOne(d => d.WebCallVisitorKeyNavigation)
                    .WithMany(p => p.WebCallQueue)
                    .HasForeignKey(d => d.WebCallVisitorKey)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_WebCallQueue_Visitor");
            });

            modelBuilder.Entity<WebCallQueueAudit>(entity =>
            {
                entity.HasKey(e => e.WebCallQueueAuditKey)
                    .HasName("PK_WebCallQueueAudit");

                entity.HasIndex(e => e.FieldName)
                    .HasName("IX_WebCallQueueAudit_FIELD_NAME");

                entity.HasIndex(e => e.WebCallQueueKey)
                    .HasName("IX_WebCallQueueAudit_QueueItemId");

                entity.HasIndex(e => new { e.NewValue, e.AuditDate, e.FieldName, e.WebCallQueueKey })
                    .HasName("IX_WebCallQueueAudit_WEB_CALL_QUEUE_KEY_INCLUDEd");

                entity.Property(e => e.WebCallQueueAuditKey).HasColumnName("WEB_CALL_QUEUE_AUDIT_KEY");

                entity.Property(e => e.AuditDate)
                    .HasColumnName("AUDIT_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.FieldName)
                    .IsRequired()
                    .HasColumnName("FIELD_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.NewValue)
                    .HasColumnName("NEW_VALUE")
                    .HasColumnType("varchar(2000)");

                entity.Property(e => e.OldValue)
                    .HasColumnName("OLD_VALUE")
                    .HasColumnType("varchar(2000)");

                entity.Property(e => e.User)
                    .IsRequired()
                    .HasColumnName("USER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.WebCallQueueKey).HasColumnName("WEB_CALL_QUEUE_KEY");
            });

            modelBuilder.Entity<WebCallQueueConfiguration>(entity =>
            {
                entity.HasKey(e => e.WebCallQueueConfigurationKey)
                    .HasName("PK_CCQueueConfiguration");

                entity.Property(e => e.WebCallQueueConfigurationKey).HasColumnName("WEB_CALL_QUEUE_CONFIGURATION_KEY");

                entity.Property(e => e.DefaultCustomerSupportRefreshRate).HasColumnName("DEFAULT_CUSTOMER_SUPPORT_REFRESH_RATE");

                entity.Property(e => e.DefaultOnlineRefreshRate).HasColumnName("DEFAULT_ONLINE_REFRESH_RATE");

                entity.Property(e => e.DefaultSummaryRefreshRate).HasColumnName("DEFAULT_SUMMARY_REFRESH_RATE");

                entity.Property(e => e.DefaultTestUserRefreshRate).HasColumnName("DEFAULT_TEST_USER_REFRESH_RATE");

                entity.Property(e => e.FollowUpDateHourThreshold).HasColumnName("FOLLOW_UP_DATE_HOUR_THRESHOLD");

                entity.Property(e => e.FollowUpDateMinuteThreshold).HasColumnName("FOLLOW_UP_DATE_MINUTE_THRESHOLD");
            });

            modelBuilder.Entity<WebCallQueueLoanAppAudit>(entity =>
            {
                entity.HasKey(e => e.WebCallQueueLoanAppAuditKey)
                    .HasName("PK_WebCallQueueLoanInfo");

                entity.HasIndex(e => new { e.ReasonDenied, e.WebCallQueueKey, e.DateCreated })
                    .HasName("IX_WebCallQueueLoanAppAudit_WEB_CALL_QUEUE_KEY_DATE_CREATED");

                entity.Property(e => e.WebCallQueueLoanAppAuditKey).HasColumnName("Web_Call_Queue_LoanAppAudit_Key");

                entity.Property(e => e.DateCreated)
                    .HasColumnName("Date_Created")
                    .HasColumnType("datetime");

                entity.Property(e => e.IsQualified).HasColumnName("Is_Qualified");

                entity.Property(e => e.LoanApplicationKey).HasColumnName("Loan_Application_Key");

                entity.Property(e => e.ReasonDenied)
                    .HasColumnName("Reason_Denied")
                    .HasColumnType("varchar(1000)");

                entity.Property(e => e.WebCallQueueKey).HasColumnName("Web_Call_Queue_Key");

                entity.HasOne(d => d.WebCallQueueKeyNavigation)
                    .WithMany(p => p.WebCallQueueLoanAppAudit)
                    .HasForeignKey(d => d.WebCallQueueKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_WebCallQueueLoanAppAudit_WebCallQueue");
            });

            modelBuilder.Entity<WebCallQueueStatus>(entity =>
            {
                entity.HasKey(e => e.WebCallQueueStatusKey)
                    .HasName("PK_WEBCALLQUEUESTATUS");

                entity.Property(e => e.WebCallQueueStatusKey)
                    .HasColumnName("WEB_CALL_QUEUE_STATUS_KEY")
                    .ValueGeneratedNever();

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(150)");
            });

            modelBuilder.Entity<WebCallQueueType>(entity =>
            {
                entity.HasKey(e => e.WebCallQueueTypeKey)
                    .HasName("PK_WebCallQueueType");

                entity.Property(e => e.WebCallQueueTypeKey).HasColumnName("WEB_CALL_QUEUE_TYPE_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.KeepOpen).HasColumnName("KEEP_OPEN");

                entity.Property(e => e.PopPriority).HasColumnName("POP_PRIORITY");
            });

            modelBuilder.Entity<WebCallQuickNote>(entity =>
            {
                entity.HasKey(e => e.QuickNoteKey)
                    .HasName("PK_WebCallQuickNote");

                entity.Property(e => e.QuickNoteKey).HasColumnName("QUICK_NOTE_KEY");

                entity.Property(e => e.AssignedPosition).HasColumnName("ASSIGNED_POSITION");

                entity.Property(e => e.ButtonBackgroundColor).HasColumnName("BUTTON_BACKGROUND_COLOR");

                entity.Property(e => e.ButtonForegroundColor).HasColumnName("BUTTON_FOREGROUND_COLOR");

                entity.Property(e => e.ButtonText)
                    .IsRequired()
                    .HasColumnName("BUTTON_TEXT")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnName("NOTE")
                    .HasColumnType("varchar(200)");
            });

            modelBuilder.Entity<WebCallRarr>(entity =>
            {
                entity.HasKey(e => e.WebCallRarrKey)
                    .HasName("PK_CCRAR");

                entity.ToTable("WebCallRARR");

                entity.Property(e => e.WebCallRarrKey).HasColumnName("WEB_CALL_RARR_KEY");

                entity.Property(e => e.Deleted).HasColumnName("DELETED");

                entity.Property(e => e.Disabled).HasColumnName("DISABLED");

                entity.Property(e => e.EscalateToSupervisor).HasColumnName("Escalate_To_Supervisor");

                entity.Property(e => e.FollowUpAutoPopulate).HasColumnName("FOLLOW_UP_AUTO_POPULATE");

                entity.Property(e => e.FollowUpEnabled).HasColumnName("FOLLOW_UP_ENABLED");

                entity.Property(e => e.FollowUpPopUpSettingDialog).HasColumnName("FOLLOW_UP_POP_UP_SETTING_DIALOG");

                entity.Property(e => e.IatresultTypeKey).HasColumnName("IATResultTypeKey");

                entity.Property(e => e.WebCallRarrActionKey).HasColumnName("WEB_CALL_RARR_ACTION_KEY");

                entity.Property(e => e.WebCallRarrGroupKey).HasColumnName("Web_Call_Rarr_Group_Key");

                entity.Property(e => e.WebCallRarrReasonKey).HasColumnName("WEB_CALL_RARR_REASON_KEY");

                entity.Property(e => e.WebCallRarrResult1Key).HasColumnName("WEB_CALL_RARR_RESULT1_KEY");

                entity.Property(e => e.WebCallRarrResult2Key).HasColumnName("WEB_CALL_RARR_RESULT2_KEY");

                entity.Property(e => e.WebCallRarrTypeKey).HasColumnName("WEB_CALL_RARR_TYPE_KEY");

                entity.Property(e => e.WebDialerResultTypeKey).HasColumnName("WEB_DIALER_RESULT_TYPE_KEY");

                entity.HasOne(d => d.WebDialerResultTypeKeyNavigation)
                    .WithMany(p => p.WebCallRarr)
                    .HasForeignKey(d => d.WebDialerResultTypeKey)
                    .HasConstraintName("fk_WEB_CALL_RARR_WEB_DIALER_RESULT_TYPE_KEY");
            });

            modelBuilder.Entity<WebCallRarrGroup>(entity =>
            {
                entity.HasKey(e => e.WebCallRarrGroupKey)
                    .HasName("PK_WebCallRarrGroup");

                entity.Property(e => e.WebCallRarrGroupKey).HasColumnName("Web_Call_Rarr_Group_KEY");

                entity.Property(e => e.Deleted).HasColumnName("DELETED");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnType("varchar(150)");
            });

            modelBuilder.Entity<WebCallRarraction>(entity =>
            {
                entity.HasKey(e => e.WebCallRarrActionKey)
                    .HasName("PK_CCAction");

                entity.ToTable("WebCallRARRAction");

                entity.Property(e => e.WebCallRarrActionKey).HasColumnName("WEB_CALL_RARR_ACTION_KEY");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasColumnType("varchar(5)");

                entity.Property(e => e.Deleted).HasColumnName("DELETED");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(50)");
            });

            modelBuilder.Entity<WebCallRarrcategoryReason>(entity =>
            {
                entity.HasKey(e => e.WebCallRarrCategoryReasonKey)
                    .HasName("PK_CCCategoryReason");

                entity.ToTable("WebCallRARRCategoryReason");

                entity.Property(e => e.WebCallRarrCategoryReasonKey).HasColumnName("WEB_CALL_RARR_CATEGORY_REASON_KEY");

                entity.Property(e => e.WebCallCategoryReasonKey).HasColumnName("WEB_CALL_CATEGORY_REASON_KEY");

                entity.Property(e => e.WebCallRarrReasonKey).HasColumnName("WEB_CALL_RARR_REASON_KEY");

                entity.HasOne(d => d.WebCallCategoryReasonKeyNavigation)
                    .WithMany(p => p.WebCallRarrcategoryReason)
                    .HasForeignKey(d => d.WebCallCategoryReasonKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_WebCallRARRCategoryReason_WebCallCategory");

                entity.HasOne(d => d.WebCallRarrReasonKeyNavigation)
                    .WithMany(p => p.WebCallRarrcategoryReason)
                    .HasForeignKey(d => d.WebCallRarrReasonKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_WebCallRARRCategoryReason_WebCallRARReason");
            });

            modelBuilder.Entity<WebCallRarreason>(entity =>
            {
                entity.HasKey(e => e.WebCallRarrReasonKey)
                    .HasName("PK_CCReason");

                entity.ToTable("WebCallRARReason");

                entity.Property(e => e.WebCallRarrReasonKey).HasColumnName("WEB_CALL_RARR_REASON_KEY");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasColumnType("varchar(5)");

                entity.Property(e => e.Deleted).HasColumnName("DELETED");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(50)");
            });

            modelBuilder.Entity<WebCallRarresult1>(entity =>
            {
                entity.HasKey(e => e.WebCallRarrResult1Key)
                    .HasName("PK_CCResult");

                entity.ToTable("WebCallRARResult1");

                entity.Property(e => e.WebCallRarrResult1Key).HasColumnName("WEB_CALL_RARR_RESULT1_KEY");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasColumnType("varchar(5)");

                entity.Property(e => e.Deleted).HasColumnName("DELETED");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(50)");
            });

            modelBuilder.Entity<WebCallRarresult2>(entity =>
            {
                entity.HasKey(e => e.WebCallRarrResult2Key)
                    .HasName("PK_CCResult2");

                entity.ToTable("WebCallRARResult2");

                entity.Property(e => e.WebCallRarrResult2Key).HasColumnName("WEB_CALL_RARR_RESULT2_KEY");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("CODE")
                    .HasColumnType("varchar(5)");

                entity.Property(e => e.Deleted).HasColumnName("DELETED");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(50)");
            });

            modelBuilder.Entity<WebCallRarrfeatures>(entity =>
            {
                entity.HasKey(e => e.WebCallRarrFeaturesKey)
                    .HasName("PK_RARRFeatures");

                entity.ToTable("WebCallRARRFeatures");

                entity.HasIndex(e => e.WebCallRarrKey)
                    .HasName("WebCallRARRFeatures_WEB_CALL_RARR_KEY");

                entity.Property(e => e.WebCallRarrFeaturesKey).HasColumnName("WEB_CALL_RARR_FEATURES_KEY");

                entity.Property(e => e.CsrdualAuthEnabled).HasColumnName("CSRDualAuthEnabled");

                entity.Property(e => e.FeatureEnable).HasColumnName("FEATURE_ENABLE");

                entity.Property(e => e.WebCallFeaturesKey).HasColumnName("WEB_CALL_FEATURES_KEY");

                entity.Property(e => e.WebCallRarrKey).HasColumnName("WEB_CALL_RARR_KEY");

                entity.HasOne(d => d.WebCallFeaturesKeyNavigation)
                    .WithMany(p => p.WebCallRarrfeatures)
                    .HasForeignKey(d => d.WebCallFeaturesKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_WebCallRARRFeatures_WebCallFeatures");

                entity.HasOne(d => d.WebCallRarrKeyNavigation)
                    .WithMany(p => p.WebCallRarrfeatures)
                    .HasForeignKey(d => d.WebCallRarrKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_WebCallRARRFeatures_WebCallRARR");
            });

            modelBuilder.Entity<WebCallRarrhistory>(entity =>
            {
                entity.HasKey(e => e.WebCallRarrHistoryKey)
                    .HasName("PK_WebCallRARRHistory");

                entity.ToTable("WebCallRARRHistory");

                entity.HasIndex(e => new { e.CreateDate, e.Notes, e.WebCallQueueKey, e.WebCallRarrKey, e.WebCallRarrHistoryKey, e.CreatedBy })
                    .HasName("IX_WebCallRARRHistory_Web_Call_Queue_Key_Rarr");

                entity.HasIndex(e => new { e.CreateDate, e.Notes, e.FollowupDate, e.WebCallQueueKey, e.CreatedBy, e.ForceApprovedAmount, e.WebCallRarrKey })
                    .HasName("IX_WebCallRARRHistory_WEB_CALL_RARR_KEY");

                entity.HasIndex(e => new { e.Notes, e.FollowupDate, e.ForceApprovedAmount, e.WebCallRarrHistoryKey, e.WebCallRarrKey, e.CreatedBy, e.WebCallQueueKey, e.CreateDate })
                    .HasName("IX_WebCallRARRHistory_WEB_CALL_RARR_HISTORY_KEY_WEB_CALL_RARR_KEY");

                entity.HasIndex(e => new { e.WebCallRarrHistoryKey, e.WebCallRarrKey, e.CreatedBy, e.Notes, e.FollowupDate, e.ForceApprovedAmount, e.WebCallQueueKey, e.CreateDate })
                    .HasName("IX_WebCallRARRHistory_WEB_CALL_QUEUE_KEY_CREATE_DATE");

                entity.Property(e => e.WebCallRarrHistoryKey).HasColumnName("WEB_CALL_RARR_HISTORY_KEY");

                entity.Property(e => e.CreateDate)
                    .HasColumnName("CREATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasColumnName("CREATED_BY")
                    .HasColumnType("varchar(3)");

                entity.Property(e => e.FollowupDate)
                    .HasColumnName("FOLLOWUP_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.ForceApprovedAmount).HasColumnType("money");

                entity.Property(e => e.IsFollowup).HasColumnName("IS_FOLLOWUP");

                entity.Property(e => e.Notes)
                    .IsRequired()
                    .HasColumnName("NOTES")
                    .HasColumnType("varchar(2000)");

                entity.Property(e => e.RarrGroupKey).HasColumnName("Rarr_Group_Key");

                entity.Property(e => e.RarrGroupName)
                    .HasColumnName("Rarr_Group_Name")
                    .HasColumnType("varchar(150)");

                entity.Property(e => e.RarrGroupPoints).HasColumnName("Rarr_Group_Points");

                entity.Property(e => e.Source)
                    .IsRequired()
                    .HasColumnType("varchar(1000)");

                entity.Property(e => e.SuppressPointsReason).HasColumnType("varchar(200)");

                entity.Property(e => e.TeamKey).HasColumnName("Team_Key");

                entity.Property(e => e.TeamName)
                    .HasColumnName("Team_Name")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.WebCallQueueKey).HasColumnName("WEB_CALL_QUEUE_KEY");

                entity.Property(e => e.WebCallRarrKey).HasColumnName("WEB_CALL_RARR_KEY");

                entity.Property(e => e.WebDialerResultKey).HasColumnName("WEB_DIALER_RESULT_KEY");

                entity.HasOne(d => d.WebCallQueueKeyNavigation)
                    .WithMany(p => p.WebCallRarrhistory)
                    .HasForeignKey(d => d.WebCallQueueKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_WebCallRARRHistory_WebCallQueue");
            });

            modelBuilder.Entity<WebCallRecordingArchive>(entity =>
            {
                entity.HasKey(e => e.WebCallRecordingArchiveKey)
                    .HasName("PK_WebCallRecordingArchive");

                entity.HasIndex(e => e.SessionId)
                    .HasName("IX_WebCallRecordingArchive_Session_ID");

                entity.HasIndex(e => new { e.Teller, e.CallDate })
                    .HasName("IX_WebCallRecordingArchive_Teller_Call_Date");

                entity.Property(e => e.WebCallRecordingArchiveKey).HasColumnName("WEB_CALL_RECORDING_ARCHIVE_KEY");

                entity.Property(e => e.CallDate)
                    .HasColumnName("CALL_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.SessionId)
                    .IsRequired()
                    .HasColumnName("SESSION_ID")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.WebArchiveKey).HasColumnName("WEB_ARCHIVE_KEY");

                entity.HasOne(d => d.WebArchiveKeyNavigation)
                    .WithMany(p => p.WebCallRecordingArchive)
                    .HasForeignKey(d => d.WebArchiveKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_WebCallRecordingArchive_WEB_ARCHIVE_KEY");
            });

            modelBuilder.Entity<WebCallTeamUsers>(entity =>
            {
                entity.HasKey(e => e.WebCallTeamUserKey)
                    .HasName("PK_WebCallTeamUsers");

                entity.HasIndex(e => e.Teller)
                    .HasName("IX_WebCallTeamUsers_Teller");

                entity.Property(e => e.WebCallTeamUserKey).HasColumnName("Web_Call_TeamUser_Key");

                entity.Property(e => e.CreateDate)
                    .HasColumnName("Create_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasColumnName("Created_By")
                    .HasColumnType("varchar(3)");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.WebCallTeamKey).HasColumnName("Web_Call_Team_Key");

                entity.HasOne(d => d.WebCallTeamKeyNavigation)
                    .WithMany(p => p.WebCallTeamUsers)
                    .HasForeignKey(d => d.WebCallTeamKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_WebCallTeamUsers_WebCallTeams");
            });

            modelBuilder.Entity<WebCallTeams>(entity =>
            {
                entity.HasKey(e => e.WebCallTeamKey)
                    .HasName("PK_WebCallTeams");

                entity.Property(e => e.WebCallTeamKey).HasColumnName("Web_Call_Team_Key");

                entity.Property(e => e.CreateDate)
                    .HasColumnName("Create_Date")
                    .HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasColumnName("Created_By")
                    .HasColumnType("varchar(3)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("varchar(50)");
            });

            modelBuilder.Entity<WebCallUserSetting>(entity =>
            {
                entity.HasKey(e => e.WebCallUserSettingKey)
                    .HasName("PK_WebCallUserSetting");

                entity.Property(e => e.WebCallUserSettingKey).HasColumnName("WEB_CALL_USER_SETTING_KEY");

                entity.Property(e => e.Setting)
                    .IsRequired()
                    .HasColumnName("SETTING")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.User)
                    .IsRequired()
                    .HasColumnName("USER")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasColumnName("VALUE")
                    .HasColumnType("varchar(2000)");
            });

            modelBuilder.Entity<WebCallVisitorAlerts>(entity =>
            {
                entity.HasKey(e => e.WebCallVisitorAlertId)
                    .HasName("PK_Web_Call_VisitorAlerts");

                entity.HasIndex(e => e.VisitorId)
                    .HasName("idxVisitorAlert_Visitor")
                    .IsUnique();

                entity.Property(e => e.WebCallVisitorAlertId).HasColumnName("Web_Call_VisitorAlertId");

                entity.Property(e => e.AlertNote)
                    .IsRequired()
                    .HasColumnType("varchar(2000)");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.ExpirationDate).HasColumnType("datetime");

                entity.Property(e => e.LastEditDate).HasColumnType("datetime");

                entity.Property(e => e.LastEditedBy)
                    .IsRequired()
                    .HasColumnType("varchar(100)");
            });

            modelBuilder.Entity<WebCallVisitorAlertsAudit>(entity =>
            {
                entity.HasKey(e => e.WebCallVisitorAlertAuditId)
                    .HasName("PK_Web_Call_VisitorAlertsAudit");

                entity.Property(e => e.WebCallVisitorAlertAuditId).HasColumnName("Web_Call_VisitorAlertAuditId");

                entity.Property(e => e.AlertNote)
                    .IsRequired()
                    .HasColumnType("varchar(2000)");

                entity.Property(e => e.AuditDate).HasColumnType("datetime");

                entity.Property(e => e.AuditType)
                    .IsRequired()
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.ExpirationDate).HasColumnType("datetime");

                entity.Property(e => e.LastEditDate).HasColumnType("datetime");

                entity.Property(e => e.LastEditedBy)
                    .IsRequired()
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.WebCallVisitorAlertId).HasColumnName("Web_Call_VisitorAlertId");
            });

            modelBuilder.Entity<WebCallWebEmergencyAlertTemplate>(entity =>
            {
                entity.HasKey(e => e.WebCallWebEmergencyAlertTemplateKey)
                    .HasName("PK_WebCallWebEmergencyAlertTemplate");

                entity.Property(e => e.WebCallWebEmergencyAlertTemplateKey).HasColumnName("Web_Call_Web_Emergency_Alert_Template_Key");

                entity.Property(e => e.AlertTemplateText)
                    .IsRequired()
                    .HasColumnName("Alert_Template_Text")
                    .HasColumnType("xml");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasColumnName("Created_By")
                    .HasColumnType("varchar(500)");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("Date_Entered")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateLastUpdated)
                    .HasColumnName("Date_Last_Updated")
                    .HasColumnType("datetime");

                entity.Property(e => e.LastUpdatedBy)
                    .IsRequired()
                    .HasColumnName("Last_Updated_By")
                    .HasColumnType("varchar(500)");

                entity.Property(e => e.Scenario)
                    .IsRequired()
                    .HasColumnType("varchar(500)");
            });

            modelBuilder.Entity<WebCallWorkItemCategoryHistory>(entity =>
            {
                entity.HasKey(e => e.WebCallWorkItemCategoryHistoryKey)
                    .HasName("PK_WebCallWorkItemCategoryHistory");

                entity.Property(e => e.WebCallWorkItemCategoryHistoryKey).HasColumnName("WEB_CALL_WORK_ITEM_CATEGORY_HISTORY_KEY");

                entity.Property(e => e.DateCreated)
                    .HasColumnName("DATE_CREATED")
                    .HasColumnType("datetime");

                entity.Property(e => e.WebCallCategoryKey).HasColumnName("WEB_CALL_CATEGORY_KEY");

                entity.Property(e => e.WebCallQueueKey).HasColumnName("WEB_CALL_QUEUE_KEY");

                entity.HasOne(d => d.WebCallCategoryKeyNavigation)
                    .WithMany(p => p.WebCallWorkItemCategoryHistory)
                    .HasForeignKey(d => d.WebCallCategoryKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_WebCallCategory_WebCallWorkItemCategoryHistory");
            });

            modelBuilder.Entity<WebCallWorkQueue>(entity =>
            {
                entity.HasKey(e => e.WebCallWorkQueueKey)
                    .HasName("PK_CCWorkQueue");

                entity.HasIndex(e => e.LeadId)
                    .HasName("IX_WebCallWorkQueue_LeadId");

                entity.HasIndex(e => e.LoanKey)
                    .HasName("IX_WebCallWorkQueue_Loan");

                entity.HasIndex(e => e.WebCallCustomerKey)
                    .HasName("IX_WebCallWorkQueue_Customer");

                entity.HasIndex(e => e.WebCallLoanAppKey)
                    .HasName("IX_WebCallWorkQueue_LoanApp");

                entity.HasIndex(e => e.WebCallQueueKey)
                    .HasName("IX_WebCallWorkQueue_Web_Call_Queue_Key");

                entity.HasIndex(e => e.WebCallVisitorKey)
                    .HasName("IX_WebCallWorkQueue_Visitor");

                entity.HasIndex(e => new { e.WebCallQueueSessionKey, e.Completed })
                    .HasName("IX_WebCallWorkQueue_WEB_CALL_QUEUE_SESSION_KEY_COMPLETED");

                entity.HasIndex(e => new { e.WebCallWorkQueueKey, e.WebCallQueueKey, e.OptplusCardDetailKey })
                    .HasName("IX_WebCallWorkQueue_OPTPLUS_CARD_DETAIL_KEY");

                entity.HasIndex(e => new { e.WebCallVisitorKey, e.WebCallQueueTypeKey, e.WebCallCustomerKey, e.WebCallQueueKey })
                    .HasName("IX_WebCallWorkQueue_WEB_CALL_QUEUE_KEY_CK");

                entity.HasIndex(e => new { e.WebCallQueueKey, e.DdContactHr, e.DdContactAttempts, e.Completed, e.DdLastContactAttemptDate })
                    .HasName("IX_WebCallWorkQueue_COMPLETED_DD_LAST_CONTACT_ATTEMPT_DATE");

                entity.HasIndex(e => new { e.WebCallWorkQueueKey, e.WebCallQueueCategoryKey, e.WebCallCustomerKey, e.RisreptKey, e.WebCallQueueTypeKey })
                    .HasName("IX_WebCallWorkQueue_WEB_CALL_QUEUE_TYPE_KEY");

                entity.HasIndex(e => new { e.LoanKey, e.RisreptKey, e.WebCallQueueKey, e.WebCallLoanAppKey, e.WebCallCustomerKey, e.WebCallVisitorKey, e.Completed })
                    .HasName("FX_WebCallWorkQueue_GetListOfWorkItems");

                entity.HasIndex(e => new { e.WebCallLoanAppKey, e.WebCallCustomerKey, e.WebCallQueueKey, e.WebCallVisitorKey, e.Completed, e.Checkedout, e.WebCallQueueCategoryKey })
                    .HasName("IX_WebCallWorkQueue_COMPLETED_CHECKEDOUT");

                entity.HasIndex(e => new { e.WebCallQueueCategoryKey, e.WebCallCustomerKey, e.WebCallVisitorKey, e.Completed, e.Checkedout, e.WebCallQueueTypeKey, e.WebCallQueueKey })
                    .HasName("IX_WebCallWorkQueue_COMPLETED_CHECKEDOUT_INCLUDEd");

                entity.HasIndex(e => new { e.WebCallQueueKey, e.WebCallVisitorKey, e.WebCallLoanAppKey, e.WebCallCustomerKey, e.Completed, e.Checkedout, e.WebCallQueueCategoryKey })
                    .HasName("IX_WebCallWorkQueue_COMPLETED_CHECKEDOUT_WEB_CALL_QUEUE_CATEGORY_KEY");

                entity.HasIndex(e => new { e.WebCallQueueCategoryKey, e.FollowUpdate, e.WebCallQueueStatusKey, e.Teller, e.SupervisorEscallation, e.Completed, e.WebCallQueueAssignedCampaignKey, e.OfflineCreatedDateTime, e.WebCallWorkQueueKey })
                    .HasName("IX_WebCallWorkQueue_WEB_CALL_QUEUE_CATEGORY_KEY_FOLLOW_UPDATE");

                entity.HasIndex(e => new { e.HomePhone, e.CellPhone, e.WebCallCustomerKey, e.DialerStatus, e.WebCallQueueKey, e.OnlineCreatedDateTime, e.FirstName, e.LastName, e.WorkPhone, e.WebCallLoanAppKey, e.DialerDate, e.State, e.OfflineCreatedDateTime, e.WebCallQueueCategoryKey, e.WebCallQueueTypeKey, e.MarketingSentKey, e.Completed, e.FollowUpdate })
                    .HasName("IX_WebCallWorkQueue_COMPLETED_FOLLOWUPDATE");

                entity.HasIndex(e => new { e.WebCallQueueKey, e.WebCallQueueCategoryKey, e.EmailAddress, e.WorkPhone, e.Completed, e.Checkedout, e.WebCallLoanAppKey, e.Location, e.Address, e.WebCallCustomerKey, e.WebCallVisitorKey, e.City, e.State, e.HomePhone, e.CellPhone, e.Zipcode, e.FirstName, e.LastName })
                    .HasName("<IX_WebCallWorkQueue_FIRST_NAME_LAST_NAME");

                entity.HasIndex(e => new { e.WebCallVisitorKey, e.Location, e.State, e.Zipcode, e.CellPhone, e.WorkPhone, e.WebCallLoanAppKey, e.WebCallCustomerKey, e.WebCallQueueKey, e.Address, e.City, e.FirstName, e.HomePhone, e.WebCallQueueCategoryKey, e.EmailAddress, e.Completed, e.Checkedout, e.LastName })
                    .HasName("IX_WebCallWorkQueue_LAST_NAME_INCLUDED");

                entity.HasIndex(e => new { e.WebCallQueueKey, e.WebCallQueueSessionKey, e.FirstName, e.LastName, e.WebCallChatSessionKey, e.WebCallChatCsrKey, e.OnlineCreatedDateTime, e.WebCallQueueCategoryKey, e.State, e.LeadId, e.SoldAmount, e.WorkItemColor, e.WebCallVisitorKey, e.WebStatus, e.Address, e.City, e.WorkPhone, e.WebCallRarrKey, e.Zipcode, e.Buyer, e.WebCallLoanAppKey, e.WebCallCustomerKey, e.Page, e.EmailAddress, e.WebSource, e.Location, e.HomePhone, e.CellPhone, e.IsOnline, e.WebCallQueueStatusKey })
                    .HasName("IX_WebCallWorkQueue_IS_ONLINE_INCLUDE");

                entity.HasIndex(e => new { e.Address, e.City, e.CellPhone, e.WorkPhone, e.Zipcode, e.Buyer, e.WebCallLoanAppKey, e.WebCallCustomerKey, e.Page, e.Csr, e.WebSource, e.Location, e.LastName, e.HomePhone, e.State, e.LeadId, e.SoldAmount, e.WebCallVisitorKey, e.WebStatus, e.Notes, e.Checkedout, e.EmailAddress, e.FirstName, e.WebCallQueueStatusKey, e.Completed, e.SupervisorEscallation, e.Teller, e.OfflineCreatedDateTime, e.WebCallQueueCategoryKey, e.WebCallQueueEditedCampaignKey, e.FollowUpdate, e.WebCallQueueAssignedCampaignKey, e.WebCallReasonKey, e.WebCallResult1Key, e.WebCallResult2Key, e.WebCallActionKey, e.WebCallQueueSessionKey, e.WebCallQueueKey, e.WebCallRarrKey })
                    .HasName("IX_WebCallWorkQueue_WEB_CALL_QUEUE_STATUS_KEY_COMPLETED");

                entity.HasIndex(e => new { e.FirstName, e.LastName, e.Page, e.LeadId, e.Zipcode, e.WebStatus, e.WebSource, e.Checkedout, e.WebCallLoanAppKey, e.City, e.State, e.WorkPhone, e.Notes, e.Buyer, e.SoldAmount, e.WebCallCustomerKey, e.WebCallVisitorKey, e.Csr, e.EmailAddress, e.Location, e.Address, e.HomePhone, e.CellPhone, e.WebCallQueueCategoryKey, e.FollowUpdate, e.WebCallQueueStatusKey, e.Teller, e.SupervisorEscallation, e.Completed, e.WebCallQueueAssignedCampaignKey, e.OfflineCreatedDateTime, e.WebCallQueueEditedCampaignKey, e.WebCallReasonKey, e.WebCallResult1Key, e.WebCallResult2Key, e.WebCallActionKey, e.WebCallQueueSessionKey, e.WebCallQueueKey, e.WebCallRarrKey })
                    .HasName("IX_WebCallWorkQueue_WEB_CALL_QUEUE_CATEGORY_KEY_FOLLOW_UP");

                entity.HasIndex(e => new { e.Page, e.Csr, e.Location, e.Address, e.LastName, e.HomePhone, e.LeadId, e.Zipcode, e.Notes, e.Checkedout, e.OfflineCreatedDateTime, e.WebStatus, e.WebSource, e.EmailAddress, e.FirstName, e.CellPhone, e.WorkPhone, e.City, e.State, e.Buyer, e.SoldAmount, e.WebCallCustomerKey, e.WebCallVisitorKey, e.Completed, e.WebCallQueueStatusKey, e.WebCallActionKey, e.WebCallResult2Key, e.WebCallResult1Key, e.WebCallReasonKey, e.WebCallQueueEditedCampaignKey, e.WebCallQueueCategoryKey, e.SupervisorEscallation, e.Teller, e.FollowUpdate, e.WebCallQueueAssignedCampaignKey, e.WebCallQueueSessionKey, e.WebCallQueueKey, e.WebCallRarrKey, e.WebCallLoanAppKey })
                    .HasName("IX_WebCallWorkQueue_COMPLETED");

                entity.HasIndex(e => new { e.OfflineCreatedDateTime, e.EmailAddress, e.FirstName, e.WebStatus, e.WebSource, e.WorkItemColor, e.Notes, e.Checkedout, e.LeadId, e.Zipcode, e.City, e.State, e.CellPhone, e.WorkPhone, e.Buyer, e.SoldAmount, e.WebCallCustomerKey, e.WebCallVisitorKey, e.Page, e.Csr, e.Location, e.Address, e.LastName, e.HomePhone, e.Completed, e.WebCallQueueStatusKey, e.WebCallActionKey, e.WebCallResult2Key, e.WebCallResult1Key, e.WebCallReasonKey, e.WebCallQueueEditedCampaignKey, e.WebCallQueueCategoryKey, e.SupervisorEscallation, e.Teller, e.FollowUpdate, e.WebCallQueueAssignedCampaignKey, e.WebCallQueueSessionKey, e.WebCallQueueKey, e.WebCallRarrKey, e.WebCallLoanAppKey })
                    .HasName("IX_WebCallWorkQueue_COMPLETED_WEB_CALL_QUEUE_STATUS_KEY_WEB_CALL_ACTION_KEY");

                entity.HasIndex(e => new { e.WebCallQueueKey, e.FirstName, e.LastName, e.WebCallQueueSessionKey, e.OfflineCreatedDateTime, e.WorkItemColor, e.WebCallQueueTypeKey, e.WebStatus, e.WebSource, e.LeadId, e.Zipcode, e.Page, e.WebCallQueueStatusKey, e.ItsupportEscallation, e.City, e.State, e.Notes, e.FollowUpdate, e.Buyer, e.SoldAmount, e.WebCallCustomerKey, e.WebCallVisitorKey, e.WorkPhone, e.WebCallReasonKey, e.Location, e.Address, e.WebCallResult2Key, e.WebCallRarrKey, e.Teller, e.EmailAddress, e.Checkedout, e.WebCallLoanAppKey, e.HomePhone, e.CellPhone, e.WebCallQueueCategoryKey, e.WebCallQueueEditedCampaignKey, e.WebCallActionKey, e.WebCallResult1Key, e.SupervisorEscallation, e.Csr, e.Completed })
                    .HasName("IX_WebCallWorkQueue_COMPLETED_INCLUDEd");

                entity.Property(e => e.WebCallWorkQueueKey).HasColumnName("WEB_CALL_WORK_QUEUE_KEY");

                entity.Property(e => e.Address).HasColumnType("varchar(50)");

                entity.Property(e => e.Buyer).HasColumnType("varchar(200)");

                entity.Property(e => e.CellPhone)
                    .IsRequired()
                    .HasColumnName("CELL_PHONE")
                    .HasColumnType("varchar(15)")
                    .HasDefaultValueSql("''");

                entity.Property(e => e.Checkedout).HasColumnName("CHECKEDOUT");

                entity.Property(e => e.City).HasColumnType("varchar(30)");

                entity.Property(e => e.Completed)
                    .HasColumnName("COMPLETED")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Csr)
                    .IsRequired()
                    .HasColumnName("CSR")
                    .HasColumnType("varchar(50)")
                    .HasDefaultValueSql("''");

                entity.Property(e => e.DdContactAttempts).HasColumnName("DD_CONTACT_ATTEMPTS");

                entity.Property(e => e.DdContactHr).HasColumnName("DD_CONTACT_HR");

                entity.Property(e => e.DdLastContactAttemptDate)
                    .HasColumnName("DD_LAST_CONTACT_ATTEMPT_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DialerCampaign).HasColumnName("DIALER_CAMPAIGN");

                entity.Property(e => e.DialerDate)
                    .HasColumnName("DIALER_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DialerStatus).HasColumnName("DIALER_STATUS");

                entity.Property(e => e.EmailAddress)
                    .IsRequired()
                    .HasColumnName("EMAIL_ADDRESS")
                    .HasColumnType("varchar(150)")
                    .HasDefaultValueSql("''");

                entity.Property(e => e.FinalScore).HasColumnType("varchar(100)");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasColumnName("FIRST_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.FollowUpdate)
                    .HasColumnName("FOLLOW_UPDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.HomePhone)
                    .IsRequired()
                    .HasColumnName("HOME_PHONE")
                    .HasColumnType("varchar(15)")
                    .HasDefaultValueSql("''");

                entity.Property(e => e.IsOnline).HasColumnName("IS_ONLINE");

                entity.Property(e => e.ItsupportEscallation).HasColumnName("ITSupportEscallation");

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasColumnName("LAST_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.LeadId).HasColumnType("varchar(100)");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.MarketingSentKey)
                    .HasColumnName("MARKETING_SENT_KEY")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.ModifiedDate)
                    .HasColumnName("MODIFIED_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Notes)
                    .IsRequired()
                    .HasColumnName("NOTES")
                    .HasColumnType("varchar(4000)")
                    .HasDefaultValueSql("''");

                entity.Property(e => e.OfflineCreatedDateTime)
                    .HasColumnName("OFFLINE_CREATED_DATE_TIME")
                    .HasColumnType("datetime");

                entity.Property(e => e.OnlineCreatedDateTime)
                    .HasColumnName("ONLINE_CREATED_DATE_TIME")
                    .HasColumnType("datetime");

                entity.Property(e => e.OptplusCardDetailKey).HasColumnName("OPTPLUS_CARD_DETAIL_KEY");

                entity.Property(e => e.Page)
                    .HasColumnName("PAGE")
                    .HasColumnType("varchar(2000)")
                    .HasDefaultValueSql("''");

                entity.Property(e => e.PhoneCount)
                    .HasColumnName("PHONE_COUNT")
                    .HasComputedColumnSql("(case when len(rtrim(ltrim([HOME_PHONE])))>(0) then (1) else (0) end+case when len(rtrim(ltrim([CELL_PHONE])))>(0) then (1) else (0) end)+case when len(rtrim(ltrim([WORK_PHONE])))>(0) then (1) else (0) end")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.RisreptKey).HasColumnName("RISREPT_KEY");

                entity.Property(e => e.SoldAmount).HasColumnType("smallmoney");

                entity.Property(e => e.State).HasColumnType("varchar(2)");

                entity.Property(e => e.SupervisorEscallation)
                    .HasColumnName("SUPERVISOR_ESCALLATION")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("varchar(3)")
                    .HasDefaultValueSql("''");

                entity.Property(e => e.WebCallActionKey).HasColumnName("WEB_CALL_ACTION_KEY");

                entity.Property(e => e.WebCallChatCsrKey)
                    .IsRequired()
                    .HasColumnName("WEB_CALL_CHAT_CSR_KEY")
                    .HasColumnType("varchar(3)")
                    .HasDefaultValueSql("''");

                entity.Property(e => e.WebCallChatSessionKey).HasColumnName("WEB_CALL_CHAT_SESSION_KEY");

                entity.Property(e => e.WebCallCustomerKey).HasColumnName("WEB_CALL_CUSTOMER_KEY");

                entity.Property(e => e.WebCallLoanAppKey).HasColumnName("WEB_CALL_LOAN_APP_KEY");

                entity.Property(e => e.WebCallQueueAssignedCampaignKey)
                    .HasColumnName("WEB_CALL_QUEUE_ASSIGNED_CAMPAIGN_KEY")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.WebCallQueueCategoryKey).HasColumnName("WEB_CALL_QUEUE_CATEGORY_KEY");

                entity.Property(e => e.WebCallQueueEditedCampaignKey)
                    .HasColumnName("WEB_CALL_QUEUE_EDITED_CAMPAIGN_KEY")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.WebCallQueueKey).HasColumnName("WEB_CALL_QUEUE_KEY");

                entity.Property(e => e.WebCallQueueSessionKey)
                    .HasColumnName("WEB_CALL_QUEUE_SESSION_KEY")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.WebCallQueueStatusKey)
                    .HasColumnName("WEB_CALL_QUEUE_STATUS_KEY")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.WebCallQueueTypeKey).HasColumnName("WEB_CALL_QUEUE_TYPE_KEY");

                entity.Property(e => e.WebCallRarrKey).HasColumnName("WEB_CALL_RARR_KEY");

                entity.Property(e => e.WebCallReasonKey).HasColumnName("WEB_CALL_REASON_KEY");

                entity.Property(e => e.WebCallResult1Key).HasColumnName("WEB_CALL_RESULT1_KEY");

                entity.Property(e => e.WebCallResult2Key).HasColumnName("WEB_CALL_RESULT2_KEY");

                entity.Property(e => e.WebCallVisitorKey).HasColumnName("WEB_CALL_VISITOR_KEY");

                entity.Property(e => e.WebSource).HasColumnType("varchar(50)");

                entity.Property(e => e.WebStatus)
                    .HasColumnName("WEB_STATUS")
                    .HasColumnType("varchar(250)");

                entity.Property(e => e.WebVisitKey).HasColumnName("WEB_VISIT_KEY");

                entity.Property(e => e.WorkItemColor).HasColumnName("WORK_ITEM_COLOR");

                entity.Property(e => e.WorkPhone)
                    .IsRequired()
                    .HasColumnName("WORK_PHONE")
                    .HasColumnType("varchar(25)")
                    .HasDefaultValueSql("''");

                entity.Property(e => e.Zipcode).HasColumnType("varchar(5)");

                entity.HasOne(d => d.LoanKeyNavigation)
                    .WithMany(p => p.WebCallWorkQueue)
                    .HasForeignKey(d => d.LoanKey)
                    .HasConstraintName("FK_WebCallWorkQueue_Loan");

                entity.HasOne(d => d.OptplusCardDetailKeyNavigation)
                    .WithMany(p => p.WebCallWorkQueue)
                    .HasForeignKey(d => d.OptplusCardDetailKey)
                    .HasConstraintName("FK_WebCallWorkQueue_OPTPLUS_CARD_DETAIL_KEY");

                entity.HasOne(d => d.WebCallCustomerKeyNavigation)
                    .WithMany(p => p.WebCallWorkQueue)
                    .HasForeignKey(d => d.WebCallCustomerKey)
                    .HasConstraintName("FK_WebCallWorkQueue_Customer");

                entity.HasOne(d => d.WebCallLoanAppKeyNavigation)
                    .WithMany(p => p.WebCallWorkQueue)
                    .HasForeignKey(d => d.WebCallLoanAppKey)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_WebCallWorkQueue_LoanApplication");

                entity.HasOne(d => d.WebCallQueueKeyNavigation)
                    .WithMany(p => p.WebCallWorkQueue)
                    .HasForeignKey(d => d.WebCallQueueKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_WebCallWorkQueue_WebCallQueue");

                entity.HasOne(d => d.WebCallQueueTypeKeyNavigation)
                    .WithMany(p => p.WebCallWorkQueue)
                    .HasForeignKey(d => d.WebCallQueueTypeKey)
                    .HasConstraintName("FK_WebCallWorkQueue_WEB_CALL_QUEUE_TYPE_KEY");

                entity.HasOne(d => d.WebCallVisitorKeyNavigation)
                    .WithMany(p => p.WebCallWorkQueue)
                    .HasForeignKey(d => d.WebCallVisitorKey)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_WebCallWorkQueue_Visitor");
            });

            modelBuilder.Entity<WebDailyReport>(entity =>
            {
                entity.HasKey(e => e.WebDailyReportKey)
                    .HasName("PK_WebDailyReport");

                entity.Property(e => e.WebDailyReportKey).HasColumnName("web_daily_report_key");

                entity.Property(e => e.DateReported)
                    .HasColumnName("date_reported")
                    .HasColumnType("datetime");

                entity.Property(e => e.Msa)
                    .HasColumnName("msa")
                    .HasColumnType("varchar(4)");

                entity.Property(e => e.NumericValue).HasColumnName("numeric_value");

                entity.Property(e => e.Source)
                    .HasColumnName("source")
                    .HasColumnType("varchar(500)");

                entity.Property(e => e.State)
                    .HasColumnName("state")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.WebDailyReportFieldKey).HasColumnName("web_daily_report_field_key");
            });

            modelBuilder.Entity<WebDailyReportFields>(entity =>
            {
                entity.HasKey(e => e.WebDailyReportFieldsKey)
                    .HasName("PK_WebDailyReportFields");

                entity.Property(e => e.WebDailyReportFieldsKey).HasColumnName("web_daily_report_fields_key");

                entity.Property(e => e.AllowRange)
                    .HasColumnName("allow_range")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.Disabled).HasDefaultValueSql("0");

                entity.Property(e => e.FieldDescription)
                    .IsRequired()
                    .HasColumnName("field_description")
                    .HasColumnType("varchar(150)");

                entity.Property(e => e.FieldSortPriority).HasColumnName("Field_Sort_Priority");

                entity.Property(e => e.GroupName)
                    .HasColumnName("group_name")
                    .HasColumnType("varchar(150)");

                entity.Property(e => e.GroupSortPriority).HasColumnName("Group_Sort_Priority");
            });

            modelBuilder.Entity<WebDailyReportStates>(entity =>
            {
                entity.HasKey(e => e.WebDailyReportStateKey)
                    .HasName("PK_WebDailyReportState");

                entity.Property(e => e.WebDailyReportStateKey).HasColumnName("web_daily_report_State_key");

                entity.Property(e => e.Disabled).HasDefaultValueSql("0");

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasColumnName("state")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.StateSortPriority).HasColumnName("State_Sort_Priority");
            });

            modelBuilder.Entity<WebDialerCallResult>(entity =>
            {
                entity.HasKey(e => e.WebDialerCallResultKey)
                    .HasName("PK_WebDialerCallResult");

                entity.HasIndex(e => e.SessionId)
                    .HasName("IX_WebDialerCallResult_SESSION_ID");

                entity.HasIndex(e => new { e.SessionId, e.NobleHash })
                    .HasName("FX_NobleHash");

                entity.HasIndex(e => new { e.WebDialerCallResultKey, e.CustomerKey })
                    .HasName("IX_WebDialerCallResult_CUSTOMER_KEY");

                entity.HasIndex(e => new { e.WebDialerCallResultKey, e.VisitorKey })
                    .HasName("IX_WebDialerCallResult_VISITOR_KEY");

                entity.HasIndex(e => new { e.WebDialerCallResultKey, e.Agent, e.Teller })
                    .HasName("IX_WebDialerCallResult_TELLER");

                entity.Property(e => e.WebDialerCallResultKey).HasColumnName("WEB_DIALER_CALL_RESULT_KEY");

                entity.Property(e => e.Abandoned)
                    .HasColumnName("ABANDONED")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.AfterCallWorkTime)
                    .HasColumnName("AFTER_CALL_WORK_TIME")
                    .HasColumnType("time(0)")
                    .HasDefaultValueSql("'00:00:00'");

                entity.Property(e => e.Agent)
                    .HasColumnName("AGENT")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Ani)
                    .HasColumnName("ANI")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.AniAreaCode).HasColumnName("ANI_AREA_CODE");

                entity.Property(e => e.AniCountryCode).HasColumnName("ANI_COUNTRY_CODE");

                entity.Property(e => e.AniState)
                    .HasColumnName("ANI_STATE")
                    .HasColumnType("varchar(32)");

                entity.Property(e => e.ApplicationKey).HasColumnName("APPLICATION_KEY");

                entity.Property(e => e.BillTime)
                    .HasColumnName("BILL_TIME")
                    .HasColumnType("time(0)")
                    .HasDefaultValueSql("'00:00:00'");

                entity.Property(e => e.CallId).HasColumnName("CALL_ID");

                entity.Property(e => e.CallTime)
                    .HasColumnName("CALL_TIME")
                    .HasColumnType("time(0)")
                    .HasDefaultValueSql("'00:00:00'");

                entity.Property(e => e.CallType)
                    .HasColumnName("CALL_TYPE")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.Calls)
                    .HasColumnName("CALLS")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.CallsCompletedInIvr)
                    .HasColumnName("CALLS_COMPLETED_IN_IVR")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.CallsTimedOutInIvr)
                    .HasColumnName("CALLS_TIMED_OUT_IN_IVR")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Campaign)
                    .HasColumnName("CAMPAIGN")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.ConferenceTime)
                    .HasColumnName("CONFERENCE_TIME")
                    .HasColumnType("time(0)")
                    .HasDefaultValueSql("'00:00:00'");

                entity.Property(e => e.Conferences)
                    .HasColumnName("CONFERENCES")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.ConsultTime)
                    .HasColumnName("CONSULT_TIME")
                    .HasColumnType("time(0)")
                    .HasDefaultValueSql("'00:00:00'");

                entity.Property(e => e.ContactId).HasColumnName("CONTACT_ID");

                entity.Property(e => e.Contacted)
                    .HasColumnName("CONTACTED")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Cost)
                    .HasColumnName("COST")
                    .HasColumnType("decimal")
                    .HasDefaultValueSql("0.00");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.DestinationAgent)
                    .HasColumnName("DESTINATION_AGENT")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.Disposition)
                    .HasColumnName("DISPOSITION")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Dnis)
                    .HasColumnName("DNIS")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.DnisAreaCode).HasColumnName("DNIS_AREA_CODE");

                entity.Property(e => e.DnisCountryCode).HasColumnName("DNIS_COUNTRY_CODE");

                entity.Property(e => e.DnisState)
                    .HasColumnName("DNIS_STATE")
                    .HasColumnType("varchar(32)");

                entity.Property(e => e.Extension).HasColumnName("EXTENSION");

                entity.Property(e => e.HandleTime)
                    .HasColumnName("HANDLE_TIME")
                    .HasColumnType("time(0)")
                    .HasDefaultValueSql("'00:00:00'");

                entity.Property(e => e.HoldTime)
                    .HasColumnName("HOLD_TIME")
                    .HasColumnType("time(0)")
                    .HasDefaultValueSql("'00:00:00'");

                entity.Property(e => e.Holds)
                    .HasColumnName("HOLDS")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.IsComplete)
                    .HasColumnName("IS_COMPLETE")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.IvrPath)
                    .HasColumnName("IVR_PATH")
                    .HasColumnType("varchar(512)");

                entity.Property(e => e.IvrTime)
                    .HasColumnName("IVR_TIME")
                    .HasColumnType("time(0)")
                    .HasDefaultValueSql("'00:00:00'");

                entity.Property(e => e.LastModified)
                    .HasColumnName("LAST_MODIFIED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.ListName)
                    .IsRequired()
                    .HasColumnName("LIST_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.ManualDialingTime)
                    .HasColumnName("MANUAL_DIALING_TIME")
                    .HasColumnType("time(0)")
                    .HasDefaultValueSql("'00:00:00'");

                entity.Property(e => e.MarketingSentKey).HasColumnName("MARKETING_SENT_KEY");

                entity.Property(e => e.MrktCampaign)
                    .HasColumnName("MRKT_CAMPAIGN")
                    .HasColumnType("varchar(32)");

                entity.Property(e => e.NobleHash)
                    .HasColumnName("NOBLE_HASH")
                    .HasColumnType("varchar(32)");

                entity.Property(e => e.Notes)
                    .HasColumnName("NOTES")
                    .HasColumnType("varchar(512)");

                entity.Property(e => e.ParkTime)
                    .HasColumnName("PARK_TIME")
                    .HasColumnType("time(0)")
                    .HasDefaultValueSql("'00:00:00'");

                entity.Property(e => e.Parks)
                    .HasColumnName("PARKS")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.PreviewTime)
                    .HasColumnName("PREVIEW_TIME")
                    .HasColumnType("time(0)")
                    .HasDefaultValueSql("'00:00:00'");

                entity.Property(e => e.Priority).HasColumnName("PRIORITY");

                entity.Property(e => e.QueueType).HasColumnName("QUEUE_TYPE");

                entity.Property(e => e.QueueWaitTime)
                    .HasColumnName("QUEUE_WAIT_TIME")
                    .HasColumnType("time(0)")
                    .HasDefaultValueSql("'00:00:00'");

                entity.Property(e => e.Rate)
                    .HasColumnName("RATE")
                    .HasColumnType("decimal")
                    .HasDefaultValueSql("0.00");

                entity.Property(e => e.Result)
                    .IsRequired()
                    .HasColumnName("RESULT")
                    .HasColumnType("varchar(128)");

                entity.Property(e => e.RingTime)
                    .HasColumnName("RING_TIME")
                    .HasColumnType("time(0)")
                    .HasDefaultValueSql("'00:00:00'");

                entity.Property(e => e.RisreptKey).HasColumnName("RISREPT_KEY");

                entity.Property(e => e.ServiceLevel).HasColumnName("SERVICE_LEVEL");

                entity.Property(e => e.SessionId)
                    .HasColumnName("SESSION_ID")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.Skill)
                    .HasColumnName("SKILL")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.SpeedOfAnswer)
                    .HasColumnName("SPEED_OF_ANSWER")
                    .HasColumnType("time(0)")
                    .HasDefaultValueSql("'00:00:00'");

                entity.Property(e => e.TalkTime)
                    .HasColumnName("TALK_TIME")
                    .HasColumnType("time(0)")
                    .HasDefaultValueSql("'00:00:00'");

                entity.Property(e => e.TalkTimeLessHoldAndPark)
                    .HasColumnName("TALK_TIME_LESS_HOLD_AND_PARK")
                    .HasColumnType("time(0)")
                    .HasDefaultValueSql("'00:00:00'");

                entity.Property(e => e.Teller)
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.ThirdPartyTalkTime)
                    .HasColumnName("THIRD_PARTY_TALK_TIME")
                    .HasColumnType("time(0)")
                    .HasDefaultValueSql("'00:00:00'");

                entity.Property(e => e.TimeStamp)
                    .HasColumnName("TIME_STAMP")
                    .HasColumnType("datetime");

                entity.Property(e => e.Transfers).HasColumnName("TRANSFERS");

                entity.Property(e => e.VisitorKey).HasColumnName("VISITOR_KEY");

                entity.Property(e => e.WebCallQueueKey).HasColumnName("WEB_CALL_QUEUE_KEY");

                entity.Property(e => e.WebDialerResultTypeKey).HasColumnName("WEB_DIALER_RESULT_TYPE_KEY");
            });

            modelBuilder.Entity<WebDialerPhoneLine>(entity =>
            {
                entity.HasKey(e => e.WebDialerPhoneLineKey)
                    .HasName("PK_WebDialerPhoneLine");

                entity.Property(e => e.WebDialerPhoneLineKey).HasColumnName("WEB_DIALER_PHONE_LINE_KEY");

                entity.Property(e => e.ColorRgb).HasColumnName("COLOR_RGB");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Enabled).HasColumnName("ENABLED");

                entity.Property(e => e.LineNo).HasColumnName("LINE_NO");

                entity.Property(e => e.Phone)
                    .HasColumnName("PHONE")
                    .HasColumnType("varchar(15)");
            });

            modelBuilder.Entity<WebDialerResult>(entity =>
            {
                entity.HasKey(e => e.WebDialerResultKey)
                    .HasName("PK_WebDialerResult");

                entity.HasIndex(e => e.SessionId)
                    .HasName("IX_WebDialerResultKey_SessionID");

                entity.HasIndex(e => new { e.WebCallQueueKey, e.IncomingDid })
                    .HasName("IX_WebDialerResult_WEB_CALL_QUEUE_KEY");

                entity.HasIndex(e => new { e.CallType, e.Disposition, e.CallDate, e.WebCallQueueKey })
                    .HasName("IX_WebDialerResult_WEB_CALL_QUEUE_KEY_CALL_TYPE");

                entity.Property(e => e.WebDialerResultKey).HasColumnName("WEB_DIALER_RESULT_KEY");

                entity.Property(e => e.Agent)
                    .HasColumnName("AGENT")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.AgentEmail)
                    .HasColumnName("AGENT_EMAIL")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.AgentExtension).HasColumnName("AGENT_EXTENSION");

                entity.Property(e => e.AgentName)
                    .HasColumnName("AGENT_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Ani)
                    .HasColumnName("ANI")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.AniAreaCode).HasColumnName("ANI_AREA_CODE");

                entity.Property(e => e.AniCountryCode).HasColumnName("ANI_COUNTRY_CODE");

                entity.Property(e => e.AudioDroppedDate)
                    .HasColumnName("AUDIO_DROPPED_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.BillTime)
                    .HasColumnName("BILL_TIME")
                    .HasColumnType("time(0)");

                entity.Property(e => e.CallDate)
                    .HasColumnName("CALL_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.CallEndedDate)
                    .HasColumnName("CALL_ENDED_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.CallTime).HasColumnName("CALL_TIME");

                entity.Property(e => e.CallType)
                    .HasColumnName("CALL_TYPE")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.CalledState)
                    .HasColumnName("CALLED_STATE")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.Calls).HasColumnName("CALLS");

                entity.Property(e => e.Campaign)
                    .HasColumnName("CAMPAIGN")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.Category)
                    .HasColumnName("CATEGORY")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.City)
                    .HasColumnName("CITY")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Comments)
                    .HasColumnName("COMMENTS")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Company)
                    .HasColumnName("COMPANY")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.Contact).HasColumnName("CONTACT");

                entity.Property(e => e.Cost)
                    .HasColumnName("COST")
                    .HasColumnType("decimal");

                entity.Property(e => e.Country)
                    .HasColumnName("COUNTRY")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DestAgentEmail)
                    .HasColumnName("DEST_AGENT_EMAIL")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.DestAgentExtension).HasColumnName("DEST_AGENT_EXTENSION");

                entity.Property(e => e.DestAgentName)
                    .HasColumnName("DEST_AGENT_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.DestinationAgent)
                    .HasColumnName("DESTINATION_AGENT")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.Disposition)
                    .HasColumnName("DISPOSITION")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Dnis)
                    .HasColumnName("DNIS")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.DnisAreaCode).HasColumnName("DNIS_AREA_CODE");

                entity.Property(e => e.DnisCountryCode).HasColumnName("DNIS_COUNTRY_CODE");

                entity.Property(e => e.Dropped).HasColumnName("DROPPED");

                entity.Property(e => e.Duration)
                    .HasColumnName("DURATION")
                    .HasColumnType("time(0)");

                entity.Property(e => e.FirstName)
                    .HasColumnName("FIRST_NAME")
                    .HasColumnType("varchar(24)");

                entity.Property(e => e.HandleTime)
                    .HasColumnName("HANDLE_TIME")
                    .HasColumnType("time(0)");

                entity.Property(e => e.HoldTime)
                    .HasColumnName("HOLD_TIME")
                    .HasColumnType("time(0)");

                entity.Property(e => e.IncomingDid)
                    .HasColumnName("INCOMING_DID")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.IsComplete).HasColumnName("IS_COMPLETE");

                entity.Property(e => e.IvrFlow)
                    .HasColumnName("IVR_FLOW")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.LastName)
                    .HasColumnName("LAST_NAME")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.ListName)
                    .IsRequired()
                    .HasColumnName("LIST_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.ManualDialingTime)
                    .HasColumnName("MANUAL_DIALING_TIME")
                    .HasColumnType("time(0)");

                entity.Property(e => e.MarketingSentKey)
                    .HasColumnName("MARKETING_SENT_KEY")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.Number1)
                    .HasColumnName("NUMBER1")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.Number2)
                    .HasColumnName("NUMBER2")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.Number3)
                    .HasColumnName("NUMBER3")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.PhoneType)
                    .IsRequired()
                    .HasColumnName("PHONE_TYPE")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.PreviewTime)
                    .HasColumnName("PREVIEW_TIME")
                    .HasColumnType("time(0)");

                entity.Property(e => e.Priority).HasColumnName("PRIORITY");

                entity.Property(e => e.QueueTime)
                    .HasColumnName("QUEUE_TIME")
                    .HasColumnType("time(0)");

                entity.Property(e => e.Rate)
                    .HasColumnName("RATE")
                    .HasColumnType("decimal");

                entity.Property(e => e.Result)
                    .IsRequired()
                    .HasColumnName("RESULT")
                    .HasColumnType("varchar(128)");

                entity.Property(e => e.ServiceLevel).HasColumnName("SERVICE_LEVEL");

                entity.Property(e => e.SessionId)
                    .HasColumnName("SESSION_ID")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.Skill)
                    .HasColumnName("SKILL")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.SpeedOfAnswer)
                    .HasColumnName("SPEED_OF_ANSWER")
                    .HasColumnType("time(0)");

                entity.Property(e => e.Street)
                    .HasColumnName("STREET")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.TalkTime)
                    .HasColumnName("TALK_TIME")
                    .HasColumnType("time(0)");

                entity.Property(e => e.Teller)
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.ThirdPartyTalkTime)
                    .HasColumnName("THIRD_PARTY_TALK_TIME")
                    .HasColumnType("time(0)");

                entity.Property(e => e.TimeStamp)
                    .HasColumnName("TIME_STAMP")
                    .HasColumnType("datetime");

                entity.Property(e => e.VisitorKey).HasColumnName("VISITOR_KEY");

                entity.Property(e => e.WebCallQueueKey).HasColumnName("WEB_CALL_QUEUE_KEY");

                entity.Property(e => e.WebDialerResultTypeKey).HasColumnName("WEB_DIALER_RESULT_TYPE_KEY");

                entity.Property(e => e.WorkItemDate)
                    .HasColumnName("WORK_ITEM_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.WrapTime)
                    .HasColumnName("WRAP_TIME")
                    .HasColumnType("time(0)");

                entity.Property(e => e.Zip)
                    .HasColumnName("ZIP")
                    .HasColumnType("varchar(10)");

                entity.HasOne(d => d.WebCallQueueKeyNavigation)
                    .WithMany(p => p.WebDialerResult)
                    .HasForeignKey(d => d.WebCallQueueKey)
                    .HasConstraintName("FK_WebDialerResult_WebCallQueue");

                entity.HasOne(d => d.WebDialerResultTypeKeyNavigation)
                    .WithMany(p => p.WebDialerResult)
                    .HasForeignKey(d => d.WebDialerResultTypeKey)
                    .HasConstraintName("fk_WEB_DIALER_RESULT_TYPE_KEY");
            });

            modelBuilder.Entity<WebDialerResultType>(entity =>
            {
                entity.HasKey(e => e.WebDialerResultTypeKey)
                    .HasName("PK_WebDialerResultType");

                entity.Property(e => e.WebDialerResultTypeKey).HasColumnName("WEB_DIALER_RESULT_TYPE_KEY");

                entity.Property(e => e.Deleted).HasColumnName("DELETED");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(150)");

                entity.Property(e => e.FiveNineKey)
                    .HasColumnName("FIVE_NINE_KEY")
                    .HasColumnType("varchar(150)");

                entity.Property(e => e.IatresultTypeKey).HasColumnName("IATResultTypeKey");

                entity.Property(e => e.IsSystemDisposition).HasColumnName("IS_SYSTEM_DISPOSITION");

                entity.Property(e => e.WebCallCatrarrAliasKey).HasColumnName("WEB_CALL_CATRARR_ALIAS_KEY");
            });

            modelBuilder.Entity<WebDialerStatus>(entity =>
            {
                entity.HasKey(e => e.WebDialerStatusKey)
                    .HasName("PK_WebDialerStatus");

                entity.Property(e => e.WebDialerStatusKey)
                    .HasColumnName("WEB_DIALER_STATUS_KEY")
                    .ValueGeneratedNever();

                entity.Property(e => e.DateModified)
                    .HasColumnName("DATE_MODIFIED")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.Status)
                    .HasColumnName("STATUS")
                    .HasDefaultValueSql("0");
            });

            modelBuilder.Entity<WebDialerUploadHistory>(entity =>
            {
                entity.HasKey(e => e.WebDialerUploadHistoryKey)
                    .HasName("PK_WebDialerUploadHistory");

                entity.Property(e => e.WebDialerUploadHistoryKey).HasColumnName("WEB_DIALER_UPLOAD_HISTORY_KEY");

                entity.Property(e => e.Category)
                    .HasColumnName("CATEGORY")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.CellPhone)
                    .HasColumnName("CELL_PHONE")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.FirstName)
                    .HasColumnName("FIRST_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.HomePhone)
                    .HasColumnName("HOME_PHONE")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.LastName)
                    .HasColumnName("LAST_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Priority).HasColumnName("PRIORITY");

                entity.Property(e => e.UploadDate)
                    .HasColumnName("UPLOAD_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.UploadOperation)
                    .HasColumnName("UPLOAD_OPERATION")
                    .HasColumnType("varchar(3)");

                entity.Property(e => e.WebCallQueueKey).HasColumnName("WEB_CALL_QUEUE_KEY");

                entity.Property(e => e.WorkItemDateEntered)
                    .HasColumnName("WORK_ITEM_DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.WorkPhone)
                    .HasColumnName("WORK_PHONE")
                    .HasColumnType("varchar(50)");

                entity.HasOne(d => d.WebCallQueueKeyNavigation)
                    .WithMany(p => p.WebDialerUploadHistory)
                    .HasForeignKey(d => d.WebCallQueueKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_WebDialerUploadHistory_WebCallQueue");
            });

            modelBuilder.Entity<WebDialerUser>(entity =>
            {
                entity.HasKey(e => e.WebDialerUserKey)
                    .HasName("PK_WEB_DIALER_USER");

                entity.HasIndex(e => e.DialerUserId)
                    .HasName("UN_WebDialerUser_DIALER_USER_ID")
                    .IsUnique();

                entity.HasIndex(e => e.Teller)
                    .HasName("IX_WebdialerUser_TELLER");

                entity.Property(e => e.WebDialerUserKey)
                    .HasColumnName("WEB_DIALER_USER_KEY")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DialerUserId)
                    .IsRequired()
                    .HasColumnName("DIALER_USER_ID")
                    .HasColumnType("varchar(128)");

                entity.Property(e => e.IsActive).HasColumnName("IS_ACTIVE");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.WebDialerUserKeyNavigation)
                    .WithOne(p => p.InverseWebDialerUserKeyNavigation)
                    .HasForeignKey<WebDialerUser>(d => d.WebDialerUserKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_WEB_DIALER_USER_WEB_DIALER_USER");
            });

            modelBuilder.Entity<WebEmailNotes>(entity =>
            {
                entity.HasKey(e => e.WebEmailNotesKey)
                    .HasName("PK__WebEmailNotes");

                entity.Property(e => e.WebEmailNotesKey).HasColumnName("WEB_EMAIL_NOTES_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Notes)
                    .HasColumnName("NOTES")
                    .HasColumnType("varchar(4000)");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.WebEmailUniqueId)
                    .IsRequired()
                    .HasColumnName("WEB_EMAIL_UNIQUE_ID")
                    .HasColumnType("varchar(50)");
            });

            modelBuilder.Entity<WebErrorLog>(entity =>
            {
                entity.HasKey(e => e.WebErrorLogKey)
                    .HasName("PK_WebErrorLog");

                entity.HasIndex(e => e.ApplicationKey)
                    .HasName("IX_WebErrorLog_APPLICATION_KEY");

                entity.HasIndex(e => e.CustomerKey)
                    .HasName("IX_WebErrorLog_CUSTOMER_KEY");

                entity.HasIndex(e => e.VisitorKey)
                    .HasName("IX_WebErrorLog_VISITOR_KEY");

                entity.Property(e => e.WebErrorLogKey).HasColumnName("WEB_ERROR_LOG_KEY");

                entity.Property(e => e.ApplicationKey).HasColumnName("APPLICATION_KEY");

                entity.Property(e => e.CurrentPage)
                    .IsRequired()
                    .HasColumnName("CURRENT_PAGE")
                    .HasColumnType("varchar(500)");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.ErrorMsg)
                    .HasColumnName("ERROR_MSG")
                    .HasColumnType("varchar(max)");

                entity.Property(e => e.ExceptionType)
                    .IsRequired()
                    .HasColumnName("EXCEPTION_TYPE")
                    .HasColumnType("varchar(500)");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.VisitorKey).HasColumnName("VISITOR_KEY");

                entity.HasOne(d => d.ApplicationKeyNavigation)
                    .WithMany(p => p.WebErrorLog)
                    .HasForeignKey(d => d.ApplicationKey)
                    .HasConstraintName("FK_WebErrorLog_LoanApplication");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.WebErrorLog)
                    .HasForeignKey(d => d.CustomerKey)
                    .HasConstraintName("FK_WebErrorLog_Customer");

                entity.HasOne(d => d.LoanKeyNavigation)
                    .WithMany(p => p.WebErrorLog)
                    .HasForeignKey(d => d.LoanKey)
                    .HasConstraintName("FK_WebErrorLog_Loan");

                entity.HasOne(d => d.VisitorKeyNavigation)
                    .WithMany(p => p.WebErrorLog)
                    .HasForeignKey(d => d.VisitorKey)
                    .HasConstraintName("FK_WebErrorLog_Visitor");
            });

            modelBuilder.Entity<WebImage>(entity =>
            {
                entity.HasKey(e => e.WebImageKey)
                    .HasName("PK_WebImage");

                entity.HasIndex(e => e.LoanApplicationKey)
                    .HasName("IX_WebImage_LOAN_APPLICATION_KEY");

                entity.Property(e => e.WebImageKey).HasColumnName("WEB_IMAGE_KEY");

                entity.Property(e => e.Data)
                    .IsRequired()
                    .HasColumnName("DATA");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.LoanApplicationKey).HasColumnName("LOAN_APPLICATION_KEY");

                entity.Property(e => e.SourceHtml)
                    .IsRequired()
                    .HasColumnName("SOURCE_HTML")
                    .HasColumnType("varchar(max)");

                entity.Property(e => e.SourceUrl)
                    .IsRequired()
                    .HasColumnName("SOURCE_URL")
                    .HasColumnType("varchar(2085)");

                entity.HasOne(d => d.LoanApplicationKeyNavigation)
                    .WithMany(p => p.WebImage)
                    .HasForeignKey(d => d.LoanApplicationKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_WebImage_LOAN_APPLICATION_KEY");
            });

            modelBuilder.Entity<WebLead>(entity =>
            {
                entity.HasKey(e => e.WebLeadKey)
                    .HasName("PK__WebLead__392BE415");

                entity.HasIndex(e => e.CustomerKey)
                    .HasName("IX_WebLead_Customer_Key");

                entity.HasIndex(e => e.LoanKey)
                    .HasName("IX_WebLead_Loan_Key");

                entity.HasIndex(e => e.WebLeadGenKey)
                    .HasName("IX_WebLead_WEB_LEAD_GEN_KEY");

                entity.HasIndex(e => new { e.DateEntered, e.LoanApplicationKey })
                    .HasName("IX_WebLead_LOAN_APPLICATION_KEY");

                entity.Property(e => e.WebLeadKey).HasColumnName("Web_Lead_Key");

                entity.Property(e => e.CustomerKey).HasColumnName("Customer_Key");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("Date_Entered")
                    .HasColumnType("datetime");

                entity.Property(e => e.IsStoreLead).HasColumnName("Is_Store_Lead");

                entity.Property(e => e.LoanApplicationKey).HasColumnName("Loan_Application_Key");

                entity.Property(e => e.LoanKey).HasColumnName("Loan_Key");

                entity.Property(e => e.MinPrice).HasColumnType("numeric");

                entity.Property(e => e.Price).HasColumnType("numeric");

                entity.Property(e => e.SubId).HasColumnName("SubID");

                entity.Property(e => e.WebLeadGenKey).HasColumnName("Web_Lead_Gen_Key");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.WebLead)
                    .HasForeignKey(d => d.CustomerKey)
                    .HasConstraintName("FK_WebLead_Customer");

                entity.HasOne(d => d.LoanKeyNavigation)
                    .WithMany(p => p.WebLead)
                    .HasForeignKey(d => d.LoanKey)
                    .HasConstraintName("FK_WebLead_Loan");

                entity.HasOne(d => d.WebLeadGenKeyNavigation)
                    .WithMany(p => p.WebLead)
                    .HasForeignKey(d => d.WebLeadGenKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_WebLead_WebLeadGen");
            });

            modelBuilder.Entity<WebLeadBuyers>(entity =>
            {
                entity.HasKey(e => e.LeadBuyerKey)
                    .HasName("PK_WebLeadBuyers");

                entity.Property(e => e.LeadBuyerKey).HasColumnName("lead_buyer_key");

                entity.Property(e => e.BuyerName)
                    .HasColumnName("buyer_name")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.ExternalBuyerId).HasColumnName("external_buyer_id");

                entity.Property(e => e.ParentBuyer)
                    .HasColumnName("parent_buyer")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.TierAmt).HasColumnName("tier_amt");
            });

            modelBuilder.Entity<WebLeadGen>(entity =>
            {
                entity.HasKey(e => e.WebLeadGenKey)
                    .HasName("PK__WebLeadG__92EA53D04B336368");

                entity.Property(e => e.WebLeadGenKey).HasColumnName("Web_Lead_Gen_Key");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("Date_Entered")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateUpdated)
                    .HasColumnName("Date_Updated")
                    .HasColumnType("datetime");

                entity.Property(e => e.IsActive).HasColumnName("IS_ACTIVE");

                entity.Property(e => e.LeadPostDays).HasColumnName("Lead_Post_Days");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("varchar(512)");

                entity.Property(e => e.ScoringModel).HasColumnType("varchar(50)");

                entity.Property(e => e.WebsiteUrl).HasColumnType("varchar(512)");
            });

            modelBuilder.Entity<WebLeadGenAddress>(entity =>
            {
                entity.HasKey(e => e.WebLeadGenAddressKey)
                    .HasName("PK_WebLeadGenAddress");

                entity.HasIndex(e => e.WebLeadGenKey)
                    .HasName("IX_WebLeadGenAddress_WebLeadGen");

                entity.Property(e => e.WebLeadGenAddressKey).HasColumnName("WEB_LEAD_GEN_ADDRESS_KEY");

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasColumnName("ADDRESS")
                    .HasColumnType("varchar(150)");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EmailAddress)
                    .IsRequired()
                    .HasColumnName("EMAIL_ADDRESS")
                    .HasColumnType("varchar(200)");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.FaxNumber)
                    .IsRequired()
                    .HasColumnName("FAX_NUMBER")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.PhoneNumber)
                    .IsRequired()
                    .HasColumnName("PHONE_NUMBER")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.WebLeadGenKey).HasColumnName("WEB_LEAD_GEN_KEY");

                entity.Property(e => e.Zipcode)
                    .IsRequired()
                    .HasColumnName("ZIPCODE")
                    .HasColumnType("varchar(10)");

                entity.HasOne(d => d.WebLeadGenKeyNavigation)
                    .WithMany(p => p.WebLeadGenAddress)
                    .HasForeignKey(d => d.WebLeadGenKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_WebLeadGenAddress_WebLeadGen");
            });

            modelBuilder.Entity<WebLeadGenFields>(entity =>
            {
                entity.HasKey(e => e.WebLeadGenFieldsKey)
                    .HasName("PK_WebLeadGenFields");

                entity.Property(e => e.WebLeadGenFieldsKey).HasColumnName("WEB_LEAD_GEN_FIELDS_KEY");

                entity.Property(e => e.Name).HasColumnType("varchar(50)");

                entity.Property(e => e.WebLeadGenKey).HasColumnName("Web_Lead_Gen_Key");

                entity.HasOne(d => d.WebLeadGenKeyNavigation)
                    .WithMany(p => p.WebLeadGenFields)
                    .HasForeignKey(d => d.WebLeadGenKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_WebLeadGenFields_WebLeadGen");
            });

            modelBuilder.Entity<WebLeadGenStatistics>(entity =>
            {
                entity.HasKey(e => e.WebLeadGenStatisticsKey)
                    .HasName("PK_WebLeadGenStatistics");

                entity.Property(e => e.WebLeadGenStatisticsKey).HasColumnName("WEB_LEAD_GEN_STATISTICS_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("Date_Entered")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.NumApproved).HasColumnName("Num_Approved");

                entity.Property(e => e.NumLoans).HasColumnName("Num_Loans");

                entity.Property(e => e.WebLeadGenKey).HasColumnName("Web_Lead_Gen_Key");

                entity.HasOne(d => d.WebLeadGenKeyNavigation)
                    .WithMany(p => p.WebLeadGenStatistics)
                    .HasForeignKey(d => d.WebLeadGenKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_WebLeadGenStatistics_WebLeadGen");
            });

            modelBuilder.Entity<WebLeadGenTiers>(entity =>
            {
                entity.HasKey(e => e.WebLeadGenTiersKey)
                    .HasName("PK_WebLeadGenTiers");

                entity.Property(e => e.WebLeadGenTiersKey).HasColumnName("WEB_LEAD_GEN_TIERS_KEY");

                entity.Property(e => e.Price).HasColumnType("numeric");

                entity.Property(e => e.WebLeadGenKey).HasColumnName("Web_Lead_Gen_Key");

                entity.HasOne(d => d.WebLeadGenKeyNavigation)
                    .WithMany(p => p.WebLeadGenTiers)
                    .HasForeignKey(d => d.WebLeadGenKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_WebLeadGenTiers_WebLeadGen");
            });

            modelBuilder.Entity<WebLeadGenTranslations>(entity =>
            {
                entity.HasKey(e => e.WebLeadGenTranslationsKey)
                    .HasName("PK_WebLeadGenTranslations");

                entity.Property(e => e.WebLeadGenTranslationsKey).HasColumnName("WEB_LEAD_GEN_TRANSLATIONS_KEY");

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.WebLeadGenKey).HasColumnName("Web_Lead_Gen_Key");

                entity.HasOne(d => d.WebLeadGenKeyNavigation)
                    .WithMany(p => p.WebLeadGenTranslations)
                    .HasForeignKey(d => d.WebLeadGenKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_WebLeadGenTranslations_WebLeadGen");
            });

            modelBuilder.Entity<WebLeadPostData>(entity =>
            {
                entity.HasKey(e => e.WebLeadPostedDataKey)
                    .HasName("PK_WebLeadPostData");

                entity.HasIndex(e => new { e.Result, e.DateEntered, e.Price, e.WebLeadKey })
                    .HasName("IX_WebLeadPostData_WEB_LEAD_KEY");

                entity.Property(e => e.WebLeadPostedDataKey).HasColumnName("Web_Lead_Posted_Data_Key");

                entity.Property(e => e.AppServerName)
                    .HasColumnName("APP_SERVER_NAME")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("Date_Entered")
                    .HasColumnType("datetime");

                entity.Property(e => e.Error).HasColumnType("varchar(max)");

                entity.Property(e => e.FormData)
                    .IsRequired()
                    .HasColumnName("Form_Data")
                    .HasColumnType("varchar(max)");

                entity.Property(e => e.Info).HasColumnType("varchar(max)");

                entity.Property(e => e.Price).HasColumnType("numeric");

                entity.Property(e => e.ResponseData)
                    .HasColumnName("Response_Data")
                    .HasColumnType("varchar(max)");

                entity.Property(e => e.Result).HasColumnType("varchar(50)");

                entity.Property(e => e.ScoringTime).HasColumnName("SCORING_TIME");

                entity.Property(e => e.Url).HasColumnType("varchar(max)");

                entity.Property(e => e.WebLeadKey).HasColumnName("Web_Lead_Key");
            });

            modelBuilder.Entity<WebLeadSale>(entity =>
            {
                entity.HasKey(e => e.WebleadsaleKey)
                    .HasName("PK_WEBLEADSALE");

                entity.Property(e => e.WebleadsaleKey).HasColumnName("WEBLEADSALE_KEY");

                entity.Property(e => e.BuyerId).HasColumnName("BUYER_ID");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DeliveryMsg)
                    .IsRequired()
                    .HasColumnName("DELIVERY_MSG")
                    .HasColumnType("varchar(255)");

                entity.Property(e => e.DeliveryUrl)
                    .IsRequired()
                    .HasColumnName("DELIVERY_URL")
                    .HasColumnType("varchar(1000)");

                entity.Property(e => e.Error)
                    .IsRequired()
                    .HasColumnName("ERROR")
                    .HasColumnType("varchar(1000)");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnName("LAST_UPDATED_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.LeadId).HasColumnName("LEAD_ID");

                entity.Property(e => e.LoanApplicationKey).HasColumnName("LOAN_APPLICATION_KEY");

                entity.Property(e => e.Price)
                    .HasColumnName("PRICE")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Status).HasColumnName("STATUS");
            });

            modelBuilder.Entity<WebLoanCreditFraud>(entity =>
            {
                entity.HasKey(e => e.WebLoanCreditFraudKey)
                    .HasName("PK_WebLoanCreditFraud");

                entity.HasIndex(e => e.LoanKey)
                    .HasName("IX_WebLoanCreditFraud_LOAN_KEY")
                    .IsUnique();

                entity.HasIndex(e => new { e.CustomerKey, e.TransDetailKey, e.Location, e.LoanKey, e.IsProcessed })
                    .HasName("IX_TEST");

                entity.Property(e => e.WebLoanCreditFraudKey).HasColumnName("WEB_LOAN_CREDIT_FRAUD_KEY");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.FraudType)
                    .IsRequired()
                    .HasColumnName("FRAUD_TYPE")
                    .HasColumnType("varchar(5000)");

                entity.Property(e => e.IsProcessed).HasColumnName("IS_PROCESSED");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");

                entity.HasOne(d => d.CustomerKeyNavigation)
                    .WithMany(p => p.WebLoanCreditFraud)
                    .HasForeignKey(d => d.CustomerKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_WebLoanCreditFraud_CUSTOMER_KEY");

                entity.HasOne(d => d.LoanKeyNavigation)
                    .WithOne(p => p.WebLoanCreditFraud)
                    .HasForeignKey<WebLoanCreditFraud>(d => d.LoanKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_WebLoanCreditFraud_LOAN_KEY");

                entity.HasOne(d => d.LocationNavigation)
                    .WithMany(p => p.WebLoanCreditFraud)
                    .HasForeignKey(d => d.Location)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_WebLoanCreditFraud_LOCATION");

                entity.HasOne(d => d.TransDetailKeyNavigation)
                    .WithMany(p => p.WebLoanCreditFraud)
                    .HasForeignKey(d => d.TransDetailKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_WebLoanCreditFraud_TRAINS_DETAIL_KEY");
            });

            modelBuilder.Entity<WebPixelVendor>(entity =>
            {
                entity.HasKey(e => e.WpvKey)
                    .HasName("PK_WebPixelVendor");

                entity.Property(e => e.WpvKey).HasColumnName("WPV_Key");

                entity.Property(e => e.AlphaFailScore)
                    .IsRequired()
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.AlphaPassOnUnknown).HasDefaultValueSql("1");

                entity.Property(e => e.AlphaPassScore)
                    .IsRequired()
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.AlphaWarnScore)
                    .IsRequired()
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.ClassName)
                    .IsRequired()
                    .HasColumnType("varchar(50)")
                    .HasDefaultValueSql("''");

                entity.Property(e => e.Enabled).HasDefaultValueSql("1");

                entity.Property(e => e.NumericFailScore)
                    .IsRequired()
                    .HasColumnType("varchar(3)");

                entity.Property(e => e.NumericPassScore)
                    .IsRequired()
                    .HasColumnType("varchar(3)");

                entity.Property(e => e.NumericWarnScore)
                    .IsRequired()
                    .HasColumnType("varchar(3)");

                entity.Property(e => e.Proxy)
                    .HasColumnName("PROXY")
                    .HasColumnType("varchar(200)");

                entity.Property(e => e.UseNumericScore).HasDefaultValueSql("1");

                entity.Property(e => e.VendorName)
                    .IsRequired()
                    .HasColumnType("varchar(50)");
            });

            modelBuilder.Entity<WebPixelVendorData>(entity =>
            {
                entity.HasKey(e => e.WpvdKey)
                    .HasName("PK_WebPixelVendorData");

                entity.HasIndex(e => e.DeviceAlias)
                    .HasName("IX_WebPixelVendorData_DEVICE_ALIAS");

                entity.HasIndex(e => e.LoanApplicationKey)
                    .HasName("IX_WebPixelVendorData_LOAN_APPLICATION_KEY");

                entity.Property(e => e.WpvdKey).HasColumnName("WPVD_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.DeviceAlias)
                    .IsRequired()
                    .HasColumnName("DEVICE_ALIAS")
                    .HasColumnType("varchar(500)")
                    .HasDefaultValueSql("''");

                entity.Property(e => e.IpAddress)
                    .IsRequired()
                    .HasColumnName("IP_Address")
                    .HasColumnType("varchar(15)");

                entity.Property(e => e.LoanApplicationKey).HasColumnName("LOAN_APPLICATION_KEY");

                entity.Property(e => e.MsforResponse).HasColumnName("MSForResponse");

                entity.Property(e => e.PassWarnFail)
                    .IsRequired()
                    .HasColumnType("varchar(1)");

                entity.Property(e => e.RawResponse).HasColumnType("xml");

                entity.Property(e => e.VendorResponseMessage).HasColumnType("varchar(250)");

                entity.HasOne(d => d.LoanApplicationKeyNavigation)
                    .WithMany(p => p.WebPixelVendorData)
                    .HasForeignKey(d => d.LoanApplicationKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_WebPixelVendorData_LoanApplication");

                entity.HasOne(d => d.ScoringVendorNavigation)
                    .WithMany(p => p.WebPixelVendorData)
                    .HasForeignKey(d => d.ScoringVendor)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_WebPixelVendorData_WebPixelVendor");
            });

            modelBuilder.Entity<WebPixelVendorDetail>(entity =>
            {
                entity.HasKey(e => e.WebPixelVendorDetailKey)
                    .HasName("pk_WebPixelVendorDetail");

                entity.Property(e => e.WebPixelVendorDetailKey).HasColumnName("WEB_PIXEL_VENDOR_DETAIL_KEY");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.IsEnabled).HasColumnName("IS_ENABLED");

                entity.Property(e => e.LicenseKey)
                    .IsRequired()
                    .HasColumnName("LICENSE_KEY")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.ProductionPassword)
                    .IsRequired()
                    .HasColumnName("PRODUCTION_PASSWORD")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.ProductionUrl)
                    .IsRequired()
                    .HasColumnName("PRODUCTION_URL")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.ProductionUserId)
                    .IsRequired()
                    .HasColumnName("PRODUCTION_USER_ID")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.RuleSetName)
                    .IsRequired()
                    .HasColumnName("RULE_SET_NAME")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.TestPassword)
                    .HasColumnName("TEST_PASSWORD")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.TestUrl)
                    .HasColumnName("TEST_URL")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.TestUserId)
                    .HasColumnName("TEST_USER_ID")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.UserKey)
                    .IsRequired()
                    .HasColumnName("USER_KEY")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.WebPixelVendorKey).HasColumnName("WEB_PIXEL_VENDOR_KEY");

                entity.HasOne(d => d.WebPixelVendorKeyNavigation)
                    .WithMany(p => p.WebPixelVendorDetail)
                    .HasForeignKey(d => d.WebPixelVendorKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_WebPixelVendorDetail_WebPixelVendor");
            });

            modelBuilder.Entity<WebReferralMethod>(entity =>
            {
                entity.HasKey(e => e.WebReferralMethodKey)
                    .HasName("PK_WEBREFERRALMETHOD");

                entity.Property(e => e.WebReferralMethodKey)
                    .HasColumnName("WEB_REFERRAL_METHOD_KEY")
                    .ValueGeneratedNever();

                entity.Property(e => e.IsActive).HasColumnName("IS_ACTIVE");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");
            });

            modelBuilder.Entity<WebRemoteControl>(entity =>
            {
                entity.HasKey(e => e.WebRemoteControlKey)
                    .HasName("PK_WebRemoteControl");

                entity.Property(e => e.WebRemoteControlKey).HasColumnName("WEB_REMOTE_CONTROL_KEY");

                entity.Property(e => e.CustomerUrl)
                    .IsRequired()
                    .HasColumnName("CUSTOMER_URL")
                    .HasColumnType("varchar(512)");

                entity.Property(e => e.DateEnded)
                    .HasColumnName("DATE_ENDED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.FirstName)
                    .HasColumnName("First_Name")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.GoToAssistSessionId)
                    .HasColumnName("GoToAssist_Session_ID")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.LastName)
                    .HasColumnName("Last_Name")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.SessionGuid)
                    .IsRequired()
                    .HasColumnName("SESSION_GUID")
                    .HasColumnType("char(36)");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.TellerEmail)
                    .IsRequired()
                    .HasColumnName("TELLER_EMAIL")
                    .HasColumnType("varchar(60)");
            });

            modelBuilder.Entity<WebReportByApp>(entity =>
            {
                entity.HasKey(e => e.WebReportByAppKey)
                    .HasName("PK_WEBREPORTBYAPP");

                entity.Property(e => e.WebReportByAppKey).HasColumnName("Web_Report_By_App_Key");

                entity.Property(e => e.ApprovedAmt)
                    .HasColumnName("approved_amt")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CustomerKey)
                    .HasColumnName("customer_key")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.DateReported)
                    .HasColumnName("date_reported")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.DefState)
                    .HasColumnName("def_state")
                    .HasColumnType("varchar(2)");

                entity.Property(e => e.FeeAmt)
                    .HasColumnName("fee_amt")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.IsAppApproved).HasColumnName("is_app_approved");

                entity.Property(e => e.IsAppComplete).HasColumnName("is_app_complete");

                entity.Property(e => e.IsAppForceApproved).HasColumnName("is_app_force_approved");

                entity.Property(e => e.IsNewCustomer).HasColumnName("is_new_customer");

                entity.Property(e => e.LoanApplicationKey).HasColumnName("loan_application_key");

                entity.Property(e => e.LoanKey)
                    .HasColumnName("loan_key")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Location)
                    .HasColumnName("location")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Msa)
                    .HasColumnName("msa")
                    .HasColumnType("varchar(4)");

                entity.Property(e => e.NetIncome)
                    .HasColumnName("net_income")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PrincAmt)
                    .HasColumnName("princ_amt")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Source)
                    .HasColumnName("source")
                    .HasColumnType("varchar(500)");

                entity.Property(e => e.SourceAppDescription)
                    .HasColumnName("source_app_description")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.WebReferralMethod)
                    .HasColumnName("web_referral_method")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Zipcode)
                    .HasColumnName("zipcode")
                    .HasColumnType("varchar(5)");
            });

            modelBuilder.Entity<WebReportByLoan>(entity =>
            {
                entity.HasKey(e => e.WebReportByLoanKey)
                    .HasName("PK_WEBREPORTBYLOAN");

                entity.Property(e => e.WebReportByLoanKey).HasColumnName("web_report_by_loan_key");

                entity.Property(e => e.AdjustedDueDate)
                    .HasColumnName("adjusted_due_date")
                    .HasColumnType("datetime");

                entity.Property(e => e.CashAmt)
                    .HasColumnName("cash_amt")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CustomerKey).HasColumnName("customer_key");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("date_entered")
                    .HasColumnType("datetime");

                entity.Property(e => e.DefState)
                    .HasColumnName("def_state")
                    .HasColumnType("varchar(2)");

                entity.Property(e => e.Dob)
                    .HasColumnName("dob")
                    .HasColumnType("datetime");

                entity.Property(e => e.FeeAmt)
                    .HasColumnName("fee_amt")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Gender)
                    .HasColumnName("gender")
                    .HasColumnType("char(1)");

                entity.Property(e => e.IsApprovedByScoring).HasColumnName("is_approved_by_scoring");

                entity.Property(e => e.IsCustomerNew).HasColumnName("is_customer_new");

                entity.Property(e => e.IsFirstInternetLoan).HasColumnName("is_first_internet_loan");

                entity.Property(e => e.IsLoanDefaulted).HasColumnName("is_loan_defaulted");

                entity.Property(e => e.IsLoanOpen).HasColumnName("is_loan_open");

                entity.Property(e => e.IsLoanRollover).HasColumnName("is_loan_rollover");

                entity.Property(e => e.IsPaidInFull).HasColumnName("is_paid_in_full");

                entity.Property(e => e.LoanKey).HasColumnName("loan_key");

                entity.Property(e => e.Location).HasColumnName("location");

                entity.Property(e => e.Msa)
                    .HasColumnName("msa")
                    .HasColumnType("varchar(4)");

                entity.Property(e => e.NetIncome)
                    .HasColumnName("net_income")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.PrincAmt)
                    .HasColumnName("princ_amt")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Source)
                    .HasColumnName("source")
                    .HasColumnType("varchar(500)");
            });

            modelBuilder.Entity<WebReviewTemplate>(entity =>
            {
                entity.HasKey(e => e.WebReviewTemplateKey)
                    .HasName("PK_WebReviewTemplate");

                entity.Property(e => e.WebReviewTemplateKey).HasColumnName("WEB_REVIEW_TEMPLATE_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsActive).HasColumnName("IS_ACTIVE");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.Template)
                    .IsRequired()
                    .HasColumnName("TEMPLATE")
                    .HasColumnType("varchar(max)");
            });

            modelBuilder.Entity<WebSiteEvent>(entity =>
            {
                entity.HasKey(e => e.WebSiteEventKey)
                    .HasName("PK_WebSiteEvent");

                entity.Property(e => e.WebSiteEventKey).HasColumnName("WEB_SITE_EVENT_KEY");

                entity.Property(e => e.Comments)
                    .HasColumnName("COMMENTS")
                    .HasColumnType("varchar(2000)");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EventName)
                    .HasColumnName("EVENT_NAME")
                    .HasColumnType("varchar(500)");

                entity.Property(e => e.LoanApplicationKey).HasColumnName("LOAN_APPLICATION_KEY");

                entity.Property(e => e.LoanKey).HasColumnName("LOAN_KEY");

                entity.Property(e => e.VisitorKey).HasColumnName("VISITOR_KEY");
            });

            modelBuilder.Entity<WebVisit>(entity =>
            {
                entity.HasKey(e => e.WebVisitKey)
                    .HasName("PK_WEBVISIT");

                entity.Property(e => e.WebVisitKey).HasColumnName("WEB_VISIT_KEY");

                entity.Property(e => e.Campaign)
                    .HasColumnName("CAMPAIGN")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Channel)
                    .HasColumnName("CHANNEL")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Content)
                    .HasColumnName("CONTENT")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.DateSessionEnd)
                    .HasColumnName("DATE_SESSION_END")
                    .HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.DestinationDomain)
                    .HasColumnName("DESTINATION_DOMAIN")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.DestinationUrl)
                    .HasColumnName("DESTINATION_URL")
                    .HasColumnType("varchar(2083)");

                entity.Property(e => e.IpAddress)
                    .IsRequired()
                    .HasColumnName("IP_ADDRESS")
                    .HasColumnType("varchar(15)");

                entity.Property(e => e.IsSecureUrl).HasColumnName("IS_SECURE_URL");

                entity.Property(e => e.Keywords)
                    .HasColumnName("KEYWORDS")
                    .HasColumnType("varchar(500)");

                entity.Property(e => e.LinkType)
                    .HasColumnName("LINK_TYPE")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.LoanApplicationKey).HasColumnName("LOAN_APPLICATION_KEY");

                entity.Property(e => e.SearchQuery)
                    .HasColumnName("SEARCH_QUERY")
                    .HasColumnType("varchar(500)");

                entity.Property(e => e.SourceDomain)
                    .HasColumnName("SOURCE_DOMAIN")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.SourceUrl)
                    .IsRequired()
                    .HasColumnName("SOURCE_URL")
                    .HasColumnType("varchar(2085)");

                entity.Property(e => e.SubChannel)
                    .HasColumnName("SUB_CHANNEL")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.UserAgent)
                    .HasColumnName("USER_AGENT")
                    .HasColumnType("varchar(2085)");

                entity.Property(e => e.Vendor)
                    .HasColumnName("VENDOR")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.VisitorKey).HasColumnName("VISITOR_KEY");

                entity.HasOne(d => d.LoanApplicationKeyNavigation)
                    .WithMany(p => p.WebVisit)
                    .HasForeignKey(d => d.LoanApplicationKey)
                    .HasConstraintName("FK_Webvisit_LoanApplicaiton");

                entity.HasOne(d => d.VisitorKeyNavigation)
                    .WithMany(p => p.WebVisit)
                    .HasForeignKey(d => d.VisitorKey)
                    .HasConstraintName("FK_Webvisit_Visitor");
            });

            modelBuilder.Entity<WebVisitSource>(entity =>
            {
                entity.HasKey(e => e.SessionGuid)
                    .HasName("PK_WEBVISITSOURCE");

                entity.HasIndex(e => e.LoanApplicationKey)
                    .HasName("IX_WebVisitSource_LOAN_APPLICATION_KEY");

                entity.HasIndex(e => new { e.LoanApplicationKey, e.SessionEnd })
                    .HasName("IX_WebVisitSource_SESSION_END");

                entity.HasIndex(e => new { e.VisitorKey, e.LoanApplicationKey })
                    .HasName("IX_WebVisitSource_VISITOR_KEY_LOAN_APPLICATION_KEY");

                entity.HasIndex(e => new { e.VisitorKey, e.SessionEnd })
                    .HasName("IX_WebVisitSource_VISITOR_KEY_SESSION_END");

                entity.HasIndex(e => new { e.Description, e.SessionEnd, e.SessionGuid })
                    .HasName("IX_WebVisitSource_SESSION_GUID");

                entity.HasIndex(e => new { e.WebVisitSourceKey, e.SearchQuery, e.DestUrl, e.LinkType, e.Description, e.VisitorKey, e.LoanApplicationKey, e.SessionEnd })
                    .HasName("IX_WebVisitSource_VISITOR_KEY_LOAN_APPLICATION_KEY_SESSION_END");

                entity.Property(e => e.SessionGuid)
                    .HasColumnName("SESSION_GUID")
                    .HasColumnType("varchar(38)");

                entity.Property(e => e.Campaign)
                    .HasColumnName("CAMPAIGN")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Channel)
                    .HasColumnName("CHANNEL")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.Content)
                    .HasColumnName("CONTENT")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasColumnName("DESCRIPTION")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.DestDomain)
                    .HasColumnName("DEST_DOMAIN")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.DestUrl)
                    .HasColumnName("DEST_URL")
                    .HasColumnType("varchar(2083)");

                entity.Property(e => e.Domain)
                    .HasColumnName("DOMAIN")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.IpAddress)
                    .IsRequired()
                    .HasColumnName("IP_ADDRESS")
                    .HasColumnType("varchar(15)");

                entity.Property(e => e.IsSecureUrl).HasColumnName("IS_SECURE_URL");

                entity.Property(e => e.KeyWords)
                    .HasColumnName("KEY_WORDS")
                    .HasColumnType("varchar(500)");

                entity.Property(e => e.LinkType)
                    .HasColumnName("LINK_TYPE")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.LoanApplicationKey).HasColumnName("LOAN_APPLICATION_KEY");

                entity.Property(e => e.SearchQuery)
                    .HasColumnName("SEARCH_QUERY")
                    .HasColumnType("varchar(500)");

                entity.Property(e => e.SessionEnd)
                    .HasColumnName("SESSION_END")
                    .HasColumnType("datetime");

                entity.Property(e => e.SourceUrl)
                    .IsRequired()
                    .HasColumnName("SOURCE_URL")
                    .HasColumnType("varchar(2085)");

                entity.Property(e => e.SubChannel)
                    .HasColumnName("SUB_CHANNEL")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.UserAgent)
                    .HasColumnName("USER_AGENT")
                    .HasColumnType("varchar(2085)");

                entity.Property(e => e.Vendor)
                    .HasColumnName("VENDOR")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.VisitorKey).HasColumnName("VISITOR_KEY");

                entity.Property(e => e.WebVisitSourceKey)
                    .HasColumnName("WebVisitSource_Key")
                    .ValueGeneratedOnAdd();

                entity.HasOne(d => d.LoanApplicationKeyNavigation)
                    .WithMany(p => p.WebVisitSource)
                    .HasForeignKey(d => d.LoanApplicationKey)
                    .HasConstraintName("FK_WebVisitSource_LoanApplication");

                entity.HasOne(d => d.VisitorKeyNavigation)
                    .WithMany(p => p.WebVisitSource)
                    .HasForeignKey(d => d.VisitorKey)
                    .HasConstraintName("FK_WebVisitSource_Visitor");
            });

            modelBuilder.Entity<WebVisitSrcXref>(entity =>
            {
                entity.HasKey(e => e.WebVisitSrcXrefKey)
                    .HasName("PK_WebVisitSrcXref");

                entity.HasIndex(e => e.LoanKey)
                    .HasName("IX_WebVisitSrcXref_LOAN_KEY");

                entity.Property(e => e.WebVisitSrcXrefKey).HasColumnName("WebVisitSrcXref_key");

                entity.Property(e => e.CustomerKey).HasColumnName("Customer_Key");

                entity.Property(e => e.LoanApplicationKey).HasColumnName("Loan_Application_Key");

                entity.Property(e => e.LoanKey).HasColumnName("Loan_Key");

                entity.Property(e => e.SourceCreditCategory)
                    .HasColumnName("Source_Credit_Category")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.VisitorKey).HasColumnName("Visitor_Key");

                entity.Property(e => e.WebVisitSessionGuid)
                    .IsRequired()
                    .HasColumnName("WebVisit_Session_Guid")
                    .HasColumnType("varchar(38)");

                entity.Property(e => e.WebVisitSourceKey).HasColumnName("WebVisitSource_Key");
            });

            modelBuilder.Entity<WireTransferFileImport>(entity =>
            {
                entity.HasKey(e => e.WireTransferFileImportKey)
                    .HasName("PK_WireTransferFileImport");

                entity.Property(e => e.WireTransferFileImportKey).HasColumnName("WIRE_TRANSFER_FILE_IMPORT_KEY");

                entity.Property(e => e.ImportDate)
                    .HasColumnName("IMPORT_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ImportProcess)
                    .IsRequired()
                    .HasColumnName("IMPORT_PROCESS")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.RunMasterKey).HasColumnName("RUN_MASTER_KEY");

                entity.Property(e => e.WireTransferFileName)
                    .IsRequired()
                    .HasColumnName("WIRE_TRANSFER_FILE_NAME")
                    .HasColumnType("varchar(100)");
            });

            modelBuilder.Entity<WireTransferMatch>(entity =>
            {
                entity.HasKey(e => e.WireTransferMatchKey)
                    .HasName("PK_WireTransferMatch");

                entity.Property(e => e.WireTransferMatchKey).HasColumnName("WIRE_TRANSFER_MATCH_KEY");

                entity.Property(e => e.BatchName)
                    .IsRequired()
                    .HasColumnName("BATCH_NAME")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.CommissionAmount)
                    .HasColumnName("COMMISSION_AMOUNT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.CustomerKey).HasColumnName("CUSTOMER_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.EnteredBy)
                    .IsRequired()
                    .HasColumnName("ENTERED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.FeeAmount)
                    .HasColumnName("FEE_AMOUNT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.IsMatched).HasColumnName("IS_MATCHED");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.MatchedByBatch).HasColumnName("MATCHED_BY_BATCH");

                entity.Property(e => e.PrincipalAmount)
                    .HasColumnName("PRINCIPAL_AMOUNT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.Receiver).HasColumnName("RECEIVER");

                entity.Property(e => e.ReceiverCity)
                    .IsRequired()
                    .HasColumnName("RECEIVER_CITY")
                    .HasColumnType("varchar(35)");

                entity.Property(e => e.ReceiverCountryCode2Char)
                    .IsRequired()
                    .HasColumnName("RECEIVER_COUNTRY_CODE_2_CHAR")
                    .HasColumnType("char(2)");

                entity.Property(e => e.ReceiverCountryCode3Char)
                    .IsRequired()
                    .HasColumnName("RECEIVER_COUNTRY_CODE_3_CHAR")
                    .HasColumnType("char(3)");

                entity.Property(e => e.ReceiverDob)
                    .IsRequired()
                    .HasColumnName("RECEIVER_DOB")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.ReceiverFirstName)
                    .IsRequired()
                    .HasColumnName("RECEIVER_FIRST_NAME")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.ReceiverFullName)
                    .IsRequired()
                    .HasColumnName("RECEIVER_FULL_NAME")
                    .HasColumnType("varchar(85)");

                entity.Property(e => e.ReceiverIdAuthority)
                    .IsRequired()
                    .HasColumnName("RECEIVER_ID_AUTHORITY")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.ReceiverIdNumber)
                    .IsRequired()
                    .HasColumnName("RECEIVER_ID_NUMBER")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.ReceiverIdType)
                    .IsRequired()
                    .HasColumnName("RECEIVER_ID_TYPE")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.ReceiverLastName)
                    .IsRequired()
                    .HasColumnName("RECEIVER_LAST_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.ReceiverMiddleInitial)
                    .IsRequired()
                    .HasColumnName("RECEIVER_MIDDLE_INITIAL")
                    .HasColumnType("char(1)");

                entity.Property(e => e.ReceiverPhone)
                    .IsRequired()
                    .HasColumnName("RECEIVER_PHONE")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.ReceiverState)
                    .IsRequired()
                    .HasColumnName("RECEIVER_STATE")
                    .HasColumnType("char(2)");

                entity.Property(e => e.ReceiverStreet)
                    .IsRequired()
                    .HasColumnName("RECEIVER_STREET")
                    .HasColumnType("varchar(75)");

                entity.Property(e => e.ReceiverTaxId)
                    .IsRequired()
                    .HasColumnName("RECEIVER_TAX_ID")
                    .HasColumnType("varchar(9)");

                entity.Property(e => e.ReceiverZipCode)
                    .IsRequired()
                    .HasColumnName("RECEIVER_ZIP_CODE")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.RunMasterKey).HasColumnName("RUN_MASTER_KEY");

                entity.Property(e => e.Sender).HasColumnName("SENDER");

                entity.Property(e => e.SenderCity)
                    .IsRequired()
                    .HasColumnName("SENDER_CITY")
                    .HasColumnType("varchar(35)");

                entity.Property(e => e.SenderCountryCode2Char)
                    .IsRequired()
                    .HasColumnName("SENDER_COUNTRY_CODE_2_CHAR")
                    .HasColumnType("char(2)");

                entity.Property(e => e.SenderCountryCode3Char)
                    .IsRequired()
                    .HasColumnName("SENDER_COUNTRY_CODE_3_CHAR")
                    .HasColumnType("char(3)");

                entity.Property(e => e.SenderDob)
                    .IsRequired()
                    .HasColumnName("SENDER_DOB")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.SenderFirstName)
                    .IsRequired()
                    .HasColumnName("SENDER_FIRST_NAME")
                    .HasColumnType("varchar(30)");

                entity.Property(e => e.SenderFullName)
                    .IsRequired()
                    .HasColumnName("SENDER_FULL_NAME")
                    .HasColumnType("varchar(85)");

                entity.Property(e => e.SenderIdAuthority)
                    .IsRequired()
                    .HasColumnName("SENDER_ID_AUTHORITY")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.SenderIdNumber)
                    .IsRequired()
                    .HasColumnName("SENDER_ID_NUMBER")
                    .HasColumnType("varchar(25)");

                entity.Property(e => e.SenderIdType)
                    .IsRequired()
                    .HasColumnName("SENDER_ID_TYPE")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.SenderLastName)
                    .IsRequired()
                    .HasColumnName("SENDER_LAST_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.SenderMiddleInitial)
                    .IsRequired()
                    .HasColumnName("SENDER_MIDDLE_INITIAL")
                    .HasColumnType("char(1)");

                entity.Property(e => e.SenderPhone)
                    .IsRequired()
                    .HasColumnName("SENDER_PHONE")
                    .HasColumnType("varchar(20)");

                entity.Property(e => e.SenderState)
                    .IsRequired()
                    .HasColumnName("SENDER_STATE")
                    .HasColumnType("char(2)");

                entity.Property(e => e.SenderStreet)
                    .IsRequired()
                    .HasColumnName("SENDER_STREET")
                    .HasColumnType("varchar(75)");

                entity.Property(e => e.SenderTaxId)
                    .IsRequired()
                    .HasColumnName("SENDER_TAX_ID")
                    .HasColumnType("varchar(9)");

                entity.Property(e => e.SenderZipCode)
                    .IsRequired()
                    .HasColumnName("SENDER_ZIP_CODE")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.ServiceTransDetailKey).HasColumnName("SERVICE_TRANS_DETAIL_KEY");

                entity.Property(e => e.TotalAmount)
                    .HasColumnName("TOTAL_AMOUNT")
                    .HasColumnType("smallmoney");

                entity.Property(e => e.TransDetailKey).HasColumnName("TRANS_DETAIL_KEY");

                entity.Property(e => e.TransactionDate)
                    .HasColumnName("TRANSACTION_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasColumnName("UPDATED_BY")
                    .HasColumnType("char(3)");

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("UPDATED_DATE")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.WireTransferReceipt)
                    .IsRequired()
                    .HasColumnName("WIRE_TRANSFER_RECEIPT")
                    .HasColumnType("varchar(15)");
            });

            modelBuilder.Entity<WireTransferMatchEdit>(entity =>
            {
                entity.HasKey(e => e.WireTransferMatchEditKey)
                    .HasName("PK_WireTransferMatchEdit");

                entity.Property(e => e.WireTransferMatchEditKey).HasColumnName("WIRE_TRANSFER_MATCH_EDIT_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.FieldName)
                    .IsRequired()
                    .HasColumnName("FIELD_NAME")
                    .HasColumnType("varchar(40)");

                entity.Property(e => e.Location).HasColumnName("LOCATION");

                entity.Property(e => e.NewValue)
                    .HasColumnName("NEW_VALUE")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.OldValue)
                    .HasColumnName("OLD_VALUE")
                    .HasColumnType("varchar(100)");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.WireTransferMatchKey).HasColumnName("WIRE_TRANSFER_MATCH_KEY");

                entity.HasOne(d => d.WireTransferMatchKeyNavigation)
                    .WithMany(p => p.WireTransferMatchEdit)
                    .HasForeignKey(d => d.WireTransferMatchKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_WireTransferMatchEdit_WireTransferMatch");
            });

            modelBuilder.Entity<Wsconfig>(entity =>
            {
                entity.HasKey(e => e.WsConfigKey)
                    .HasName("PK_WSConfig");

                entity.ToTable("WSConfig");

                entity.HasIndex(e => e.ProviderName)
                    .HasName("uc_PROVIDER_NAME")
                    .IsUnique();

                entity.Property(e => e.WsConfigKey).HasColumnName("WS_CONFIG_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IsActive).HasColumnName("IS_ACTIVE");

                entity.Property(e => e.ProviderDescription)
                    .IsRequired()
                    .HasColumnName("PROVIDER_DESCRIPTION")
                    .HasColumnType("varchar(1000)");

                entity.Property(e => e.ProviderName)
                    .IsRequired()
                    .HasColumnName("PROVIDER_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.ProviderVersion)
                    .IsRequired()
                    .HasColumnName("PROVIDER_VERSION")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");
            });

            modelBuilder.Entity<Wsoperation>(entity =>
            {
                entity.HasKey(e => e.WsOperationKey)
                    .HasName("PK_WSOperation");

                entity.ToTable("WSOperation");

                entity.HasIndex(e => new { e.WsConfigKey, e.OperationName })
                    .HasName("IX_WSOperation_WSCONFIGKEY_OPERATIONNAME");

                entity.Property(e => e.WsOperationKey).HasColumnName("WS_OPERATION_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.OperationDescription)
                    .IsRequired()
                    .HasColumnName("OPERATION_DESCRIPTION")
                    .HasColumnType("varchar(1000)");

                entity.Property(e => e.OperationName)
                    .IsRequired()
                    .HasColumnName("OPERATION_NAME")
                    .HasColumnType("varchar(50)");

                entity.Property(e => e.PrepaidCardTransActionKey).HasColumnName("PREPAID_CARD_TRANS_ACTION_KEY");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.WsConfigKey).HasColumnName("WS_CONFIG_KEY");

                entity.HasOne(d => d.PrepaidCardTransActionKeyNavigation)
                    .WithMany(p => p.Wsoperation)
                    .HasForeignKey(d => d.PrepaidCardTransActionKey)
                    .HasConstraintName("FK_WSOperaion_PrepaidCardTransAction");

                entity.HasOne(d => d.WsConfigKeyNavigation)
                    .WithMany(p => p.Wsoperation)
                    .HasForeignKey(d => d.WsConfigKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_WSOperation_WSConfig");
            });

            modelBuilder.Entity<Wsresponse>(entity =>
            {
                entity.HasKey(e => e.WsResponseKey)
                    .HasName("PK_WSResponse");

                entity.ToTable("WSResponse");

                entity.HasIndex(e => new { e.WsConfigKey, e.ResponseCode })
                    .HasName("IX_WSResponse_WSCONFIGKEY_RESPONSECODE");

                entity.Property(e => e.WsResponseKey).HasColumnName("WS_RESPONSE_KEY");

                entity.Property(e => e.DateEntered)
                    .HasColumnName("DATE_ENTERED")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ResponseCode)
                    .HasColumnName("RESPONSE_CODE")
                    .HasColumnType("varchar(14)");

                entity.Property(e => e.ResponseDescription)
                    .IsRequired()
                    .HasColumnName("RESPONSE_DESCRIPTION")
                    .HasColumnType("varchar(1000)");

                entity.Property(e => e.Teller)
                    .IsRequired()
                    .HasColumnName("TELLER")
                    .HasColumnType("char(3)");

                entity.Property(e => e.WsConfigKey).HasColumnName("WS_CONFIG_KEY");

                entity.HasOne(d => d.WsConfigKeyNavigation)
                    .WithMany(p => p.Wsresponse)
                    .HasForeignKey(d => d.WsConfigKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_WSResponse_WSConfig");
            });

            modelBuilder.Entity<ZeroDollarAuth>(entity =>
            {
                entity.HasKey(e => e.CreditCardTransKey)
                    .HasName("PK_ZeroDollarAuth");

                entity.HasIndex(e => e.VisitorKey)
                    .HasName("IX_ZeroDollarAuth_VISITOR_KEY");

                entity.Property(e => e.CreditCardTransKey)
                    .HasColumnName("CREDIT_CARD_TRANS_KEY")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreditcardCoolingOff).HasColumnName("CREDITCARD_COOLING_OFF");

                entity.Property(e => e.IsAcctVerifyOnly).HasColumnName("IS_ACCT_VERIFY_ONLY");

                entity.Property(e => e.VisitorCoolingOff).HasColumnName("VISITOR_COOLING_OFF");

                entity.Property(e => e.VisitorKey).HasColumnName("VISITOR_KEY");

                entity.HasOne(d => d.CreditCardTransKeyNavigation)
                    .WithOne(p => p.ZeroDollarAuth)
                    .HasForeignKey<ZeroDollarAuth>(d => d.CreditCardTransKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_ZeroDollarAuth_CREDIT_CARD_TRANS_KEY");

                entity.HasOne(d => d.VisitorKeyNavigation)
                    .WithMany(p => p.ZeroDollarAuth)
                    .HasForeignKey(d => d.VisitorKey)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_ZeroDollarAuth_VISITOR_KEY");
            });

            modelBuilder.Entity<ZipArea>(entity =>
            {
                entity.HasKey(e => new { e.Zipcode, e.Area })
                    .HasName("PK_ZipArea");

                entity.Property(e => e.Zipcode)
                    .HasColumnName("ZIPCODE")
                    .HasColumnType("varchar(10)");

                entity.Property(e => e.Area)
                    .HasColumnName("AREA")
                    .HasColumnType("char(3)");
            });
        }
    }
}