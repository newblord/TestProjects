namespace EF6Data
{
    using System;
    using System.Data.Entity;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Linq;

    public partial class EF6Model : DbContext
    {
        public EF6Model()
            : base("name=EF6Model")
        {
        }

        public virtual DbSet<C_ErrorLogBase> C_ErrorLogBase { get; set; }
        public virtual DbSet<AccumConfig> AccumConfigs { get; set; }
        public virtual DbSet<ACH_History> ACH_History { get; set; }
        public virtual DbSet<ACH_HistoryCashedCheck> ACH_HistoryCashedCheck { get; set; }
        public virtual DbSet<ACH_Recv> ACH_Recv { get; set; }
        public virtual DbSet<ACH_ReturnCode> ACH_ReturnCode { get; set; }
        public virtual DbSet<ACH_Sent> ACH_Sent { get; set; }
        public virtual DbSet<ACHAck> ACHAcks { get; set; }
        public virtual DbSet<ACHBank> ACHBanks { get; set; }
        public virtual DbSet<ACHBankConfig> ACHBankConfigs { get; set; }
        public virtual DbSet<ACHBankConfigException> ACHBankConfigExceptions { get; set; }
        public virtual DbSet<ACHBatchHeader> ACHBatchHeaders { get; set; }
        public virtual DbSet<ACHDetail> ACHDetails { get; set; }
        public virtual DbSet<ACHDetailAddendum> ACHDetailAddendums { get; set; }
        public virtual DbSet<ACHPending> ACHPendings { get; set; }
        public virtual DbSet<ACHPresentment> ACHPresentments { get; set; }
        public virtual DbSet<ACHPresentmentType> ACHPresentmentTypes { get; set; }
        public virtual DbSet<ACHProcessingQueue> ACHProcessingQueues { get; set; }
        public virtual DbSet<ACHProcessingType> ACHProcessingTypes { get; set; }
        public virtual DbSet<ACHQueue> ACHQueues { get; set; }
        public virtual DbSet<ACHReason> ACHReasons { get; set; }
        public virtual DbSet<ACHSentParent> ACHSentParents { get; set; }
        public virtual DbSet<AdAstraWebInventory> AdAstraWebInventories { get; set; }
        public virtual DbSet<AgentAction> AgentActions { get; set; }
        public virtual DbSet<AgentResult> AgentResults { get; set; }
        public virtual DbSet<AlternateLender> AlternateLenders { get; set; }
        public virtual DbSet<AMLAdditionalParty> AMLAdditionalParties { get; set; }
        public virtual DbSet<AMLFileLog> AMLFileLogs { get; set; }
        public virtual DbSet<AMLForeignAddress> AMLForeignAddresses { get; set; }
        public virtual DbSet<AMLOccupation> AMLOccupations { get; set; }
        public virtual DbSet<AMLThresholdRule> AMLThresholdRules { get; set; }
        public virtual DbSet<AMLThresholdRuleTransXref> AMLThresholdRuleTransXrefs { get; set; }
        public virtual DbSet<ApiApplication> ApiApplications { get; set; }
        public virtual DbSet<AppConfig> AppConfigs { get; set; }
        public virtual DbSet<AppSetting> AppSettings { get; set; }
        public virtual DbSet<AppValue> AppValues { get; set; }
        public virtual DbSet<AreaCode> AreaCodes { get; set; }
        public virtual DbSet<Attorney> Attorneys { get; set; }
        public virtual DbSet<AttorneyLoan> AttorneyLoans { get; set; }
        public virtual DbSet<AttorneyPayment> AttorneyPayments { get; set; }
        public virtual DbSet<AUDDISAdviceReport> AUDDISAdviceReports { get; set; }
        public virtual DbSet<AUDDISReasonCodeMapping> AUDDISReasonCodeMappings { get; set; }
        public virtual DbSet<AutoBankingReport> AutoBankingReports { get; set; }
        public virtual DbSet<AutoReport> AutoReports { get; set; }
        public virtual DbSet<AutoReportEmail> AutoReportEmails { get; set; }
        public virtual DbSet<AutoReportRunSchedule> AutoReportRunSchedules { get; set; }
        public virtual DbSet<AutoReportSchedule> AutoReportSchedules { get; set; }
        public virtual DbSet<AutoReportTab> AutoReportTabs { get; set; }
        public virtual DbSet<BalSheet_TransDetail> BalSheet_TransDetail { get; set; }
        public virtual DbSet<BalSheet2> BalSheet2 { get; set; }
        public virtual DbSet<BalSheetColumns2> BalSheetColumns2 { get; set; }
        public virtual DbSet<Bank_Status> Bank_Status { get; set; }
        public virtual DbSet<BankClassification> BankClassifications { get; set; }
        public virtual DbSet<BankClassificationType> BankClassificationTypes { get; set; }
        public virtual DbSet<BANK> BANKS { get; set; }
        public virtual DbSet<BanksParent> BanksParents { get; set; }
        public virtual DbSet<BillerOCRRegion> BillerOCRRegions { get; set; }
        public virtual DbSet<BillPayBiller> BillPayBillers { get; set; }
        public virtual DbSet<BillPayVendor> BillPayVendors { get; set; }
        public virtual DbSet<BlockedAddress> BlockedAddresses { get; set; }
        public virtual DbSet<BlockMailing> BlockMailings { get; set; }
        public virtual DbSet<BlockReason> BlockReasons { get; set; }
        public virtual DbSet<BusinessLoan> BusinessLoans { get; set; }
        public virtual DbSet<CABLender> CABLenders { get; set; }
        public virtual DbSet<CapsCCTXRef> CapsCCTXRefs { get; set; }
        public virtual DbSet<CapsHold> CapsHolds { get; set; }
        public virtual DbSet<CapsRun> CapsRuns { get; set; }
        public virtual DbSet<CapsRunStatu> CapsRunStatus { get; set; }
        public virtual DbSet<CapsSkipReason> CapsSkipReasons { get; set; }
        public virtual DbSet<CapsUpdate> CapsUpdates { get; set; }
        public virtual DbSet<CardBatchSettle> CardBatchSettles { get; set; }
        public virtual DbSet<CashedCheck> CashedChecks { get; set; }
        public virtual DbSet<CashedCheckImage> CashedCheckImages { get; set; }
        public virtual DbSet<CashedCheckMICR> CashedCheckMICRs { get; set; }
        public virtual DbSet<CashedCheckPayment> CashedCheckPayments { get; set; }
        public virtual DbSet<CashedCheckPaymentRefund> CashedCheckPaymentRefunds { get; set; }
        public virtual DbSet<CashedCheckPaymentRefundXRef> CashedCheckPaymentRefundXRefs { get; set; }
        public virtual DbSet<CashMoneyToCuroXRef> CashMoneyToCuroXRefs { get; set; }
        public virtual DbSet<CC_Status> CC_Status { get; set; }
        public virtual DbSet<CCardResponse> CCardResponses { get; set; }
        public virtual DbSet<CCardRespons> CCardResponses1 { get; set; }
        public virtual DbSet<Certificate> Certificates { get; set; }
        public virtual DbSet<CheckAgain> CheckAgains { get; set; }
        public virtual DbSet<CheckAgainHistory> CheckAgainHistories { get; set; }
        public virtual DbSet<CheckPaymentType> CheckPaymentTypes { get; set; }
        public virtual DbSet<CheckReturn> CheckReturns { get; set; }
        public virtual DbSet<CheckType> CheckTypes { get; set; }
        public virtual DbSet<chk_type> chk_type { get; set; }
        public virtual DbSet<CollBonusDetail> CollBonusDetails { get; set; }
        public virtual DbSet<CollBonusPTP> CollBonusPTPs { get; set; }
        public virtual DbSet<CollBonusTask> CollBonusTasks { get; set; }
        public virtual DbSet<CollectionAction> CollectionActions { get; set; }
        public virtual DbSet<CollectionAgency> CollectionAgencies { get; set; }
        public virtual DbSet<CollectionAgencyPct> CollectionAgencyPcts { get; set; }
        public virtual DbSet<CollectionMovement> CollectionMovements { get; set; }
        public virtual DbSet<CollectionNote> CollectionNotes { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<CompanyACHBank> CompanyACHBanks { get; set; }
        public virtual DbSet<CompanyDetail> CompanyDetails { get; set; }
        public virtual DbSet<CompanyDocumentResource> CompanyDocumentResources { get; set; }
        public virtual DbSet<CompanyExpenseType> CompanyExpenseTypes { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<CourtesyPayout> CourtesyPayouts { get; set; }
        public virtual DbSet<CpiuDetail> CpiuDetails { get; set; }
        public virtual DbSet<CpiuExceptionReport> CpiuExceptionReports { get; set; }
        public virtual DbSet<CpiuMaster> CpiuMasters { get; set; }
        public virtual DbSet<CreditCardAttempt> CreditCardAttempts { get; set; }
        public virtual DbSet<CreditCardBlock> CreditCardBlocks { get; set; }
        public virtual DbSet<CreditCardBrand> CreditCardBrands { get; set; }
        public virtual DbSet<CreditCardResultCode> CreditCardResultCodes { get; set; }
        public virtual DbSet<CreditCardResultCodeType> CreditCardResultCodeTypes { get; set; }
        public virtual DbSet<CreditCard> CreditCards { get; set; }
        public virtual DbSet<CreditCardsEdit> CreditCardsEdits { get; set; }
        public virtual DbSet<CreditCardTran> CreditCardTrans { get; set; }
        public virtual DbSet<CreditCardVendor> CreditCardVendors { get; set; }
        public virtual DbSet<CreditCardXRef> CreditCardXRefs { get; set; }
        public virtual DbSet<CreditRptPrint> CreditRptPrints { get; set; }
        public virtual DbSet<CreditVendor> CreditVendors { get; set; }
        public virtual DbSet<CreditVendorData> CreditVendorDatas { get; set; }
        public virtual DbSet<CuroHelp> CuroHelps { get; set; }
        public virtual DbSet<Currency> Currencies { get; set; }
        public virtual DbSet<CurrencyExchangeConfig> CurrencyExchangeConfigs { get; set; }
        public virtual DbSet<CurrencyExchangeTran> CurrencyExchangeTrans { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<CustomerActivity> CustomerActivities { get; set; }
        public virtual DbSet<CustomerAddress> CustomerAddresses { get; set; }
        public virtual DbSet<CustomerAddressEdit> CustomerAddressEdits { get; set; }
        public virtual DbSet<CustomerAppDate> CustomerAppDates { get; set; }
        public virtual DbSet<CustomerBusiness> CustomerBusinesses { get; set; }
        public virtual DbSet<CustomerCreditRpt> CustomerCreditRpts { get; set; }
        public virtual DbSet<CustomerCreditRptDetail> CustomerCreditRptDetails { get; set; }
        public virtual DbSet<CustomerDocument> CustomerDocuments { get; set; }
        public virtual DbSet<CustomerEarnedCredit> CustomerEarnedCredits { get; set; }
        public virtual DbSet<CustomerEdit> CustomerEdits { get; set; }
        public virtual DbSet<CustomerEmployer> CustomerEmployers { get; set; }
        public virtual DbSet<CustomerEmployerEdit> CustomerEmployerEdits { get; set; }
        public virtual DbSet<CustomerExpense> CustomerExpenses { get; set; }
        public virtual DbSet<CustomerExpenseDetail> CustomerExpenseDetails { get; set; }
        public virtual DbSet<CustomerFeedback> CustomerFeedbacks { get; set; }
        public virtual DbSet<CustomerFeedbackCategory> CustomerFeedbackCategories { get; set; }
        public virtual DbSet<CustomerFeedbackResolution> CustomerFeedbackResolutions { get; set; }
        public virtual DbSet<CustomerFeedbackType> CustomerFeedbackTypes { get; set; }
        public virtual DbSet<CustomerFeedbackTypeCategoryXRef> CustomerFeedbackTypeCategoryXRefs { get; set; }
        public virtual DbSet<CustomerFlash> CustomerFlashes { get; set; }
        public virtual DbSet<CustomerFlashORRebate> CustomerFlashORRebates { get; set; }
        public virtual DbSet<CustomerFlashQuestion> CustomerFlashQuestions { get; set; }
        public virtual DbSet<CustomerFlashResponse> CustomerFlashResponses { get; set; }
        public virtual DbSet<CustomerIdentification> CustomerIdentifications { get; set; }
        public virtual DbSet<CustomerIdentificationEdit> CustomerIdentificationEdits { get; set; }
        public virtual DbSet<CustomerIncome> CustomerIncomes { get; set; }
        public virtual DbSet<CustomerLastCreditReport> CustomerLastCreditReports { get; set; }
        public virtual DbSet<CustomerLead> CustomerLeads { get; set; }
        public virtual DbSet<CustomerLeadAction> CustomerLeadActions { get; set; }
        public virtual DbSet<CustomerLeadActivity> CustomerLeadActivities { get; set; }
        public virtual DbSet<CustomerLeadLocation> CustomerLeadLocations { get; set; }
        public virtual DbSet<CustomerLeadNote> CustomerLeadNotes { get; set; }
        public virtual DbSet<CustomerLeadReason> CustomerLeadReasons { get; set; }
        public virtual DbSet<CustomerLeadStatu> CustomerLeadStatus { get; set; }
        public virtual DbSet<CustomerLeadStatusReason> CustomerLeadStatusReasons { get; set; }
        public virtual DbSet<CustomerMergeHistory> CustomerMergeHistories { get; set; }
        public virtual DbSet<CustomerNote> CustomerNotes { get; set; }
        public virtual DbSet<CustomerPhoneNumber> CustomerPhoneNumbers { get; set; }
        public virtual DbSet<CustomerPhoneNumberEdit> CustomerPhoneNumberEdits { get; set; }
        public virtual DbSet<CustomerResponse> CustomerResponses { get; set; }
        public virtual DbSet<CustomerSDNCert> CustomerSDNCerts { get; set; }
        public virtual DbSet<CustomerSurvey> CustomerSurveys { get; set; }
        public virtual DbSet<dba_indexDefragLog> dba_indexDefragLog { get; set; }
        public virtual DbSet<DCardChargeBackXRef> DCardChargeBackXRefs { get; set; }
        public virtual DbSet<DDI> DDIs { get; set; }
        public virtual DbSet<DDIACHHistory> DDIACHHistories { get; set; }
        public virtual DbSet<DDIEditHistory> DDIEditHistories { get; set; }
        public virtual DbSet<DDISend> DDISends { get; set; }
        public virtual DbSet<DDISendDetail> DDISendDetails { get; set; }
        public virtual DbSet<DDISendQueue> DDISendQueues { get; set; }
        public virtual DbSet<DDIStatu> DDIStatus { get; set; }
        public virtual DbSet<Denomination> Denominations { get; set; }
        public virtual DbSet<DepositBag> DepositBags { get; set; }
        public virtual DbSet<DepositBagDetail> DepositBagDetails { get; set; }
        public virtual DbSet<DepositChk> DepositChks { get; set; }
        public virtual DbSet<DepositChkDetail> DepositChkDetails { get; set; }
        public virtual DbSet<DepositDebitCard> DepositDebitCards { get; set; }
        public virtual DbSet<DepositDebitCardDetail> DepositDebitCardDetails { get; set; }
        public virtual DbSet<DialerJob> DialerJobs { get; set; }
        public virtual DbSet<DialerKey> DialerKeys { get; set; }
        public virtual DbSet<DialerResultCode> DialerResultCodes { get; set; }
        public virtual DbSet<DirtyDataGroup> DirtyDataGroups { get; set; }
        public virtual DbSet<DirtyDataJob> DirtyDataJobs { get; set; }
        public virtual DbSet<DirtyDataJobRun> DirtyDataJobRuns { get; set; }
        public virtual DbSet<DiscountLocation> DiscountLocations { get; set; }
        public virtual DbSet<DiscountMaster> DiscountMasters { get; set; }
        public virtual DbSet<DiscountMasterLoanProduct> DiscountMasterLoanProducts { get; set; }
        public virtual DbSet<DiscountSecurity> DiscountSecurities { get; set; }
        public virtual DbSet<DiscountType> DiscountTypes { get; set; }
        public virtual DbSet<DiscountUsed> DiscountUseds { get; set; }
        public virtual DbSet<District> Districts { get; set; }
        public virtual DbSet<DMA> DMAs { get; set; }
        public virtual DbSet<Doc10000Trans> Doc10000Trans { get; set; }
        public virtual DbSet<Doc10000TransDetail> Doc10000TransDetail { get; set; }
        public virtual DbSet<DocImage> DocImages { get; set; }
        public virtual DbSet<DocPrint> DocPrints { get; set; }
        public virtual DbSet<DocTemplate> DocTemplates { get; set; }
        public virtual DbSet<DocumentPrinting> DocumentPrintings { get; set; }
        public virtual DbSet<DocumentResource> DocumentResources { get; set; }
        public virtual DbSet<DocumentSigningStatu> DocumentSigningStatus { get; set; }
        public virtual DbSet<DocuwareCabinet> DocuwareCabinets { get; set; }
        public virtual DbSet<DocuwareLoanLkup> DocuwareLoanLkups { get; set; }
        public virtual DbSet<DocuwareStatu> DocuwareStatus { get; set; }
        public virtual DbSet<DrawerMaster> DrawerMasters { get; set; }
        public virtual DbSet<DrawerMasterParsedCash> DrawerMasterParsedCashes { get; set; }
        public virtual DbSet<DrawerService> DrawerServices { get; set; }
        public virtual DbSet<DrawerX> DrawerXes { get; set; }
        public virtual DbSet<DrawerXService> DrawerXServices { get; set; }
        public virtual DbSet<DrawerZ> DrawerZs { get; set; }
        public virtual DbSet<DrawerZCash> DrawerZCashes { get; set; }
        public virtual DbSet<DrawerZService> DrawerZServices { get; set; }
        public virtual DbSet<DualApprovalMessage> DualApprovalMessages { get; set; }
        public virtual DbSet<EarnedCreditTran> EarnedCreditTrans { get; set; }
        public virtual DbSet<EarnedCreditType> EarnedCreditTypes { get; set; }
        public virtual DbSet<EmailDisposition> EmailDispositions { get; set; }
        public virtual DbSet<EmailTemplate> EmailTemplates { get; set; }
        public virtual DbSet<EndOfDayInventoryDetail> EndOfDayInventoryDetails { get; set; }
        public virtual DbSet<EndOfDayRpt> EndOfDayRpts { get; set; }
        public virtual DbSet<EndOfDayRptDetail> EndOfDayRptDetails { get; set; }
        public virtual DbSet<EOscarBatch> EOscarBatches { get; set; }
        public virtual DbSet<EOscarBatchDetail> EOscarBatchDetails { get; set; }
        public virtual DbSet<EOscarDetailDisputeCode> EOscarDetailDisputeCodes { get; set; }
        public virtual DbSet<EOscarDisputeCode> EOscarDisputeCodes { get; set; }
        public virtual DbSet<ErrorLog> ErrorLogs { get; set; }
        public virtual DbSet<ESignLoan> ESignLoans { get; set; }
        public virtual DbSet<ESignLoanStatu> ESignLoanStatus { get; set; }
        public virtual DbSet<ESignOptIn> ESignOptIns { get; set; }
        public virtual DbSet<ESignOptInDoc> ESignOptInDocs { get; set; }
        public virtual DbSet<ExchangeRate> ExchangeRates { get; set; }
        public virtual DbSet<ExchangeRateDaily> ExchangeRateDailies { get; set; }
        public virtual DbSet<ExcludeFromCapsHistory> ExcludeFromCapsHistories { get; set; }
        public virtual DbSet<ExpenseType> ExpenseTypes { get; set; }
        public virtual DbSet<ExperianCardValidation> ExperianCardValidations { get; set; }
        public virtual DbSet<ExternalAppConfig> ExternalAppConfigs { get; set; }
        public virtual DbSet<ExternalAppMaster> ExternalAppMasters { get; set; }
        public virtual DbSet<ExternalAppRunDate> ExternalAppRunDates { get; set; }
        public virtual DbSet<ExternalApp> ExternalApps { get; set; }
        public virtual DbSet<FcrmAmlCheckTypeXref> FcrmAmlCheckTypeXrefs { get; set; }
        public virtual DbSet<FcrmAmlServiceXRef> FcrmAmlServiceXRefs { get; set; }
        public virtual DbSet<FcrmAmlTransCode> FcrmAmlTransCodes { get; set; }
        public virtual DbSet<FcrmAmlTransCodeXRef> FcrmAmlTransCodeXRefs { get; set; }
        public virtual DbSet<ForceApprovalQuestion> ForceApprovalQuestions { get; set; }
        public virtual DbSet<ForceApprovalValue> ForceApprovalValues { get; set; }
        public virtual DbSet<FormLetter> FormLetters { get; set; }
        public virtual DbSet<FormLetterBatch> FormLetterBatches { get; set; }
        public virtual DbSet<FormLetterBatchBuildLetterProgress> FormLetterBatchBuildLetterProgresses { get; set; }
        public virtual DbSet<FormLetterBatchStatu> FormLetterBatchStatus { get; set; }
        public virtual DbSet<FormLetterBatchValidation> FormLetterBatchValidations { get; set; }
        public virtual DbSet<FormLetterBatchVendorFile> FormLetterBatchVendorFiles { get; set; }
        public virtual DbSet<FormLetterConfig> FormLetterConfigs { get; set; }
        public virtual DbSet<FormLetterEmail> FormLetterEmails { get; set; }
        public virtual DbSet<FormLetterLoanHistoryFile> FormLetterLoanHistoryFiles { get; set; }
        public virtual DbSet<FormLetterLoanHistoryState> FormLetterLoanHistoryStates { get; set; }
        public virtual DbSet<FormLetterOnDemand> FormLetterOnDemands { get; set; }
        public virtual DbSet<FormLetterPrinted> FormLetterPrinteds { get; set; }
        public virtual DbSet<FormLetterProduct> FormLetterProducts { get; set; }
        public virtual DbSet<FormLetterResult> FormLetterResults { get; set; }
        public virtual DbSet<FurtherFinanceExecutionLog> FurtherFinanceExecutionLogs { get; set; }
        public virtual DbSet<FurtherFinanceExecutionLogDetail> FurtherFinanceExecutionLogDetails { get; set; }
        public virtual DbSet<FurtherFinanceJobType> FurtherFinanceJobTypes { get; set; }
        public virtual DbSet<FurtherFinanceOutcome> FurtherFinanceOutcomes { get; set; }
        public virtual DbSet<FurtherFinanceQuery> FurtherFinanceQueries { get; set; }
        public virtual DbSet<FurtherFinanceResult> FurtherFinanceResults { get; set; }
        public virtual DbSet<FurtherFinanceResultDetail> FurtherFinanceResultDetails { get; set; }
        public virtual DbSet<GalileoResponseCode> GalileoResponseCodes { get; set; }
        public virtual DbSet<GiftCard> GiftCards { get; set; }
        public virtual DbSet<GLAcct> GLAccts { get; set; }
        public virtual DbSet<GLAcctGlobal> GLAcctGlobals { get; set; }
        public virtual DbSet<GLAcctGroup> GLAcctGroups { get; set; }
        public virtual DbSet<Global> Globals { get; set; }
        public virtual DbSet<GlobalState> GlobalStates { get; set; }
        public virtual DbSet<GoldConfig> GoldConfigs { get; set; }
        public virtual DbSet<GoldDailyBag> GoldDailyBags { get; set; }
        public virtual DbSet<GoldDailyBagDetail> GoldDailyBagDetails { get; set; }
        public virtual DbSet<GoldItem> GoldItems { get; set; }
        public virtual DbSet<GoldTran> GoldTrans { get; set; }
        public virtual DbSet<GoldTransCustomer> GoldTransCustomers { get; set; }
        public virtual DbSet<GoldTransDetail> GoldTransDetails { get; set; }
        public virtual DbSet<GoldTransfer> GoldTransfers { get; set; }
        public virtual DbSet<GoldTransferDetail> GoldTransferDetails { get; set; }
        public virtual DbSet<GoldTransStoneDetail> GoldTransStoneDetails { get; set; }
        public virtual DbSet<GoodCustomerStudy> GoodCustomerStudies { get; set; }
        public virtual DbSet<IatDialerResult> IatDialerResults { get; set; }
        public virtual DbSet<IdentificationType> IdentificationTypes { get; set; }
        public virtual DbSet<IdentificationTypeAML> IdentificationTypeAMLs { get; set; }
        public virtual DbSet<IdentificationTypeRule> IdentificationTypeRules { get; set; }
        public virtual DbSet<IdentificationTypeRuleXRef> IdentificationTypeRuleXRefs { get; set; }
        public virtual DbSet<IdentificationTypeState> IdentificationTypeStates { get; set; }
        public virtual DbSet<IdentificationTypeVerify> IdentificationTypeVerifies { get; set; }
        public virtual DbSet<IINRange> IINRanges { get; set; }
        public virtual DbSet<ImageCashLetter> ImageCashLetters { get; set; }
        public virtual DbSet<ImageCashLetterBundle> ImageCashLetterBundles { get; set; }
        public virtual DbSet<ImageCashLetterDetail> ImageCashLetterDetails { get; set; }
        public virtual DbSet<IncomeJobType> IncomeJobTypes { get; set; }
        public virtual DbSet<IncomeSource> IncomeSources { get; set; }
        public virtual DbSet<IncomeType> IncomeTypes { get; set; }
        public virtual DbSet<IncomeTypeLocation> IncomeTypeLocations { get; set; }
        public virtual DbSet<IncomeVerificationMessage> IncomeVerificationMessages { get; set; }
        public virtual DbSet<IncomeVerifyMethod> IncomeVerifyMethods { get; set; }
        public virtual DbSet<IncomeVerifyMethodLocation> IncomeVerifyMethodLocations { get; set; }
        public virtual DbSet<InitGLList> InitGLLists { get; set; }
        public virtual DbSet<InsuranceClaim> InsuranceClaims { get; set; }
        public virtual DbSet<InsuranceClaimEdit> InsuranceClaimEdits { get; set; }
        public virtual DbSet<InsuranceClaimStatu> InsuranceClaimStatus { get; set; }
        public virtual DbSet<InsurancePayment> InsurancePayments { get; set; }
        public virtual DbSet<InsurancePaymentBatch> InsurancePaymentBatches { get; set; }
        public virtual DbSet<InsuranceStatu> InsuranceStatus { get; set; }
        public virtual DbSet<InternalProcessEmail> InternalProcessEmails { get; set; }
        public virtual DbSet<InvalidCustomerAddress> InvalidCustomerAddresses { get; set; }
        public virtual DbSet<IPBlock> IPBlocks { get; set; }
        public virtual DbSet<IpToCountry> IpToCountries { get; set; }
        public virtual DbSet<Issuer> Issuers { get; set; }
        public virtual DbSet<IssuerEdit> IssuerEdits { get; set; }
        public virtual DbSet<LegalVerification> LegalVerifications { get; set; }
        public virtual DbSet<Lender> Lenders { get; set; }
        public virtual DbSet<LienHolder> LienHolders { get; set; }
        public virtual DbSet<Loan> Loans { get; set; }
        public virtual DbSet<LoanApplication> LoanApplications { get; set; }
        public virtual DbSet<LoanApplicationAddress> LoanApplicationAddresses { get; set; }
        public virtual DbSet<LoanApplicationAffordSurvey_ToBeDeleted> LoanApplicationAffordSurvey_ToBeDeleted { get; set; }
        public virtual DbSet<LoanApplicationEmployer> LoanApplicationEmployers { get; set; }
        public virtual DbSet<LoanApplicationExpense> LoanApplicationExpenses { get; set; }
        public virtual DbSet<LoanApplicationExpenseDetail> LoanApplicationExpenseDetails { get; set; }
        public virtual DbSet<LoanApplicationIncome> LoanApplicationIncomes { get; set; }
        public virtual DbSet<LoanApplicationProduct> LoanApplicationProducts { get; set; }
        public virtual DbSet<LoanApplicationVehicleInformation> LoanApplicationVehicleInformations { get; set; }
        public virtual DbSet<LoanCCallChange> LoanCCallChanges { get; set; }
        public virtual DbSet<LoanCheck> LoanChecks { get; set; }
        public virtual DbSet<LoanChkAcctChange> LoanChkAcctChanges { get; set; }
        public virtual DbSet<LoanConfigApplyPaymentOrder> LoanConfigApplyPaymentOrders { get; set; }
        public virtual DbSet<LoanCoPledger> LoanCoPledgers { get; set; }
        public virtual DbSet<LoanCreditLimit> LoanCreditLimits { get; set; }
        public virtual DbSet<LoanDepositOrderHistory> LoanDepositOrderHistories { get; set; }
        public virtual DbSet<LoanDepositOrderResetReason> LoanDepositOrderResetReasons { get; set; }
        public virtual DbSet<LoanDoc> LoanDocs { get; set; }
        public virtual DbSet<LoanDocPrinted> LoanDocPrinteds { get; set; }
        public virtual DbSet<LoanDocType> LoanDocTypes { get; set; }
        public virtual DbSet<LoanDocUpload> LoanDocUploads { get; set; }
        public virtual DbSet<LoanDocUsed> LoanDocUseds { get; set; }
        public virtual DbSet<LoanDueDateChange> LoanDueDateChanges { get; set; }
        public virtual DbSet<LoanFunding> LoanFundings { get; set; }
        public virtual DbSet<LoanFundingMethodHistory> LoanFundingMethodHistories { get; set; }
        public virtual DbSet<LoanImport> LoanImports { get; set; }
        public virtual DbSet<LoanImportXRef> LoanImportXRefs { get; set; }
        public virtual DbSet<LoanIncome> LoanIncomes { get; set; }
        public virtual DbSet<LoanNote> LoanNotes { get; set; }
        public virtual DbSet<LoanOverride> LoanOverrides { get; set; }
        public virtual DbSet<LoanPayment> LoanPayments { get; set; }
        public virtual DbSet<LoanPaymentAddToQueue> LoanPaymentAddToQueues { get; set; }
        public virtual DbSet<LoanPaymentCheckPaymentTypeXref> LoanPaymentCheckPaymentTypeXrefs { get; set; }
        public virtual DbSet<LoanPaymentDecreaseAmountOwed> LoanPaymentDecreaseAmountOweds { get; set; }
        public virtual DbSet<LoanPaymentDueDate> LoanPaymentDueDates { get; set; }
        public virtual DbSet<LoanPaymentInsuranceClaimXRef> LoanPaymentInsuranceClaimXRefs { get; set; }
        public virtual DbSet<LoanPaymentLoanCheckXref> LoanPaymentLoanCheckXrefs { get; set; }
        public virtual DbSet<LoanPaymentMPay> LoanPaymentMPays { get; set; }
        public virtual DbSet<LoanPaymentMPayRefund> LoanPaymentMPayRefunds { get; set; }
        public virtual DbSet<LoanPaymentOpenEnd> LoanPaymentOpenEnds { get; set; }
        public virtual DbSet<LoanPaymentOpenEndRefund> LoanPaymentOpenEndRefunds { get; set; }
        public virtual DbSet<LoanPaymentRefund> LoanPaymentRefunds { get; set; }
        public virtual DbSet<LoanPaymentRefundXRef> LoanPaymentRefundXRefs { get; set; }
        public virtual DbSet<LoanPaymentRescind> LoanPaymentRescinds { get; set; }
        public virtual DbSet<LoanPaymentSPay> LoanPaymentSPays { get; set; }
        public virtual DbSet<LoanPaymentSPayRefund> LoanPaymentSPayRefunds { get; set; }
        public virtual DbSet<LoanPaymentSuspendInterest> LoanPaymentSuspendInterests { get; set; }
        public virtual DbSet<LoanPaymentWaiveRIFee> LoanPaymentWaiveRIFees { get; set; }
        public virtual DbSet<LoanProduct> LoanProducts { get; set; }
        public virtual DbSet<LoanProductBlocked> LoanProductBlockeds { get; set; }
        public virtual DbSet<LoanProductConfig> LoanProductConfigs { get; set; }
        public virtual DbSet<LoanProductConfigApprovalRate> LoanProductConfigApprovalRates { get; set; }
        public virtual DbSet<LoanProductConfigEdit> LoanProductConfigEdits { get; set; }
        public virtual DbSet<LoanProductConfigInsuranceRate> LoanProductConfigInsuranceRates { get; set; }
        public virtual DbSet<LoanProductConfigInterestRate> LoanProductConfigInterestRates { get; set; }
        public virtual DbSet<LoanProductConfigLoanFeeRate> LoanProductConfigLoanFeeRates { get; set; }
        public virtual DbSet<LoanProductConfigLoanStat> LoanProductConfigLoanStats { get; set; }
        public virtual DbSet<LoanProductConfigMaxLoanAmtRate> LoanProductConfigMaxLoanAmtRates { get; set; }
        public virtual DbSet<LoanProductConfigOpenEnd> LoanProductConfigOpenEnds { get; set; }
        public virtual DbSet<LoanProductConfigRIRate> LoanProductConfigRIRates { get; set; }
        public virtual DbSet<LoanProductConfigTitle> LoanProductConfigTitles { get; set; }
        public virtual DbSet<LoanProductEnableNewLoan> LoanProductEnableNewLoans { get; set; }
        public virtual DbSet<LoanProductFeature> LoanProductFeatures { get; set; }
        public virtual DbSet<LoanProductFeatureType> LoanProductFeatureTypes { get; set; }
        public virtual DbSet<LoanProductRollover> LoanProductRollovers { get; set; }
        public virtual DbSet<LoanProductTila> LoanProductTilas { get; set; }
        public virtual DbSet<LoanService> LoanServices { get; set; }
        public virtual DbSet<LoanStatusChange> LoanStatusChanges { get; set; }
        public virtual DbSet<LoanWebReviewTemplateXref> LoanWebReviewTemplateXrefs { get; set; }
        public virtual DbSet<LocaleSetting> LocaleSettings { get; set; }
        public virtual DbSet<LocaleTranslator> LocaleTranslators { get; set; }
        public virtual DbSet<LocationConverted> LocationConverteds { get; set; }
        public virtual DbSet<LocationUS_ZipcodesXRef> LocationUS_ZipcodesXRef { get; set; }
        public virtual DbSet<MarketingInvitation> MarketingInvitations { get; set; }
        public virtual DbSet<MarketingInvitationHistory> MarketingInvitationHistories { get; set; }
        public virtual DbSet<Market> Markets { get; set; }
        public virtual DbSet<Message> Messages { get; set; }
        public virtual DbSet<MessageClass> MessageClasses { get; set; }
        public virtual DbSet<MessageClient> MessageClients { get; set; }
        public virtual DbSet<MessageScenario> MessageScenarios { get; set; }
        public virtual DbSet<MetroIIBaseSegment> MetroIIBaseSegments { get; set; }
        public virtual DbSet<MimeType> MimeTypes { get; set; }
        public virtual DbSet<MOStatu> MOStatus { get; set; }
        public virtual DbSet<MOStatusHistory> MOStatusHistories { get; set; }
        public virtual DbSet<MPayAmort> MPayAmorts { get; set; }
        public virtual DbSet<MPayAmortDueDateChange> MPayAmortDueDateChanges { get; set; }
        public virtual DbSet<MPayInterest> MPayInterests { get; set; }
        public virtual DbSet<MPayLoan> MPayLoans { get; set; }
        public virtual DbSet<MPayLoanInSyncAdj> MPayLoanInSyncAdjs { get; set; }
        public virtual DbSet<MPayLoanInSyncAdj_Rows> MPayLoanInSyncAdj_Rows { get; set; }
        public virtual DbSet<MPayPayInFull> MPayPayInFulls { get; set; }
        public virtual DbSet<MPayRecalcInterestAdj> MPayRecalcInterestAdjs { get; set; }
        public virtual DbSet<MPayRecalcLoanPaymentAdj> MPayRecalcLoanPaymentAdjs { get; set; }
        public virtual DbSet<MSA> MSAs { get; set; }
        public virtual DbSet<NetSpendTran> NetSpendTrans { get; set; }
        public virtual DbSet<NobleConfiguration> NobleConfigurations { get; set; }
        public virtual DbSet<NoteType> NoteTypes { get; set; }
        public virtual DbSet<OCRRegion> OCRRegions { get; set; }
        public virtual DbSet<OOWSession> OOWSessions { get; set; }
        public virtual DbSet<OOWSessionAlert> OOWSessionAlerts { get; set; }
        public virtual DbSet<OOWSessionError> OOWSessionErrors { get; set; }
        public virtual DbSet<OOWSessionQuestion> OOWSessionQuestions { get; set; }
        public virtual DbSet<OpenEndInterest> OpenEndInterests { get; set; }
        public virtual DbSet<OpenEndInterestRate> OpenEndInterestRates { get; set; }
        public virtual DbSet<OpenEndLoan> OpenEndLoans { get; set; }
        public virtual DbSet<OpenEndLoanStatement> OpenEndLoanStatements { get; set; }
        public virtual DbSet<OpenEndLoanStatementSnapshot> OpenEndLoanStatementSnapshots { get; set; }
        public virtual DbSet<OpenEndRecalcInterestAdj> OpenEndRecalcInterestAdjs { get; set; }
        public virtual DbSet<OpenEndRecalcLoanPaymentAdj> OpenEndRecalcLoanPaymentAdjs { get; set; }
        public virtual DbSet<OpenEndRecalcStatementAdj> OpenEndRecalcStatementAdjs { get; set; }
        public virtual DbSet<OpenEndRecalcStatementSnapshot> OpenEndRecalcStatementSnapshots { get; set; }
        public virtual DbSet<OptInOut> OptInOuts { get; set; }
        public virtual DbSet<OptInOutEdit> OptInOutEdits { get; set; }
        public virtual DbSet<OptPlusBinProduct> OptPlusBinProducts { get; set; }
        public virtual DbSet<OptPlusBinService> OptPlusBinServices { get; set; }
        public virtual DbSet<OptPlusCardDetail> OptPlusCardDetails { get; set; }
        public virtual DbSet<OptPlusCardRIPayment> OptPlusCardRIPayments { get; set; }
        public virtual DbSet<OptPlusCarrier> OptPlusCarriers { get; set; }
        public virtual DbSet<OptPlusDirectDeposit> OptPlusDirectDeposits { get; set; }
        public virtual DbSet<OptPlusEdit> OptPlusEdits { get; set; }
        public virtual DbSet<OptPlusEmail> OptPlusEmails { get; set; }
        public virtual DbSet<OptPlusEmailLocation> OptPlusEmailLocations { get; set; }
        public virtual DbSet<OptPlusEmployment> OptPlusEmployments { get; set; }
        public virtual DbSet<OptPlusExportInitGL> OptPlusExportInitGLs { get; set; }
        public virtual DbSet<OptPlusGlobal> OptPlusGlobals { get; set; }
        public virtual DbSet<OptPlusMerchant> OptPlusMerchants { get; set; }
        public virtual DbSet<OptPlusProduct> OptPlusProducts { get; set; }
        public virtual DbSet<OptPlusRDFAccountCard> OptPlusRDFAccountCards { get; set; }
        public virtual DbSet<OptPlusRDFAuthorizedTransaction> OptPlusRDFAuthorizedTransactions { get; set; }
        public virtual DbSet<OptPlusRDFCustomerMaster> OptPlusRDFCustomerMasters { get; set; }
        public virtual DbSet<OptPlusRDFLookUp> OptPlusRDFLookUps { get; set; }
        public virtual DbSet<OptPlusRDFODTransition> OptPlusRDFODTransitions { get; set; }
        public virtual DbSet<OptPlusRDFPostedTran> OptPlusRDFPostedTrans { get; set; }
        public virtual DbSet<OverShort> OverShorts { get; set; }
        public virtual DbSet<ParseCash> ParseCashes { get; set; }
        public virtual DbSet<PaydayLoan> PaydayLoans { get; set; }
        public virtual DbSet<PaydayLoanApproval> PaydayLoanApprovals { get; set; }
        public virtual DbSet<PaydayLoanQualification> PaydayLoanQualifications { get; set; }
        public virtual DbSet<PaymentPlan> PaymentPlans { get; set; }
        public virtual DbSet<PAYROLL1> PAYROLL1 { get; set; }
        public virtual DbSet<PayStub> PayStubs { get; set; }
        public virtual DbSet<PersonTitle> PersonTitles { get; set; }
        public virtual DbSet<PhoneSkillsCall> PhoneSkillsCalls { get; set; }
        public virtual DbSet<PhoneSkillsGrade> PhoneSkillsGrades { get; set; }
        public virtual DbSet<PhoneSkillsGrader> PhoneSkillsGraders { get; set; }
        public virtual DbSet<PhoneSkillsReason> PhoneSkillsReasons { get; set; }
        public virtual DbSet<PhoneSkillsSequence> PhoneSkillsSequences { get; set; }
        public virtual DbSet<PrepaidCardBin> PrepaidCardBins { get; set; }
        public virtual DbSet<PrepaidCardBinCompany> PrepaidCardBinCompanies { get; set; }
        public virtual DbSet<PrepaidCardGroup> PrepaidCardGroups { get; set; }
        public virtual DbSet<PrepaidCardStopPayment> PrepaidCardStopPayments { get; set; }
        public virtual DbSet<PrepaidCardStopPaymentEdit> PrepaidCardStopPaymentEdits { get; set; }
        public virtual DbSet<PrepaidCardStopPaymentReason> PrepaidCardStopPaymentReasons { get; set; }
        public virtual DbSet<PrepaidCardTran> PrepaidCardTrans { get; set; }
        public virtual DbSet<PrepaidCardTransAction> PrepaidCardTransActions { get; set; }
        public virtual DbSet<PrepaidFISAccountBalance> PrepaidFISAccountBalances { get; set; }
        public virtual DbSet<PrepaidFISAuthTran> PrepaidFISAuthTrans { get; set; }
        public virtual DbSet<PrepaidFISCustomerMaster> PrepaidFISCustomerMasters { get; set; }
        public virtual DbSet<PrepaidFISPostedTran> PrepaidFISPostedTrans { get; set; }
        public virtual DbSet<PrescreenQuestion> PrescreenQuestions { get; set; }
        public virtual DbSet<PrescreenQuestionState> PrescreenQuestionStates { get; set; }
        public virtual DbSet<PrescreenQuestionType> PrescreenQuestionTypes { get; set; }
        public virtual DbSet<PRICE> PRICES { get; set; }
        public virtual DbSet<ProcessConfig> ProcessConfigs { get; set; }
        public virtual DbSet<ProcessConfigDetail> ProcessConfigDetails { get; set; }
        public virtual DbSet<ProcessConfigDetailHistory> ProcessConfigDetailHistories { get; set; }
        public virtual DbSet<ProcessConfigInstance> ProcessConfigInstances { get; set; }
        public virtual DbSet<ProcessConfigInstanceGroup> ProcessConfigInstanceGroups { get; set; }
        public virtual DbSet<ProcessConfigInstanceTeller> ProcessConfigInstanceTellers { get; set; }
        public virtual DbSet<ProcessSchedule> ProcessSchedules { get; set; }
        public virtual DbSet<ProductOpenLoanMatrix> ProductOpenLoanMatrices { get; set; }
        public virtual DbSet<PromiseToPay> PromiseToPays { get; set; }
        public virtual DbSet<PromiseToPayDetail> PromiseToPayDetails { get; set; }
        public virtual DbSet<PromiseToPayDetailEdit> PromiseToPayDetailEdits { get; set; }
        public virtual DbSet<PromiseToPayDetailTran> PromiseToPayDetailTrans { get; set; }
        public virtual DbSet<PromiseToPayTimeSlotConfig> PromiseToPayTimeSlotConfigs { get; set; }
        public virtual DbSet<PurchaseService> PurchaseServices { get; set; }
        public virtual DbSet<PushNotification> PushNotifications { get; set; }
        public virtual DbSet<RbcEFundBatch> RbcEFundBatches { get; set; }
        public virtual DbSet<RbcEFundBatchDetail> RbcEFundBatchDetails { get; set; }
        public virtual DbSet<RbcEFundBatchSummary> RbcEFundBatchSummaries { get; set; }
        public virtual DbSet<RbcEFundResponseCode> RbcEFundResponseCodes { get; set; }
        public virtual DbSet<RbcEFundSecurity> RbcEFundSecurities { get; set; }
        public virtual DbSet<ReasonForArrear> ReasonForArrears { get; set; }
        public virtual DbSet<Receipt> Receipts { get; set; }
        public virtual DbSet<RedactedWord> RedactedWords { get; set; }
        public virtual DbSet<ReferralMethod> ReferralMethods { get; set; }
        public virtual DbSet<Region> Regions { get; set; }
        public virtual DbSet<REL> RELS { get; set; }
        public virtual DbSet<RemovedReason> RemovedReasons { get; set; }
        public virtual DbSet<RepoCaseHistory> RepoCaseHistories { get; set; }
        public virtual DbSet<ReturnCheckDetail> ReturnCheckDetails { get; set; }
        public virtual DbSet<ReturnCheckFile> ReturnCheckFiles { get; set; }
        public virtual DbSet<ReturnCheckMatch> ReturnCheckMatches { get; set; }
        public virtual DbSet<RIAgingHistory> RIAgingHistories { get; set; }
        public virtual DbSet<RiBalanceHistory> RiBalanceHistories { get; set; }
        public virtual DbSet<RiccAutoRoll> RiccAutoRolls { get; set; }
        public virtual DbSet<RICCConfig> RICCConfigs { get; set; }
        public virtual DbSet<RiccHold> RiccHolds { get; set; }
        public virtual DbSet<RiccPayment> RiccPayments { get; set; }
        public virtual DbSet<RiccUpdate> RiccUpdates { get; set; }
        public virtual DbSet<RIPTPPaymentPlanConfig> RIPTPPaymentPlanConfigs { get; set; }
        public virtual DbSet<RI> RIS { get; set; }
        public virtual DbSet<RISAUDIT> RISAUDITs { get; set; }
        public virtual DbSet<RISREPT> RISREPTs { get; set; }
        public virtual DbSet<RisTask> RisTasks { get; set; }
        public virtual DbSet<RISTYPE> RISTYPEs { get; set; }
        public virtual DbSet<RiUrgentNote> RiUrgentNotes { get; set; }
        public virtual DbSet<RolloverRequest> RolloverRequests { get; set; }
        public virtual DbSet<RolloverRequestDeclineReason> RolloverRequestDeclineReasons { get; set; }
        public virtual DbSet<RolloverRequestStatu> RolloverRequestStatus { get; set; }
        public virtual DbSet<RuleDef> RuleDefs { get; set; }
        public virtual DbSet<RuleDefEdit> RuleDefEdits { get; set; }
        public virtual DbSet<RuleDefSet> RuleDefSets { get; set; }
        public virtual DbSet<RuleDefSetDetail> RuleDefSetDetails { get; set; }
        public virtual DbSet<RuleDefSetDetailEdit> RuleDefSetDetailEdits { get; set; }
        public virtual DbSet<RuleDefType> RuleDefTypes { get; set; }
        public virtual DbSet<ScannedDocument> ScannedDocuments { get; set; }
        public virtual DbSet<ScannedDocumentOverride> ScannedDocumentOverrides { get; set; }
        public virtual DbSet<SDNAdd> SDNAdds { get; set; }
        public virtual DbSet<SDNAlt> SDNAlts { get; set; }
        public virtual DbSet<SDNList> SDNLists { get; set; }
        public virtual DbSet<SDNMain> SDNMains { get; set; }
        public virtual DbSet<SdnMatch> SdnMatches { get; set; }
        public virtual DbSet<SecurityAnswer> SecurityAnswers { get; set; }
        public virtual DbSet<SecurityGroup> SecurityGroups { get; set; }
        public virtual DbSet<SecurityQuestion> SecurityQuestions { get; set; }
        public virtual DbSet<ServiceDetail> ServiceDetails { get; set; }
        public virtual DbSet<ServiceMaster> ServiceMasters { get; set; }
        public virtual DbSet<ServiceSubItem> ServiceSubItems { get; set; }
        public virtual DbSet<ServiceTran> ServiceTrans { get; set; }
        public virtual DbSet<ServiceTransDetail> ServiceTransDetails { get; set; }
        public virtual DbSet<SG_RIGHTS> SG_RIGHTS { get; set; }
        public virtual DbSet<SignatureLoanApproval> SignatureLoanApprovals { get; set; }
        public virtual DbSet<SkipTraceConfig> SkipTraceConfigs { get; set; }
        public virtual DbSet<SkipTraceEvents_NotUsed> SkipTraceEvents_NotUsed { get; set; }
        public virtual DbSet<SkipTraceStep> SkipTraceSteps { get; set; }
        public virtual DbSet<SkipTraceStep_AuditCategory> SkipTraceStep_AuditCategory { get; set; }
        public virtual DbSet<SkipTraceStep_Location> SkipTraceStep_Location { get; set; }
        public virtual DbSet<SkipTraceStep_ProductCode> SkipTraceStep_ProductCode { get; set; }
        public virtual DbSet<SkipTraceThread> SkipTraceThreads { get; set; }
        public virtual DbSet<SkipTraceVendor> SkipTraceVendors { get; set; }
        public virtual DbSet<SMSCommandMapping> SMSCommandMappings { get; set; }
        public virtual DbSet<SMSFailedSend> SMSFailedSends { get; set; }
        public virtual DbSet<SMSInbound> SMSInbounds { get; set; }
        public virtual DbSet<SMSOutbound> SMSOutbounds { get; set; }
        public virtual DbSet<SMSOxygenErrorCode> SMSOxygenErrorCodes { get; set; }
        public virtual DbSet<SMSResponse> SMSResponses { get; set; }
        public virtual DbSet<SMSSender> SMSSenders { get; set; }
        public virtual DbSet<SMSTemplate> SMSTemplates { get; set; }
        public virtual DbSet<SPayInterest> SPayInterests { get; set; }
        public virtual DbSet<SPayLoan> SPayLoans { get; set; }
        public virtual DbSet<SPayLoanInSyncAdj> SPayLoanInSyncAdjs { get; set; }
        public virtual DbSet<SPaySchedRollover> SPaySchedRollovers { get; set; }
        public virtual DbSet<SPaySchedRolloverDetail> SPaySchedRolloverDetails { get; set; }
        public virtual DbSet<SpecialMessage> SpecialMessages { get; set; }
        public virtual DbSet<SpecialMessage_AzCusts> SpecialMessage_AzCusts { get; set; }
        public virtual DbSet<SpecialMessageLoanProduct> SpecialMessageLoanProducts { get; set; }
        public virtual DbSet<SpecialMessageLocation> SpecialMessageLocations { get; set; }
        public virtual DbSet<Store_Windows> Store_Windows { get; set; }
        public virtual DbSet<StoreClosed> StoreCloseds { get; set; }
        public virtual DbSet<StoreClosedDetail> StoreClosedDetails { get; set; }
        public virtual DbSet<TaskActionResult> TaskActionResults { get; set; }
        public virtual DbSet<TaskActionResultXref> TaskActionResultXrefs { get; set; }
        public virtual DbSet<TellerComputer> TellerComputers { get; set; }
        public virtual DbSet<TELLERID> TELLERIDs { get; set; }
        public virtual DbSet<TellerIDEdit> TellerIDEdits { get; set; }
        public virtual DbSet<TellerLogin> TellerLogins { get; set; }
        public virtual DbSet<TellerParsedCashException> TellerParsedCashExceptions { get; set; }
        public virtual DbSet<TellerPwdHistory> TellerPwdHistories { get; set; }
        public virtual DbSet<TellerSecurity> TellerSecurities { get; set; }
        public virtual DbSet<TellerTitle> TellerTitles { get; set; }
        public virtual DbSet<TellerTitleEdit> TellerTitleEdits { get; set; }
        public virtual DbSet<TellerType> TellerTypes { get; set; }
        public virtual DbSet<TempLoanProductSplit> TempLoanProductSplits { get; set; }
        public virtual DbSet<TestCreditCard> TestCreditCards { get; set; }
        public virtual DbSet<TitleLoan> TitleLoans { get; set; }
        public virtual DbSet<TitleLoanApproval> TitleLoanApprovals { get; set; }
        public virtual DbSet<TotalDailyFee> TotalDailyFees { get; set; }
        public virtual DbSet<TransDetail> TransDetails { get; set; }
        public virtual DbSet<TransDetailAcct> TransDetailAccts { get; set; }
        public virtual DbSet<TransDetailCash> TransDetailCashes { get; set; }
        public virtual DbSet<TransDetailCashParsedCash> TransDetailCashParsedCashes { get; set; }
        public virtual DbSet<TransDetailCheck> TransDetailChecks { get; set; }
        public virtual DbSet<TransDetailIntShort> TransDetailIntShorts { get; set; }
        public virtual DbSet<TransDetailLoan> TransDetailLoans { get; set; }
        public virtual DbSet<TransDetailService> TransDetailServices { get; set; }
        public virtual DbSet<TransferFund> TransferFunds { get; set; }
        public virtual DbSet<TransPOS> TransPOS { get; set; }
        public virtual DbSet<TransUnionCode> TransUnionCodes { get; set; }
        public virtual DbSet<UDDReport> UDDReports { get; set; }
        public virtual DbSet<UDDReportDetail> UDDReportDetails { get; set; }
        public virtual DbSet<US_States> US_States { get; set; }
        public virtual DbSet<US_Zipcodes> US_Zipcodes { get; set; }
        public virtual DbSet<UtilRecalcLog> UtilRecalcLogs { get; set; }
        public virtual DbSet<UtilRecalcLogDetail> UtilRecalcLogDetails { get; set; }
        public virtual DbSet<VaultCount> VaultCounts { get; set; }
        public virtual DbSet<VaultCountCalcParsedCash> VaultCountCalcParsedCashes { get; set; }
        public virtual DbSet<VaultCountEnteredParsedCash> VaultCountEnteredParsedCashes { get; set; }
        public virtual DbSet<VaultCountService> VaultCountServices { get; set; }
        public virtual DbSet<VaultMaster> VaultMasters { get; set; }
        public virtual DbSet<VaultMasterParsedCash> VaultMasterParsedCashes { get; set; }
        public virtual DbSet<VaultMgrAssignment> VaultMgrAssignments { get; set; }
        public virtual DbSet<VaultMgrAuthorization> VaultMgrAuthorizations { get; set; }
        public virtual DbSet<VaultMgrAuthorizationDetail> VaultMgrAuthorizationDetails { get; set; }
        public virtual DbSet<VaultMgrAuthorizationNote> VaultMgrAuthorizationNotes { get; set; }
        public virtual DbSet<VaultRecalcAdj> VaultRecalcAdjs { get; set; }
        public virtual DbSet<VaultService> VaultServices { get; set; }
        public virtual DbSet<Vehicle> Vehicles { get; set; }
        public virtual DbSet<VehicleHistory> VehicleHistories { get; set; }
        public virtual DbSet<VehicleQuote> VehicleQuotes { get; set; }
        public virtual DbSet<VeritecLoanID> VeritecLoanIDs { get; set; }
        public virtual DbSet<Visitor> Visitors { get; set; }
        public virtual DbSet<VisitorApiAuthorization> VisitorApiAuthorizations { get; set; }
        public virtual DbSet<VisitorDevice> VisitorDevices { get; set; }
        public virtual DbSet<VisitorEdit> VisitorEdits { get; set; }
        public virtual DbSet<VisitorEmail> VisitorEmails { get; set; }
        public virtual DbSet<VisitorEmailDisposition> VisitorEmailDispositions { get; set; }
        public virtual DbSet<VisitorEmailExcludedSender> VisitorEmailExcludedSenders { get; set; }
        public virtual DbSet<VisitorHistory> VisitorHistories { get; set; }
        public virtual DbSet<VisitorSecurityQuestion> VisitorSecurityQuestions { get; set; }
        public virtual DbSet<VMATransType> VMATransTypes { get; set; }
        public virtual DbSet<WebArchive> WebArchives { get; set; }
        public virtual DbSet<WebBlob> WebBlobs { get; set; }
        public virtual DbSet<WebBlobLoanApplicationXref> WebBlobLoanApplicationXrefs { get; set; }
        public virtual DbSet<WebBlobLoanXref> WebBlobLoanXrefs { get; set; }
        public virtual DbSet<WebBlobType> WebBlobTypes { get; set; }
        public virtual DbSet<WebBlobVisitorEmailXref> WebBlobVisitorEmailXrefs { get; set; }
        public virtual DbSet<WebCallApplicationModeAudit> WebCallApplicationModeAudits { get; set; }
        public virtual DbSet<WebCallApplicationMode> WebCallApplicationModes { get; set; }
        public virtual DbSet<WebCallApplicationStatusHistory> WebCallApplicationStatusHistories { get; set; }
        public virtual DbSet<WebCallAuthorizedVisitorContact> WebCallAuthorizedVisitorContacts { get; set; }
        public virtual DbSet<WebCallBatchAction> WebCallBatchActions { get; set; }
        public virtual DbSet<WebCallBatchCriteria> WebCallBatchCriterias { get; set; }
        public virtual DbSet<WebCallBatchTask> WebCallBatchTasks { get; set; }
        public virtual DbSet<WebCallBatchTaskExecutionHistory> WebCallBatchTaskExecutionHistories { get; set; }
        public virtual DbSet<WebCallCampaign> WebCallCampaigns { get; set; }
        public virtual DbSet<WebCallCampaignCategory> WebCallCampaignCategories { get; set; }
        public virtual DbSet<WebCallCategory> WebCallCategories { get; set; }
        public virtual DbSet<WebCallCatRarrAlia> WebCallCatRarrAlias { get; set; }
        public virtual DbSet<WebCallCCTimerLog> WebCallCCTimerLogs { get; set; }
        public virtual DbSet<WebCallCenterLogin> WebCallCenterLogins { get; set; }
        public virtual DbSet<WebCallChatCannedRespons> WebCallChatCannedResponses { get; set; }
        public virtual DbSet<WebCallChatMessage> WebCallChatMessages { get; set; }
        public virtual DbSet<WebCallChatSession> WebCallChatSessions { get; set; }
        public virtual DbSet<WebCallChatStatu> WebCallChatStatus { get; set; }
        public virtual DbSet<WebCallChatTopic> WebCallChatTopics { get; set; }
        public virtual DbSet<WebCallChatUser> WebCallChatUsers { get; set; }
        public virtual DbSet<WebCallCSRReportColumn> WebCallCSRReportColumns { get; set; }
        public virtual DbSet<WebCallCSRReportColumnRARR> WebCallCSRReportColumnRARRs { get; set; }
        public virtual DbSet<WebCallDualAuth> WebCallDualAuths { get; set; }
        public virtual DbSet<WebCallEmailTemplate> WebCallEmailTemplates { get; set; }
        public virtual DbSet<WebCallFAQ> WebCallFAQs { get; set; }
        public virtual DbSet<WebCallFAQAttachment> WebCallFAQAttachments { get; set; }
        public virtual DbSet<WebCallFAQCategory> WebCallFAQCategories { get; set; }
        public virtual DbSet<WebCallFeature> WebCallFeatures { get; set; }
        public virtual DbSet<WebCallIntraChatMessage> WebCallIntraChatMessages { get; set; }
        public virtual DbSet<WebCallIntraChatSession> WebCallIntraChatSessions { get; set; }
        public virtual DbSet<WebCallInvalidPhoneNumber> WebCallInvalidPhoneNumbers { get; set; }
        public virtual DbSet<WebCallLoanAppSourceApp> WebCallLoanAppSourceApps { get; set; }
        public virtual DbSet<WebCallLoanProductConfig> WebCallLoanProductConfigs { get; set; }
        public virtual DbSet<WebCallLoggingCategory> WebCallLoggingCategories { get; set; }
        public virtual DbSet<WebCallLoggingCategoryLog> WebCallLoggingCategoryLogs { get; set; }
        public virtual DbSet<WebCallLoggingLog> WebCallLoggingLogs { get; set; }
        public virtual DbSet<WebCallOnlineStatusDisplayLookup> WebCallOnlineStatusDisplayLookups { get; set; }
        public virtual DbSet<WebCallQueue> WebCallQueues { get; set; }
        public virtual DbSet<WebCallQueueAudit> WebCallQueueAudits { get; set; }
        public virtual DbSet<WebCallQueueConfiguration> WebCallQueueConfigurations { get; set; }
        public virtual DbSet<WebCallQueueLoanAppAudit> WebCallQueueLoanAppAudits { get; set; }
        public virtual DbSet<WebCallQueueStatu> WebCallQueueStatus { get; set; }
        public virtual DbSet<WebCallQueueType> WebCallQueueTypes { get; set; }
        public virtual DbSet<WebCallQuickNote> WebCallQuickNotes { get; set; }
        public virtual DbSet<WebCallRARR> WebCallRARRs { get; set; }
        public virtual DbSet<WebCallRARRAction> WebCallRARRActions { get; set; }
        public virtual DbSet<WebCallRARRCategoryReason> WebCallRARRCategoryReasons { get; set; }
        public virtual DbSet<WebCallRARReason> WebCallRARReasons { get; set; }
        public virtual DbSet<WebCallRARResult1> WebCallRARResult1 { get; set; }
        public virtual DbSet<WebCallRARResult2> WebCallRARResult2 { get; set; }
        public virtual DbSet<WebCallRARRFeature> WebCallRARRFeatures { get; set; }
        public virtual DbSet<WebCallRarrGroup> WebCallRarrGroups { get; set; }
        public virtual DbSet<WebCallRARRHistory> WebCallRARRHistories { get; set; }
        public virtual DbSet<WebCallRecordingArchive> WebCallRecordingArchives { get; set; }
        public virtual DbSet<WebCallTeam> WebCallTeams { get; set; }
        public virtual DbSet<WebCallTeamUser> WebCallTeamUsers { get; set; }
        public virtual DbSet<WebCallUserSetting> WebCallUserSettings { get; set; }
        public virtual DbSet<WebCallVisitorAlert> WebCallVisitorAlerts { get; set; }
        public virtual DbSet<WebCallVisitorAlertsAudit> WebCallVisitorAlertsAudits { get; set; }
        public virtual DbSet<WebCallWebEmergencyAlertTemplate> WebCallWebEmergencyAlertTemplates { get; set; }
        public virtual DbSet<WebCallWorkItemCategoryHistory> WebCallWorkItemCategoryHistories { get; set; }
        public virtual DbSet<WebCallWorkQueue> WebCallWorkQueues { get; set; }
        public virtual DbSet<WebDailyReport> WebDailyReports { get; set; }
        public virtual DbSet<WebDailyReportField> WebDailyReportFields { get; set; }
        public virtual DbSet<WebDailyReportState> WebDailyReportStates { get; set; }
        public virtual DbSet<WebDialerCallResult> WebDialerCallResults { get; set; }
        public virtual DbSet<WebDialerPhoneLine> WebDialerPhoneLines { get; set; }
        public virtual DbSet<WebDialerResult> WebDialerResults { get; set; }
        public virtual DbSet<WebDialerResultType> WebDialerResultTypes { get; set; }
        public virtual DbSet<WebDialerStatu> WebDialerStatus { get; set; }
        public virtual DbSet<WebDialerUploadHistory> WebDialerUploadHistories { get; set; }
        public virtual DbSet<WebDialerUser> WebDialerUsers { get; set; }
        public virtual DbSet<WebEmailNote> WebEmailNotes { get; set; }
        public virtual DbSet<WebErrorLog> WebErrorLogs { get; set; }
        public virtual DbSet<WebImage> WebImages { get; set; }
        public virtual DbSet<WebLead> WebLeads { get; set; }
        public virtual DbSet<WebLeadBuyer> WebLeadBuyers { get; set; }
        public virtual DbSet<WebLeadGen> WebLeadGens { get; set; }
        public virtual DbSet<WebLeadGenAddress> WebLeadGenAddresses { get; set; }
        public virtual DbSet<WebLeadGenField> WebLeadGenFields { get; set; }
        public virtual DbSet<WebLeadGenStatistic> WebLeadGenStatistics { get; set; }
        public virtual DbSet<WebLeadGenTier> WebLeadGenTiers { get; set; }
        public virtual DbSet<WebLeadGenTranslation> WebLeadGenTranslations { get; set; }
        public virtual DbSet<WebLeadPostData> WebLeadPostDatas { get; set; }
        public virtual DbSet<WebLeadSale> WebLeadSales { get; set; }
        public virtual DbSet<WebLoanCreditFraud> WebLoanCreditFrauds { get; set; }
        public virtual DbSet<WebPixelVendor> WebPixelVendors { get; set; }
        public virtual DbSet<WebPixelVendorData> WebPixelVendorDatas { get; set; }
        public virtual DbSet<WebPixelVendorDetail> WebPixelVendorDetails { get; set; }
        public virtual DbSet<WebReferralMethod> WebReferralMethods { get; set; }
        public virtual DbSet<WebRemoteControl> WebRemoteControls { get; set; }
        public virtual DbSet<WebReportByApp> WebReportByApps { get; set; }
        public virtual DbSet<WebReportByLoan> WebReportByLoans { get; set; }
        public virtual DbSet<WebReviewTemplate> WebReviewTemplates { get; set; }
        public virtual DbSet<WebSiteEvent> WebSiteEvents { get; set; }
        public virtual DbSet<WebVisit> WebVisits { get; set; }
        public virtual DbSet<WebVisitSource> WebVisitSources { get; set; }
        public virtual DbSet<WebVisitSrcXref> WebVisitSrcXrefs { get; set; }
        public virtual DbSet<WireTransferFileImport> WireTransferFileImports { get; set; }
        public virtual DbSet<WireTransferMatch> WireTransferMatches { get; set; }
        public virtual DbSet<WireTransferMatchEdit> WireTransferMatchEdits { get; set; }
        public virtual DbSet<WSConfig> WSConfigs { get; set; }
        public virtual DbSet<WSOperation> WSOperations { get; set; }
        public virtual DbSet<WSResponse> WSResponses { get; set; }
        public virtual DbSet<ZeroDollarAuth> ZeroDollarAuths { get; set; }
        public virtual DbSet<ZipArea> ZipAreas { get; set; }
        public virtual DbSet<C_ErrorLogTest> C_ErrorLogTest { get; set; }
        public virtual DbSet<AACbExportDataArchive> AACbExportDataArchives { get; set; }
        public virtual DbSet<ACHGroup> ACHGroups { get; set; }
        public virtual DbSet<AUDDISAdviceReportDetail> AUDDISAdviceReportDetails { get; set; }
        public virtual DbSet<CreditCardResultCodeEdit> CreditCardResultCodeEdits { get; set; }
        public virtual DbSet<CustomerFlashMPayRebate> CustomerFlashMPayRebates { get; set; }
        public virtual DbSet<CustomerIncomeBackup> CustomerIncomeBackups { get; set; }
        public virtual DbSet<EmploymentRegion> EmploymentRegions { get; set; }
        public virtual DbSet<EmploymentRequest> EmploymentRequests { get; set; }
        public virtual DbSet<InternalProcessEmailBody> InternalProcessEmailBodies { get; set; }
        public virtual DbSet<InternalProcessEmailType> InternalProcessEmailTypes { get; set; }
        public virtual DbSet<KBB_Log_Config> KBB_Log_Config { get; set; }
        public virtual DbSet<LoanApplicationBU> LoanApplicationBUs { get; set; }
        public virtual DbSet<LoanApplicationDiscount> LoanApplicationDiscounts { get; set; }
        public virtual DbSet<LoanProductEnableNewLoanBackup> LoanProductEnableNewLoanBackups { get; set; }
        public virtual DbSet<MPayIntDupNeg> MPayIntDupNegs { get; set; }
        public virtual DbSet<MPayIntDupPos> MPayIntDupPos { get; set; }
        public virtual DbSet<OEndLoanInSyncAdj> OEndLoanInSyncAdjs { get; set; }
        public virtual DbSet<OEndVaultTroubleshooting> OEndVaultTroubleshootings { get; set; }
        public virtual DbSet<OptPlusExportTransCode> OptPlusExportTransCodes { get; set; }
        public virtual DbSet<RitaPwd> RitaPwds { get; set; }
        public virtual DbSet<SkipTraceConfig_RisAudit> SkipTraceConfig_RisAudit { get; set; }
        public virtual DbSet<SkipTraceThreadBackUp> SkipTraceThreadBackUps { get; set; }
        public virtual DbSet<TransferFundsInterStore> TransferFundsInterStores { get; set; }
        public virtual DbSet<WebAlert> WebAlerts { get; set; }
        public virtual DbSet<WebCallRARRType> WebCallRARRTypes { get; set; }
        public virtual DbSet<Docuware_View> Docuware_View { get; set; }
        public virtual DbSet<Service> Services { get; set; }
        public virtual DbSet<Svc_Tran> Svc_Tran { get; set; }
        public virtual DbSet<syscolumns_view> syscolumns_view { get; set; }
        public virtual DbSet<sysobjects_view> sysobjects_view { get; set; }
        public virtual DbSet<systypes_view> systypes_view { get; set; }
        public virtual DbSet<vw_Ach_Trecs> vw_Ach_Trecs { get; set; }
        public virtual DbSet<vw_AppSetting> vw_AppSetting { get; set; }
        public virtual DbSet<vw_CashedCheckRate> vw_CashedCheckRate { get; set; }
        public virtual DbSet<vw_CashedCheckRateTable> vw_CashedCheckRateTable { get; set; }
        public virtual DbSet<vw_CustomerEmployerIncome> vw_CustomerEmployerIncome { get; set; }
        public virtual DbSet<vw_DocuwareInfoByCustomerDocumentKey> vw_DocuwareInfoByCustomerDocumentKey { get; set; }
        public virtual DbSet<vw_DocuwareInfoByTransDetailKey> vw_DocuwareInfoByTransDetailKey { get; set; }
        public virtual DbSet<vw_Eos310> vw_Eos310 { get; set; }
        public virtual DbSet<vw_EosMoneyGrams> vw_EosMoneyGrams { get; set; }
        public virtual DbSet<vw_EosMoneyOrder> vw_EosMoneyOrder { get; set; }
        public virtual DbSet<vw_LoanApplication> vw_LoanApplication { get; set; }
        public virtual DbSet<vw_LoanApplicationEmployerIncome> vw_LoanApplicationEmployerIncome { get; set; }
        public virtual DbSet<vw_LoansByStatus> vw_LoansByStatus { get; set; }
        public virtual DbSet<vw_Notes_AchHistory> vw_Notes_AchHistory { get; set; }
        public virtual DbSet<vw_Notes_CheckAgain> vw_Notes_CheckAgain { get; set; }
        public virtual DbSet<vw_Notes_CheckPayment> vw_Notes_CheckPayment { get; set; }
        public virtual DbSet<vw_Notes_CollectionMovement> vw_Notes_CollectionMovement { get; set; }
        public virtual DbSet<vw_Notes_Contacts> vw_Notes_Contacts { get; set; }
        public virtual DbSet<vw_Notes_CustomerEdit> vw_Notes_CustomerEdit { get; set; }
        public virtual DbSet<vw_Notes_IssuerEdit> vw_Notes_IssuerEdit { get; set; }
        public virtual DbSet<vw_Notes_Letters> vw_Notes_Letters { get; set; }
        public virtual DbSet<vw_Notes_LoanPayment> vw_Notes_LoanPayment { get; set; }
        public virtual DbSet<vw_Notes_ManualCcAttempt> vw_Notes_ManualCcAttempt { get; set; }
        public virtual DbSet<vw_Notes_NoteHistory> vw_Notes_NoteHistory { get; set; }
        public virtual DbSet<vw_Notes_RICC> vw_Notes_RICC { get; set; }
        public virtual DbSet<vw_QuickAndDirtyChkRates> vw_QuickAndDirtyChkRates { get; set; }
        public virtual DbSet<vw_SharePoint_StoresList> vw_SharePoint_StoresList { get; set; }
        public virtual DbSet<vw_TaskActionResult> vw_TaskActionResult { get; set; }
        public virtual DbSet<Xah> Xahs { get; set; }
        public virtual DbSet<Xca> Xcas { get; set; }
        public virtual DbSet<Xccp> Xccps { get; set; }
        public virtual DbSet<Xcct> Xccts { get; set; }
        public virtual DbSet<Xcm> Xcms { get; set; }
        public virtual DbSet<Xfl> Xfls { get; set; }
        public virtual DbSet<Xflb> Xflbs { get; set; }
        public virtual DbSet<Xflp> Xflps { get; set; }
        public virtual DbSet<Xflr> Xflrs { get; set; }
        public virtual DbSet<Xl> Xls { get; set; }
        public virtual DbSet<Xlddc> Xlddcs { get; set; }
        public virtual DbSet<Xlp> Xlps { get; set; }
        public virtual DbSet<Xlpc> Xlpcs { get; set; }
        public virtual DbSet<Xlpenl> Xlpenls { get; set; }
        public virtual DbSet<Xlpmp> Xlpmps { get; set; }
        public virtual DbSet<Xlpoe> Xlpoes { get; set; }
        public virtual DbSet<Xlpsp> Xlpsps { get; set; }
        public virtual DbSet<Xmpi> Xmpis { get; set; }
        public virtual DbSet<Xmpl> Xmpls { get; set; }
        public virtual DbSet<Xmplisa> Xmplisas { get; set; }
        public virtual DbSet<Xoei> Xoeis { get; set; }
        public virtual DbSet<Xoel> Xoels { get; set; }
        public virtual DbSet<Xrr> Xrrs { get; set; }
        public virtual DbSet<Xsd> Xsds { get; set; }
        public virtual DbSet<Xsm> Xsms { get; set; }
        public virtual DbSet<Xsplisa> Xsplisas { get; set; }
        public virtual DbSet<Xssrd> Xssrds { get; set; }
        public virtual DbSet<Xst> Xsts { get; set; }
        public virtual DbSet<Xtd> Xtds { get; set; }
        public virtual DbSet<Xtda> Xtdas { get; set; }
        public virtual DbSet<Xtdcash> Xtdcashes { get; set; }
        public virtual DbSet<Xtdcheck> Xtdchecks { get; set; }
        public virtual DbSet<Xtdloan> Xtdloans { get; set; }
        public virtual DbSet<Xti> Xtis { get; set; }
        public virtual DbSet<Xtp> Xtps { get; set; }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            modelBuilder.Entity<C_ErrorLogBase>()
                .Property(e => e.ErrorMessage)
                .IsUnicode(false);

            modelBuilder.Entity<C_ErrorLogBase>()
                .Property(e => e.SupportMessage)
                .IsUnicode(false);

            modelBuilder.Entity<C_ErrorLogBase>()
                .Property(e => e.Client)
                .IsUnicode(false);

            modelBuilder.Entity<C_ErrorLogBase>()
                .Property(e => e.Tier)
                .IsUnicode(false);

            modelBuilder.Entity<C_ErrorLogBase>()
                .Property(e => e.CodeLocation)
                .IsUnicode(false);

            modelBuilder.Entity<C_ErrorLogBase>()
                .Property(e => e.ExceptionText)
                .IsUnicode(false);

            modelBuilder.Entity<C_ErrorLogBase>()
                .Property(e => e.StateDump)
                .IsUnicode(false);

            modelBuilder.Entity<C_ErrorLogBase>()
                .Property(e => e.WebServer)
                .IsUnicode(false);

            modelBuilder.Entity<C_ErrorLogBase>()
                .Property(e => e.AppServer)
                .IsUnicode(false);

            modelBuilder.Entity<C_ErrorLogBase>()
                .Property(e => e.UserAgent)
                .IsUnicode(false);

            modelBuilder.Entity<C_ErrorLogBase>()
                .Property(e => e.Browser)
                .IsUnicode(false);

            modelBuilder.Entity<C_ErrorLogBase>()
                .Property(e => e.CurrentPage)
                .IsUnicode(false);

            modelBuilder.Entity<C_ErrorLogBase>()
                .Property(e => e.ReferringPage)
                .IsUnicode(false);

            modelBuilder.Entity<AccumConfig>()
                .Property(e => e.SHORT_DESCR)
                .IsUnicode(false);

            modelBuilder.Entity<AccumConfig>()
                .Property(e => e.LONG_DESCR)
                .IsUnicode(false);

            modelBuilder.Entity<AccumConfig>()
                .Property(e => e.TASK_ACTION_RESULT_KEYS)
                .IsUnicode(false);

            modelBuilder.Entity<AccumConfig>()
                .Property(e => e.AGENT_ACTION_KEYS)
                .IsUnicode(false);

            modelBuilder.Entity<AccumConfig>()
                .Property(e => e.RESULT1_KEYS)
                .IsUnicode(false);

            modelBuilder.Entity<AccumConfig>()
                .Property(e => e.RESULT2_KEYS)
                .IsUnicode(false);

            modelBuilder.Entity<AccumConfig>()
                .Property(e => e.ACCUM_COST)
                .HasPrecision(10, 4);

            modelBuilder.Entity<AccumConfig>()
                .Property(e => e.EXCLUDE_RESULTS)
                .IsUnicode(false);

            modelBuilder.Entity<ACH_History>()
                .Property(e => e.ACH_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ACH_History>()
                .Property(e => e.MANUAL_TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ACH_History>()
                .Property(e => e.ACH_RESULT_CODE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ACH_History>()
                .Property(e => e.ABA_NO)
                .IsUnicode(false);

            modelBuilder.Entity<ACH_History>()
                .Property(e => e.BANK_NO)
                .IsUnicode(false);

            modelBuilder.Entity<ACH_History>()
                .Property(e => e.STATEMENT_ID)
                .IsUnicode(false);

            modelBuilder.Entity<ACH_History>()
                .Property(e => e.PRINC_AMT_FOR_INTEREST_CREDIT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<ACH_History>()
                .Property(e => e.FEES_AMT_FOR_INTEREST_CREDIT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<ACH_History>()
                .Property(e => e.INTEREST_DUE_CAP)
                .HasPrecision(10, 4);

            modelBuilder.Entity<ACH_History>()
                .Property(e => e.CAB_INTEREST_DUE_CAP)
                .HasPrecision(10, 4);

            modelBuilder.Entity<ACH_History>()
                .HasMany(e => e.DDIACHHistories)
                .WithRequired(e => e.ACH_History)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ACH_HistoryCashedCheck>()
                .Property(e => e.ACH_AMOUNT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<ACH_HistoryCashedCheck>()
                .Property(e => e.MANUAL_TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ACH_HistoryCashedCheck>()
                .Property(e => e.ACH_RESULT_CODE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ACH_HistoryCashedCheck>()
                .Property(e => e.ABA_NO)
                .IsUnicode(false);

            modelBuilder.Entity<ACH_HistoryCashedCheck>()
                .Property(e => e.BANK_NO)
                .IsUnicode(false);

            modelBuilder.Entity<ACH_Recv>()
                .Property(e => e.FILE_NAME_RECV)
                .IsUnicode(false);

            modelBuilder.Entity<ACH_Recv>()
                .Property(e => e.PAID_TOTAL)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ACH_Recv>()
                .Property(e => e.UNPAID_TOTAL)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ACH_Recv>()
                .HasMany(e => e.UDDReports)
                .WithRequired(e => e.ACH_Recv)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ACH_ReturnCode>()
                .Property(e => e.ACH_RETCODE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ACH_ReturnCode>()
                .Property(e => e.RETCODE_SHORT)
                .IsUnicode(false);

            modelBuilder.Entity<ACH_ReturnCode>()
                .Property(e => e.RETCODE_LONG)
                .IsUnicode(false);

            modelBuilder.Entity<ACH_Sent>()
                .Property(e => e.FILE_NAME_SENT)
                .IsUnicode(false);

            modelBuilder.Entity<ACH_Sent>()
                .Property(e => e.FILE_NAME_UPDATED)
                .IsUnicode(false);

            modelBuilder.Entity<ACH_Sent>()
                .Property(e => e.ITEM_TOTAL)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ACH_Sent>()
                .Property(e => e.FILE_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ACH_Sent>()
                .HasMany(e => e.ACH_History)
                .WithRequired(e => e.ACH_Sent)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ACH_Sent>()
                .HasMany(e => e.ACH_HistoryCashedCheck)
                .WithRequired(e => e.ACH_Sent)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ACHAck>()
                .Property(e => e.FILE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<ACHAck>()
                .Property(e => e.REJECT_CREDIT_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ACHAck>()
                .Property(e => e.TOTAL_CREDIT_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ACHBank>()
                .Property(e => e.NAME)
                .IsUnicode(false);

            modelBuilder.Entity<ACHBank>()
                .Property(e => e.DEBIT_OR_CREDIT)
                .IsUnicode(false);

            modelBuilder.Entity<ACHBank>()
                .HasMany(e => e.BanksParents)
                .WithRequired(e => e.ACHBank)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ACHBank>()
                .HasMany(e => e.CompanyACHBanks)
                .WithOptional(e => e.ACHBank)
                .HasForeignKey(e => e.CREDIT_ACH_BANK_KEY);

            modelBuilder.Entity<ACHBank>()
                .HasMany(e => e.CompanyACHBanks1)
                .WithOptional(e => e.ACHBank1)
                .HasForeignKey(e => e.DEBIT_ACH_BANK_KEY);

            modelBuilder.Entity<ACHBankConfig>()
                .Property(e => e.KEY)
                .IsUnicode(false);

            modelBuilder.Entity<ACHBankConfig>()
                .Property(e => e.DEFAULT_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<ACHBankConfig>()
                .HasMany(e => e.ACHBankConfigExceptions)
                .WithRequired(e => e.ACHBankConfig)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ACHBankConfigException>()
                .Property(e => e.VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<ACHBatchHeader>()
                .Property(e => e.RECORD_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ACHBatchHeader>()
                .Property(e => e.SERVICE_CLASS_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<ACHBatchHeader>()
                .Property(e => e.COMPANY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<ACHBatchHeader>()
                .Property(e => e.COMPANY_DISCRETIONARY_DATA)
                .IsUnicode(false);

            modelBuilder.Entity<ACHBatchHeader>()
                .Property(e => e.COMPANY_ID)
                .IsUnicode(false);

            modelBuilder.Entity<ACHBatchHeader>()
                .Property(e => e.SEC_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<ACHBatchHeader>()
                .Property(e => e.COMPANY_ENTRY_DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<ACHBatchHeader>()
                .Property(e => e.COMPANY_DESCRIPTIVE_DATA)
                .IsUnicode(false);

            modelBuilder.Entity<ACHBatchHeader>()
                .Property(e => e.EFFECTIVE_ENTRY_DATE)
                .IsUnicode(false);

            modelBuilder.Entity<ACHBatchHeader>()
                .Property(e => e.JULIAN_SETTLEMENT_DATE)
                .IsUnicode(false);

            modelBuilder.Entity<ACHBatchHeader>()
                .Property(e => e.STATUS_CODE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ACHBatchHeader>()
                .Property(e => e.ORIGINATING_DFI_ROUTING_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<ACHBatchHeader>()
                .Property(e => e.BATCH_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<ACHBatchHeader>()
                .HasMany(e => e.ACHDetails)
                .WithRequired(e => e.ACHBatchHeader)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ACHDetail>()
                .Property(e => e.RECORD_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ACHDetail>()
                .Property(e => e.TRANS_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<ACHDetail>()
                .Property(e => e.PARTICIPANT_ROUTING_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<ACHDetail>()
                .Property(e => e.PARTICIPANT_ACCOUNT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<ACHDetail>()
                .Property(e => e.TRANSACTION_AMOUNT)
                .IsUnicode(false);

            modelBuilder.Entity<ACHDetail>()
                .Property(e => e.IDENITIFICATION_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<ACHDetail>()
                .Property(e => e.RECEIVER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<ACHDetail>()
                .Property(e => e.DISCRETIONARY_DATA)
                .IsUnicode(false);

            modelBuilder.Entity<ACHDetail>()
                .Property(e => e.ADDENDA_RECORD)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ACHDetail>()
                .Property(e => e.TRACE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<ACHDetail>()
                .HasOptional(e => e.ACHDetailAddendum)
                .WithRequired(e => e.ACHDetail);

            modelBuilder.Entity<ACHDetailAddendum>()
                .Property(e => e.RECORD_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ACHDetailAddendum>()
                .Property(e => e.ADDENDA_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<ACHDetailAddendum>()
                .Property(e => e.RETURN_NOC_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<ACHDetailAddendum>()
                .Property(e => e.ORIGINAL_TRACE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<ACHDetailAddendum>()
                .Property(e => e.DATE_OF_DEATH)
                .IsUnicode(false);

            modelBuilder.Entity<ACHDetailAddendum>()
                .Property(e => e.ORIGINAL_RFDI_RT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<ACHDetailAddendum>()
                .Property(e => e.ADDENDA_INFORMATION)
                .IsUnicode(false);

            modelBuilder.Entity<ACHDetailAddendum>()
                .Property(e => e.TRACE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<ACHPending>()
                .Property(e => e.RI_BALANCE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ACHPending>()
                .Property(e => e.ACH_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ACHPending>()
                .Property(e => e.AUDIT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<ACHPending>()
                .Property(e => e.BANK_ABA)
                .IsUnicode(false);

            modelBuilder.Entity<ACHPending>()
                .Property(e => e.ACCT_NO)
                .IsUnicode(false);

            modelBuilder.Entity<ACHPending>()
                .Property(e => e.STATEMENT_ID)
                .IsUnicode(false);

            modelBuilder.Entity<ACHPresentment>()
                .Property(e => e.AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ACHPresentment>()
                .Property(e => e.STATEMENT_ID)
                .IsUnicode(false);

            modelBuilder.Entity<ACHPresentment>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ACHPresentmentType>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<ACHPresentmentType>()
                .Property(e => e.CODE)
                .IsUnicode(false);

            modelBuilder.Entity<ACHPresentmentType>()
                .HasMany(e => e.ACHPresentments)
                .WithRequired(e => e.ACHPresentmentType)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ACHProcessingQueue>()
                .Property(e => e.ACH_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ACHProcessingQueue>()
                .Property(e => e.MANUAL_TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ACHProcessingQueue>()
                .Property(e => e.ABA_NO)
                .IsUnicode(false);

            modelBuilder.Entity<ACHProcessingQueue>()
                .Property(e => e.BANK_NO)
                .IsUnicode(false);

            modelBuilder.Entity<ACHProcessingQueue>()
                .Property(e => e.STATEMENT_ID)
                .IsUnicode(false);

            modelBuilder.Entity<ACHProcessingQueue>()
                .Property(e => e.PRINC_AMT_FOR_INTEREST_CREDIT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<ACHProcessingQueue>()
                .Property(e => e.FEES_AMT_FOR_INTEREST_CREDIT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<ACHProcessingQueue>()
                .Property(e => e.INTEREST_DUE_CAP)
                .HasPrecision(10, 4);

            modelBuilder.Entity<ACHProcessingQueue>()
                .Property(e => e.CAB_INTEREST_DUE_CAP)
                .HasPrecision(10, 4);

            modelBuilder.Entity<ACHProcessingQueue>()
                .Property(e => e.GRAD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<ACHProcessingType>()
                .Property(e => e.ACH_PROCESSING_TYPE_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<ACHProcessingType>()
                .Property(e => e.FILE_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ACHProcessingType>()
                .HasMany(e => e.ACHProcessingQueues)
                .WithRequired(e => e.ACHProcessingType)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ACHQueue>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ACHQueue>()
                .Property(e => e.AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ACHQueue>()
                .Property(e => e.ABA)
                .IsUnicode(false);

            modelBuilder.Entity<ACHQueue>()
                .Property(e => e.ACCOUNT)
                .IsUnicode(false);

            modelBuilder.Entity<ACHQueue>()
                .Property(e => e.LOAN_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<ACHReason>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<ACHReason>()
                .Property(e => e.TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<ACHReason>()
                .HasMany(e => e.ACH_History)
                .WithOptional(e => e.ACHReason)
                .HasForeignKey(e => e.ACH_REASON_CODE);

            modelBuilder.Entity<ACHReason>()
                .HasMany(e => e.ACHProcessingQueues)
                .WithOptional(e => e.ACHReason)
                .HasForeignKey(e => e.ACH_REASON_CODE);

            modelBuilder.Entity<ACHReason>()
                .HasMany(e => e.ACHQueues)
                .WithRequired(e => e.ACHReason)
                .HasForeignKey(e => e.ACH_REASON_CODE)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ACHSentParent>()
                .Property(e => e.ACH_FILE_NAME_SENT)
                .IsUnicode(false);

            modelBuilder.Entity<ACHSentParent>()
                .Property(e => e.ACH_FILE_NAME_ACK)
                .IsUnicode(false);

            modelBuilder.Entity<ACHSentParent>()
                .Property(e => e.ACH_FILE_TOTAL_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ACHSentParent>()
                .Property(e => e.FILE_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<AdAstraWebInventory>()
                .Property(e => e.REFERENCE)
                .IsUnicode(false);

            modelBuilder.Entity<AdAstraWebInventory>()
                .Property(e => e.SSN)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<AdAstraWebInventory>()
                .Property(e => e.FIRSTNAME)
                .IsUnicode(false);

            modelBuilder.Entity<AdAstraWebInventory>()
                .Property(e => e.LASTNAME)
                .IsUnicode(false);

            modelBuilder.Entity<AdAstraWebInventory>()
                .Property(e => e.RI_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<AgentAction>()
                .Property(e => e.LONG_DESCR)
                .IsUnicode(false);

            modelBuilder.Entity<AgentAction>()
                .Property(e => e.SHORT_DESCR)
                .IsUnicode(false);

            modelBuilder.Entity<AgentAction>()
                .Property(e => e.SECURITY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<AgentAction>()
                .HasMany(e => e.CollectionActions)
                .WithRequired(e => e.AgentAction)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<AgentAction>()
                .HasMany(e => e.TaskActionResults)
                .WithRequired(e => e.AgentAction)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<AgentResult>()
                .Property(e => e.LONG_DESCR)
                .IsUnicode(false);

            modelBuilder.Entity<AgentResult>()
                .Property(e => e.SHORT_DESCR)
                .IsUnicode(false);

            modelBuilder.Entity<AlternateLender>()
                .Property(e => e.NAME_OF_LENDER)
                .IsUnicode(false);

            modelBuilder.Entity<AlternateLender>()
                .Property(e => e.CONTACT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<AlternateLender>()
                .Property(e => e.CONTACT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<AlternateLender>()
                .Property(e => e.PHONE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<AlternateLender>()
                .Property(e => e.ADDRESS_FORMAT)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<AlternateLender>()
                .Property(e => e.ADDR_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<AlternateLender>()
                .Property(e => e.ADDR_PRE_DIR)
                .IsUnicode(false);

            modelBuilder.Entity<AlternateLender>()
                .Property(e => e.ADDR_STREET)
                .IsUnicode(false);

            modelBuilder.Entity<AlternateLender>()
                .Property(e => e.ADDR_SUFFIX)
                .IsUnicode(false);

            modelBuilder.Entity<AlternateLender>()
                .Property(e => e.ADDR_POST_DIR)
                .IsUnicode(false);

            modelBuilder.Entity<AlternateLender>()
                .Property(e => e.ADDR_SUITE)
                .IsUnicode(false);

            modelBuilder.Entity<AlternateLender>()
                .Property(e => e.ADDR_SUITE_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<AlternateLender>()
                .Property(e => e.FLAT_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<AlternateLender>()
                .Property(e => e.BUILDING_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<AlternateLender>()
                .Property(e => e.BUILDING_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<AlternateLender>()
                .Property(e => e.CITY)
                .IsUnicode(false);

            modelBuilder.Entity<AlternateLender>()
                .Property(e => e.STATE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<AlternateLender>()
                .Property(e => e.ZIPCODE)
                .IsUnicode(false);

            modelBuilder.Entity<AlternateLender>()
                .Property(e => e.COUNTY)
                .IsUnicode(false);

            modelBuilder.Entity<AlternateLender>()
                .Property(e => e.COUNTRY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<AlternateLender>()
                .Property(e => e.CERTIFICATEID)
                .IsUnicode(false);

            modelBuilder.Entity<AlternateLender>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<AlternateLender>()
                .Property(e => e.LAST_UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<AlternateLender>()
                .Property(e => e.ADDRESS_LINE)
                .IsUnicode(false);

            modelBuilder.Entity<AlternateLender>()
                .Property(e => e.ADDRESS_CSZ)
                .IsUnicode(false);

            modelBuilder.Entity<AlternateLender>()
                .Property(e => e.ADDRESS_LINE_3)
                .IsUnicode(false);

            modelBuilder.Entity<AlternateLender>()
                .Property(e => e.ADDRESS_LINE_1)
                .IsUnicode(false);

            modelBuilder.Entity<AlternateLender>()
                .Property(e => e.ADDRESS_LINE_2)
                .IsUnicode(false);

            modelBuilder.Entity<AlternateLender>()
                .HasMany(e => e.Companies)
                .WithRequired(e => e.AlternateLender)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<AMLAdditionalParty>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<AMLAdditionalParty>()
                .Property(e => e.ENTITY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<AMLAdditionalParty>()
                .Property(e => e.FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<AMLAdditionalParty>()
                .Property(e => e.MID_INITIAL)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<AMLAdditionalParty>()
                .Property(e => e.LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<AMLAdditionalParty>()
                .Property(e => e.PHONE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<AMLAdditionalParty>()
                .Property(e => e.ADDRESS_FORMAT)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<AMLAdditionalParty>()
                .Property(e => e.ADDR_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<AMLAdditionalParty>()
                .Property(e => e.ADDR_PRE_DIR)
                .IsUnicode(false);

            modelBuilder.Entity<AMLAdditionalParty>()
                .Property(e => e.ADDR_STREET)
                .IsUnicode(false);

            modelBuilder.Entity<AMLAdditionalParty>()
                .Property(e => e.ADDR_SUFFIX)
                .IsUnicode(false);

            modelBuilder.Entity<AMLAdditionalParty>()
                .Property(e => e.ADDR_POST_DIR)
                .IsUnicode(false);

            modelBuilder.Entity<AMLAdditionalParty>()
                .Property(e => e.ADDR_SUITE)
                .IsUnicode(false);

            modelBuilder.Entity<AMLAdditionalParty>()
                .Property(e => e.ADDR_SUITE_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<AMLAdditionalParty>()
                .Property(e => e.CITY)
                .IsUnicode(false);

            modelBuilder.Entity<AMLAdditionalParty>()
                .Property(e => e.STATE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<AMLAdditionalParty>()
                .Property(e => e.ZIPCODE)
                .IsUnicode(false);

            modelBuilder.Entity<AMLAdditionalParty>()
                .Property(e => e.COUNTY)
                .IsUnicode(false);

            modelBuilder.Entity<AMLAdditionalParty>()
                .Property(e => e.COUNTRY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<AMLAdditionalParty>()
                .Property(e => e.FLAT_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<AMLAdditionalParty>()
                .Property(e => e.BUILDING_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<AMLAdditionalParty>()
                .Property(e => e.BUILDING_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<AMLAdditionalParty>()
                .Property(e => e.ID_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<AMLAdditionalParty>()
                .Property(e => e.ID_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<AMLAdditionalParty>()
                .Property(e => e.ID_STATE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<AMLAdditionalParty>()
                .Property(e => e.TAX_ID)
                .IsUnicode(false);

            modelBuilder.Entity<AMLAdditionalParty>()
                .Property(e => e.PURPOSE)
                .IsUnicode(false);

            modelBuilder.Entity<AMLAdditionalParty>()
                .Property(e => e.RELATIONSHIP)
                .IsUnicode(false);

            modelBuilder.Entity<AMLAdditionalParty>()
                .Property(e => e.INCORPORATION_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<AMLAdditionalParty>()
                .Property(e => e.INCORPORATION_PLACE)
                .IsUnicode(false);

            modelBuilder.Entity<AMLAdditionalParty>()
                .Property(e => e.BUSINESS_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<AMLAdditionalParty>()
                .Property(e => e.ADDRESS_CSZ)
                .IsUnicode(false);

            modelBuilder.Entity<AMLAdditionalParty>()
                .Property(e => e.ADDRESS_LINE)
                .IsUnicode(false);

            modelBuilder.Entity<AMLAdditionalParty>()
                .Property(e => e.ADDRESS_LINE_1)
                .IsUnicode(false);

            modelBuilder.Entity<AMLAdditionalParty>()
                .Property(e => e.ADDRESS_LINE_2)
                .IsUnicode(false);

            modelBuilder.Entity<AMLAdditionalParty>()
                .Property(e => e.ADDRESS_LINE_3)
                .IsUnicode(false);

            modelBuilder.Entity<AMLFileLog>()
                .Property(e => e.STREAM)
                .IsUnicode(false);

            modelBuilder.Entity<AMLFileLog>()
                .Property(e => e.STEP)
                .IsUnicode(false);

            modelBuilder.Entity<AMLFileLog>()
                .Property(e => e.FILE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<AMLFileLog>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<AMLForeignAddress>()
                .Property(e => e.ADDRESS1)
                .IsUnicode(false);

            modelBuilder.Entity<AMLForeignAddress>()
                .Property(e => e.ADDRESS2)
                .IsUnicode(false);

            modelBuilder.Entity<AMLForeignAddress>()
                .Property(e => e.ADDRESS3)
                .IsUnicode(false);

            modelBuilder.Entity<AMLForeignAddress>()
                .Property(e => e.PHONE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<AMLForeignAddress>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<AMLOccupation>()
                .Property(e => e.OCCUPATION)
                .IsUnicode(false);

            modelBuilder.Entity<AMLOccupation>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<AMLThresholdRule>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<AMLThresholdRule>()
                .Property(e => e.MIN_DOLLAR_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<AMLThresholdRule>()
                .Property(e => e.MAX_DOLLAR_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<AMLThresholdRule>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<AMLThresholdRule>()
                .Property(e => e.UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<AMLThresholdRule>()
                .HasMany(e => e.AMLThresholdRuleTransXrefs)
                .WithRequired(e => e.AMLThresholdRule)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<AMLThresholdRuleTransXref>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ApiApplication>()
                .Property(e => e.NAME)
                .IsUnicode(false);

            modelBuilder.Entity<ApiApplication>()
                .Property(e => e.SECRET)
                .IsUnicode(false);

            modelBuilder.Entity<ApiApplication>()
                .HasMany(e => e.VisitorApiAuthorizations)
                .WithRequired(e => e.ApiApplication)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<AppConfig>()
                .Property(e => e.APP_CONFIG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<AppConfig>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<AppSetting>()
                .Property(e => e.APP_SETTING_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<AppSetting>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<AppValue>()
                .Property(e => e.APP_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<AppValue>()
                .Property(e => e.UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<AreaCode>()
                .Property(e => e.STATE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Attorney>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Attorney>()
                .Property(e => e.ATTORNEY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<Attorney>()
                .Property(e => e.CONTACT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<Attorney>()
                .Property(e => e.CONTACT_EMAIL)
                .IsUnicode(false);

            modelBuilder.Entity<Attorney>()
                .Property(e => e.CITY)
                .IsUnicode(false);

            modelBuilder.Entity<Attorney>()
                .Property(e => e.STATE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Attorney>()
                .Property(e => e.ZIPCODE)
                .IsUnicode(false);

            modelBuilder.Entity<Attorney>()
                .Property(e => e.PHONE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<Attorney>()
                .Property(e => e.FTP_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<Attorney>()
                .Property(e => e.ADDRESS1)
                .IsUnicode(false);

            modelBuilder.Entity<Attorney>()
                .Property(e => e.COUNTY)
                .IsUnicode(false);

            modelBuilder.Entity<Attorney>()
                .Property(e => e.COUNTRY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Attorney>()
                .Property(e => e.ADDRESS_FORMAT)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Attorney>()
                .Property(e => e.ADDR_STREET)
                .IsUnicode(false);

            modelBuilder.Entity<Attorney>()
                .Property(e => e.FLAT_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<Attorney>()
                .Property(e => e.BUILDING_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<Attorney>()
                .Property(e => e.BUILDING_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<Attorney>()
                .Property(e => e.ADDRESS_LINE)
                .IsUnicode(false);

            modelBuilder.Entity<Attorney>()
                .Property(e => e.ADDRESS_CSZ)
                .IsUnicode(false);

            modelBuilder.Entity<Attorney>()
                .Property(e => e.ADDRESS_LINE_3)
                .IsUnicode(false);

            modelBuilder.Entity<Attorney>()
                .Property(e => e.ADDRESS_LINE_1)
                .IsUnicode(false);

            modelBuilder.Entity<Attorney>()
                .Property(e => e.ADDRESS_LINE_2)
                .IsUnicode(false);

            modelBuilder.Entity<Attorney>()
                .HasMany(e => e.AttorneyLoans)
                .WithRequired(e => e.Attorney)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Attorney>()
                .HasMany(e => e.AttorneyPayments)
                .WithRequired(e => e.Attorney)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<AttorneyLoan>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<AttorneyLoan>()
                .HasMany(e => e.AttorneyPayments)
                .WithRequired(e => e.AttorneyLoan)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<AttorneyPayment>()
                .Property(e => e.AMT_DUE_ATTORNEY)
                .HasPrecision(10, 4);

            modelBuilder.Entity<AUDDISAdviceReport>()
                .Property(e => e.REPORT_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<AUDDISAdviceReport>()
                .Property(e => e.ADVICE_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<AUDDISAdviceReport>()
                .Property(e => e.FILE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<AUDDISAdviceReport>()
                .HasMany(e => e.AUDDISAdviceReportDetails)
                .WithRequired(e => e.AUDDISAdviceReport)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<AUDDISReasonCodeMapping>()
                .Property(e => e.AUDDIS_REASON_CODE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<AutoBankingReport>()
                .Property(e => e.REFERENCE)
                .IsUnicode(false);

            modelBuilder.Entity<AutoBankingReport>()
                .Property(e => e.ISSUER)
                .IsUnicode(false);

            modelBuilder.Entity<AutoBankingReport>()
                .Property(e => e.ACCT)
                .IsUnicode(false);

            modelBuilder.Entity<AutoBankingReport>()
                .Property(e => e.BANK_ABA)
                .IsUnicode(false);

            modelBuilder.Entity<AutoBankingReport>()
                .Property(e => e.CHECK_NO)
                .IsUnicode(false);

            modelBuilder.Entity<AutoBankingReport>()
                .Property(e => e.AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<AutoBankingReport>()
                .Property(e => e.BALANCE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<AutoBankingReport>()
                .Property(e => e.AUDIT_CAT)
                .IsUnicode(false);

            modelBuilder.Entity<AutoBankingReport>()
                .Property(e => e.RESULTS)
                .IsUnicode(false);

            modelBuilder.Entity<AutoReport>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<AutoReport>()
                .Property(e => e.REPORT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<AutoReport>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<AutoReport>()
                .Property(e => e.OUTFILE)
                .IsUnicode(false);

            modelBuilder.Entity<AutoReport>()
                .Property(e => e.REPORT_SQL)
                .IsUnicode(false);

            modelBuilder.Entity<AutoReport>()
                .Property(e => e.SQL_FILE_LOCATION)
                .IsUnicode(false);

            modelBuilder.Entity<AutoReport>()
                .Property(e => e.EMAIL_SUBJECT)
                .IsUnicode(false);

            modelBuilder.Entity<AutoReport>()
                .Property(e => e.LAST_UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<AutoReport>()
                .HasMany(e => e.AutoReportEmails)
                .WithRequired(e => e.AutoReport)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<AutoReport>()
                .HasMany(e => e.AutoReportSchedules)
                .WithRequired(e => e.AutoReport)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<AutoReport>()
                .HasMany(e => e.AutoReportTabs)
                .WithRequired(e => e.AutoReport)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<AutoReportEmail>()
                .Property(e => e.EMAIL_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<AutoReportRunSchedule>()
                .Property(e => e.JOB_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<AutoReportRunSchedule>()
                .Property(e => e.TIME_ZONE)
                .IsUnicode(false);

            modelBuilder.Entity<AutoReportRunSchedule>()
                .HasMany(e => e.AutoReportSchedules)
                .WithRequired(e => e.AutoReportRunSchedule)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<AutoReportTab>()
                .Property(e => e.TAB_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<BalSheet2>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<BalSheetColumns2>()
                .Property(e => e.DB_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<BalSheetColumns2>()
                .Property(e => e.CR_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<BalSheetColumns2>()
                .Property(e => e.ACCT_TYPE_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<Bank_Status>()
                .Property(e => e.Status)
                .IsUnicode(false);

            modelBuilder.Entity<BankClassification>()
                .Property(e => e.BANKABA)
                .IsUnicode(false);

            modelBuilder.Entity<BankClassification>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<BankClassificationType>()
                .Property(e => e.BANK_CLASSIFICATION_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<BANK>()
                .Property(e => e.BANKABA)
                .IsUnicode(false);

            modelBuilder.Entity<BANK>()
                .Property(e => e.NAME)
                .IsUnicode(false);

            modelBuilder.Entity<BANK>()
                .Property(e => e.BRANCH)
                .IsUnicode(false);

            modelBuilder.Entity<BANK>()
                .Property(e => e.AREACODE)
                .IsUnicode(false);

            modelBuilder.Entity<BANK>()
                .Property(e => e.PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<BANK>()
                .Property(e => e.RIPHONE)
                .IsUnicode(false);

            modelBuilder.Entity<BANK>()
                .Property(e => e.Verify_Phone)
                .IsUnicode(false);

            modelBuilder.Entity<BANK>()
                .Property(e => e.bankphone)
                .IsUnicode(false);

            modelBuilder.Entity<BANK>()
                .Property(e => e.BANK_REPORT_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<BANK>()
                .Property(e => e.BUSINESS_OPENS_AT)
                .IsUnicode(false);

            modelBuilder.Entity<BANK>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<BANK>()
                .Property(e => e.ADDRESS1)
                .IsUnicode(false);

            modelBuilder.Entity<BANK>()
                .Property(e => e.CITY)
                .IsUnicode(false);

            modelBuilder.Entity<BANK>()
                .Property(e => e.STATE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<BANK>()
                .Property(e => e.ZIPCODE)
                .IsUnicode(false);

            modelBuilder.Entity<BANK>()
                .Property(e => e.COUNTY)
                .IsUnicode(false);

            modelBuilder.Entity<BANK>()
                .Property(e => e.COUNTRY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<BANK>()
                .Property(e => e.BANKCITY)
                .IsUnicode(false);

            modelBuilder.Entity<BANK>()
                .Property(e => e.BANKSTATE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<BANK>()
                .Property(e => e.BANKZIP)
                .IsUnicode(false);

            modelBuilder.Entity<BANK>()
                .Property(e => e.ADDRESS_FORMAT)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<BANK>()
                .Property(e => e.ADDR_STREET)
                .IsUnicode(false);

            modelBuilder.Entity<BANK>()
                .Property(e => e.FLAT_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<BANK>()
                .Property(e => e.BUILDING_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<BANK>()
                .Property(e => e.BUILDING_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<BANK>()
                .Property(e => e.ADDRESS_LINE)
                .IsUnicode(false);

            modelBuilder.Entity<BANK>()
                .Property(e => e.ADDRESS_CSZ)
                .IsUnicode(false);

            modelBuilder.Entity<BANK>()
                .Property(e => e.ADDRESS_LINE_3)
                .IsUnicode(false);

            modelBuilder.Entity<BANK>()
                .Property(e => e.ADDRESS_LINE_1)
                .IsUnicode(false);

            modelBuilder.Entity<BANK>()
                .Property(e => e.ADDRESS_LINE_2)
                .IsUnicode(false);

            modelBuilder.Entity<BANK>()
                .HasMany(e => e.ACHQueues)
                .WithRequired(e => e.BANK)
                .HasForeignKey(e => e.ABA)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<BANK>()
                .HasMany(e => e.Issuers)
                .WithRequired(e => e.BANK)
                .HasForeignKey(e => e.BANK_ID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<BanksParent>()
                .Property(e => e.BANKS_PARENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<BillPayBiller>()
                .Property(e => e.DISPLAYED_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<BillPayBiller>()
                .Property(e => e.BILLER_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<BillPayBiller>()
                .Property(e => e.BILLER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<BillPayBiller>()
                .Property(e => e.BILLER_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<BillPayBiller>()
                .Property(e => e.RAW_IMPORTED_DATA)
                .IsUnicode(false);

            modelBuilder.Entity<BillPayBiller>()
                .Property(e => e.MAX_ALLOWED_PAYMENT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<BillPayBiller>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<BillPayBiller>()
                .Property(e => e.BILLER_FEE)
                .HasPrecision(18, 0);

            modelBuilder.Entity<BillPayBiller>()
                .HasMany(e => e.BillerOCRRegions)
                .WithRequired(e => e.BillPayBiller)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<BillPayVendor>()
                .Property(e => e.VENDOR_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<BillPayVendor>()
                .Property(e => e.PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<BillPayVendor>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<BillPayVendor>()
                .Property(e => e.DELETED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<BlockedAddress>()
                .Property(e => e.BUILDING_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<BlockedAddress>()
                .Property(e => e.STREET_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<BlockedAddress>()
                .Property(e => e.CITY)
                .IsUnicode(false);

            modelBuilder.Entity<BlockedAddress>()
                .Property(e => e.ZIPCODE)
                .IsUnicode(false);

            modelBuilder.Entity<BlockedAddress>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<BlockedAddress>()
                .Property(e => e.DELETED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<BlockReason>()
                .Property(e => e.REASON_DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<BlockReason>()
                .HasMany(e => e.CreditCardBlocks)
                .WithRequired(e => e.BlockReason)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<BusinessLoan>()
                .Property(e => e.BUSINESS_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<BusinessLoan>()
                .Property(e => e.TAX_ID_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<BusinessLoan>()
                .Property(e => e.BUSINESS_PHONE_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<BusinessLoan>()
                .Property(e => e.VER_MONTHLY_NET_INC)
                .HasPrecision(10, 4);

            modelBuilder.Entity<BusinessLoan>()
                .Property(e => e.VER_BANK_DEPOSITS)
                .HasPrecision(10, 4);

            modelBuilder.Entity<BusinessLoan>()
                .Property(e => e.LOAN_PURPOSE)
                .IsUnicode(false);

            modelBuilder.Entity<BusinessLoan>()
                .Property(e => e.ADDR_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<BusinessLoan>()
                .Property(e => e.ADDR_POST_DIR)
                .IsUnicode(false);

            modelBuilder.Entity<BusinessLoan>()
                .Property(e => e.ADDR_PRE_DIR)
                .IsUnicode(false);

            modelBuilder.Entity<BusinessLoan>()
                .Property(e => e.ADDR_STREET)
                .IsUnicode(false);

            modelBuilder.Entity<BusinessLoan>()
                .Property(e => e.ADDR_SUFFIX)
                .IsUnicode(false);

            modelBuilder.Entity<BusinessLoan>()
                .Property(e => e.ADDR_SUITE)
                .IsUnicode(false);

            modelBuilder.Entity<BusinessLoan>()
                .Property(e => e.ADDR_SUITE_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<BusinessLoan>()
                .Property(e => e.CITY)
                .IsUnicode(false);

            modelBuilder.Entity<BusinessLoan>()
                .Property(e => e.STATE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<BusinessLoan>()
                .Property(e => e.ZIPCODE)
                .IsUnicode(false);

            modelBuilder.Entity<BusinessLoan>()
                .Property(e => e.COUNTY)
                .IsUnicode(false);

            modelBuilder.Entity<BusinessLoan>()
                .Property(e => e.COUNTRY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<BusinessLoan>()
                .Property(e => e.ADDRESS_FORMAT)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<BusinessLoan>()
                .Property(e => e.FLAT_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<BusinessLoan>()
                .Property(e => e.BUILDING_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<BusinessLoan>()
                .Property(e => e.BUILDING_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<BusinessLoan>()
                .Property(e => e.ADDRESS_LINE)
                .IsUnicode(false);

            modelBuilder.Entity<BusinessLoan>()
                .Property(e => e.ADDRESS_CSZ)
                .IsUnicode(false);

            modelBuilder.Entity<BusinessLoan>()
                .Property(e => e.ADDRESS_LINE_3)
                .IsUnicode(false);

            modelBuilder.Entity<BusinessLoan>()
                .Property(e => e.ADDRESS_LINE_1)
                .IsUnicode(false);

            modelBuilder.Entity<BusinessLoan>()
                .Property(e => e.ADDRESS_LINE_2)
                .IsUnicode(false);

            modelBuilder.Entity<CABLender>()
                .Property(e => e.CAB_LENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<CABLender>()
                .Property(e => e.CONTACT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<CABLender>()
                .Property(e => e.CONTACT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<CABLender>()
                .Property(e => e.PHONE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<CABLender>()
                .Property(e => e.ADDRESS_FORMAT)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CABLender>()
                .Property(e => e.ADDR_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<CABLender>()
                .Property(e => e.ADDR_PRE_DIR)
                .IsUnicode(false);

            modelBuilder.Entity<CABLender>()
                .Property(e => e.ADDR_STREET)
                .IsUnicode(false);

            modelBuilder.Entity<CABLender>()
                .Property(e => e.ADDR_SUFFIX)
                .IsUnicode(false);

            modelBuilder.Entity<CABLender>()
                .Property(e => e.ADDR_POST_DIR)
                .IsUnicode(false);

            modelBuilder.Entity<CABLender>()
                .Property(e => e.ADDR_SUITE)
                .IsUnicode(false);

            modelBuilder.Entity<CABLender>()
                .Property(e => e.ADDR_SUITE_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<CABLender>()
                .Property(e => e.FLAT_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<CABLender>()
                .Property(e => e.BUILDING_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<CABLender>()
                .Property(e => e.BUILDING_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<CABLender>()
                .Property(e => e.CITY)
                .IsUnicode(false);

            modelBuilder.Entity<CABLender>()
                .Property(e => e.STATE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CABLender>()
                .Property(e => e.ZIPCODE)
                .IsUnicode(false);

            modelBuilder.Entity<CABLender>()
                .Property(e => e.COUNTY)
                .IsUnicode(false);

            modelBuilder.Entity<CABLender>()
                .Property(e => e.COUNTRY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CABLender>()
                .Property(e => e.CERTIFICATE_ID)
                .IsUnicode(false);

            modelBuilder.Entity<CABLender>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CABLender>()
                .Property(e => e.LAST_UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CABLender>()
                .Property(e => e.ADDRESS_LINE)
                .IsUnicode(false);

            modelBuilder.Entity<CABLender>()
                .Property(e => e.ADDRESS_CSZ)
                .IsUnicode(false);

            modelBuilder.Entity<CABLender>()
                .Property(e => e.ADDRESS_LINE_3)
                .IsUnicode(false);

            modelBuilder.Entity<CABLender>()
                .Property(e => e.ADDRESS_LINE_1)
                .IsUnicode(false);

            modelBuilder.Entity<CABLender>()
                .Property(e => e.ADDRESS_LINE_2)
                .IsUnicode(false);

            modelBuilder.Entity<CapsCCTXRef>()
                .Property(e => e.AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<CapsHold>()
                .Property(e => e.AMT_TO_COLLECT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<CapsHold>()
                .Property(e => e.DEPOSIT_METHOD)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CapsHold>()
                .Property(e => e.BILLING_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<CapsHold>()
                .Property(e => e.BILLING_CITY)
                .IsUnicode(false);

            modelBuilder.Entity<CapsHold>()
                .Property(e => e.BILLING_STATE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CapsHold>()
                .Property(e => e.BILLING_ZIPCODE)
                .IsUnicode(false);

            modelBuilder.Entity<CapsHold>()
                .Property(e => e.CARDNUM)
                .IsUnicode(false);

            modelBuilder.Entity<CapsHold>()
                .Property(e => e.NAMEONCARD)
                .IsUnicode(false);

            modelBuilder.Entity<CapsHold>()
                .Property(e => e.TOKEN)
                .IsUnicode(false);

            modelBuilder.Entity<CapsHold>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CapsHold>()
                .Property(e => e.LOAN_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CapsHold>()
                .Property(e => e.PRODUCT_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CapsHold>()
                .Property(e => e.APP_ERR_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<CapsHold>()
                .Property(e => e.AMT_COLLECTED)
                .HasPrecision(10, 4);

            modelBuilder.Entity<CapsHold>()
                .Property(e => e.TOT_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<CapsHold>()
                .Property(e => e.CAPS_ATTEMPT_ID)
                .IsUnicode(false);

            modelBuilder.Entity<CapsHold>()
                .HasMany(e => e.CapsCCTXRefs)
                .WithRequired(e => e.CapsHold)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<CapsRunStatu>()
                .Property(e => e.RUN_STATUS_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<CapsRunStatu>()
                .HasMany(e => e.CapsRuns)
                .WithRequired(e => e.CapsRunStatu)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<CapsSkipReason>()
                .Property(e => e.SKIP_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<CapsSkipReason>()
                .HasMany(e => e.CapsHolds)
                .WithRequired(e => e.CapsSkipReason)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<CapsUpdate>()
                .Property(e => e.SQL)
                .IsUnicode(false);

            modelBuilder.Entity<CapsUpdate>()
                .Property(e => e.UPDATE_TABLE)
                .IsUnicode(false);

            modelBuilder.Entity<CardBatchSettle>()
                .Property(e => e.REQUEST_DATA)
                .IsUnicode(false);

            modelBuilder.Entity<CardBatchSettle>()
                .Property(e => e.RESPONSE_DATA)
                .IsUnicode(false);

            modelBuilder.Entity<CashedCheck>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CashedCheck>()
                .Property(e => e.CHECK_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CashedCheck>()
                .Property(e => e.CHECK_AMOUNT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<CashedCheck>()
                .Property(e => e.CHECK_NO)
                .IsUnicode(false);

            modelBuilder.Entity<CashedCheck>()
                .Property(e => e.CC_TOT_FEE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<CashedCheck>()
                .Property(e => e.CC_ORIG_RATE)
                .HasPrecision(7, 4);

            modelBuilder.Entity<CashedCheck>()
                .Property(e => e.CC_PCT_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<CashedCheck>()
                .Property(e => e.CC_FLAT_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<CashedCheck>()
                .Property(e => e.CC_DISCOUNT_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<CashedCheck>()
                .HasMany(e => e.CashedCheckImages)
                .WithRequired(e => e.CashedCheck)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<CashedCheck>()
                .HasMany(e => e.CashedCheckMICRs)
                .WithRequired(e => e.CashedCheck)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<CashedCheck>()
                .HasMany(e => e.CashedCheckPayments)
                .WithRequired(e => e.CashedCheck)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<CashedCheckMICR>()
                .Property(e => e.MICRDATA)
                .IsUnicode(false);

            modelBuilder.Entity<CashedCheckMICR>()
                .Property(e => e.AUX_ON_US)
                .IsUnicode(false);

            modelBuilder.Entity<CashedCheckMICR>()
                .Property(e => e.TRANSIT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<CashedCheckMICR>()
                .Property(e => e.EXTERNAL_PROCESSING_CODE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CashedCheckMICR>()
                .Property(e => e.CHECKSUM_DIGIT)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CashedCheckMICR>()
                .Property(e => e.ON_US)
                .IsUnicode(false);

            modelBuilder.Entity<CashedCheckMICR>()
                .Property(e => e.MICR_AMOUNT)
                .IsUnicode(false);

            modelBuilder.Entity<CashedCheckMICR>()
                .Property(e => e.DEPOSIT_BANK_CONTROL_DATA)
                .IsUnicode(false);

            modelBuilder.Entity<CashedCheckMICR>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CashedCheckPayment>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CashedCheckPayment>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<CashedCheckPayment>()
                .Property(e => e.PAID_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<CashedCheckPayment>()
                .HasMany(e => e.CashedCheckPaymentRefunds)
                .WithRequired(e => e.CashedCheckPayment)
                .HasForeignKey(e => e.REFUNDED_CASHED_CHECK_PAYMENT_KEY)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<CashedCheckPayment>()
                .HasMany(e => e.CashedCheckPaymentRefundXRefs)
                .WithRequired(e => e.CashedCheckPayment)
                .HasForeignKey(e => e.REFUND_CASHED_CHECK_PAYMENT_KEY);

            modelBuilder.Entity<CashedCheckPayment>()
                .HasMany(e => e.CashedCheckPaymentRefundXRefs1)
                .WithRequired(e => e.CashedCheckPayment1)
                .HasForeignKey(e => e.REFUNDED_CASHED_CHECK_PAYMENT_KEY)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<CashedCheckPaymentRefund>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CashedCheckPaymentRefundXRef>()
                .Property(e => e.REFUND_AMOUNT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<CC_Status>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<CCardResponse>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CCardResponse>()
                .Property(e => e.PRODUCT_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CCardResponse>()
                .Property(e => e.LOAN_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CCardRespons>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Certificate>()
                .Property(e => e.NAME)
                .IsUnicode(false);

            modelBuilder.Entity<Certificate>()
                .Property(e => e.PASSWORD)
                .IsUnicode(false);

            modelBuilder.Entity<Certificate>()
                .Property(e => e.DATE_ENTERED_UTC)
                .HasPrecision(0);

            modelBuilder.Entity<Certificate>()
                .Property(e => e.DATE_EXPIRES_UTC)
                .HasPrecision(0);

            modelBuilder.Entity<CheckAgain>()
                .Property(e => e.STATUS)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CheckAgain>()
                .HasMany(e => e.CheckAgainHistories)
                .WithRequired(e => e.CheckAgain)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<CheckAgainHistory>()
                .Property(e => e.STATUS)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CheckPaymentType>()
                .Property(e => e.TYPE_DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<CheckPaymentType>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CheckPaymentType>()
                .HasMany(e => e.LoanPaymentCheckPaymentTypeXrefs)
                .WithRequired(e => e.CheckPaymentType)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<CheckType>()
                .Property(e => e.CHECK_TYPE_CODE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CheckType>()
                .Property(e => e.CHECK_TYPE_DESC)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<chk_type>()
                .Property(e => e.chk_code)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<chk_type>()
                .Property(e => e.chk_type1)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CollBonusDetail>()
                .Property(e => e.tellerid)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CollBonusDetail>()
                .Property(e => e.creditamt)
                .HasPrecision(9, 2);

            modelBuilder.Entity<CollBonusDetail>()
                .Property(e => e.reference)
                .IsUnicode(false);

            modelBuilder.Entity<CollBonusPTP>()
                .Property(e => e.PRODUCT_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CollBonusPTP>()
                .Property(e => e.LOAN_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CollBonusPTP>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CollBonusPTP>()
                .Property(e => e.AMOUNT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<CollBonusTask>()
                .Property(e => e.tellerid)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CollectionAction>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CollectionAction>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<CollectionAgency>()
                .Property(e => e.AGENCY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<CollectionAgency>()
                .Property(e => e.AGENCY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<CollectionAgency>()
                .Property(e => e.ADDRESS1)
                .IsUnicode(false);

            modelBuilder.Entity<CollectionAgency>()
                .Property(e => e.CITY)
                .IsUnicode(false);

            modelBuilder.Entity<CollectionAgency>()
                .Property(e => e.STATE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CollectionAgency>()
                .Property(e => e.ZIPCODE)
                .IsUnicode(false);

            modelBuilder.Entity<CollectionAgency>()
                .Property(e => e.PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<CollectionAgency>()
                .Property(e => e.PHONE_EXT)
                .IsUnicode(false);

            modelBuilder.Entity<CollectionAgency>()
                .Property(e => e.CONTACT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<CollectionAgency>()
                .Property(e => e.PCT_RANGE1)
                .HasPrecision(4, 2);

            modelBuilder.Entity<CollectionAgency>()
                .Property(e => e.PCT_RANGE2)
                .HasPrecision(4, 2);

            modelBuilder.Entity<CollectionAgency>()
                .Property(e => e.EMAIL)
                .IsUnicode(false);

            modelBuilder.Entity<CollectionAgency>()
                .HasMany(e => e.CollectionAgencyPcts)
                .WithRequired(e => e.CollectionAgency)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<CollectionAgency>()
                .HasMany(e => e.CpiuMasters)
                .WithRequired(e => e.CollectionAgency)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<CollectionAgencyPct>()
                .Property(e => e.PCT)
                .HasPrecision(4, 2);

            modelBuilder.Entity<CollectionMovement>()
                .Property(e => e.CR_TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CollectionNote>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<CollectionNote>()
                .Property(e => e.RTF_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<CollectionNote>()
                .Property(e => e.DELETED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CollectionNote>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CollectionNote>()
                .HasMany(e => e.RepoCaseHistories)
                .WithRequired(e => e.CollectionNote)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.COMPANY1)
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.AREA_CODE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.ACH_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.ACH_PASSWORD)
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.ACH_AD_ASTRA_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.ACH_AD_ASTRA_PASSWORD)
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.RITA_VNUM)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.EPP_KEY)
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.MERCHANT_ID)
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.EMAIL_ADDR)
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.EMAIL_SMTP)
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.DEF_SURCHARGE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Company>()
                .Property(e => e.ACCTG_TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.RECEIPT_DUNNING_MSG)
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.CURR_VAULT_MGR)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.SOLOMON_ID)
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.SOLOMON_TITLE_ID)
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.EMAIL_TEMPLATE_PATH)
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.LONGITUDE)
                .HasPrecision(9, 6);

            modelBuilder.Entity<Company>()
                .Property(e => e.LATITUDE)
                .HasPrecision(9, 6);

            modelBuilder.Entity<Company>()
                .Property(e => e.STORE_HOURS)
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.VEREPAY_TERMINAL_ID)
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.VEREPAY_STORE_KEY)
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.SOLOMON_NONCASH_ID)
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.COUNTRY_CODE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.BUSINESS_STATE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.ADDRESS1)
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.CITY)
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.STATE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.ZIPCODE)
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.COUNTY)
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.COUNTRY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.ADDRESS_FORMAT)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.ADDR_STREET)
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.FLAT_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.BUILDING_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.BUILDING_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.ADDRESS_LINE)
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.ADDRESS_CSZ)
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.ADDRESS_LINE_3)
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.ACH_URL)
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.CR_TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.ADDRESS_LINE_1)
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.ADDRESS_LINE_2)
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.HPI_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.HPI_PASSWORD)
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.DCARD_PAYMENT_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Company>()
                .Property(e => e.SALES_TAX_PERCENT)
                .HasPrecision(5, 2);

            modelBuilder.Entity<Company>()
                .Property(e => e.GROSS_TO_NET_INCOME_PCT)
                .HasPrecision(5, 2);

            modelBuilder.Entity<Company>()
                .Property(e => e.WESTERN_UNION_BILLPAY_CONNECTORID)
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.UTC_OFFSET)
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.UTC_DST_OFFSET)
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.TIME_ZONE)
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.REPRESENTATIVE_APR)
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.MONERIS_STORE_ID)
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.MONERIS_API_TOKEN)
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.STORE_NICKNAME)
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.BUSINESS_ENTITY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.LOAN_PAYMENT_PRO_SOURCE_ID)
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.LOAN_PAYMENT_PRO_SOURCE_KEY)
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.LOAN_PAYMENT_PRO_PIN)
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.REPAY_STORE_ID)
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.REPAY_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .Property(e => e.REPAY_PASSWORD)
                .IsUnicode(false);

            modelBuilder.Entity<Company>()
                .HasMany(e => e.ACH_History)
                .WithRequired(e => e.Company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Company>()
                .HasMany(e => e.ACH_HistoryCashedCheck)
                .WithRequired(e => e.Company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Company>()
                .HasMany(e => e.ACHBankConfigExceptions)
                .WithRequired(e => e.Company)
                .HasForeignKey(e => e.LOC)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Company>()
                .HasMany(e => e.CashedChecks)
                .WithRequired(e => e.Company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Company>()
                .HasMany(e => e.CCardResponses)
                .WithRequired(e => e.Company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Company>()
                .HasMany(e => e.CollectionActions)
                .WithRequired(e => e.Company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Company>()
                .HasOptional(e => e.CompanyDetail)
                .WithRequired(e => e.Company);

            modelBuilder.Entity<Company>()
                .HasMany(e => e.CompanyDocumentResources)
                .WithRequired(e => e.Company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Company>()
                .HasMany(e => e.CompanyExpenseTypes)
                .WithRequired(e => e.Company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Company>()
                .HasMany(e => e.CurrencyExchangeConfigs)
                .WithRequired(e => e.Company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Company>()
                .HasMany(e => e.CurrencyExchangeTrans)
                .WithRequired(e => e.Company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Company>()
                .HasMany(e => e.CustomerDocuments)
                .WithRequired(e => e.Company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Company>()
                .HasMany(e => e.CustomerFeedbacks)
                .WithRequired(e => e.Company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Company>()
                .HasMany(e => e.CustomerLeadLocations)
                .WithRequired(e => e.Company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Company>()
                .HasMany(e => e.DepositBags)
                .WithRequired(e => e.Company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Company>()
                .HasMany(e => e.DepositChks)
                .WithRequired(e => e.Company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Company>()
                .HasMany(e => e.DiscountLocations)
                .WithRequired(e => e.Company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Company>()
                .HasMany(e => e.ExcludeFromCapsHistories)
                .WithRequired(e => e.Company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Company>()
                .HasMany(e => e.GiftCards)
                .WithRequired(e => e.Company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Company>()
                .HasMany(e => e.GoldConfigs)
                .WithRequired(e => e.Company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Company>()
                .HasMany(e => e.GoldTrans)
                .WithRequired(e => e.Company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Company>()
                .HasMany(e => e.ImageCashLetterDetails)
                .WithRequired(e => e.Company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Company>()
                .HasMany(e => e.IncomeTypeLocations)
                .WithRequired(e => e.Company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Company>()
                .HasMany(e => e.IncomeVerifyMethodLocations)
                .WithRequired(e => e.Company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Company>()
                .HasMany(e => e.Issuers)
                .WithRequired(e => e.Company)
                .HasForeignKey(e => e.LOCATION)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Company>()
                .HasMany(e => e.Issuers1)
                .WithOptional(e => e.Company1)
                .HasForeignKey(e => e.TLOC);

            modelBuilder.Entity<Company>()
                .HasMany(e => e.Loans)
                .WithRequired(e => e.Company)
                .HasForeignKey(e => e.LOCATION)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Company>()
                .HasMany(e => e.Loans1)
                .WithOptional(e => e.Company1)
                .HasForeignKey(e => e.CREDITED_LOCATION);

            modelBuilder.Entity<Company>()
                .HasMany(e => e.LoanDueDateChanges)
                .WithRequired(e => e.Company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Company>()
                .HasMany(e => e.LoanPayments)
                .WithRequired(e => e.Company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Company>()
                .HasMany(e => e.LoanProductBlockeds)
                .WithRequired(e => e.Company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Company>()
                .HasMany(e => e.LoanProductEnableNewLoans)
                .WithOptional(e => e.Company)
                .HasForeignKey(e => e.LIEN_ADDRESS_LOCATION);

            modelBuilder.Entity<Company>()
                .HasMany(e => e.LoanProductEnableNewLoans1)
                .WithRequired(e => e.Company1)
                .HasForeignKey(e => e.LOCATION)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Company>()
                .HasMany(e => e.LoanProductRollovers)
                .WithRequired(e => e.Company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Company>()
                .HasMany(e => e.LocationUS_ZipcodesXRef)
                .WithRequired(e => e.Company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Company>()
                .HasMany(e => e.PhoneSkillsCalls)
                .WithRequired(e => e.Company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Company>()
                .HasMany(e => e.PrepaidCardBinCompanies)
                .WithRequired(e => e.Company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Company>()
                .HasMany(e => e.ProductOpenLoanMatrices)
                .WithRequired(e => e.Company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Company>()
                .HasMany(e => e.RISREPTs)
                .WithRequired(e => e.Company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Company>()
                .HasMany(e => e.TitleLoans)
                .WithRequired(e => e.Company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Company>()
                .HasMany(e => e.TransferFundsInterStores)
                .WithRequired(e => e.Company)
                .HasForeignKey(e => e.FROM_LOCATION)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Company>()
                .HasMany(e => e.TransferFundsInterStores1)
                .WithRequired(e => e.Company1)
                .HasForeignKey(e => e.TO_LOCATION)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Company>()
                .HasMany(e => e.VaultMgrAssignments)
                .WithRequired(e => e.Company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Company>()
                .HasMany(e => e.VaultMgrAuthorizations)
                .WithRequired(e => e.Company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Company>()
                .HasMany(e => e.Vehicles)
                .WithRequired(e => e.Company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Company>()
                .HasMany(e => e.WebLoanCreditFrauds)
                .WithRequired(e => e.Company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Company>()
                .HasMany(e => e.FormLetters)
                .WithMany(e => e.Companies)
                .Map(m => m.ToTable("FormLetterLocation").MapLeftKey("LOCATION").MapRightKey("FORM_LETTER_KEY"));

            modelBuilder.Entity<CompanyDetail>()
                .Property(e => e.ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<CompanyDetail>()
                .Property(e => e.CROSS_STREETS)
                .IsUnicode(false);

            modelBuilder.Entity<CompanyDetail>()
                .Property(e => e.DIRECTIONS)
                .IsUnicode(false);

            modelBuilder.Entity<CompanyDetail>()
                .Property(e => e.NEWS_FLASH)
                .IsUnicode(false);

            modelBuilder.Entity<CompanyDetail>()
                .Property(e => e.FAX)
                .IsUnicode(false);

            modelBuilder.Entity<CompanyDetail>()
                .Property(e => e.ALTERNATE_HOURS)
                .IsUnicode(false);

            modelBuilder.Entity<CompanyDetail>()
                .Property(e => e.STORE_EMAIL_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<CompanyDocumentResource>()
                .Property(e => e.DOCUMENT_FIELD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<Country>()
                .Property(e => e.COUNTRY_CODE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Country>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<Country>()
                .Property(e => e.ISO_2_CHAR_COUNTRY_CODE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Country>()
                .HasMany(e => e.AMLForeignAddresses)
                .WithRequired(e => e.Country)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<CourtesyPayout>()
                .Property(e => e.COURTESY_PAYOUT_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<CourtesyPayout>()
                .Property(e => e.COURTESY_PAYOUT_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CourtesyPayout>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CourtesyPayout>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<CourtesyPayout>()
                .Property(e => e.RTF_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<CpiuDetail>()
                .Property(e => e.AGENCY_REFERENCE)
                .IsUnicode(false);

            modelBuilder.Entity<CpiuDetail>()
                .Property(e => e.REFERENCE)
                .IsUnicode(false);

            modelBuilder.Entity<CpiuDetail>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<CpiuDetail>()
                .Property(e => e.PAYMENT_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<CpiuDetail>()
                .Property(e => e.CHECK_NO)
                .IsUnicode(false);

            modelBuilder.Entity<CpiuDetail>()
                .Property(e => e.POSTED_TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CpiuDetail>()
                .Property(e => e.ERROR_MSG)
                .IsUnicode(false);

            modelBuilder.Entity<CpiuDetail>()
                .Property(e => e.CLIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<CpiuDetail>()
                .Property(e => e.CLIENT_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<CpiuDetail>()
                .Property(e => e.CLIENT_POSTCODE)
                .IsUnicode(false);

            modelBuilder.Entity<CpiuDetail>()
                .Property(e => e.DO_NOT_POST_TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CpiuDetail>()
                .HasMany(e => e.CpiuExceptionReports)
                .WithRequired(e => e.CpiuDetail)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<CpiuExceptionReport>()
                .Property(e => e.MESSAGE)
                .IsUnicode(false);

            modelBuilder.Entity<CpiuMaster>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CpiuMaster>()
                .Property(e => e.FILE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<CpiuMaster>()
                .Property(e => e.FINISHED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CpiuMaster>()
                .Property(e => e.LOCKED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CpiuMaster>()
                .HasMany(e => e.CpiuDetails)
                .WithRequired(e => e.CpiuMaster)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<CreditCardAttempt>()
                .Property(e => e.CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<CreditCardAttempt>()
                .Property(e => e.TOKEN)
                .IsUnicode(false);

            modelBuilder.Entity<CreditCardBlock>()
                .Property(e => e.CARD_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<CreditCardBrand>()
                .Property(e => e.BRAND_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<CreditCardBrand>()
                .Property(e => e.BRAND_DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<CreditCardResultCode>()
                .Property(e => e.RESULT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<CreditCardResultCode>()
                .Property(e => e.RESULT_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<CreditCardResultCode>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CreditCardResultCode>()
                .Property(e => e.UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CreditCardResultCode>()
                .Property(e => e.RESULT_DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<CreditCardResultCodeType>()
                .Property(e => e.RESULT_CODE_TYPE_DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<CreditCard>()
                .Property(e => e.NameOnCard)
                .IsUnicode(false);

            modelBuilder.Entity<CreditCard>()
                .Property(e => e.CardNum)
                .IsUnicode(false);

            modelBuilder.Entity<CreditCard>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CreditCard>()
                .Property(e => e.LastResult)
                .IsUnicode(false);

            modelBuilder.Entity<CreditCard>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CreditCard>()
                .Property(e => e.TOKEN)
                .IsUnicode(false);

            modelBuilder.Entity<CreditCard>()
                .Property(e => e.BILLING_ADDRESS1)
                .IsUnicode(false);

            modelBuilder.Entity<CreditCard>()
                .Property(e => e.BILLING_CITY)
                .IsUnicode(false);

            modelBuilder.Entity<CreditCard>()
                .Property(e => e.BILLING_STATE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CreditCard>()
                .Property(e => e.BILLING_ZIPCODE)
                .IsUnicode(false);

            modelBuilder.Entity<CreditCard>()
                .Property(e => e.BILLING_COUNTY)
                .IsUnicode(false);

            modelBuilder.Entity<CreditCard>()
                .Property(e => e.BILLING_COUNTRY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CreditCard>()
                .Property(e => e.DELETED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CreditCard>()
                .Property(e => e.ADDRESS_FORMAT)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CreditCard>()
                .Property(e => e.BILLING_ADDR_STREET)
                .IsUnicode(false);

            modelBuilder.Entity<CreditCard>()
                .Property(e => e.BILLING_FLAT_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<CreditCard>()
                .Property(e => e.BILLING_BUILDING_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<CreditCard>()
                .Property(e => e.BILLING_BUILDING_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<CreditCard>()
                .Property(e => e.BILLING_ADDRESS_LINE)
                .IsUnicode(false);

            modelBuilder.Entity<CreditCard>()
                .Property(e => e.BILLING_ADDRESS_CSZ)
                .IsUnicode(false);

            modelBuilder.Entity<CreditCard>()
                .Property(e => e.BILLING_ADDRESS_LINE_3)
                .IsUnicode(false);

            modelBuilder.Entity<CreditCard>()
                .Property(e => e.BILLING_ADDRESS_LINE_1)
                .IsUnicode(false);

            modelBuilder.Entity<CreditCard>()
                .Property(e => e.BILLING_ADDRESS_LINE_2)
                .IsUnicode(false);

            modelBuilder.Entity<CreditCard>()
                .Property(e => e.ALIAS_ID)
                .IsUnicode(false);

            modelBuilder.Entity<CreditCard>()
                .Property(e => e.MAG_STRIP)
                .IsUnicode(false);

            modelBuilder.Entity<CreditCard>()
                .Property(e => e.CCV)
                .IsUnicode(false);

            modelBuilder.Entity<CreditCard>()
                .HasMany(e => e.CreditCardXRefs)
                .WithOptional(e => e.CreditCard)
                .HasForeignKey(e => e.CREDIT_CARD_KEY);

            modelBuilder.Entity<CreditCard>()
                .HasMany(e => e.Loans)
                .WithOptional(e => e.CreditCard)
                .HasForeignKey(e => e.CREDIT_CARD_KEY);

            modelBuilder.Entity<CreditCard>()
                .HasMany(e => e.OptPlusCardDetails)
                .WithRequired(e => e.CreditCard)
                .HasForeignKey(e => e.CREDIT_CARD_KEY)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<CreditCard>()
                .HasMany(e => e.OptPlusCardDetails1)
                .WithOptional(e => e.CreditCard1)
                .HasForeignKey(e => e.OTHER_CREDITCARD_KEY);

            modelBuilder.Entity<CreditCard>()
                .HasMany(e => e.PrepaidCardStopPayments)
                .WithRequired(e => e.CreditCard)
                .HasForeignKey(e => e.CREDIT_CARD_KEY)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<CreditCard>()
                .HasMany(e => e.RolloverRequests)
                .WithOptional(e => e.CreditCard)
                .HasForeignKey(e => e.CREDIT_CARD_KEY);

            modelBuilder.Entity<CreditCardsEdit>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CreditCardsEdit>()
                .Property(e => e.FIELD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<CreditCardsEdit>()
                .Property(e => e.OLD_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<CreditCardsEdit>()
                .Property(e => e.NEW_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<CreditCardTran>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CreditCardTran>()
                .Property(e => e.REQ_FILE_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CreditCardTran>()
                .Property(e => e.CCARD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<CreditCardTran>()
                .Property(e => e.CHARGE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<CreditCardTran>()
                .Property(e => e.ERROR_MSG)
                .IsUnicode(false);

            modelBuilder.Entity<CreditCardTran>()
                .Property(e => e.AUTH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<CreditCardTran>()
                .Property(e => e.RESULT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<CreditCardTran>()
                .Property(e => e.DECLINE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<CreditCardTran>()
                .Property(e => e.AVS_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<CreditCardTran>()
                .Property(e => e.CVV_CODE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CreditCardTran>()
                .Property(e => e.TOKEN)
                .IsUnicode(false);

            modelBuilder.Entity<CreditCardTran>()
                .Property(e => e.FEE_CHARGED_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<CreditCardTran>()
                .Property(e => e.VENDOR_RESPONSE)
                .IsUnicode(false);

            modelBuilder.Entity<CreditCardTran>()
                .Property(e => e.EPDQ_TRANS_ID)
                .IsUnicode(false);

            modelBuilder.Entity<CreditCardTran>()
                .Property(e => e.VENDOR_POST)
                .IsUnicode(false);

            modelBuilder.Entity<CreditCardTran>()
                .Property(e => e.DECLINE_CODE_TWO_CHAR)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CreditCardTran>()
                .Property(e => e.AVS_CODE_TWO_CHAR)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CreditCardTran>()
                .Property(e => e.CCARD_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<CreditCardTran>()
                .Property(e => e.MAG_STRIP)
                .IsUnicode(false);

            modelBuilder.Entity<CreditCardTran>()
                .HasMany(e => e.LoanApplications)
                .WithOptional(e => e.CreditCardTran)
                .HasForeignKey(e => e.PENNY_AUTH_KEY);

            modelBuilder.Entity<CreditCardTran>()
                .HasOptional(e => e.ZeroDollarAuth)
                .WithRequired(e => e.CreditCardTran);

            modelBuilder.Entity<CreditCardVendor>()
                .Property(e => e.CC_VENDOR_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<CreditCardXRef>()
                .Property(e => e.ORIGINAL_PRN)
                .IsUnicode(false);

            modelBuilder.Entity<CreditCardXRef>()
                .Property(e => e.ID_NO)
                .IsUnicode(false);

            modelBuilder.Entity<CreditRptPrint>()
                .Property(e => e.ReportLine)
                .IsUnicode(false);

            modelBuilder.Entity<CreditVendorData>()
                .Property(e => e.DEF_STATE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CreditVendorData>()
                .Property(e => e.TRANS_AMOUNT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<CreditVendorData>()
                .Property(e => e.CLVERIFY_PAYMENT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<CreditVendorData>()
                .Property(e => e.SENT_MSG)
                .IsUnicode(false);

            modelBuilder.Entity<CuroHelp>()
                .Property(e => e.FORM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<CuroHelp>()
                .Property(e => e.CONTROL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<CuroHelp>()
                .Property(e => e.HELP_TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<CuroHelp>()
                .Property(e => e.HELP_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<CuroHelp>()
                .Property(e => e.TOOLTIP_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<Currency>()
                .Property(e => e.CURRENCY_CODE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Currency>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<Currency>()
                .Property(e => e.CURRENCY_SYMBOL)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Currency>()
                .Property(e => e.BILL_DISPLAY)
                .IsUnicode(false);

            modelBuilder.Entity<Currency>()
                .Property(e => e.GROUPED_COIN_DISPLAY)
                .IsUnicode(false);

            modelBuilder.Entity<Currency>()
                .HasMany(e => e.Companies)
                .WithRequired(e => e.Currency)
                .HasForeignKey(e => e.BASE_CURRENCY_KEY)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Currency>()
                .HasMany(e => e.CurrencyExchangeConfigs)
                .WithRequired(e => e.Currency)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Currency>()
                .HasMany(e => e.Denominations)
                .WithRequired(e => e.Currency)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Currency>()
                .HasMany(e => e.DrawerZCashes)
                .WithRequired(e => e.Currency)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Currency>()
                .HasMany(e => e.TransDetailCashes)
                .WithRequired(e => e.Currency)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<CurrencyExchangeConfig>()
                .Property(e => e.MIN_EXCHANGE_FEE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<CurrencyExchangeConfig>()
                .Property(e => e.MAX_EXCHANGE_FEE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<CurrencyExchangeConfig>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CurrencyExchangeConfig>()
                .Property(e => e.EXCHANGE_FEE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<CurrencyExchangeConfig>()
                .Property(e => e.MAX_EXCHANGE_RATE)
                .HasPrecision(7, 4);

            modelBuilder.Entity<CurrencyExchangeConfig>()
                .Property(e => e.MIN_EXCHANGE_RATE)
                .HasPrecision(7, 4);

            modelBuilder.Entity<CurrencyExchangeConfig>()
                .Property(e => e.BUY_EXCHANGE_RATE_PERCENT)
                .HasPrecision(7, 4);

            modelBuilder.Entity<CurrencyExchangeConfig>()
                .Property(e => e.SELL_EXCHANGE_RATE_PERCENT)
                .HasPrecision(7, 4);

            modelBuilder.Entity<CurrencyExchangeTran>()
                .Property(e => e.TELLER)
                .IsUnicode(false);

            modelBuilder.Entity<CurrencyExchangeTran>()
                .Property(e => e.FROM_CURRENCY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<CurrencyExchangeTran>()
                .Property(e => e.FROM_CURRENCY_RATE)
                .HasPrecision(18, 10);

            modelBuilder.Entity<CurrencyExchangeTran>()
                .Property(e => e.TO_CURRENCY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<CurrencyExchangeTran>()
                .Property(e => e.TO_CURRENCY_RATE)
                .HasPrecision(18, 10);

            modelBuilder.Entity<CurrencyExchangeTran>()
                .Property(e => e.BASE_CURRENCY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<CurrencyExchangeTran>()
                .Property(e => e.BASE_CURRENCY_RATE)
                .HasPrecision(18, 10);

            modelBuilder.Entity<CurrencyExchangeTran>()
                .Property(e => e.CONVERSION_RATE)
                .HasPrecision(18, 10);

            modelBuilder.Entity<CurrencyExchangeTran>()
                .Property(e => e.AMOUNT_RECEIVED)
                .HasPrecision(19, 4);

            modelBuilder.Entity<CurrencyExchangeTran>()
                .Property(e => e.FEE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<CurrencyExchangeTran>()
                .Property(e => e.EXCHANGE_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<CurrencyExchangeTran>()
                .Property(e => e.AMOUNT_DUE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<CurrencyExchangeTran>()
                .Property(e => e.CHANGE_DUE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<CurrencyExchangeTran>()
                .Property(e => e.PAY_BILL)
                .HasPrecision(19, 4);

            modelBuilder.Entity<CurrencyExchangeTran>()
                .Property(e => e.PAY_CHANGE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<CurrencyExchangeTran>()
                .Property(e => e.CALCULATED_CONVERSION_RATE)
                .HasPrecision(18, 10);

            modelBuilder.Entity<CurrencyExchangeTran>()
                .Property(e => e.FEE_IN_BASE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<CurrencyExchangeTran>()
                .Property(e => e.EXCHANGE_RATE_PERCENT)
                .HasPrecision(7, 4);

            modelBuilder.Entity<CurrencyExchangeTran>()
                .Property(e => e.XE_CONVERSION_RATE)
                .HasPrecision(18, 10);

            modelBuilder.Entity<CurrencyExchangeTran>()
                .Property(e => e.GAIN_LOSS)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Customer>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.TUPT)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.SSN)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.ID_NO)
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.FIRSTNAME)
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.MIDNAME)
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.LASTNAME)
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.HOME_ADDR_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.HOME_ADDR_PRE_DIR)
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.HOME_ADDR_STREET)
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.HOME_ADDR_SUFFIX)
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.HOME_ADDR_SUITE)
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.HOME_ADDR_SUITE_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.COUNTY)
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.HOME_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.CELL_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.WORK_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.WORK_PHONE_EXT)
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.SPOUSE_FIRSTNAME)
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.SPOUSE_MIDNAME)
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.SPOUSE_LASTNAME)
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.SPOUSE_SSN)
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.SPOUSE_WORK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.SPOUSE_WORK_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.SPOUSE_WORK_PHONE_EXT)
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.SPOUSE_PAYCYCLE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.GENDER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.CKLIMIT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Customer>()
                .Property(e => e.PRALIMIT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Customer>()
                .Property(e => e.UTIL1)
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.UTIL2)
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.UTIL3)
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.HOW_REF_OBSOLETE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.EMAIL_OBSOLETE)
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.REF1_FIRSTNAME)
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.REF1_LASTNAME)
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.REF1_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.REF1_RELATIONSHIP)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.REF2_FIRSTNAME)
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.REF2_LASTNAME)
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.REF2_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.REF2_RELATIONSHIP)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.PAY_CYCLE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.PAY_CYCLE_MONTH_INT)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.PAY_CYCLE_UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.ACH_STATUS)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.RI_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Customer>()
                .Property(e => e.LEGAL_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.COURTESY_CALL_NUM)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.CUST_ID_SOURCE)
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.SPOUSE_HOME_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.SPOUSE_CELL_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.HOME_ADDR_POST_DIR)
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.ORIGINAL_WEB_VISIT_SOURCE)
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.HOME_COUNTRY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.NIN)
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.ORIGINAL_PRN)
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.OPTPLUS_ACCOUNT_ID)
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.HOME_CITY)
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.HOME_STATE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.HOME_ZIPCODE)
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.HOME_COUNTY)
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.CITY)
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.STATE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.ZIPCODE)
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.ADDRESS_FORMAT)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.HOME_FLAT_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.HOME_BUILDING_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.HOME_BUILDING_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.HOME_ADDRESS_LINE)
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.HOME_ADDRESS_CSZ)
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.HOME_ADDRESS_LINE_3)
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.HOME_ADDRESS_LINE_1)
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.HOME_ADDRESS_LINE_2)
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.NICKNAME)
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .Property(e => e.PREFERRED_LANGUAGE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Customer>()
                .HasMany(e => e.ACH_History)
                .WithRequired(e => e.Customer)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Customer>()
                .HasMany(e => e.ACH_HistoryCashedCheck)
                .WithRequired(e => e.Customer)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Customer>()
                .HasMany(e => e.ACHPendings)
                .WithRequired(e => e.Customer)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Customer>()
                .HasMany(e => e.BlockMailings)
                .WithRequired(e => e.Customer)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Customer>()
                .HasMany(e => e.CashedChecks)
                .WithRequired(e => e.Customer)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Customer>()
                .HasMany(e => e.CashMoneyToCuroXRefs)
                .WithRequired(e => e.Customer)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Customer>()
                .HasMany(e => e.CourtesyPayouts)
                .WithRequired(e => e.Customer)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Customer>()
                .HasMany(e => e.CreditCardXRefs)
                .WithRequired(e => e.Customer)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Customer>()
                .HasMany(e => e.CustomerBusinesses)
                .WithRequired(e => e.Customer)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Customer>()
                .HasMany(e => e.CustomerCreditRpts)
                .WithRequired(e => e.Customer)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Customer>()
                .HasMany(e => e.CustomerDocuments)
                .WithRequired(e => e.Customer)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Customer>()
                .HasMany(e => e.CustomerEarnedCredits)
                .WithRequired(e => e.Customer)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Customer>()
                .HasMany(e => e.CustomerEmployers)
                .WithRequired(e => e.Customer)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Customer>()
                .HasMany(e => e.CustomerExpenses)
                .WithRequired(e => e.Customer)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Customer>()
                .HasMany(e => e.CustomerFeedbacks)
                .WithRequired(e => e.Customer)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Customer>()
                .HasMany(e => e.CustomerFlashResponses)
                .WithRequired(e => e.Customer)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Customer>()
                .HasMany(e => e.CustomerIdentifications)
                .WithRequired(e => e.Customer)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Customer>()
                .HasMany(e => e.CustomerIncomes)
                .WithRequired(e => e.Customer)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Customer>()
                .HasMany(e => e.CustomerLastCreditReports)
                .WithRequired(e => e.Customer)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Customer>()
                .HasMany(e => e.CustomerNotes)
                .WithRequired(e => e.Customer)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Customer>()
                .HasMany(e => e.DepositBagDetails)
                .WithRequired(e => e.Customer)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Customer>()
                .HasMany(e => e.DepositChkDetails)
                .WithRequired(e => e.Customer)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Customer>()
                .HasMany(e => e.FormLetterPrinteds)
                .WithRequired(e => e.Customer)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Customer>()
                .HasMany(e => e.FormLetterResults)
                .WithRequired(e => e.Customer)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Customer>()
                .HasMany(e => e.FurtherFinanceResults)
                .WithRequired(e => e.Customer)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Customer>()
                .HasMany(e => e.GoldTransCustomers)
                .WithRequired(e => e.Customer)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Customer>()
                .HasMany(e => e.GoodCustomerStudies)
                .WithRequired(e => e.Customer)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Customer>()
                .HasMany(e => e.Issuers)
                .WithOptional(e => e.Customer)
                .WillCascadeOnDelete();

            modelBuilder.Entity<Customer>()
                .HasMany(e => e.Loans)
                .WithRequired(e => e.Customer)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Customer>()
                .HasMany(e => e.LoanApplicationVehicleInformations)
                .WithRequired(e => e.Customer)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Customer>()
                .HasMany(e => e.LoanDueDateChanges)
                .WithRequired(e => e.Customer)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Customer>()
                .HasMany(e => e.MetroIIBaseSegments)
                .WithRequired(e => e.Customer)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Customer>()
                .HasMany(e => e.OptPlusDirectDeposits)
                .WithRequired(e => e.Customer)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Customer>()
                .HasMany(e => e.OptPlusRDFAccountCards)
                .WithOptional(e => e.Customer)
                .WillCascadeOnDelete();

            modelBuilder.Entity<Customer>()
                .HasMany(e => e.OptPlusRDFAuthorizedTransactions)
                .WithOptional(e => e.Customer)
                .WillCascadeOnDelete();

            modelBuilder.Entity<Customer>()
                .HasMany(e => e.OptPlusRDFCustomerMasters)
                .WithOptional(e => e.Customer)
                .WillCascadeOnDelete();

            modelBuilder.Entity<Customer>()
                .HasMany(e => e.OptPlusRDFODTransitions)
                .WithOptional(e => e.Customer)
                .WillCascadeOnDelete();

            modelBuilder.Entity<Customer>()
                .HasMany(e => e.OptPlusRDFPostedTrans)
                .WithOptional(e => e.Customer)
                .WillCascadeOnDelete();

            modelBuilder.Entity<Customer>()
                .HasMany(e => e.PrepaidFISAccountBalances)
                .WithOptional(e => e.Customer)
                .WillCascadeOnDelete();

            modelBuilder.Entity<Customer>()
                .HasMany(e => e.PrepaidFISAuthTrans)
                .WithOptional(e => e.Customer)
                .WillCascadeOnDelete();

            modelBuilder.Entity<Customer>()
                .HasMany(e => e.PrepaidFISCustomerMasters)
                .WithOptional(e => e.Customer)
                .WillCascadeOnDelete();

            modelBuilder.Entity<Customer>()
                .HasMany(e => e.PrepaidFISPostedTrans)
                .WithOptional(e => e.Customer)
                .WillCascadeOnDelete();

            modelBuilder.Entity<Customer>()
                .HasMany(e => e.PromiseToPays)
                .WithRequired(e => e.Customer)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Customer>()
                .HasMany(e => e.RbcEFundBatchDetails)
                .WithRequired(e => e.Customer)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Customer>()
                .HasMany(e => e.RIAgingHistories)
                .WithRequired(e => e.Customer)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Customer>()
                .HasMany(e => e.RISREPTs)
                .WithRequired(e => e.Customer)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Customer>()
                .HasMany(e => e.SPaySchedRollovers)
                .WithRequired(e => e.Customer)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Customer>()
                .HasMany(e => e.TitleLoans)
                .WithRequired(e => e.Customer)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Customer>()
                .HasMany(e => e.VehicleHistories)
                .WithRequired(e => e.Customer)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Customer>()
                .HasMany(e => e.WebCallQueues)
                .WithOptional(e => e.Customer)
                .HasForeignKey(e => e.WEB_CALL_CUSTOMER_KEY);

            modelBuilder.Entity<Customer>()
                .HasMany(e => e.WebCallWorkQueues)
                .WithOptional(e => e.Customer)
                .HasForeignKey(e => e.WEB_CALL_CUSTOMER_KEY);

            modelBuilder.Entity<Customer>()
                .HasMany(e => e.WebLoanCreditFrauds)
                .WithRequired(e => e.Customer)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<CustomerActivity>()
                .Property(e => e.PRODUCT_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerActivity>()
                .Property(e => e.LOAN_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerAddress>()
                .Property(e => e.ADDRESS_CONTACT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerAddress>()
                .Property(e => e.ADDRESS_CONTACT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerAddress>()
                .Property(e => e.CITY)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerAddress>()
                .Property(e => e.STATE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerAddress>()
                .Property(e => e.ZIPCODE)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerAddress>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerAddress>()
                .Property(e => e.STATUS_CHANGE_TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerAddress>()
                .Property(e => e.PRIORITY_CHANGE_TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerAddress>()
                .Property(e => e.ADDR_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerAddress>()
                .Property(e => e.ADDR_PRE_DIR)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerAddress>()
                .Property(e => e.ADDR_STREET)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerAddress>()
                .Property(e => e.ADDR_SUFFIX)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerAddress>()
                .Property(e => e.ADDR_POST_DIR)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerAddress>()
                .Property(e => e.ADDR_SUITE)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerAddress>()
                .Property(e => e.ADDR_SUITE_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerAddress>()
                .Property(e => e.LAST_UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerAddress>()
                .Property(e => e.COUNTY)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerAddress>()
                .Property(e => e.COUNTRY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerAddress>()
                .Property(e => e.ADDRESS_FORMAT)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerAddress>()
                .Property(e => e.FLAT_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerAddress>()
                .Property(e => e.BUILDING_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerAddress>()
                .Property(e => e.BUILDING_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerAddress>()
                .Property(e => e.ADDRESS_LINE)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerAddress>()
                .Property(e => e.ADDRESS_CSZ)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerAddress>()
                .Property(e => e.ADDRESS_LINE_3)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerAddress>()
                .Property(e => e.ADDRESS_LINE_1)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerAddress>()
                .Property(e => e.ADDRESS_LINE_2)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerAddress>()
                .Property(e => e.REMOVED_REASON_NOTES)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerAddress>()
                .HasMany(e => e.CustomerEmployers)
                .WithOptional(e => e.CustomerAddress)
                .HasForeignKey(e => e.ADDRESS_KEY);

            modelBuilder.Entity<CustomerAddress>()
                .HasMany(e => e.FormLetterPrinteds)
                .WithRequired(e => e.CustomerAddress)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<CustomerAddressEdit>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerAddressEdit>()
                .Property(e => e.FIELD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerAddressEdit>()
                .Property(e => e.OLD_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerAddressEdit>()
                .Property(e => e.NEW_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerAppDate>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerBusiness>()
                .Property(e => e.BUSINESS_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerBusiness>()
                .Property(e => e.TAX_ID_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerBusiness>()
                .Property(e => e.BUSINESS_PHONE_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerBusiness>()
                .Property(e => e.VER_MONTHLY_NET_INC)
                .HasPrecision(10, 4);

            modelBuilder.Entity<CustomerBusiness>()
                .Property(e => e.VER_BANK_DEPOSITS)
                .HasPrecision(10, 4);

            modelBuilder.Entity<CustomerBusiness>()
                .Property(e => e.ADDR_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerBusiness>()
                .Property(e => e.ADDR_POST_DIR)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerBusiness>()
                .Property(e => e.ADDR_PRE_DIR)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerBusiness>()
                .Property(e => e.ADDR_STREET)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerBusiness>()
                .Property(e => e.ADDR_SUFFIX)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerBusiness>()
                .Property(e => e.ADDR_SUITE)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerBusiness>()
                .Property(e => e.ADDR_SUITE_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerBusiness>()
                .Property(e => e.CITY)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerBusiness>()
                .Property(e => e.STATE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerBusiness>()
                .Property(e => e.ZIPCODE)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerBusiness>()
                .Property(e => e.COUNTY)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerBusiness>()
                .Property(e => e.COUNTRY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerBusiness>()
                .Property(e => e.ADDRESS_FORMAT)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerBusiness>()
                .Property(e => e.FLAT_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerBusiness>()
                .Property(e => e.BUILDING_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerBusiness>()
                .Property(e => e.BUILDING_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerBusiness>()
                .Property(e => e.ADDRESS_LINE)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerBusiness>()
                .Property(e => e.ADDRESS_CSZ)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerBusiness>()
                .Property(e => e.ADDRESS_LINE_3)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerBusiness>()
                .Property(e => e.ADDRESS_LINE_1)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerBusiness>()
                .Property(e => e.ADDRESS_LINE_2)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerBusiness>()
                .HasMany(e => e.BusinessLoans)
                .WithRequired(e => e.CustomerBusiness)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<CustomerCreditRpt>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerCreditRpt>()
                .HasMany(e => e.CustomerCreditRptDetails)
                .WithRequired(e => e.CustomerCreditRpt)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<CustomerCreditRptDetail>()
                .Property(e => e.LINE_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerCreditRptDetail>()
                .Property(e => e.LINE_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerDocument>()
                .Property(e => e.IGNORE_TELLER)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerDocument>()
                .Property(e => e.IGNORE_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerDocument>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerEarnedCredit>()
                .Property(e => e.TOTAL_EARNED)
                .HasPrecision(10, 4);

            modelBuilder.Entity<CustomerEarnedCredit>()
                .Property(e => e.TOTAL_REDEEMED)
                .HasPrecision(10, 4);

            modelBuilder.Entity<CustomerEarnedCredit>()
                .HasMany(e => e.EarnedCreditTrans)
                .WithRequired(e => e.CustomerEarnedCredit)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<CustomerEdit>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerEdit>()
                .Property(e => e.FIELD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerEdit>()
                .Property(e => e.OLD_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerEdit>()
                .Property(e => e.NEW_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerEmployer>()
                .Property(e => e.EMPLOYER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerEmployer>()
                .Property(e => e.DEPARTMENT)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerEmployer>()
                .Property(e => e.COUNTY)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerEmployer>()
                .Property(e => e.COUNTRY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerEmployer>()
                .Property(e => e.FULLPARTTIME)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerEmployer>()
                .Property(e => e.PAY_CYCLE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerEmployer>()
                .Property(e => e.PAY_CYCLE_MONTH_INT)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerEmployer>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerEmployer>()
                .Property(e => e.UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerEmployer>()
                .Property(e => e.INACTIVE_TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerEmployer>()
                .Property(e => e.DELETED_TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerEmployer>()
                .HasMany(e => e.CustomerIncomes)
                .WithRequired(e => e.CustomerEmployer)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<CustomerEmployerEdit>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerEmployerEdit>()
                .Property(e => e.FIELD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerEmployerEdit>()
                .Property(e => e.OLD_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerEmployerEdit>()
                .Property(e => e.NEW_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerExpense>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerExpense>()
                .HasMany(e => e.CustomerExpenseDetails)
                .WithRequired(e => e.CustomerExpense)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<CustomerExpenseDetail>()
                .Property(e => e.AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<CustomerFeedback>()
                .Property(e => e.FEEDBACK)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerFeedback>()
                .Property(e => e.RESOLUTION_NOTES)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerFeedback>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerFeedback>()
                .Property(e => e.LAST_UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerFeedbackCategory>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerFeedbackCategory>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerFeedbackCategory>()
                .Property(e => e.LAST_UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerFeedbackCategory>()
                .HasMany(e => e.CustomerFeedbacks)
                .WithRequired(e => e.CustomerFeedbackCategory)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<CustomerFeedbackCategory>()
                .HasMany(e => e.CustomerFeedbackTypeCategoryXRefs)
                .WithRequired(e => e.CustomerFeedbackCategory)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<CustomerFeedbackResolution>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerFeedbackResolution>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerFeedbackResolution>()
                .Property(e => e.LAST_UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerFeedbackType>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerFeedbackType>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerFeedbackType>()
                .Property(e => e.LAST_UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerFeedbackType>()
                .HasMany(e => e.CustomerFeedbacks)
                .WithRequired(e => e.CustomerFeedbackType)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<CustomerFeedbackType>()
                .HasMany(e => e.CustomerFeedbackTypeCategoryXRefs)
                .WithRequired(e => e.CustomerFeedbackType)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<CustomerFeedbackTypeCategoryXRef>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerFlashORRebate>()
                .Property(e => e.REBATE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<CustomerFlashORRebate>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerFlashQuestion>()
                .Property(e => e.LOOKUP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerFlashQuestion>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerFlashResponse>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerIdentification>()
                .Property(e => e.ID_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerIdentification>()
                .Property(e => e.ID_SOURCE)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerIdentification>()
                .Property(e => e.CUST_ID_COUNTRY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerIdentification>()
                .Property(e => e.CUST_ID_STATE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerIdentification>()
                .Property(e => e.VERIFIED_OTHER)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerIdentification>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerIdentificationEdit>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerIdentificationEdit>()
                .Property(e => e.FIELD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerIdentificationEdit>()
                .Property(e => e.OLD_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerIdentificationEdit>()
                .Property(e => e.NEW_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerIncome>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerIncome>()
                .Property(e => e.AMOUNT_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerIncome>()
                .Property(e => e.INCOME_AMOUNT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<CustomerIncome>()
                .Property(e => e.DELETED_TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerIncome>()
                .Property(e => e.AMOUNT_CYCLE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerIncome>()
                .Property(e => e.INACTIVE_TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerIncome>()
                .HasMany(e => e.LoanIncomes)
                .WithRequired(e => e.CustomerIncome)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<CustomerLastCreditReport>()
                .Property(e => e.FIRSTNAME)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerLastCreditReport>()
                .Property(e => e.LASTNAME)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerLastCreditReport>()
                .Property(e => e.SSN)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerLead>()
                .Property(e => e.LEAD_SOURCE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerLead>()
                .Property(e => e.FIRSTNAME)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerLead>()
                .Property(e => e.MIDNAME)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerLead>()
                .Property(e => e.LASTNAME)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerLead>()
                .Property(e => e.SSN)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerLead>()
                .Property(e => e.HOME_ADDR_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerLead>()
                .Property(e => e.HOME_ADDR_PRE_DIR)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerLead>()
                .Property(e => e.HOME_ADDR_STREET)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerLead>()
                .Property(e => e.HOME_ADDR_SUFFIX)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerLead>()
                .Property(e => e.HOME_ADDR_POST_DIR)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerLead>()
                .Property(e => e.HOME_ADDR_SUITE)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerLead>()
                .Property(e => e.HOME_ADDR_SUITE_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerLead>()
                .Property(e => e.HOME_CITY)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerLead>()
                .Property(e => e.HOME_STATE)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerLead>()
                .Property(e => e.HOME_ZIPCODE)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerLead>()
                .Property(e => e.HOME_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerLead>()
                .Property(e => e.CELL_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerLead>()
                .Property(e => e.WORK_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerLead>()
                .Property(e => e.WORK_PHONE_EXT)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerLead>()
                .Property(e => e.PREFERRED_CONTACT)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerLead>()
                .Property(e => e.EMAIL)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerLead>()
                .Property(e => e.PAY_CYCLE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerLead>()
                .Property(e => e.GROSS_INCOME)
                .HasPrecision(9, 2);

            modelBuilder.Entity<CustomerLead>()
                .Property(e => e.NET_INCOME)
                .HasPrecision(9, 2);

            modelBuilder.Entity<CustomerLead>()
                .Property(e => e.PVBD_INCOME)
                .HasPrecision(9, 2);

            modelBuilder.Entity<CustomerLead>()
                .Property(e => e.ABA_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerLead>()
                .Property(e => e.ACCT_NO)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerLead>()
                .Property(e => e.APPT_FOLLOW_TIME)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerLead>()
                .Property(e => e.TELLER_UPDATED)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerLead>()
                .Property(e => e.HOME_ADDRESS_LINE)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerLead>()
                .HasMany(e => e.CustomerLeadActivities)
                .WithRequired(e => e.CustomerLead)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<CustomerLead>()
                .HasMany(e => e.CustomerLeadNotes)
                .WithRequired(e => e.CustomerLead)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<CustomerLeadAction>()
                .Property(e => e.ACTION)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerLeadAction>()
                .HasMany(e => e.CustomerLeadActivities)
                .WithRequired(e => e.CustomerLeadAction)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<CustomerLeadActivity>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerLeadNote>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerLeadNote>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerLeadReason>()
                .Property(e => e.REASON)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerLeadReason>()
                .HasMany(e => e.CustomerLeadStatusReasons)
                .WithRequired(e => e.CustomerLeadReason)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<CustomerLeadStatu>()
                .Property(e => e.STATUS)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerLeadStatu>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerLeadStatu>()
                .HasMany(e => e.CustomerLeadActivities)
                .WithRequired(e => e.CustomerLeadStatu)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<CustomerLeadStatu>()
                .HasMany(e => e.CustomerLeadStatusReasons)
                .WithRequired(e => e.CustomerLeadStatu)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<CustomerMergeHistory>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerNote>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerNote>()
                .Property(e => e.RTF_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerNote>()
                .Property(e => e.DELETED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerNote>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerPhoneNumber>()
                .Property(e => e.PHONE_CONTACT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerPhoneNumber>()
                .Property(e => e.PHONE_CONTACT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerPhoneNumber>()
                .Property(e => e.PHONE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerPhoneNumber>()
                .Property(e => e.PHONE_EXT)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerPhoneNumber>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerPhoneNumber>()
                .Property(e => e.STATUS_CHANGE_TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerPhoneNumber>()
                .Property(e => e.PRIORITY_CHANGE_TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerPhoneNumber>()
                .Property(e => e.LAST_UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerPhoneNumber>()
                .Property(e => e.CALL_CENTER_DO_NOT_CALL_CHANGE_TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerPhoneNumber>()
                .HasMany(e => e.CustomerEmployers)
                .WithOptional(e => e.CustomerPhoneNumber)
                .HasForeignKey(e => e.PHONE_NUMBER_KEY);

            modelBuilder.Entity<CustomerPhoneNumberEdit>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerPhoneNumberEdit>()
                .Property(e => e.FIELD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerPhoneNumberEdit>()
                .Property(e => e.OLD_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerPhoneNumberEdit>()
                .Property(e => e.NEW_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerResponse>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerResponse>()
                .Property(e => e.RESPONSE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerSDNCert>()
                .Property(e => e.OTHER_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerSDNCert>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerSurvey>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerSurvey>()
                .Property(e => e.CALLED_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerSurvey>()
                .Property(e => e.CALLED_FROM_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerSurvey>()
                .Property(e => e.CALLED_FROM_CITY_STATE)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerSurvey>()
                .Property(e => e.QUESTIONAVG)
                .HasPrecision(19, 4);

            modelBuilder.Entity<DCardChargeBackXRef>()
                .Property(e => e.CHARGE_BACK_AMOUNT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<DDI>()
                .Property(e => e.REFERENCE)
                .IsUnicode(false);

            modelBuilder.Entity<DDI>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<DDI>()
                .HasMany(e => e.DDIACHHistories)
                .WithRequired(e => e.DDI)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<DDI>()
                .HasMany(e => e.DDIEditHistories)
                .WithRequired(e => e.DDI)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<DDI>()
                .HasMany(e => e.DDISendDetails)
                .WithRequired(e => e.DDI)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<DDI>()
                .HasMany(e => e.DDISendQueues)
                .WithRequired(e => e.DDI)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<DDIEditHistory>()
                .Property(e => e.FIELD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<DDIEditHistory>()
                .Property(e => e.OLD_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<DDIEditHistory>()
                .Property(e => e.NEW_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<DDISend>()
                .Property(e => e.FILE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<DDISend>()
                .HasMany(e => e.DDISendDetails)
                .WithRequired(e => e.DDISend)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<DDISendDetail>()
                .Property(e => e.SORT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<DDISendDetail>()
                .Property(e => e.ACCOUNT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<DDISendDetail>()
                .Property(e => e.LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<DDISendDetail>()
                .Property(e => e.REFERENCE)
                .IsUnicode(false);

            modelBuilder.Entity<DDISendDetail>()
                .Property(e => e.TRANS_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<DDISendDetail>()
                .Property(e => e.STATUS)
                .IsUnicode(false);

            modelBuilder.Entity<DDISendDetail>()
                .Property(e => e.ORIGINATOR)
                .IsUnicode(false);

            modelBuilder.Entity<DDISendDetail>()
                .Property(e => e.SENT_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<DDISendQueue>()
                .Property(e => e.SORT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<DDISendQueue>()
                .Property(e => e.ACCOUNT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<DDISendQueue>()
                .Property(e => e.LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<DDISendQueue>()
                .Property(e => e.REFERENCE)
                .IsUnicode(false);

            modelBuilder.Entity<DDISendQueue>()
                .Property(e => e.TRANS_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<DDISendQueue>()
                .Property(e => e.STATUS)
                .IsUnicode(false);

            modelBuilder.Entity<DDISendQueue>()
                .Property(e => e.ORIGINATOR)
                .IsUnicode(false);

            modelBuilder.Entity<DDISendQueue>()
                .Property(e => e.SENT_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<DDIStatu>()
                .Property(e => e.DISPLAY)
                .IsUnicode(false);

            modelBuilder.Entity<DDIStatu>()
                .Property(e => e.CODE_DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<Denomination>()
                .Property(e => e.AMOUNT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Denomination>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<Denomination>()
                .Property(e => e.DENOMINATION_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Denomination>()
                .HasMany(e => e.Denomination1)
                .WithOptional(e => e.Denomination2)
                .HasForeignKey(e => e.BASE_DENOMINATION_KEY);

            modelBuilder.Entity<Denomination>()
                .HasMany(e => e.DrawerMasterParsedCashes)
                .WithRequired(e => e.Denomination)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Denomination>()
                .HasMany(e => e.TransDetailCashParsedCashes)
                .WithRequired(e => e.Denomination)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Denomination>()
                .HasMany(e => e.VaultCountCalcParsedCashes)
                .WithRequired(e => e.Denomination)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Denomination>()
                .HasMany(e => e.VaultCountEnteredParsedCashes)
                .WithRequired(e => e.Denomination)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Denomination>()
                .HasMany(e => e.VaultMasterParsedCashes)
                .WithRequired(e => e.Denomination)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<DepositBag>()
                .Property(e => e.DB_BAG_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<DepositBag>()
                .Property(e => e.DB_ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<DepositBag>()
                .Property(e => e.CASHED_CHK_TOTAL_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<DepositBag>()
                .Property(e => e.PAYDAY_CHK_TOTAL_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<DepositBag>()
                .Property(e => e.USD_CASHED_CHK_TOTAL_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<DepositBag>()
                .Property(e => e.CHK_TOTAL_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<DepositBag>()
                .HasMany(e => e.DepositBagDetails)
                .WithRequired(e => e.DepositBag)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<DepositBagDetail>()
                .Property(e => e.REVERSED_BY_DELETE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<DepositChk>()
                .Property(e => e.DC_CHK_TOT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<DepositChk>()
                .Property(e => e.DC_DEPOSIT_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<DepositChk>()
                .Property(e => e.DC_COURIER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<DepositChk>()
                .HasMany(e => e.DepositChkDetails)
                .WithRequired(e => e.DepositChk)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<DepositDebitCard>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<DepositDebitCard>()
                .Property(e => e.DEBIT_TOT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<DepositDebitCard>()
                .HasMany(e => e.DepositDebitCardDetails)
                .WithRequired(e => e.DepositDebitCard)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<DepositDebitCardDetail>()
                .Property(e => e.REVERSED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<DialerJob>()
                .Property(e => e.JOB_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<DialerJob>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<DialerJob>()
                .Property(e => e.EXPORT_FILE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<DialerJob>()
                .Property(e => e.JOB_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<DialerJob>()
                .Property(e => e.LOCATIONS)
                .IsUnicode(false);

            modelBuilder.Entity<DialerJob>()
                .Property(e => e.PRODUCTS)
                .IsUnicode(false);

            modelBuilder.Entity<DialerJob>()
                .Property(e => e.AUDIT_CATEGORIES)
                .IsUnicode(false);

            modelBuilder.Entity<DialerJob>()
                .Property(e => e.BALANCE_FROM)
                .HasPrecision(10, 4);

            modelBuilder.Entity<DialerJob>()
                .Property(e => e.BALANCE_TO)
                .HasPrecision(10, 4);

            modelBuilder.Entity<DialerJob>()
                .Property(e => e.LAST_NAME_FROM)
                .IsUnicode(false);

            modelBuilder.Entity<DialerJob>()
                .Property(e => e.LAST_NAME_TO)
                .IsUnicode(false);

            modelBuilder.Entity<DialerJob>()
                .Property(e => e.FOLLOW_UP_FROM)
                .IsUnicode(false);

            modelBuilder.Entity<DialerJob>()
                .Property(e => e.FOLLOW_UP_TO)
                .IsUnicode(false);

            modelBuilder.Entity<DialerJob>()
                .Property(e => e.RISK_ASSESSMENT)
                .IsUnicode(false);

            modelBuilder.Entity<DialerJob>()
                .Property(e => e.EXCLUDE_PHONE_AREACODES)
                .IsUnicode(false);

            modelBuilder.Entity<DialerJob>()
                .Property(e => e.BALANCE_TEST)
                .HasPrecision(10, 4);

            modelBuilder.Entity<DialerJob>()
                .Property(e => e.PREFERRED_LANGUAGE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<DialerKey>()
                .Property(e => e.reference)
                .IsUnicode(false);

            modelBuilder.Entity<DialerKey>()
                .Property(e => e.jobname)
                .IsUnicode(false);

            modelBuilder.Entity<DialerKey>()
                .Property(e => e.balance)
                .HasPrecision(10, 4);

            modelBuilder.Entity<DialerKey>()
                .Property(e => e.balancetest)
                .HasPrecision(10, 4);

            modelBuilder.Entity<DialerResultCode>()
                .Property(e => e.Result_Code)
                .IsUnicode(false);

            modelBuilder.Entity<DialerResultCode>()
                .Property(e => e.Description)
                .IsUnicode(false);

            modelBuilder.Entity<DirtyDataGroup>()
                .Property(e => e.GROUP_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<DirtyDataGroup>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<DirtyDataGroup>()
                .HasMany(e => e.DirtyDataJobs)
                .WithRequired(e => e.DirtyDataGroup)
                .HasForeignKey(e => e.GROUP_KEY)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<DirtyDataJob>()
                .Property(e => e.JOB_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<DirtyDataJob>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<DirtyDataJob>()
                .Property(e => e.STORED_PROC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<DirtyDataJob>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<DirtyDataJob>()
                .HasMany(e => e.DirtyDataJobRuns)
                .WithRequired(e => e.DirtyDataJob)
                .HasForeignKey(e => e.JOB_KEY)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<DirtyDataJobRun>()
                .Property(e => e.ERROR_MESSAGE)
                .IsUnicode(false);

            modelBuilder.Entity<DiscountMaster>()
                .Property(e => e.DISCOUNT_CODE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<DiscountMaster>()
                .Property(e => e.DISCOUNT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<DiscountMaster>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<DiscountMaster>()
                .Property(e => e.DEFAULT_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<DiscountMaster>()
                .Property(e => e.MAX_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<DiscountMaster>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<DiscountMaster>()
                .Property(e => e.APPLY_DISCOUNT_TO)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<DiscountMaster>()
                .HasMany(e => e.DiscountLocations)
                .WithRequired(e => e.DiscountMaster)
                .HasForeignKey(e => e.DISCOUNTS_KEY);

            modelBuilder.Entity<DiscountMaster>()
                .HasMany(e => e.DiscountMasterLoanProducts)
                .WithRequired(e => e.DiscountMaster)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<DiscountMaster>()
                .HasMany(e => e.DiscountSecurities)
                .WithRequired(e => e.DiscountMaster)
                .HasForeignKey(e => e.DISCOUNTS_KEY);

            modelBuilder.Entity<DiscountMaster>()
                .HasMany(e => e.DiscountUseds)
                .WithRequired(e => e.DiscountMaster)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<DiscountMaster>()
                .HasMany(e => e.LoanApplicationDiscounts)
                .WithRequired(e => e.DiscountMaster)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<DiscountMasterLoanProduct>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<DiscountType>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<DiscountUsed>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<DiscountUsed>()
                .Property(e => e.PRODUCT_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<DiscountUsed>()
                .Property(e => e.LOAN_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<DiscountUsed>()
                .Property(e => e.DISCOUNT_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<DiscountUsed>()
                .Property(e => e.ZIPCODE)
                .IsUnicode(false);

            modelBuilder.Entity<DiscountUsed>()
                .Property(e => e.ROUTE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<District>()
                .Property(e => e.DISTRICT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<District>()
                .Property(e => e.DISTRICT_MANAGER)
                .IsUnicode(false);

            modelBuilder.Entity<DMA>()
                .Property(e => e.Zip_Code)
                .IsUnicode(false);

            modelBuilder.Entity<DMA>()
                .Property(e => e.DMA_Name)
                .IsUnicode(false);

            modelBuilder.Entity<DMA>()
                .Property(e => e.Additional_DMA)
                .IsUnicode(false);

            modelBuilder.Entity<DMA>()
                .Property(e => e.State)
                .IsUnicode(false);

            modelBuilder.Entity<DMA>()
                .Property(e => e.City)
                .IsUnicode(false);

            modelBuilder.Entity<DMA>()
                .Property(e => e.Metro_Indicator)
                .IsUnicode(false);

            modelBuilder.Entity<DMA>()
                .Property(e => e.City_Name)
                .IsUnicode(false);

            modelBuilder.Entity<Doc10000Trans>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Doc10000Trans>()
                .Property(e => e.CASH_IN)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Doc10000Trans>()
                .Property(e => e.CASH_OUT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<DocImage>()
                .Property(e => e.DOC_DATA)
                .IsUnicode(false);

            modelBuilder.Entity<DocImage>()
                .Property(e => e.IMAGE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<DocImage>()
                .Property(e => e.IMAGE_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<DocImage>()
                .Property(e => e.IMAGE_FORMAT)
                .IsUnicode(false);

            modelBuilder.Entity<DocPrint>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<DocPrint>()
                .Property(e => e.DOC_DATA)
                .IsUnicode(false);

            modelBuilder.Entity<DocTemplate>()
                .Property(e => e.DOC_DATA)
                .IsUnicode(false);

            modelBuilder.Entity<DocTemplate>()
                .Property(e => e.DOC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<DocTemplate>()
                .Property(e => e.DOC_FORMAT)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<DocumentPrinting>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<DocumentPrinting>()
                .Property(e => e.COMPUTER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<DocumentPrinting>()
                .Property(e => e.PRINTER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<DocumentResource>()
                .Property(e => e.RESOURCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<DocumentResource>()
                .HasMany(e => e.CompanyDocumentResources)
                .WithRequired(e => e.DocumentResource)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<DocumentSigningStatu>()
                .Property(e => e.GENERATED_PIN)
                .IsUnicode(false);

            modelBuilder.Entity<DocuwareCabinet>()
                .Property(e => e.CABINET_DB_TABLE)
                .IsUnicode(false);

            modelBuilder.Entity<DocuwareCabinet>()
                .Property(e => e.DW_REFERENCE_LOOKUP)
                .IsUnicode(false);

            modelBuilder.Entity<DocuwareCabinet>()
                .HasMany(e => e.DocuwareLoanLkups)
                .WithRequired(e => e.DocuwareCabinet)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<DocuwareStatu>()
                .Property(e => e.DOC_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<DocuwareStatu>()
                .Property(e => e.IGNORE_TELLER)
                .IsUnicode(false);

            modelBuilder.Entity<DocuwareStatu>()
                .Property(e => e.IGNORE_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<DrawerMaster>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<DrawerMaster>()
                .Property(e => e.DRAWER_MISC)
                .HasPrecision(19, 4);

            modelBuilder.Entity<DrawerMaster>()
                .Property(e => e.DRAWER_CCARD)
                .HasPrecision(19, 4);

            modelBuilder.Entity<DrawerMaster>()
                .Property(e => e.DRAWER_CHK)
                .HasPrecision(19, 4);

            modelBuilder.Entity<DrawerMaster>()
                .Property(e => e.DRAWER_PRA)
                .HasPrecision(19, 4);

            modelBuilder.Entity<DrawerMaster>()
                .Property(e => e.DRAWER_BAG_CHK_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<DrawerMaster>()
                .Property(e => e.PRA_DEBIT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<DrawerMaster>()
                .HasMany(e => e.DrawerMasterParsedCashes)
                .WithRequired(e => e.DrawerMaster)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<DrawerMaster>()
                .HasMany(e => e.DrawerServices)
                .WithRequired(e => e.DrawerMaster)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<DrawerMasterParsedCash>()
                .Property(e => e.AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<DrawerX>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<DrawerX>()
                .Property(e => e.DRAWERX_MISC)
                .HasPrecision(19, 4);

            modelBuilder.Entity<DrawerX>()
                .Property(e => e.DRAWERX_CCARD)
                .HasPrecision(19, 4);

            modelBuilder.Entity<DrawerX>()
                .HasMany(e => e.DrawerXServices)
                .WithRequired(e => e.DrawerX)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<DrawerZ>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<DrawerZ>()
                .Property(e => e.DRAWERZ_CHK)
                .HasPrecision(19, 4);

            modelBuilder.Entity<DrawerZ>()
                .Property(e => e.DRAWERZ_PRA)
                .HasPrecision(19, 4);

            modelBuilder.Entity<DrawerZ>()
                .Property(e => e.DRAWERZ_MISC)
                .HasPrecision(19, 4);

            modelBuilder.Entity<DrawerZ>()
                .Property(e => e.DRAWERZ_CCARD)
                .HasPrecision(19, 4);

            modelBuilder.Entity<DrawerZ>()
                .Property(e => e.CNTZ_MISC)
                .HasPrecision(19, 4);

            modelBuilder.Entity<DrawerZ>()
                .Property(e => e.CNTZ_CCARD)
                .HasPrecision(19, 4);

            modelBuilder.Entity<DrawerZ>()
                .Property(e => e.OS_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<DrawerZ>()
                .Property(e => e.OS_CATEGORY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<DrawerZ>()
                .Property(e => e.DRAWERZ_BAG_CHK_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<DrawerZ>()
                .Property(e => e.PRA_DEBIT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<DrawerZ>()
                .HasMany(e => e.DrawerMasters)
                .WithRequired(e => e.DrawerZ)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<DrawerZ>()
                .HasMany(e => e.DrawerZCashes)
                .WithRequired(e => e.DrawerZ)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<DrawerZ>()
                .HasMany(e => e.DrawerZServices)
                .WithRequired(e => e.DrawerZ)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<DrawerZCash>()
                .Property(e => e.ENTERED_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<DrawerZCash>()
                .Property(e => e.CALCULATED_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<DualApprovalMessage>()
                .Property(e => e.APPROVAL_MESSAGE)
                .IsUnicode(false);

            modelBuilder.Entity<EarnedCreditTran>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<EarnedCreditTran>()
                .Property(e => e.EARNED_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<EarnedCreditType>()
                .Property(e => e.DISPLAY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<EarnedCreditType>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<EarnedCreditType>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<EarnedCreditType>()
                .Property(e => e.UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<EarnedCreditType>()
                .HasMany(e => e.CustomerEarnedCredits)
                .WithRequired(e => e.EarnedCreditType)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<EmailDisposition>()
                .Property(e => e.DISPOSITION)
                .IsUnicode(false);

            modelBuilder.Entity<EmailDisposition>()
                .HasMany(e => e.VisitorEmailDispositions)
                .WithRequired(e => e.EmailDisposition)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<EmailTemplate>()
                .Property(e => e.EMAIL_FROM)
                .IsUnicode(false);

            modelBuilder.Entity<EmailTemplate>()
                .Property(e => e.SUBJECT_LINE)
                .IsUnicode(false);

            modelBuilder.Entity<EmailTemplate>()
                .Property(e => e.BODY_HTML)
                .IsUnicode(false);

            modelBuilder.Entity<EmailTemplate>()
                .Property(e => e.NOTES)
                .IsUnicode(false);

            modelBuilder.Entity<EmailTemplate>()
                .Property(e => e.UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<EmailTemplate>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<EndOfDayInventoryDetail>()
                .Property(e => e.ONHAND_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<EndOfDayInventoryDetail>()
                .Property(e => e.RI_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<EndOfDayInventoryDetail>()
                .Property(e => e.CAB_FEE_RECEIVABLE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<EndOfDayRpt>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<EndOfDayRptDetail>()
                .Property(e => e.EODR_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<EndOfDayRptDetail>()
                .Property(e => e.ACCOUNT1)
                .IsUnicode(false);

            modelBuilder.Entity<EndOfDayRptDetail>()
                .Property(e => e.QTY1)
                .IsUnicode(false);

            modelBuilder.Entity<EndOfDayRptDetail>()
                .Property(e => e.AMOUNT1)
                .IsUnicode(false);

            modelBuilder.Entity<EndOfDayRptDetail>()
                .Property(e => e.FEE1)
                .IsUnicode(false);

            modelBuilder.Entity<EndOfDayRptDetail>()
                .Property(e => e.ACCOUNT2)
                .IsUnicode(false);

            modelBuilder.Entity<EndOfDayRptDetail>()
                .Property(e => e.QTY2)
                .IsUnicode(false);

            modelBuilder.Entity<EndOfDayRptDetail>()
                .Property(e => e.AMOUNT2)
                .IsUnicode(false);

            modelBuilder.Entity<EndOfDayRptDetail>()
                .Property(e => e.FEE2)
                .IsUnicode(false);

            modelBuilder.Entity<EOscarBatch>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<EOscarBatch>()
                .Property(e => e.SEND_RECV)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<EOscarBatch>()
                .Property(e => e.RAW_XML)
                .IsUnicode(false);

            modelBuilder.Entity<EOscarBatch>()
                .HasMany(e => e.EOscarBatchDetails)
                .WithRequired(e => e.EOscarBatch)
                .HasForeignKey(e => e.EOSCAR_BATCH_KEY_RECV)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<EOscarBatch>()
                .HasMany(e => e.EOscarBatchDetails1)
                .WithOptional(e => e.EOscarBatch1)
                .HasForeignKey(e => e.EOSCAR_BATCH_KEY_SENT);

            modelBuilder.Entity<EOscarBatchDetail>()
                .Property(e => e.ACDV_CONTROL_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<EOscarBatchDetail>()
                .Property(e => e.XML_RECV)
                .IsUnicode(false);

            modelBuilder.Entity<EOscarBatchDetail>()
                .Property(e => e.XML_SENT)
                .IsUnicode(false);

            modelBuilder.Entity<EOscarBatchDetail>()
                .HasMany(e => e.EOscarDetailDisputeCodes)
                .WithRequired(e => e.EOscarBatchDetail)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<EOscarDisputeCode>()
                .Property(e => e.DISPUTE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<EOscarDisputeCode>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<EOscarDisputeCode>()
                .HasMany(e => e.EOscarDetailDisputeCodes)
                .WithRequired(e => e.EOscarDisputeCode)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ErrorLog>()
                .Property(e => e.ErrorMessage)
                .IsUnicode(false);

            modelBuilder.Entity<ErrorLog>()
                .Property(e => e.SupportMessage)
                .IsUnicode(false);

            modelBuilder.Entity<ErrorLog>()
                .Property(e => e.Client)
                .IsUnicode(false);

            modelBuilder.Entity<ErrorLog>()
                .Property(e => e.Tier)
                .IsUnicode(false);

            modelBuilder.Entity<ErrorLog>()
                .Property(e => e.CodeLocation)
                .IsUnicode(false);

            modelBuilder.Entity<ErrorLog>()
                .Property(e => e.ExceptionText)
                .IsUnicode(false);

            modelBuilder.Entity<ErrorLog>()
                .Property(e => e.StateDump)
                .IsUnicode(false);

            modelBuilder.Entity<ErrorLog>()
                .Property(e => e.WebServer)
                .IsUnicode(false);

            modelBuilder.Entity<ErrorLog>()
                .Property(e => e.AppServer)
                .IsUnicode(false);

            modelBuilder.Entity<ErrorLog>()
                .Property(e => e.UserAgent)
                .IsUnicode(false);

            modelBuilder.Entity<ErrorLog>()
                .Property(e => e.Browser)
                .IsUnicode(false);

            modelBuilder.Entity<ErrorLog>()
                .Property(e => e.CurrentPage)
                .IsUnicode(false);

            modelBuilder.Entity<ErrorLog>()
                .Property(e => e.ReferringPage)
                .IsUnicode(false);

            modelBuilder.Entity<ESignLoan>()
                .Property(e => e.SUBMIT_ERROR)
                .IsUnicode(false);

            modelBuilder.Entity<ESignLoanStatu>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<ESignLoanStatu>()
                .HasMany(e => e.ESignLoans)
                .WithRequired(e => e.ESignLoanStatu)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ESignOptInDoc>()
                .Property(e => e.DOC_XML)
                .IsUnicode(false);

            modelBuilder.Entity<ESignOptInDoc>()
                .Property(e => e.LANGUAGE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ESignOptInDoc>()
                .Property(e => e.DOC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<ESignOptInDoc>()
                .Property(e => e.UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ExchangeRate>()
                .Property(e => e.CURRENCY_BASE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<ExchangeRate>()
                .Property(e => e.CURRENCY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<ExchangeRate>()
                .Property(e => e.CURRENCY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<ExchangeRate>()
                .Property(e => e.CURRENCY_RATE)
                .HasPrecision(18, 10);

            modelBuilder.Entity<ExchangeRate>()
                .Property(e => e.CURRENCY_INVERSE_RATE)
                .HasPrecision(18, 10);

            modelBuilder.Entity<ExchangeRateDaily>()
                .Property(e => e.CURRENCY_CODE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ExchangeRateDaily>()
                .Property(e => e.BASE_CURRENCY_CODE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ExchangeRateDaily>()
                .Property(e => e.RATE)
                .HasPrecision(18, 10);

            modelBuilder.Entity<ExcludeFromCapsHistory>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ExcludeFromCapsHistory>()
                .Property(e => e.OPT_OUT_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<ExpenseType>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<ExpenseType>()
                .Property(e => e.HELP_DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<ExpenseType>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ExpenseType>()
                .HasMany(e => e.CompanyExpenseTypes)
                .WithRequired(e => e.ExpenseType)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ExpenseType>()
                .HasMany(e => e.CustomerExpenseDetails)
                .WithRequired(e => e.ExpenseType)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ExpenseType>()
                .HasMany(e => e.LoanApplicationExpenseDetails)
                .WithRequired(e => e.ExpenseType)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ExperianCardValidation>()
                .Property(e => e.CALL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<ExperianCardValidation>()
                .Property(e => e.SENT_DATA)
                .IsUnicode(false);

            modelBuilder.Entity<ExperianCardValidation>()
                .Property(e => e.TOKEN)
                .IsUnicode(false);

            modelBuilder.Entity<ExperianCardValidation>()
                .Property(e => e.RESPONSE_ID)
                .IsUnicode(false);

            modelBuilder.Entity<ExperianCardValidation>()
                .Property(e => e.PRE_AUTHORISED)
                .IsUnicode(false);

            modelBuilder.Entity<ExperianCardValidation>()
                .Property(e => e.CARD_CONDITION_SEVERITY)
                .IsUnicode(false);

            modelBuilder.Entity<ExperianCardValidation>()
                .Property(e => e.CARD_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<ExperianCardValidation>()
                .Property(e => e.CARD_SUB_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<ExperianCardValidation>()
                .Property(e => e.CARD_SCHEME_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<ExperianCardValidation>()
                .Property(e => e.CARD_ISSUER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<ExperianCardValidation>()
                .Property(e => e.ABA_MATCH_RESULT)
                .IsUnicode(false);

            modelBuilder.Entity<ExperianCardValidation>()
                .Property(e => e.RAW_RESPONSE_DATA)
                .IsUnicode(false);

            modelBuilder.Entity<ExternalAppConfig>()
                .Property(e => e.CONFIG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<ExternalAppConfig>()
                .Property(e => e.CONFIG_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<ExternalAppMaster>()
                .Property(e => e.TASK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<ExternalAppMaster>()
                .Property(e => e.SERVER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<ExternalAppMaster>()
                .Property(e => e.DTS_OR_EXE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ExternalAppMaster>()
                .Property(e => e.RUN_FILE)
                .IsUnicode(false);

            modelBuilder.Entity<ExternalAppMaster>()
                .Property(e => e.RUN_START_FOLDER)
                .IsUnicode(false);

            modelBuilder.Entity<ExternalAppMaster>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<ExternalAppMaster>()
                .Property(e => e.STATUS_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<ExternalAppMaster>()
                .Property(e => e.LAST_RESULT)
                .IsUnicode(false);

            modelBuilder.Entity<ExternalApp>()
                .Property(e => e.APP_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<ExternalApp>()
                .Property(e => e.APP_INSTANCE)
                .IsUnicode(false);

            modelBuilder.Entity<ExternalApp>()
                .Property(e => e.APP_DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<ExternalApp>()
                .Property(e => e.CMD_NAMED_ARG)
                .IsUnicode(false);

            modelBuilder.Entity<ExternalApp>()
                .HasMany(e => e.ExternalAppConfigs)
                .WithRequired(e => e.ExternalApp)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ExternalApp>()
                .HasMany(e => e.ExternalAppRunDates)
                .WithRequired(e => e.ExternalApp)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<FcrmAmlCheckTypeXref>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<FcrmAmlServiceXRef>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<FcrmAmlTransCode>()
                .Property(e => e.CODE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<FcrmAmlTransCode>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<FcrmAmlTransCode>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<FcrmAmlTransCode>()
                .Property(e => e.UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<FcrmAmlTransCode>()
                .HasMany(e => e.AMLThresholdRuleTransXrefs)
                .WithRequired(e => e.FcrmAmlTransCode)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<FcrmAmlTransCode>()
                .HasMany(e => e.FcrmAmlCheckTypeXrefs)
                .WithRequired(e => e.FcrmAmlTransCode)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<FcrmAmlTransCode>()
                .HasMany(e => e.FcrmAmlServiceXRefs)
                .WithRequired(e => e.FcrmAmlTransCode)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<FcrmAmlTransCode>()
                .HasMany(e => e.FcrmAmlTransCodeXRefs)
                .WithRequired(e => e.FcrmAmlTransCode)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<FcrmAmlTransCodeXRef>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ForceApprovalQuestion>()
                .Property(e => e.QUESTION)
                .IsUnicode(false);

            modelBuilder.Entity<ForceApprovalValue>()
                .Property(e => e.VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<FormLetter>()
                .Property(e => e.FORM_LETTER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<FormLetter>()
                .Property(e => e.FORM_LETTER_DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<FormLetter>()
                .Property(e => e.FORM_LETTER_BODY)
                .IsUnicode(false);

            modelBuilder.Entity<FormLetter>()
                .Property(e => e.LANGUAGE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<FormLetter>()
                .Property(e => e.MINIMUM_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<FormLetter>()
                .Property(e => e.ON_DEMAND_PROMPT_1)
                .IsUnicode(false);

            modelBuilder.Entity<FormLetter>()
                .Property(e => e.ON_DEMAND_PROMPT_2)
                .IsUnicode(false);

            modelBuilder.Entity<FormLetter>()
                .Property(e => e.ON_DEMAND_PROMPT_3)
                .IsUnicode(false);

            modelBuilder.Entity<FormLetter>()
                .Property(e => e.ON_DEMAND_PROMPT_4)
                .IsUnicode(false);

            modelBuilder.Entity<FormLetter>()
                .Property(e => e.ON_DEMAND_PROMPT_5)
                .IsUnicode(false);

            modelBuilder.Entity<FormLetter>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<FormLetter>()
                .Property(e => e.UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<FormLetter>()
                .Property(e => e.DELETED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<FormLetter>()
                .Property(e => e.RISK_ASSESSMENT)
                .IsUnicode(false);

            modelBuilder.Entity<FormLetter>()
                .Property(e => e.MINIMUM_RI_AMOUNT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<FormLetter>()
                .Property(e => e.MAXIMUM_RI_AMOUNT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<FormLetter>()
                .HasMany(e => e.FormLetterOnDemands)
                .WithRequired(e => e.FormLetter)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<FormLetter>()
                .HasMany(e => e.FormLetterPrinteds)
                .WithRequired(e => e.FormLetter)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<FormLetter>()
                .HasMany(e => e.FormLetter1)
                .WithMany(e => e.FormLetters)
                .Map(m => m.ToTable("FormLetterAfterLetterXRef").MapLeftKey("AFTER_FORM_LETTER_KEY").MapRightKey("FORM_LETTER_KEY"));

            modelBuilder.Entity<FormLetter>()
                .HasMany(e => e.RISAUDITs)
                .WithMany(e => e.FormLetters1)
                .Map(m => m.ToTable("FormLetterAuditCode").MapLeftKey("FORM_LETTER_KEY").MapRightKey("AUDIT_CODE_KEY"));

            modelBuilder.Entity<FormLetter>()
                .HasMany(e => e.FormLetter11)
                .WithMany(e => e.FormLetters1)
                .Map(m => m.ToTable("FormLetterReplacesXRef").MapLeftKey("DELETED_FORM_LETTER_KEY").MapRightKey("FORM_LETTER_KEY"));

            modelBuilder.Entity<FormLetterBatch>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<FormLetterBatch>()
                .Property(e => e.UPLOAD_OR_DOWNLOAD)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<FormLetterBatch>()
                .HasMany(e => e.FormLetterPrinteds)
                .WithRequired(e => e.FormLetterBatch)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<FormLetterBatch>()
                .HasMany(e => e.FormLetterResults)
                .WithRequired(e => e.FormLetterBatch)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<FormLetterBatchStatu>()
                .Property(e => e.STATUS_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<FormLetterBatchStatu>()
                .HasMany(e => e.FormLetterBatches)
                .WithRequired(e => e.FormLetterBatchStatu)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<FormLetterBatchValidation>()
                .Property(e => e.FORM_LETTER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<FormLetterBatchVendorFile>()
                .Property(e => e.FILE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<FormLetterConfig>()
                .Property(e => e.FTP_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<FormLetterConfig>()
                .Property(e => e.FTP_PASSWORD)
                .IsUnicode(false);

            modelBuilder.Entity<FormLetterEmail>()
                .Property(e => e.EMAIL_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<FormLetterLoanHistoryFile>()
                .Property(e => e.LOAN_HISTORY_FILE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<FormLetterLoanHistoryFile>()
                .Property(e => e.ZIP_FILE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<FormLetterLoanHistoryState>()
                .Property(e => e.FORM_LETTER_LOAN_HISTORY_STATE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<FormLetterOnDemand>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<FormLetterOnDemand>()
                .Property(e => e.PROMPT_DATA_1)
                .IsUnicode(false);

            modelBuilder.Entity<FormLetterOnDemand>()
                .Property(e => e.PROMPT_DATA_2)
                .IsUnicode(false);

            modelBuilder.Entity<FormLetterOnDemand>()
                .Property(e => e.PROMPT_DATA_3)
                .IsUnicode(false);

            modelBuilder.Entity<FormLetterOnDemand>()
                .Property(e => e.PROMPT_DATA_4)
                .IsUnicode(false);

            modelBuilder.Entity<FormLetterOnDemand>()
                .Property(e => e.PROMPT_DATA_5)
                .IsUnicode(false);

            modelBuilder.Entity<FormLetterPrinted>()
                .Property(e => e.VENDOR_JOB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<FormLetterPrinted>()
                .HasMany(e => e.FormLetterResults)
                .WithRequired(e => e.FormLetterPrinted)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<FormLetterProduct>()
                .Property(e => e.PRODUCT_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<FormLetterProduct>()
                .Property(e => e.LOAN_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<FormLetterProduct>()
                .Property(e => e.LOAN_SUB_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<FormLetterResult>()
                .Property(e => e.FORM_LETTER_RESULT_ERROR_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<FormLetterResult>()
                .Property(e => e.FORM_LETTER_RESULT_FFWD_CODE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<FormLetterResult>()
                .Property(e => e.FORM_LETTER_RESULT_DPV_CODE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<FormLetterResult>()
                .Property(e => e.FORM_LETTER_RESULT_RET_CODE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<FormLetterResult>()
                .Property(e => e.MAILING_SVC_JOB_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<FurtherFinanceExecutionLog>()
                .Property(e => e.PRODUCT_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<FurtherFinanceExecutionLog>()
                .Property(e => e.LOAN_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<FurtherFinanceExecutionLog>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<FurtherFinanceExecutionLog>()
                .HasMany(e => e.FurtherFinanceExecutionLogDetails)
                .WithRequired(e => e.FurtherFinanceExecutionLog)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<FurtherFinanceExecutionLogDetail>()
                .Property(e => e.LOAN_LIMIT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<FurtherFinanceExecutionLogDetail>()
                .Property(e => e.WAGE_LIMIT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<FurtherFinanceExecutionLogDetail>()
                .Property(e => e.DISPOSABLE_LIMIT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<FurtherFinanceExecutionLogDetail>()
                .Property(e => e.FURTHER_FINANCE_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<FurtherFinanceExecutionLogDetail>()
                .Property(e => e.FURTHER_FINANCE_AMT_MESSAGE)
                .IsUnicode(false);

            modelBuilder.Entity<FurtherFinanceJobType>()
                .Property(e => e.INCREASE1)
                .HasPrecision(10, 4);

            modelBuilder.Entity<FurtherFinanceJobType>()
                .Property(e => e.INCREASE2)
                .HasPrecision(10, 4);

            modelBuilder.Entity<FurtherFinanceOutcome>()
                .Property(e => e.OUTCOME_DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<FurtherFinanceOutcome>()
                .Property(e => e.OUTCOME_APPROVAL_PCT)
                .HasPrecision(3, 2);

            modelBuilder.Entity<FurtherFinanceOutcome>()
                .HasMany(e => e.FurtherFinanceExecutionLogDetails)
                .WithRequired(e => e.FurtherFinanceOutcome)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<FurtherFinanceOutcome>()
                .HasMany(e => e.FurtherFinanceResultDetails)
                .WithRequired(e => e.FurtherFinanceOutcome)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<FurtherFinanceQuery>()
                .Property(e => e.QUERY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<FurtherFinanceQuery>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<FurtherFinanceQuery>()
                .HasMany(e => e.FurtherFinanceExecutionLogDetails)
                .WithRequired(e => e.FurtherFinanceQuery)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<FurtherFinanceQuery>()
                .HasMany(e => e.FurtherFinanceResultDetails)
                .WithRequired(e => e.FurtherFinanceQuery)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<FurtherFinanceResult>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<FurtherFinanceResult>()
                .Property(e => e.PRODUCT_TYPE_SELECTED)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<FurtherFinanceResult>()
                .HasMany(e => e.FurtherFinanceResultDetails)
                .WithRequired(e => e.FurtherFinanceResult)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<FurtherFinanceResultDetail>()
                .Property(e => e.LOAN_LIMIT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<FurtherFinanceResultDetail>()
                .Property(e => e.WAGE_LIMIT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<FurtherFinanceResultDetail>()
                .Property(e => e.DISPOSABLE_LIMIT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<FurtherFinanceResultDetail>()
                .Property(e => e.FURTHER_FINANCE_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<FurtherFinanceResultDetail>()
                .Property(e => e.FURTHER_FINANCE_AMT_MESSAGE)
                .IsUnicode(false);

            modelBuilder.Entity<GiftCard>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<GiftCard>()
                .Property(e => e.CARD_AMOUNT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<GiftCard>()
                .Property(e => e.CARD_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<GiftCard>()
                .Property(e => e.CARD_DATA)
                .IsUnicode(false);

            modelBuilder.Entity<GLAcct>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<GLAcctGroup>()
                .Property(e => e.GROUP_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<Global>()
                .Property(e => e.VAULT_MGR_SG_VALUES)
                .IsUnicode(false);

            modelBuilder.Entity<Global>()
                .Property(e => e.OE_STATEMENT_EMAIL)
                .IsUnicode(false);

            modelBuilder.Entity<Global>()
                .Property(e => e.MAX_DRAWER_CLOSE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Global>()
                .Property(e => e.APP_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<Global>()
                .Property(e => e.INCOME_GROSS_UPPER_LIMIT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Global>()
                .Property(e => e.INCOME_GROSS_LOWER_LIMIT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Global>()
                .Property(e => e.INCOME_NET_UPPER_LIMIT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Global>()
                .Property(e => e.INCOME_NET_LOWER_LIMIT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Global>()
                .Property(e => e.SPROC_NAME1)
                .IsUnicode(false);

            modelBuilder.Entity<Global>()
                .Property(e => e.SPROC_NAME2)
                .IsUnicode(false);

            modelBuilder.Entity<Global>()
                .Property(e => e.SPROC_NAME3)
                .IsUnicode(false);

            modelBuilder.Entity<Global>()
                .Property(e => e.SPROC_LIVE_CONN1)
                .IsUnicode(false);

            modelBuilder.Entity<Global>()
                .Property(e => e.SPROC_LIVE_CONN2)
                .IsUnicode(false);

            modelBuilder.Entity<Global>()
                .Property(e => e.SPROC_LIVE_CONN3)
                .IsUnicode(false);

            modelBuilder.Entity<Global>()
                .Property(e => e.SPROC_TEST_CONN1)
                .IsUnicode(false);

            modelBuilder.Entity<Global>()
                .Property(e => e.SPROC_TEST_CONN2)
                .IsUnicode(false);

            modelBuilder.Entity<Global>()
                .Property(e => e.SPROC_TEST_CONN3)
                .IsUnicode(false);

            modelBuilder.Entity<Global>()
                .Property(e => e.LOAN_DOC_SYNC_PATH_1)
                .IsUnicode(false);

            modelBuilder.Entity<Global>()
                .Property(e => e.LOAN_DOC_SYNC_PATH_2)
                .IsUnicode(false);

            modelBuilder.Entity<Global>()
                .Property(e => e.LOAN_DOC_SYNC_PATH_3)
                .IsUnicode(false);

            modelBuilder.Entity<Global>()
                .Property(e => e.LOAN_DOC_SYNC_PATH_4)
                .IsUnicode(false);

            modelBuilder.Entity<Global>()
                .Property(e => e.NETSPEND_SERVER_IP)
                .IsUnicode(false);

            modelBuilder.Entity<Global>()
                .Property(e => e.NETSPEND_USER_ID)
                .IsUnicode(false);

            modelBuilder.Entity<Global>()
                .Property(e => e.NETSPEND_PASSWORD)
                .IsUnicode(false);

            modelBuilder.Entity<Global>()
                .Property(e => e.KARPOWER_PASSWORD)
                .IsUnicode(false);

            modelBuilder.Entity<Global>()
                .Property(e => e.KBB_USERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<Global>()
                .Property(e => e.KBB_PASSWORD)
                .IsUnicode(false);

            modelBuilder.Entity<Global>()
                .Property(e => e.CONVERSION_SQL_FILENAME)
                .IsUnicode(false);

            modelBuilder.Entity<Global>()
                .Property(e => e.AD_ASTRA_NPA_EPP_KEY)
                .IsUnicode(false);

            modelBuilder.Entity<Global>()
                .Property(e => e.APP_VERSION)
                .HasPrecision(6, 2);

            modelBuilder.Entity<Global>()
                .Property(e => e.GOLD_PRICE_PER_GRAM)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Global>()
                .Property(e => e.LESS_TARGET_VARIANCE)
                .HasPrecision(5, 2);

            modelBuilder.Entity<Global>()
                .Property(e => e.GREATER_TARGET_VARIANCE)
                .HasPrecision(5, 2);

            modelBuilder.Entity<Global>()
                .Property(e => e.FIELD_SOLUTIONS_PASSWORD)
                .IsUnicode(false);

            modelBuilder.Entity<Global>()
                .Property(e => e.DATA_PROTECTION_REGISTRATION_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<Global>()
                .Property(e => e.INTERIM_PERMISSION_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<Global>()
                .Property(e => e.COMPANY_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<Global>()
                .Property(e => e.CHIEF_EXECUTIVE_OFFICER)
                .IsUnicode(false);

            modelBuilder.Entity<GlobalState>()
                .Property(e => e.STATE_ABBRV)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<GlobalState>()
                .Property(e => e.TL_LIEN_FEE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<GlobalState>()
                .Property(e => e.TL_TITLE_FEE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<GlobalState>()
                .Property(e => e.TL_QUICK_TITLE_FEE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<GlobalState>()
                .Property(e => e.TL_TITLE_PROC_FEE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<GlobalState>()
                .Property(e => e.TL_NOTICE_OF_LIEN_FEE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<GlobalState>()
                .Property(e => e.STATE_FULL)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<GlobalState>()
                .Property(e => e.TL_NO_LIEN_FEE_FOR_LOANS_UP_TO)
                .HasPrecision(10, 4);

            modelBuilder.Entity<GlobalState>()
                .Property(e => e.MARKETING_INVITATION_OVERRIDES_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<GoldConfig>()
                .Property(e => e.MIN_DIAMOND_SIZE)
                .HasPrecision(5, 3);

            modelBuilder.Entity<GoldConfig>()
                .Property(e => e.MAX_DIAMOND_SIZE)
                .HasPrecision(5, 3);

            modelBuilder.Entity<GoldConfig>()
                .Property(e => e.DIAMOND_OFFER_MAX)
                .HasPrecision(10, 4);

            modelBuilder.Entity<GoldConfig>()
                .Property(e => e.GOLD_10K_LOSS_PCT)
                .HasPrecision(8, 5);

            modelBuilder.Entity<GoldConfig>()
                .Property(e => e.GOLD_14K_LOSS_PCT)
                .HasPrecision(8, 5);

            modelBuilder.Entity<GoldConfig>()
                .Property(e => e.GOLD_18K_LOSS_PCT)
                .HasPrecision(8, 5);

            modelBuilder.Entity<GoldConfig>()
                .Property(e => e.GOLD_22K_LOSS_PCT)
                .HasPrecision(8, 5);

            modelBuilder.Entity<GoldConfig>()
                .Property(e => e.GOLD_24K_LOSS_PCT)
                .HasPrecision(8, 5);

            modelBuilder.Entity<GoldConfig>()
                .Property(e => e.REQUIRE_AUTH_TRANS_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<GoldConfig>()
                .Property(e => e.TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<GoldConfig>()
                .Property(e => e.PLATINUM_LOSS_PCT)
                .HasPrecision(8, 5);

            modelBuilder.Entity<GoldConfig>()
                .Property(e => e.POLICE_STORE_ID)
                .IsUnicode(false);

            modelBuilder.Entity<GoldConfig>()
                .Property(e => e.GOLD_09K_LOSS_PCT)
                .HasPrecision(8, 5);

            modelBuilder.Entity<GoldConfig>()
                .Property(e => e.COMPANY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<GoldConfig>()
                .HasMany(e => e.GoldItems)
                .WithMany(e => e.GoldConfigs)
                .Map(m => m.ToTable("GoldConfigItem").MapLeftKey("GOLD_CONFIG_KEY").MapRightKey("GOLD_ITEM_KEY"));

            modelBuilder.Entity<GoldDailyBag>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<GoldDailyBag>()
                .Property(e => e.GB_BAG_TOTAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<GoldDailyBag>()
                .HasMany(e => e.GoldDailyBagDetails)
                .WithRequired(e => e.GoldDailyBag)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<GoldDailyBag>()
                .HasMany(e => e.GoldTransferDetails)
                .WithRequired(e => e.GoldDailyBag)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<GoldItem>()
                .Property(e => e.ITEM_DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<GoldItem>()
                .Property(e => e.ITEM_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<GoldItem>()
                .HasMany(e => e.GoldTransDetails)
                .WithRequired(e => e.GoldItem)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<GoldTran>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<GoldTran>()
                .Property(e => e.TOTAL_GOLD_WEIGHT)
                .HasPrecision(8, 3);

            modelBuilder.Entity<GoldTran>()
                .Property(e => e.TOTAL_OFFER_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<GoldTran>()
                .Property(e => e.TOTAL_ACCEPTED_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<GoldTran>()
                .Property(e => e.OFFER_GOLD_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<GoldTran>()
                .Property(e => e.OFFER_DIAMOND_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<GoldTran>()
                .Property(e => e.MOD_OVERRIDE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<GoldTran>()
                .Property(e => e.GOLD_PRICE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<GoldTran>()
                .Property(e => e.TOTAL_BASE_MOD_OFFER)
                .HasPrecision(10, 4);

            modelBuilder.Entity<GoldTran>()
                .Property(e => e.TOTAL_MID_MOD_OFFER)
                .HasPrecision(10, 4);

            modelBuilder.Entity<GoldTran>()
                .Property(e => e.TOTAL_HIGH_MOD_OFFER)
                .HasPrecision(10, 4);

            modelBuilder.Entity<GoldTran>()
                .Property(e => e.TOTAL_OVERRIDE_MOD_OFFER)
                .HasPrecision(10, 4);

            modelBuilder.Entity<GoldTran>()
                .Property(e => e.TOTAL_TELLER_OFFER)
                .HasPrecision(10, 4);

            modelBuilder.Entity<GoldTran>()
                .Property(e => e.GOLD_WEIGHT_10K)
                .HasPrecision(8, 3);

            modelBuilder.Entity<GoldTran>()
                .Property(e => e.GOLD_WEIGHT_14K)
                .HasPrecision(8, 3);

            modelBuilder.Entity<GoldTran>()
                .Property(e => e.GOLD_WEIGHT_18K)
                .HasPrecision(8, 3);

            modelBuilder.Entity<GoldTran>()
                .Property(e => e.GOLD_WEIGHT_22K)
                .HasPrecision(8, 3);

            modelBuilder.Entity<GoldTran>()
                .Property(e => e.GOLD_WEIGHT_24K)
                .HasPrecision(8, 3);

            modelBuilder.Entity<GoldTran>()
                .Property(e => e.TRANS_HANDLING_FEE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<GoldTran>()
                .Property(e => e.GOLD_LOSS_10K)
                .HasPrecision(8, 5);

            modelBuilder.Entity<GoldTran>()
                .Property(e => e.GOLD_LOSS_14K)
                .HasPrecision(8, 5);

            modelBuilder.Entity<GoldTran>()
                .Property(e => e.GOLD_LOSS_18K)
                .HasPrecision(8, 5);

            modelBuilder.Entity<GoldTran>()
                .Property(e => e.GOLD_LOSS_22K)
                .HasPrecision(8, 5);

            modelBuilder.Entity<GoldTran>()
                .Property(e => e.GOLD_LOSS_24K)
                .HasPrecision(8, 5);

            modelBuilder.Entity<GoldTran>()
                .Property(e => e.GOLD_PRICE_10K)
                .HasPrecision(10, 4);

            modelBuilder.Entity<GoldTran>()
                .Property(e => e.GOLD_PRICE_14K)
                .HasPrecision(10, 4);

            modelBuilder.Entity<GoldTran>()
                .Property(e => e.GOLD_PRICE_18K)
                .HasPrecision(10, 4);

            modelBuilder.Entity<GoldTran>()
                .Property(e => e.GOLD_PRICE_22K)
                .HasPrecision(10, 4);

            modelBuilder.Entity<GoldTran>()
                .Property(e => e.GOLD_PRICE_24K)
                .HasPrecision(10, 4);

            modelBuilder.Entity<GoldTran>()
                .Property(e => e.PLATINUM_WEIGHT)
                .HasPrecision(8, 3);

            modelBuilder.Entity<GoldTran>()
                .Property(e => e.PLATINUM_LOSS)
                .HasPrecision(8, 5);

            modelBuilder.Entity<GoldTran>()
                .Property(e => e.PLATINUM_PRICE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<GoldTran>()
                .Property(e => e.GOLD_WEIGHT_09K)
                .HasPrecision(8, 3);

            modelBuilder.Entity<GoldTran>()
                .Property(e => e.GOLD_LOSS_09K)
                .HasPrecision(8, 5);

            modelBuilder.Entity<GoldTran>()
                .Property(e => e.GOLD_PRICE_09K)
                .HasPrecision(10, 4);

            modelBuilder.Entity<GoldTran>()
                .HasMany(e => e.GoldTransCustomers)
                .WithRequired(e => e.GoldTran)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<GoldTran>()
                .HasMany(e => e.GoldTransDetails)
                .WithRequired(e => e.GoldTran)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<GoldTransCustomer>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<GoldTransCustomer>()
                .Property(e => e.GENDER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<GoldTransCustomer>()
                .Property(e => e.HOME_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<GoldTransCustomer>()
                .Property(e => e.EMPLOYER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<GoldTransCustomer>()
                .Property(e => e.PLATE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<GoldTransCustomer>()
                .Property(e => e.PLATE_STATE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<GoldTransCustomer>()
                .Property(e => e.CUST_MID_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<GoldTransDetail>()
                .Property(e => e.MARKINGS)
                .IsUnicode(false);

            modelBuilder.Entity<GoldTransDetail>()
                .Property(e => e.ITEM_SIZE)
                .IsUnicode(false);

            modelBuilder.Entity<GoldTransDetail>()
                .Property(e => e.GEM_DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<GoldTransDetail>()
                .Property(e => e.REVERSED_WEIGHT)
                .HasPrecision(8, 3);

            modelBuilder.Entity<GoldTransDetail>()
                .HasMany(e => e.GoldTransStoneDetails)
                .WithRequired(e => e.GoldTransDetail)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<GoldTransfer>()
                .Property(e => e.SENT_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<GoldTransfer>()
                .Property(e => e.SENT_DAILY_BAG_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<GoldTransfer>()
                .Property(e => e.RECV_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<GoldTransfer>()
                .Property(e => e.RECV_DAILY_BAG_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<GoldTransfer>()
                .Property(e => e.COURIER_TRACKING_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<GoldTransfer>()
                .Property(e => e.COURIER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<GoldTransfer>()
                .HasMany(e => e.GoldTransferDetails)
                .WithRequired(e => e.GoldTransfer)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<GoldTransStoneDetail>()
                .Property(e => e.STONE_SIZE)
                .HasPrecision(5, 3);

            modelBuilder.Entity<GoodCustomerStudy>()
                .Property(e => e.INITIAL_APPROVED_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<GoodCustomerStudy>()
                .Property(e => e.INCREASE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<GoodCustomerStudy>()
                .Property(e => e.STATE_MAX_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<GoodCustomerStudy>()
                .Property(e => e.LOAN_TAKEN_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<IatDialerResult>()
                .Property(e => e.Description)
                .IsUnicode(false);

            modelBuilder.Entity<IatDialerResult>()
                .Property(e => e.Status)
                .IsUnicode(false);

            modelBuilder.Entity<IatDialerResult>()
                .Property(e => e.CURO_Note)
                .IsUnicode(false);

            modelBuilder.Entity<IdentificationType>()
                .Property(e => e.ID_TYPE_DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<IdentificationType>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<IdentificationType>()
                .Property(e => e.UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<IdentificationType>()
                .HasMany(e => e.CustomerIdentifications)
                .WithRequired(e => e.IdentificationType)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<IdentificationTypeAML>()
                .Property(e => e.CODE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<IdentificationTypeAML>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<IdentificationTypeAML>()
                .HasMany(e => e.IdentificationTypes)
                .WithRequired(e => e.IdentificationTypeAML)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<IdentificationTypeRule>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<IdentificationTypeRule>()
                .Property(e => e.RULE_DEFINITION)
                .IsUnicode(false);

            modelBuilder.Entity<IdentificationTypeRule>()
                .Property(e => e.RULE_DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<IdentificationTypeRule>()
                .Property(e => e.RULE_MESSAGE)
                .IsUnicode(false);

            modelBuilder.Entity<IdentificationTypeRule>()
                .Property(e => e.RULE_DIRECTIVES)
                .IsUnicode(false);

            modelBuilder.Entity<IdentificationTypeRuleXRef>()
                .Property(e => e.STATE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<IdentificationTypeState>()
                .Property(e => e.ID_STATE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<IdentificationTypeState>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<IdentificationTypeState>()
                .Property(e => e.UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<IdentificationTypeVerify>()
                .Property(e => e.VERIFY_CODE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<IdentificationTypeVerify>()
                .Property(e => e.ID_VERIFY_DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<IdentificationTypeVerify>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<IdentificationTypeVerify>()
                .HasMany(e => e.LoanApplications)
                .WithOptional(e => e.IdentificationTypeVerify)
                .HasForeignKey(e => e.CUST_ID_VERIFY_KEY);

            modelBuilder.Entity<IINRange>()
                .Property(e => e.Name)
                .IsUnicode(false);

            modelBuilder.Entity<IINRange>()
                .Property(e => e.PanLen)
                .IsUnicode(false);

            modelBuilder.Entity<IINRange>()
                .Property(e => e.Mask)
                .IsUnicode(false);

            modelBuilder.Entity<IINRange>()
                .Property(e => e.CscLen2)
                .IsUnicode(false);

            modelBuilder.Entity<ImageCashLetter>()
                .Property(e => e.ICL_FILENAME)
                .IsUnicode(false);

            modelBuilder.Entity<ImageCashLetter>()
                .Property(e => e.ORIGINAL_SUBMISSION_AMOUNT)
                .HasPrecision(14, 5);

            modelBuilder.Entity<ImageCashLetter>()
                .Property(e => e.FILE_VALIDATION_STATUS)
                .IsUnicode(false);

            modelBuilder.Entity<ImageCashLetter>()
                .Property(e => e.ADJUSTMENT_DOLLARS)
                .HasPrecision(14, 5);

            modelBuilder.Entity<ImageCashLetter>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ImageCashLetter>()
                .HasMany(e => e.ImageCashLetterDetails)
                .WithRequired(e => e.ImageCashLetter)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ImageCashLetterBundle>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ImageCashLetterDetail>()
                .Property(e => e.CASH_LETTER_STATUS)
                .IsUnicode(false);

            modelBuilder.Entity<ImageCashLetterDetail>()
                .Property(e => e.REJECTED_DOLLARS)
                .HasPrecision(14, 5);

            modelBuilder.Entity<ImageCashLetterDetail>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ImageCashLetterDetail>()
                .HasMany(e => e.ImageCashLetterBundles)
                .WithRequired(e => e.ImageCashLetterDetail)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<IncomeJobType>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<IncomeJobType>()
                .Property(e => e.LAST_UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<IncomeJobType>()
                .Property(e => e.WAGE_LIMIT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<IncomeJobType>()
                .HasMany(e => e.FurtherFinanceJobTypes)
                .WithRequired(e => e.IncomeJobType)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<IncomeSource>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<IncomeSource>()
                .Property(e => e.LAST_UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<IncomeSource>()
                .HasMany(e => e.CustomerEmployers)
                .WithRequired(e => e.IncomeSource)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<IncomeType>()
                .Property(e => e.INCOME_TYPE_CODE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<IncomeType>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<IncomeType>()
                .Property(e => e.LAST_UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<IncomeType>()
                .HasMany(e => e.CustomerEmployers)
                .WithRequired(e => e.IncomeType)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<IncomeType>()
                .HasMany(e => e.IncomeSources)
                .WithRequired(e => e.IncomeType)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<IncomeType>()
                .HasMany(e => e.IncomeTypeLocations)
                .WithRequired(e => e.IncomeType)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<IncomeTypeLocation>()
                .Property(e => e.LAST_UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<IncomeTypeLocation>()
                .Property(e => e.ENUM_LIST_FOR_INCOME_MAINT_REQUIRED_FIELDS)
                .IsUnicode(false);

            modelBuilder.Entity<IncomeVerificationMessage>()
                .Property(e => e.STATE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<IncomeVerificationMessage>()
                .Property(e => e.MESSAGE_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<IncomeVerifyMethod>()
                .Property(e => e.VERIFY_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<IncomeVerifyMethod>()
                .Property(e => e.VERIFY_METHOD)
                .IsUnicode(false);

            modelBuilder.Entity<IncomeVerifyMethod>()
                .Property(e => e.LAST_UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<IncomeVerifyMethod>()
                .HasMany(e => e.IncomeVerifyMethodLocations)
                .WithRequired(e => e.IncomeVerifyMethod)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<IncomeVerifyMethodLocation>()
                .Property(e => e.LAST_UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<InitGLList>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<InsuranceClaim>()
                .Property(e => e.CLAIM_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<InsuranceClaim>()
                .Property(e => e.CLAIM_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<InsuranceClaim>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<InsuranceClaim>()
                .Property(e => e.UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<InsuranceClaim>()
                .HasMany(e => e.InsurancePayments)
                .WithRequired(e => e.InsuranceClaim)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<InsuranceClaimEdit>()
                .Property(e => e.FIELD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<InsuranceClaimEdit>()
                .Property(e => e.OLD_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<InsuranceClaimEdit>()
                .Property(e => e.NEW_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<InsuranceClaimEdit>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<InsuranceClaimStatu>()
                .Property(e => e.CLAIM_STATUS_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<InsuranceClaimStatu>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<InsuranceClaimStatu>()
                .Property(e => e.UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<InsurancePayment>()
                .Property(e => e.PAID_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<InsurancePaymentBatch>()
                .Property(e => e.INSURANCE_FILE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<InsurancePaymentBatch>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<InsuranceStatu>()
                .Property(e => e.SHORT_DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<InsuranceStatu>()
                .Property(e => e.FULL_DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<InsuranceStatu>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<InsuranceStatu>()
                .Property(e => e.UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<InsuranceStatu>()
                .HasMany(e => e.InsuranceClaims)
                .WithRequired(e => e.InsuranceStatu)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<InsuranceStatu>()
                .HasMany(e => e.InsuranceClaimStatus)
                .WithRequired(e => e.InsuranceStatu)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<InternalProcessEmail>()
                .Property(e => e.RECIPIENTS)
                .IsUnicode(false);

            modelBuilder.Entity<InternalProcessEmail>()
                .Property(e => e.SUBJECT)
                .IsUnicode(false);

            modelBuilder.Entity<InternalProcessEmail>()
                .HasMany(e => e.InternalProcessEmailBodies)
                .WithRequired(e => e.InternalProcessEmail)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<InvalidCustomerAddress>()
                .Property(e => e.HOME_ADDR_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<InvalidCustomerAddress>()
                .Property(e => e.HOME_ADDR_POST_DIR)
                .IsUnicode(false);

            modelBuilder.Entity<InvalidCustomerAddress>()
                .Property(e => e.HOME_ADDR_PRE_DIR)
                .IsUnicode(false);

            modelBuilder.Entity<InvalidCustomerAddress>()
                .Property(e => e.HOME_ADDR_STREET)
                .IsUnicode(false);

            modelBuilder.Entity<InvalidCustomerAddress>()
                .Property(e => e.HOME_ADDR_SUFFIX)
                .IsUnicode(false);

            modelBuilder.Entity<InvalidCustomerAddress>()
                .Property(e => e.HOME_ADDR_SUITE)
                .IsUnicode(false);

            modelBuilder.Entity<InvalidCustomerAddress>()
                .Property(e => e.HOME_ADDR_SUITE_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<InvalidCustomerAddress>()
                .Property(e => e.HOME_CITY)
                .IsUnicode(false);

            modelBuilder.Entity<InvalidCustomerAddress>()
                .Property(e => e.HOME_STATE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<InvalidCustomerAddress>()
                .Property(e => e.HOME_ZIPCODE)
                .IsUnicode(false);

            modelBuilder.Entity<InvalidCustomerAddress>()
                .Property(e => e.HOME_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<IPBlock>()
                .Property(e => e.Notes)
                .IsUnicode(false);

            modelBuilder.Entity<IPBlock>()
                .Property(e => e.Description)
                .IsUnicode(false);

            modelBuilder.Entity<IpToCountry>()
                .Property(e => e.CountryCode)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Issuer>()
                .Property(e => e.TLR)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Issuer>()
                .Property(e => e.ISSUER1)
                .IsUnicode(false);

            modelBuilder.Entity<Issuer>()
                .Property(e => e.CITY)
                .IsUnicode(false);

            modelBuilder.Entity<Issuer>()
                .Property(e => e.STATE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Issuer>()
                .Property(e => e.ZIPCODE)
                .IsUnicode(false);

            modelBuilder.Entity<Issuer>()
                .Property(e => e.PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<Issuer>()
                .Property(e => e.ACCT_NO)
                .IsUnicode(false);

            modelBuilder.Entity<Issuer>()
                .Property(e => e.BANK_ID)
                .IsUnicode(false);

            modelBuilder.Entity<Issuer>()
                .Property(e => e.LIMIT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Issuer>()
                .Property(e => e.TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Issuer>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<Issuer>()
                .Property(e => e.TUPT)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Issuer>()
                .Property(e => e.PHONE_EXT)
                .IsUnicode(false);

            modelBuilder.Entity<Issuer>()
                .Property(e => e.ADDRESS1)
                .IsUnicode(false);

            modelBuilder.Entity<Issuer>()
                .Property(e => e.COUNTY)
                .IsUnicode(false);

            modelBuilder.Entity<Issuer>()
                .Property(e => e.COUNTRY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Issuer>()
                .Property(e => e.ADDRESS_FORMAT)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Issuer>()
                .Property(e => e.ADDR_STREET)
                .IsUnicode(false);

            modelBuilder.Entity<Issuer>()
                .Property(e => e.FLAT_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<Issuer>()
                .Property(e => e.BUILDING_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<Issuer>()
                .Property(e => e.BUILDING_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<Issuer>()
                .Property(e => e.ADDRESS_LINE)
                .IsUnicode(false);

            modelBuilder.Entity<Issuer>()
                .Property(e => e.ADDRESS_CSZ)
                .IsUnicode(false);

            modelBuilder.Entity<Issuer>()
                .Property(e => e.ADDRESS_LINE_3)
                .IsUnicode(false);

            modelBuilder.Entity<Issuer>()
                .Property(e => e.ADDRESS_LINE_1)
                .IsUnicode(false);

            modelBuilder.Entity<Issuer>()
                .Property(e => e.ADDRESS_LINE_2)
                .IsUnicode(false);

            modelBuilder.Entity<Issuer>()
                .HasMany(e => e.RbcEFundBatchDetails)
                .WithRequired(e => e.Issuer)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Issuer>()
                .HasMany(e => e.RISREPTs)
                .WithRequired(e => e.Issuer)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<IssuerEdit>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<IssuerEdit>()
                .Property(e => e.FIELD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<IssuerEdit>()
                .Property(e => e.OLD_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<IssuerEdit>()
                .Property(e => e.NEW_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<LegalVerification>()
                .Property(e => e.RI_REFERENCE)
                .IsUnicode(false);

            modelBuilder.Entity<LegalVerification>()
                .Property(e => e.DEBTOR_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<LegalVerification>()
                .Property(e => e.PLAINTIFF1)
                .IsUnicode(false);

            modelBuilder.Entity<LegalVerification>()
                .Property(e => e.PLAINTIFF2)
                .IsUnicode(false);

            modelBuilder.Entity<LegalVerification>()
                .Property(e => e.DEFENDANT_FULLNAME)
                .IsUnicode(false);

            modelBuilder.Entity<LegalVerification>()
                .Property(e => e.DEFENDANT_ADDRESS_LINE)
                .IsUnicode(false);

            modelBuilder.Entity<LegalVerification>()
                .Property(e => e.DEFENDANT_ADDRESS_CSZ)
                .IsUnicode(false);

            modelBuilder.Entity<LegalVerification>()
                .Property(e => e.DEFENDANT_MASKED_SSN)
                .IsUnicode(false);

            modelBuilder.Entity<LegalVerification>()
                .Property(e => e.CUSTOMER_BALANCE_DUE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LegalVerification>()
                .Property(e => e.COURT_COSTS)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LegalVerification>()
                .Property(e => e.DEFENDANT_TOTAL_DUE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LegalVerification>()
                .Property(e => e.ATTORNEY_FEES)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LegalVerification>()
                .Property(e => e.ATTORNEY_TITLE_LOAN_BAL_DUE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LegalVerification>()
                .Property(e => e.ATTORNEY_CURRENT_BAL_DUE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LegalVerification>()
                .Property(e => e.ATTORNEY_POST_JUDGE_DUE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LegalVerification>()
                .Property(e => e.PRINCIPLE_DUE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LegalVerification>()
                .Property(e => e.VERIFIED_TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LegalVerification>()
                .Property(e => e.IMPORT_FILENAME)
                .IsUnicode(false);

            modelBuilder.Entity<Lender>()
                .Property(e => e.LENDER_ID)
                .IsUnicode(false);

            modelBuilder.Entity<Lender>()
                .Property(e => e.LENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<Lender>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Lender>()
                .Property(e => e.UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Lender>()
                .HasMany(e => e.LoanApplications)
                .WithRequired(e => e.Lender)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Lender>()
                .HasMany(e => e.Visitors)
                .WithRequired(e => e.Lender)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<LienHolder>()
                .Property(e => e.LIEN_HOLDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LienHolder>()
                .Property(e => e.ADDRESS1)
                .IsUnicode(false);

            modelBuilder.Entity<LienHolder>()
                .Property(e => e.CITY)
                .IsUnicode(false);

            modelBuilder.Entity<LienHolder>()
                .Property(e => e.STATE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LienHolder>()
                .Property(e => e.ZIPCODE)
                .IsUnicode(false);

            modelBuilder.Entity<LienHolder>()
                .Property(e => e.PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<LienHolder>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LienHolder>()
                .Property(e => e.UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LienHolder>()
                .Property(e => e.COUNTY)
                .IsUnicode(false);

            modelBuilder.Entity<LienHolder>()
                .Property(e => e.COUNTRY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LienHolder>()
                .Property(e => e.ADDRESS_FORMAT)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LienHolder>()
                .Property(e => e.ADDR_STREET)
                .IsUnicode(false);

            modelBuilder.Entity<LienHolder>()
                .Property(e => e.FLAT_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<LienHolder>()
                .Property(e => e.BUILDING_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<LienHolder>()
                .Property(e => e.BUILDING_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LienHolder>()
                .Property(e => e.ADDRESS_LINE)
                .IsUnicode(false);

            modelBuilder.Entity<LienHolder>()
                .Property(e => e.ADDRESS_CSZ)
                .IsUnicode(false);

            modelBuilder.Entity<LienHolder>()
                .Property(e => e.ADDRESS_LINE_3)
                .IsUnicode(false);

            modelBuilder.Entity<LienHolder>()
                .Property(e => e.ADDRESS_LINE_1)
                .IsUnicode(false);

            modelBuilder.Entity<LienHolder>()
                .Property(e => e.ADDRESS_LINE_2)
                .IsUnicode(false);

            modelBuilder.Entity<Loan>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Loan>()
                .Property(e => e.CHECK_NO)
                .IsUnicode(false);

            modelBuilder.Entity<Loan>()
                .Property(e => e.LOAN_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Loan>()
                .Property(e => e.ORIG_CODE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Loan>()
                .Property(e => e.LOAN_STATUS)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Loan>()
                .Property(e => e.LOAN_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Loan>()
                .Property(e => e.LOAN_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Loan>()
                .Property(e => e.CASH_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Loan>()
                .Property(e => e.PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Loan>()
                .Property(e => e.RATE_PCT)
                .HasPrecision(9, 5);

            modelBuilder.Entity<Loan>()
                .Property(e => e.DISC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Loan>()
                .Property(e => e.REBATE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Loan>()
                .Property(e => e.GRACE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Loan>()
                .Property(e => e.FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Loan>()
                .Property(e => e.TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Loan>()
                .Property(e => e.LIEN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Loan>()
                .Property(e => e.TOT_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Loan>()
                .Property(e => e.ORIG_APR)
                .HasPrecision(14, 3);

            modelBuilder.Entity<Loan>()
                .Property(e => e.PRINT_LANGUAGE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Loan>()
                .Property(e => e.DW_LOAN_NO)
                .IsUnicode(false);

            modelBuilder.Entity<Loan>()
                .Property(e => e.PRODUCT_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Loan>()
                .Property(e => e.DISPLAY_CHECK_NO)
                .IsUnicode(false);

            modelBuilder.Entity<Loan>()
                .Property(e => e.PENDING_SCHED_ACH_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Loan>()
                .Property(e => e.PENDING_COLL_ACH_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Loan>()
                .Property(e => e.FASTER_PAYMENTS_FEE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Loan>()
                .Property(e => e.STANDARD_RATE_PCT)
                .HasPrecision(9, 5);

            modelBuilder.Entity<Loan>()
                .Property(e => e.TILA_APR)
                .HasPrecision(14, 3);

            modelBuilder.Entity<Loan>()
                .Property(e => e.TILA_FINANCE_CHARGE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Loan>()
                .Property(e => e.TILA_AMOUNT_FINANCED)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Loan>()
                .Property(e => e.TILA_TOTAL_PAYMENTS)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Loan>()
                .Property(e => e.PENDING_PMT_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Loan>()
                .Property(e => e.PENDING_PMT_PRINC)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Loan>()
                .Property(e => e.PENDING_PMT_INTEREST_CAP)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Loan>()
                .Property(e => e.PENDING_PMT_CAB_INTEREST_CAP)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Loan>()
                .Property(e => e.PENDING_PMT_FEES)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Loan>()
                .Property(e => e.INSURANCE_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Loan>()
                .HasMany(e => e.ACHProcessingQueues)
                .WithRequired(e => e.Loan)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Loan>()
                .HasMany(e => e.ACHQueues)
                .WithRequired(e => e.Loan)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Loan>()
                .HasMany(e => e.BusinessLoans)
                .WithRequired(e => e.Loan)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Loan>()
                .HasMany(e => e.CheckAgains)
                .WithRequired(e => e.Loan)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Loan>()
                .HasMany(e => e.DDIs)
                .WithRequired(e => e.Loan)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Loan>()
                .HasMany(e => e.DDISendQueues)
                .WithRequired(e => e.Loan)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Loan>()
                .HasMany(e => e.DocuwareLoanLkups)
                .WithRequired(e => e.Loan)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Loan>()
                .HasMany(e => e.ExcludeFromCapsHistories)
                .WithRequired(e => e.Loan)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Loan>()
                .HasMany(e => e.LoanCCallChanges)
                .WithRequired(e => e.Loan)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Loan>()
                .HasMany(e => e.LoanChecks)
                .WithRequired(e => e.Loan)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Loan>()
                .HasMany(e => e.LoanFundingMethodHistories)
                .WithRequired(e => e.Loan)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Loan>()
                .HasMany(e => e.LoanIncomes)
                .WithRequired(e => e.Loan)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Loan>()
                .HasMany(e => e.LoanOverrides)
                .WithRequired(e => e.Loan)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Loan>()
                .HasMany(e => e.LoanPayments)
                .WithRequired(e => e.Loan)
                .HasForeignKey(e => e.PAID_LOAN_KEY)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Loan>()
                .HasMany(e => e.LoanServices)
                .WithRequired(e => e.Loan)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Loan>()
                .HasMany(e => e.LoanWebReviewTemplateXrefs)
                .WithRequired(e => e.Loan)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Loan>()
                .HasMany(e => e.MPayLoans)
                .WithRequired(e => e.Loan)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Loan>()
                .HasMany(e => e.MPayAmortDueDateChanges)
                .WithRequired(e => e.Loan)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Loan>()
                .HasMany(e => e.OpenEndInterestRates)
                .WithRequired(e => e.Loan)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Loan>()
                .HasMany(e => e.PaydayLoans)
                .WithRequired(e => e.Loan)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Loan>()
                .HasMany(e => e.RbcEFundBatchDetails)
                .WithRequired(e => e.Loan)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Loan>()
                .HasMany(e => e.RbcEFundSecurities)
                .WithRequired(e => e.Loan)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Loan>()
                .HasMany(e => e.RIAgingHistories)
                .WithRequired(e => e.Loan)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Loan>()
                .HasMany(e => e.RiccAutoRolls)
                .WithRequired(e => e.Loan)
                .HasForeignKey(e => e.ORIG_LOAN_KEY)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Loan>()
                .HasMany(e => e.RiccAutoRolls1)
                .WithRequired(e => e.Loan1)
                .HasForeignKey(e => e.NEW_LOAN_KEY)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Loan>()
                .HasMany(e => e.RolloverRequests)
                .WithRequired(e => e.Loan)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Loan>()
                .HasMany(e => e.SPayInterests)
                .WithRequired(e => e.Loan)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Loan>()
                .HasMany(e => e.SPayLoans)
                .WithRequired(e => e.Loan)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Loan>()
                .HasMany(e => e.SPaySchedRollovers)
                .WithRequired(e => e.Loan)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Loan>()
                .HasMany(e => e.VehicleHistories)
                .WithRequired(e => e.Loan)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Loan>()
                .HasMany(e => e.WebBlobLoanXrefs)
                .WithRequired(e => e.Loan)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Loan>()
                .HasMany(e => e.WebLoanCreditFrauds)
                .WithRequired(e => e.Loan)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.MID_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.HOME_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.CELL_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.SSN)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.ABA_NUM)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.ACCT_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.REQ_CASH_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.CCARD_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.CCARD_CVV)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.CCARD_NAME_ON_CARD)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.LANGUAGE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.REASON_DENIED)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.ID_NO)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.SPOUSE_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.SPOUSE_MID_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.SPOUSE_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.SPOUSE_SSN)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.SPOUSE_HOME_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.SPOUSE_CELL_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.SPOUSE_WORK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.SPOUSE_WORK_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.SPOUSE_WORK_PHONE_EXT)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.GENDER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.HOW_REF_OBSOLETE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.EMAIL)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.REF1_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.REF1_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.REF1_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.REF1_RELATIONSHIP)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.REF2_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.REF2_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.REF2_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.REF2_RELATIONSHIP)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.RI_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.LEGAL_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.COURTESY_CALL_NUM)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.CUST_ID_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.CUST_ID_SOURCE)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.CUST_ID_VERIFY_OTHER)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.MONTHLY_HOUSING)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.SOURCE_APP)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.SOURCE_DB)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.IP_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.VEH_MAKE)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.VEH_MODEL)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.VEH_VIN)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.VEH_LIEN_HOLDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.VEH_LIEN_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.CCARD_GUARANTEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.CCARD_TOKEN)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.FUNDING_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.CUST_ID_COUNTRY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.CUST_ID_STATE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplication>()
                .Property(e => e.CANCEL_INSURANCE_REQUEST_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplication>()
                .HasMany(e => e.CustomerLeads)
                .WithRequired(e => e.LoanApplication)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<LoanApplication>()
                .HasMany(e => e.ErrorLogs)
                .WithOptional(e => e.LoanApplication)
                .HasForeignKey(e => e.APPLICATION_KEY);

            modelBuilder.Entity<LoanApplication>()
                .HasMany(e => e.LoanApplicationAddresses)
                .WithRequired(e => e.LoanApplication)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<LoanApplication>()
                .HasMany(e => e.LoanApplicationAffordSurvey_ToBeDeleted)
                .WithOptional(e => e.LoanApplication)
                .WillCascadeOnDelete();

            modelBuilder.Entity<LoanApplication>()
                .HasMany(e => e.LoanApplicationDiscounts)
                .WithRequired(e => e.LoanApplication)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<LoanApplication>()
                .HasMany(e => e.LoanApplicationIncomes)
                .WithRequired(e => e.LoanApplication)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<LoanApplication>()
                .HasMany(e => e.LoanApplicationProducts)
                .WithRequired(e => e.LoanApplication)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<LoanApplication>()
                .HasMany(e => e.LoanApplicationVehicleInformations)
                .WithRequired(e => e.LoanApplication)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<LoanApplication>()
                .HasMany(e => e.PayStubs)
                .WithRequired(e => e.LoanApplication)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<LoanApplication>()
                .HasMany(e => e.WebBlobLoanApplicationXrefs)
                .WithRequired(e => e.LoanApplication)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<LoanApplication>()
                .HasMany(e => e.WebCallQueues)
                .WithOptional(e => e.LoanApplication)
                .HasForeignKey(e => e.WEB_CALL_LOAN_APP_KEY);

            modelBuilder.Entity<LoanApplication>()
                .HasMany(e => e.WebCallWorkQueues)
                .WithOptional(e => e.LoanApplication)
                .HasForeignKey(e => e.WEB_CALL_LOAN_APP_KEY);

            modelBuilder.Entity<LoanApplication>()
                .HasMany(e => e.WebErrorLogs)
                .WithOptional(e => e.LoanApplication)
                .HasForeignKey(e => e.APPLICATION_KEY);

            modelBuilder.Entity<LoanApplication>()
                .HasMany(e => e.WebImages)
                .WithRequired(e => e.LoanApplication)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<LoanApplication>()
                .HasMany(e => e.WebPixelVendorDatas)
                .WithRequired(e => e.LoanApplication)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<LoanApplicationAddress>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationAddress>()
                .Property(e => e.ADDRESS1)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationAddress>()
                .Property(e => e.COUNTY)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationAddress>()
                .Property(e => e.COUNTRY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationAddress>()
                .Property(e => e.CITY)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationAddress>()
                .Property(e => e.STATE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationAddress>()
                .Property(e => e.ZIPCODE)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationAddress>()
                .Property(e => e.ADDRESS_FORMAT)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationAddress>()
                .Property(e => e.ADDR_STREET)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationAddress>()
                .Property(e => e.FLAT_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationAddress>()
                .Property(e => e.BUILDING_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationAddress>()
                .Property(e => e.BUILDING_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationAddress>()
                .Property(e => e.ADDRESS_CSZ)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationAddress>()
                .Property(e => e.ADDRESS_LINE_3)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationAddress>()
                .Property(e => e.ADDR_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationAddress>()
                .Property(e => e.ADDR_PRE_DIR)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationAddress>()
                .Property(e => e.ADDR_SUFFIX)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationAddress>()
                .Property(e => e.ADDR_POST_DIR)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationAddress>()
                .Property(e => e.ADDR_SUITE)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationAddress>()
                .Property(e => e.ADDR_SUITE_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationAddress>()
                .Property(e => e.ADDRESS_LINE)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationAddress>()
                .Property(e => e.ADDRESS_LINE_1)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationAddress>()
                .Property(e => e.ADDRESS_LINE_2)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationAffordSurvey_ToBeDeleted>()
                .Property(e => e.NET_INCOME)
                .HasPrecision(19, 4);

            modelBuilder.Entity<LoanApplicationEmployer>()
                .Property(e => e.EMPLOYER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationEmployer>()
                .Property(e => e.DEPARTMENT)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationEmployer>()
                .Property(e => e.COUNTY)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationEmployer>()
                .Property(e => e.COUNTRY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationEmployer>()
                .Property(e => e.FULLPARTTIME)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationEmployer>()
                .Property(e => e.PHONE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationEmployer>()
                .Property(e => e.PHONE_EXT)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationEmployer>()
                .Property(e => e.PAY_CYCLE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationEmployer>()
                .Property(e => e.PAY_CYCLE_MONTH_INT)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationEmployer>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationEmployer>()
                .HasMany(e => e.LoanApplicationIncomes)
                .WithRequired(e => e.LoanApplicationEmployer)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<LoanApplicationExpense>()
                .HasMany(e => e.LoanApplicationExpenseDetails)
                .WithRequired(e => e.LoanApplicationExpense)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<LoanApplicationExpenseDetail>()
                .Property(e => e.AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<LoanApplicationIncome>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationIncome>()
                .Property(e => e.AMOUNT_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationIncome>()
                .Property(e => e.AMOUNT_CYCLE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationIncome>()
                .Property(e => e.INCOME_AMOUNT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanApplicationProduct>()
                .Property(e => e.LOAN_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationProduct>()
                .Property(e => e.PRODUCT_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationProduct>()
                .Property(e => e.APPROVED_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanApplicationProduct>()
                .Property(e => e.SELECTED_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanApplicationProduct>()
                .Property(e => e.DETAIL)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationProduct>()
                .Property(e => e.FINAL_SCORE)
                .HasPrecision(8, 2);

            modelBuilder.Entity<LoanApplicationVehicleInformation>()
                .Property(e => e.VEH_WHOLESALE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<LoanApplicationVehicleInformation>()
                .Property(e => e.VEH_CONDITION)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationVehicleInformation>()
                .Property(e => e.VEH_PLATE)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationVehicleInformation>()
                .Property(e => e.VEH_STICKER)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationVehicleInformation>()
                .Property(e => e.VEH_REG_STATE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationVehicleInformation>()
                .Property(e => e.VEH_TITLE_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationVehicleInformation>()
                .Property(e => e.VEH_ODO_CODE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationVehicleInformation>()
                .Property(e => e.LEGAL_STATUS)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationVehicleInformation>()
                .Property(e => e.STATE_CUST_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationVehicleInformation>()
                .Property(e => e.INS_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationVehicleInformation>()
                .Property(e => e.INS_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationVehicleInformation>()
                .Property(e => e.INS_POLICY_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationVehicleInformation>()
                .Property(e => e.AND_OR_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationVehicleInformation>()
                .Property(e => e.LIEN_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanApplicationVehicleInformation>()
                .Property(e => e.LIEN_ACCT_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationVehicleInformation>()
                .Property(e => e.VEH_VIN)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationVehicleInformation>()
                .Property(e => e.VEH_MAKE)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationVehicleInformation>()
                .Property(e => e.VEH_MODEL)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationVehicleInformation>()
                .Property(e => e.VEH_BODY)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationVehicleInformation>()
                .Property(e => e.VEH_ENGINE)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationVehicleInformation>()
                .Property(e => e.VEH_TRANS)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationVehicleInformation>()
                .Property(e => e.VEH_DRIVE)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationVehicleInformation>()
                .Property(e => e.VEH_RETAIL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanCCallChange>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanCheck>()
                .Property(e => e.SEQUENCE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanCheck>()
                .Property(e => e.CHECK_NO)
                .IsUnicode(false);

            modelBuilder.Entity<LoanCheck>()
                .Property(e => e.CHECK_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanCheck>()
                .Property(e => e.CHECK_STATUS)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanCheck>()
                .HasMany(e => e.LoanPaymentLoanCheckXrefs)
                .WithRequired(e => e.LoanCheck)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<LoanChkAcctChange>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanChkAcctChange>()
                .Property(e => e.ISSUER_CHK_ACCT_CHANGE_REASON)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanChkAcctChange>()
                .Property(e => e.CCARD_CHK_ACCT_CHANGE_REASON)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanChkAcctChange>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<LoanConfigApplyPaymentOrder>()
                .Property(e => e.APPLY_PAYMENT_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<LoanConfigApplyPaymentOrder>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<LoanCoPledger>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanCoPledger>()
                .Property(e => e.GENDER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanCoPledger>()
                .Property(e => e.HOME_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<LoanCoPledger>()
                .Property(e => e.PHOTO_ID)
                .IsUnicode(false);

            modelBuilder.Entity<LoanCoPledger>()
                .Property(e => e.PHOTO_ID_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanCoPledger>()
                .Property(e => e.ISSUING_AGENCY)
                .IsUnicode(false);

            modelBuilder.Entity<LoanCoPledger>()
                .Property(e => e.ADDR_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<LoanCoPledger>()
                .Property(e => e.ADDR_PRE_DIR)
                .IsUnicode(false);

            modelBuilder.Entity<LoanCoPledger>()
                .Property(e => e.ADDR_STREET)
                .IsUnicode(false);

            modelBuilder.Entity<LoanCoPledger>()
                .Property(e => e.ADDR_SUFFIX)
                .IsUnicode(false);

            modelBuilder.Entity<LoanCoPledger>()
                .Property(e => e.ADDR_POST_DIR)
                .IsUnicode(false);

            modelBuilder.Entity<LoanCoPledger>()
                .Property(e => e.ADDR_SUITE)
                .IsUnicode(false);

            modelBuilder.Entity<LoanCoPledger>()
                .Property(e => e.ADDR_SUITE_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<LoanCoPledger>()
                .Property(e => e.CITY)
                .IsUnicode(false);

            modelBuilder.Entity<LoanCoPledger>()
                .Property(e => e.STATE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanCoPledger>()
                .Property(e => e.ZIPCODE)
                .IsUnicode(false);

            modelBuilder.Entity<LoanCoPledger>()
                .Property(e => e.COUNTY)
                .IsUnicode(false);

            modelBuilder.Entity<LoanCoPledger>()
                .Property(e => e.COUNTRY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanCoPledger>()
                .Property(e => e.ADDRESS_FORMAT)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanCoPledger>()
                .Property(e => e.FLAT_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<LoanCoPledger>()
                .Property(e => e.BUILDING_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<LoanCoPledger>()
                .Property(e => e.BUILDING_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LoanCoPledger>()
                .Property(e => e.ADDRESS_LINE)
                .IsUnicode(false);

            modelBuilder.Entity<LoanCoPledger>()
                .Property(e => e.ADDRESS_CSZ)
                .IsUnicode(false);

            modelBuilder.Entity<LoanCoPledger>()
                .Property(e => e.ADDRESS_LINE_3)
                .IsUnicode(false);

            modelBuilder.Entity<LoanCoPledger>()
                .Property(e => e.ADDRESS_LINE_1)
                .IsUnicode(false);

            modelBuilder.Entity<LoanCoPledger>()
                .Property(e => e.ADDRESS_LINE_2)
                .IsUnicode(false);

            modelBuilder.Entity<LoanCoPledger>()
                .Property(e => e.SSN)
                .IsUnicode(false);

            modelBuilder.Entity<LoanCreditLimit>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanCreditLimit>()
                .Property(e => e.OLD_LIMIT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanCreditLimit>()
                .Property(e => e.NEW_LIMIT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanDepositOrderHistory>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanDepositOrderHistory>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<LoanDepositOrderResetReason>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<LoanDepositOrderResetReason>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanDepositOrderResetReason>()
                .HasMany(e => e.LoanDepositOrderHistories)
                .WithOptional(e => e.LoanDepositOrderResetReason)
                .HasForeignKey(e => e.RESET_REASON_KEY);

            modelBuilder.Entity<LoanDoc>()
                .Property(e => e.LOAN_DOC_FILENAME)
                .IsUnicode(false);

            modelBuilder.Entity<LoanDoc>()
                .Property(e => e.LOAN_DOC_EXT)
                .IsUnicode(false);

            modelBuilder.Entity<LoanDoc>()
                .Property(e => e.LOAN_DOC_REVISION)
                .IsUnicode(false);

            modelBuilder.Entity<LoanDoc>()
                .Property(e => e.LOAN_DOC_STATE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanDoc>()
                .Property(e => e.LOAN_DOC_LANGUAGE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanDoc>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanDoc>()
                .HasMany(e => e.LoanDocPrinteds)
                .WithRequired(e => e.LoanDoc)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<LoanDoc>()
                .HasMany(e => e.LoanDocUseds)
                .WithOptional(e => e.LoanDoc)
                .WillCascadeOnDelete();

            modelBuilder.Entity<LoanDocPrinted>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanDocType>()
                .Property(e => e.LOAN_DOC_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LoanDocType>()
                .Property(e => e.LOAN_DOC_TYPE_ID)
                .IsUnicode(false);

            modelBuilder.Entity<LoanDocType>()
                .Property(e => e.LOAN_DOC_TYPE_NICKNAME)
                .IsUnicode(false);

            modelBuilder.Entity<LoanDocType>()
                .HasMany(e => e.LoanDocs)
                .WithRequired(e => e.LoanDocType)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<LoanDocType>()
                .HasMany(e => e.LoanDocUseds)
                .WithOptional(e => e.LoanDocType)
                .WillCascadeOnDelete();

            modelBuilder.Entity<LoanDocUpload>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanDocUpload>()
                .Property(e => e.LOAN_DOC_FILE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LoanDocUpload>()
                .Property(e => e.ZIP_FILE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LoanDocUsed>()
                .Property(e => e.PRODUCT_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanDocUsed>()
                .Property(e => e.LOAN_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanDocUsed>()
                .Property(e => e.PRINT_FOR_DEPOSIT_METHOD)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanDocUsed>()
                .Property(e => e.PRINT_ONLY_LOAN_AMT_MIN)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanDueDateChange>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanDueDateChange>()
                .Property(e => e.CHANGE_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<LoanFunding>()
                .Property(e => e.REQUESTED_FUNDING_METHOD)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanFunding>()
                .Property(e => e.ACTUAL_FUNDING_METHOD)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanFunding>()
                .Property(e => e.FUNDING_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanFunding>()
                .Property(e => e.FUNDING_STATUS)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanFundingMethodHistory>()
                .Property(e => e.TELLER)
                .IsFixedLength();

            modelBuilder.Entity<LoanImport>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanImport>()
                .Property(e => e.COMPANY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LoanImport>()
                .Property(e => e.CUSTOMER_IMPORT_FILE)
                .IsUnicode(false);

            modelBuilder.Entity<LoanImport>()
                .Property(e => e.LOAN_IMPORT_FILE)
                .IsUnicode(false);

            modelBuilder.Entity<LoanImportXRef>()
                .Property(e => e.IMPORT_LOCATION)
                .IsUnicode(false);

            modelBuilder.Entity<LoanNote>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<LoanNote>()
                .Property(e => e.RTF_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<LoanNote>()
                .Property(e => e.DELETED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanNote>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanNote>()
                .HasMany(e => e.LoanOverrides)
                .WithRequired(e => e.LoanNote)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<LoanOverride>()
                .Property(e => e.LOAN_OVERRIDE_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanOverride>()
                .Property(e => e.ORIG_VALUE)
                .HasPrecision(11, 5);

            modelBuilder.Entity<LoanOverride>()
                .Property(e => e.OVERRIDE_VALUE)
                .HasPrecision(11, 5);

            modelBuilder.Entity<LoanPayment>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanPayment>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<LoanPayment>()
                .Property(e => e.PAID_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPayment>()
                .Property(e => e.PRODUCT_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanPayment>()
                .Property(e => e.LOAN_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanPayment>()
                .HasMany(e => e.ACH_History)
                .WithOptional(e => e.LoanPayment)
                .HasForeignKey(e => e.SEND_LOAN_PAYMENT_KEY);

            modelBuilder.Entity<LoanPayment>()
                .HasMany(e => e.ACH_History1)
                .WithOptional(e => e.LoanPayment1)
                .HasForeignKey(e => e.RECV_LOAN_PAYMENT_KEY);

            modelBuilder.Entity<LoanPayment>()
                .HasMany(e => e.ACH_History2)
                .WithOptional(e => e.LoanPayment2)
                .HasForeignKey(e => e.REFUND_LOAN_PAYMENT_KEY);

            modelBuilder.Entity<LoanPayment>()
                .HasMany(e => e.AttorneyPayments)
                .WithOptional(e => e.LoanPayment)
                .HasForeignKey(e => e.LOAN_PAYMENT_KEY);

            modelBuilder.Entity<LoanPayment>()
                .HasMany(e => e.LoanFundings)
                .WithRequired(e => e.LoanPayment)
                .HasForeignKey(e => e.APPROVED_LOAN_PAYMENT_KEY)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<LoanPayment>()
                .HasMany(e => e.LoanPaymentAddToQueues)
                .WithRequired(e => e.LoanPayment)
                .HasForeignKey(e => e.LOAN_PAYMENT_KEY);

            modelBuilder.Entity<LoanPayment>()
                .HasMany(e => e.LoanPaymentDecreaseAmountOweds)
                .WithRequired(e => e.LoanPayment)
                .HasForeignKey(e => e.LOAN_PAYMENT_KEY)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<LoanPayment>()
                .HasMany(e => e.LoanPaymentDueDates)
                .WithRequired(e => e.LoanPayment)
                .HasForeignKey(e => e.LOAN_PAYMENT_KEY);

            modelBuilder.Entity<LoanPayment>()
                .HasMany(e => e.LoanPaymentInsuranceClaimXRefs)
                .WithRequired(e => e.LoanPayment)
                .HasForeignKey(e => e.LOAN_PAYMENT_KEY)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<LoanPayment>()
                .HasMany(e => e.LoanPaymentMPays)
                .WithRequired(e => e.LoanPayment)
                .HasForeignKey(e => e.LOAN_PAYMENT_KEY);

            modelBuilder.Entity<LoanPayment>()
                .HasMany(e => e.LoanPaymentOpenEnds)
                .WithRequired(e => e.LoanPayment)
                .HasForeignKey(e => e.LOAN_PAYMENT_KEY);

            modelBuilder.Entity<LoanPayment>()
                .HasMany(e => e.LoanPaymentRefundXRefs)
                .WithRequired(e => e.LoanPayment)
                .HasForeignKey(e => e.REFUND_LOAN_PAYMENT_KEY);

            modelBuilder.Entity<LoanPayment>()
                .HasMany(e => e.LoanPaymentRefundXRefs1)
                .WithRequired(e => e.LoanPayment1)
                .HasForeignKey(e => e.REFUNDED_LOAN_PAYMENT_KEY)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<LoanPayment>()
                .HasMany(e => e.LoanPaymentRescinds)
                .WithRequired(e => e.LoanPayment)
                .HasForeignKey(e => e.CASH_ADVANCE_LOAN_PAYMENT_KEY)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<LoanPayment>()
                .HasMany(e => e.LoanPaymentRescinds1)
                .WithRequired(e => e.LoanPayment1)
                .HasForeignKey(e => e.LOAN_PAYMENT_KEY)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<LoanPayment>()
                .HasMany(e => e.LoanPaymentSPays)
                .WithRequired(e => e.LoanPayment)
                .HasForeignKey(e => e.LOAN_PAYMENT_KEY)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<LoanPayment>()
                .HasMany(e => e.LoanPaymentSuspendInterests)
                .WithRequired(e => e.LoanPayment)
                .HasForeignKey(e => e.LOAN_PAYMENT_SUSPEND_KEY)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<LoanPayment>()
                .HasMany(e => e.LoanPaymentSuspendInterests1)
                .WithOptional(e => e.LoanPayment1)
                .HasForeignKey(e => e.LOAN_PAYMENT_RESUME_KEY);

            modelBuilder.Entity<LoanPayment>()
                .HasMany(e => e.LoanPaymentWaiveRIFees)
                .WithRequired(e => e.LoanPayment)
                .HasForeignKey(e => e.LOAN_PAYMENT_KEY)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<LoanPayment>()
                .HasMany(e => e.OpenEndLoanStatements)
                .WithRequired(e => e.LoanPayment)
                .HasForeignKey(e => e.LOAN_PAYMENT_KEY);

            modelBuilder.Entity<LoanPaymentAddToQueue>()
                .Property(e => e.ADD_TO_PAYMENT_QUEUE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentCheckPaymentTypeXref>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanPaymentDecreaseAmountOwed>()
                .Property(e => e.DECREASE_AMOUNT_OWED_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanPaymentDecreaseAmountOwed>()
                .Property(e => e.DECREASE_AMOUNT_OWED_REASON)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanPaymentDecreaseAmountOwed>()
                .Property(e => e.APPLY_BUCKET_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentDecreaseAmountOwed>()
                .Property(e => e.APPLY_DUE_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanPaymentDecreaseAmountOwed>()
                .Property(e => e.APPLY_BUCKET_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanPaymentDueDate>()
                .Property(e => e.PAST_DUE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentDueDate>()
                .Property(e => e.COLLECTIONS_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentDueDate>()
                .Property(e => e.PENDING_ACH_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentMPay>()
                .Property(e => e.PENDING_SCHED_ACH_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentMPay>()
                .Property(e => e.COLL_FEE_PAST_DUE_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentMPay>()
                .Property(e => e.LEGAL_FEE_PAST_DUE_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentMPay>()
                .Property(e => e.LOAN_FEE_DUE_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentMPay>()
                .Property(e => e.TRANS_FEE_DUE_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentMPay>()
                .Property(e => e.INTEREST_DUE_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentMPay>()
                .Property(e => e.PRINC_DUE_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentMPay>()
                .Property(e => e.PAYMENT_DUE_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentMPay>()
                .Property(e => e.PAYMENT_PAST_DUE_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentMPay>()
                .Property(e => e.CAB_COLL_FEE_PAST_DUE_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentMPay>()
                .Property(e => e.CAB_INTEREST_DUE_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentMPay>()
                .Property(e => e.NSF_FEE_PAST_DUE_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentMPay>()
                .Property(e => e.INSURANCE_DUE_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentMPay>()
                .Property(e => e.DUE_DATE_PAYMENT_QUEUE_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentMPayRefund>()
                .Property(e => e.COLL_FEE_PAST_DUE_REFUNDED)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentMPayRefund>()
                .Property(e => e.LEGAL_FEE_PAST_DUE_REFUNDED)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentMPayRefund>()
                .Property(e => e.LOAN_FEE_DUE_REFUNDED)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentMPayRefund>()
                .Property(e => e.TRANS_FEE_DUE_REFUNDED)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentMPayRefund>()
                .Property(e => e.INTEREST_DUE_REFUNDED)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentMPayRefund>()
                .Property(e => e.PRINC_DUE_REFUNDED)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentMPayRefund>()
                .Property(e => e.CAB_COLL_FEE_PAST_DUE_REFUNDED)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentMPayRefund>()
                .Property(e => e.CAB_INTEREST_DUE_REFUNDED)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentMPayRefund>()
                .Property(e => e.NSF_FEE_PAST_DUE_REFUNDED)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentMPayRefund>()
                .Property(e => e.INSURANCE_DUE_REFUNDED)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEnd>()
                .Property(e => e.PAST_DUE_TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEnd>()
                .Property(e => e.PAST_DUE_LIEN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEnd>()
                .Property(e => e.PAST_DUE_ACTIVITY_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEnd>()
                .Property(e => e.PAST_DUE_COLL_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEnd>()
                .Property(e => e.PAST_DUE_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEnd>()
                .Property(e => e.PAST_DUE_PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEnd>()
                .Property(e => e.CURR_DUE_TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEnd>()
                .Property(e => e.CURR_DUE_LIEN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEnd>()
                .Property(e => e.CURR_DUE_ACTIVITY_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEnd>()
                .Property(e => e.CURR_DUE_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEnd>()
                .Property(e => e.CURR_DUE_PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEnd>()
                .Property(e => e.NEXT_DUE_TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEnd>()
                .Property(e => e.NEXT_DUE_LIEN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEnd>()
                .Property(e => e.NEXT_DUE_ACTIVITY_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEnd>()
                .Property(e => e.NEXT_DUE_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEnd>()
                .Property(e => e.NEXT_DUE_PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEnd>()
                .Property(e => e.NOT_DUE_TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEnd>()
                .Property(e => e.NOT_DUE_LIEN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEnd>()
                .Property(e => e.NOT_DUE_ACTIVITY_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEnd>()
                .Property(e => e.NOT_DUE_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEnd>()
                .Property(e => e.NOT_DUE_PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEnd>()
                .Property(e => e.TOT_TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEnd>()
                .Property(e => e.TOT_LIEN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEnd>()
                .Property(e => e.TOT_ACTIVITY_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEnd>()
                .Property(e => e.TOT_INTEREST_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEnd>()
                .Property(e => e.TOT_PRINC_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEnd>()
                .Property(e => e.FUNDING_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEnd>()
                .Property(e => e.FUNDING_STATUS_CODE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanPaymentOpenEnd>()
                .Property(e => e.PENDING_SCHED_ACH_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEnd>()
                .Property(e => e.PAST_DUE_CSO_LENDER_COLL_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEnd>()
                .Property(e => e.PAST_DUE_CSO_LENDER_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEnd>()
                .Property(e => e.CURR_DUE_CSO_LENDER_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEnd>()
                .Property(e => e.NEXT_DUE_CSO_LENDER_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEnd>()
                .Property(e => e.NOT_DUE_CSO_LENDER_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEnd>()
                .Property(e => e.TOT_PAST_DUE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEnd>()
                .Property(e => e.TOT_CURR_DUE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEnd>()
                .Property(e => e.TOT_NEXT_DUE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEnd>()
                .Property(e => e.TOT_NOT_DUE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEnd>()
                .Property(e => e.TOT_CSO_LENDER_INTEREST_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEndRefund>()
                .Property(e => e.PAST_DUE_TRANS_FEE_REFUNDED)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEndRefund>()
                .Property(e => e.PAST_DUE_LIEN_FEE_REFUNDED)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEndRefund>()
                .Property(e => e.PAST_DUE_ACTIVITY_FEE_REFUNDED)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEndRefund>()
                .Property(e => e.PAST_DUE_COLL_FEE_REFUNDED)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEndRefund>()
                .Property(e => e.PAST_DUE_INTEREST_REFUNDED)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEndRefund>()
                .Property(e => e.PAST_DUE_PRINC_REFUNDED)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEndRefund>()
                .Property(e => e.PAST_DUE_CSO_LENDER_COLL_FEE_REFUNDED)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEndRefund>()
                .Property(e => e.PAST_DUE_CSO_LENDER_INTEREST_REFUNDED)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEndRefund>()
                .Property(e => e.CURR_DUE_TRANS_FEE_REFUNDED)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEndRefund>()
                .Property(e => e.CURR_DUE_LIEN_FEE_REFUNDED)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEndRefund>()
                .Property(e => e.CURR_DUE_ACTIVITY_FEE_REFUNDED)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEndRefund>()
                .Property(e => e.CURR_DUE_INTEREST_REFUNDED)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEndRefund>()
                .Property(e => e.CURR_DUE_PRINC_REFUNDED)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEndRefund>()
                .Property(e => e.CURR_DUE_CSO_LENDER_INTEREST_REFUNDED)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEndRefund>()
                .Property(e => e.NEXT_DUE_TRANS_FEE_REFUNDED)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEndRefund>()
                .Property(e => e.NEXT_DUE_LIEN_FEE_REFUNDED)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEndRefund>()
                .Property(e => e.NEXT_DUE_ACTIVITY_FEE_REFUNDED)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEndRefund>()
                .Property(e => e.NEXT_DUE_INTEREST_REFUNDED)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEndRefund>()
                .Property(e => e.NEXT_DUE_PRINC_REFUNDED)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEndRefund>()
                .Property(e => e.NEXT_DUE_CSO_LENDER_INTEREST_REFUNDED)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEndRefund>()
                .Property(e => e.NOT_DUE_TRANS_FEE_REFUNDED)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEndRefund>()
                .Property(e => e.NOT_DUE_LIEN_FEE_REFUNDED)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEndRefund>()
                .Property(e => e.NOT_DUE_ACTIVITY_FEE_REFUNDED)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEndRefund>()
                .Property(e => e.NOT_DUE_INTEREST_REFUNDED)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEndRefund>()
                .Property(e => e.NOT_DUE_PRINC_REFUNDED)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentOpenEndRefund>()
                .Property(e => e.NOT_DUE_CSO_LENDER_INTEREST_REFUNDED)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentRefund>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanPaymentRefund>()
                .Property(e => e.AMOUNT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentRefundXRef>()
                .Property(e => e.REFUND_AMOUNT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentRescind>()
                .Property(e => e.RESCIND_AMOUNT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentRescind>()
                .Property(e => e.INTEREST_REBATE)
                .HasPrecision(14, 10);

            modelBuilder.Entity<LoanPaymentRescind>()
                .Property(e => e.CAB_LENDER_INTEREST_REBATE)
                .HasPrecision(14, 10);

            modelBuilder.Entity<LoanPaymentSPay>()
                .Property(e => e.COLL_FEE_DUE_PAID_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentSPay>()
                .Property(e => e.LEGAL_FEE_DUE_PAID_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentSPay>()
                .Property(e => e.LOAN_FEE_DUE_PAID_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentSPay>()
                .Property(e => e.INTEREST_DUE_PAID_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentSPay>()
                .Property(e => e.CAB_INTEREST_DUE_PAID_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentSPay>()
                .Property(e => e.PRINC_DUE_PAID_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentSPay>()
                .Property(e => e.CAB_LENDER_COLL_FEE_PAST_DUE_PAID_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentSPay>()
                .Property(e => e.NSF_FEE_DUE_PAID_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentSPay>()
                .Property(e => e.TRANS_FEE_DUE_PAID_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentSPay>()
                .Property(e => e.PENDING_SCHED_ACH_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentSPayRefund>()
                .Property(e => e.COLL_FEE_DUE_REFUNDED)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentSPayRefund>()
                .Property(e => e.LEGAL_FEE_DUE_REFUNDED)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentSPayRefund>()
                .Property(e => e.LOAN_FEE_DUE_REFUNDED)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentSPayRefund>()
                .Property(e => e.INTEREST_DUE_REFUNDED)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentSPayRefund>()
                .Property(e => e.CAB_INTEREST_DUE_REFUNDED)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentSPayRefund>()
                .Property(e => e.PRINC_DUE_REFUNDED)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentSPayRefund>()
                .Property(e => e.CAB_LENDER_COLL_FEE_DUE_REFUNDED)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentSPayRefund>()
                .Property(e => e.NSF_FEE_DUE_REFUNDED)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanPaymentSuspendInterest>()
                .Property(e => e.STATUS)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanPaymentWaiveRIFee>()
                .Property(e => e.WAIVE_RI_FEE_REASON_CODE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanProduct>()
                .Property(e => e.PRODUCT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LoanProduct>()
                .Property(e => e.PRODUCT_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanProduct>()
                .Property(e => e.LOAN_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanProduct>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanProduct>()
                .Property(e => e.BUSINESS_STATE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanProduct>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<LoanProduct>()
                .Property(e => e.UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanProduct>()
                .HasMany(e => e.DiscountMasterLoanProducts)
                .WithRequired(e => e.LoanProduct)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<LoanProduct>()
                .HasMany(e => e.LoanProductConfigs)
                .WithRequired(e => e.LoanProduct)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<LoanProduct>()
                .HasMany(e => e.LoanProductConfigOpenEnds)
                .WithRequired(e => e.LoanProduct)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<LoanProduct>()
                .HasMany(e => e.LoanProductConfigTitles)
                .WithRequired(e => e.LoanProduct)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<LoanProduct>()
                .HasMany(e => e.LoanProductFeatures)
                .WithRequired(e => e.LoanProduct)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<LoanProduct>()
                .HasMany(e => e.LoanProductRollovers)
                .WithRequired(e => e.LoanProduct)
                .HasForeignKey(e => e.LOAN_PRODUCT_KEY_NEW_LOAN)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<LoanProduct>()
                .HasMany(e => e.ProductOpenLoanMatrices)
                .WithRequired(e => e.LoanProduct)
                .HasForeignKey(e => e.LOAN_PRODUCT_KEY_ALLOWED)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<LoanProduct>()
                .HasMany(e => e.ProductOpenLoanMatrices1)
                .WithRequired(e => e.LoanProduct1)
                .HasForeignKey(e => e.LOAN_PRODUCT_KEY_OPEN)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<LoanProduct>()
                .HasMany(e => e.SpecialMessageLoanProducts)
                .WithRequired(e => e.LoanProduct)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<LoanProduct>()
                .HasMany(e => e.TempLoanProductSplits)
                .WithOptional(e => e.LoanProduct)
                .HasForeignKey(e => e.NEW_LOAN_PRODUCT_KEY);

            modelBuilder.Entity<LoanProduct>()
                .HasMany(e => e.TempLoanProductSplits1)
                .WithRequired(e => e.LoanProduct1)
                .HasForeignKey(e => e.ORIG_LOAN_PRODUCT_KEY)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<LoanProduct>()
                .HasMany(e => e.WebCallLoanProductConfigs)
                .WithRequired(e => e.LoanProduct)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<LoanProductBlocked>()
                .Property(e => e.BLOCKED_UNTIL_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductBlocked>()
                .Property(e => e.BLOCKED_AFTER_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductBlocked>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.BUYDOWN_MAX_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.BUYUP_MAX_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.CAB_LENDER_ANNUAL_INTEREST_PCT)
                .HasPrecision(9, 5);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.CAB_LENDER_RI_FEE_PER_DEFAULT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.CAB_LENDER_RI_FEE_MIN)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.DEPOSIT_METHOD_AUTO_PAYOFF_THRESHOLD_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.FASTER_PAYMENTS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.INTEREST_ANNUAL_RATE_PCT)
                .HasPrecision(6, 3);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.INTEREST_ANNUAL_RATE_DEBIT_RATE_PCT)
                .HasPrecision(9, 6);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.INTEREST_DECLINED_AUTO_PAY_PCT)
                .HasPrecision(9, 5);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.INTEREST_MIN_ANNUAL_RATE_OVERRIDE_PCT)
                .HasPrecision(9, 5);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.LOAN_AMT_DEFAULT_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.LOAN_AMT_MAX_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.LOAN_AMT_MAX_MULTI_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.LOAN_AMT_MIN_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.LOAN_AMT_MGR_OVERRIDE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.LOAN_FEE_PCT)
                .HasPrecision(9, 5);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.LOAN_FEE_MAX_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.LOAN_FEE_MIN_TO_OVERRIDE_PCT)
                .HasPrecision(9, 5);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.LOAN_LENGTH_MAX_ROLL_DAYS_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.LOAN_QUAL_INCREASE_FOR_DIRECT_DEPOSIT_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.LOAN_QUAL_INCREASE_FOR_SUCCESSFUL_LOANS_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.LOAN_QUAL_INCREASE_FOR_VALID_DEBIT_CARD_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.MAX_PAYMENT_GROSS_OR_NET)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.MAX_PAYMENT_GROSS_OR_NET_ALL_OPEN_LOANS)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.MAX_PAYMENT_PCT_OF_INCOME)
                .HasPrecision(5, 2);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.MAX_PAYMENT_PCT_OF_INCOME_ALL_OPEN_LOANS)
                .HasPrecision(5, 2);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.OVERRIDE_PCT_AMT_OF_INCOME)
                .HasPrecision(5, 2);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.OVERRIDE_PCT_INCOME_GROSS_OR_NET)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.REDUCE_APPROVAL_GROSS_OR_NET_INCOME)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.RI_FEE_PER_DEFAULT_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.RI_FEE_MIN_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.RI_FEE_MAX_PER_LOAN_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.RI_FEE_CHARGE_FOR_DEBIT_CARD_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.RI_INTEREST_ANNUAL_RATE_PCT)
                .HasPrecision(9, 5);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.RI_INTEREST_MAX_LIMIT_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.RI_INTEREST_MIN_LIMIT_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.SCORING_APPROVAL_POINTS)
                .HasPrecision(6, 2);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.SCORING_INCREASE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.SCORING_BUMP_UPS_BASED_ON_INCOME_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.SCORING_OVERRIDE_AMT)
                .HasPrecision(8, 2);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.SPLIT_FEE_AT_AMOUNT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.SPLIT_FEE_ABOVE_PCT)
                .HasPrecision(8, 6);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.WITHDRAW_DATE_METHOD)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.LOAN_FEE_MIN_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.LOAN_FEE_AMT_1)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.LOAN_FEE_AMT_2)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.LOAN_FEE_METHOD)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.LOAN_FEE_FOR_ROLLOVER_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.LOAN_FEE_INCL_DOC_PREP_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.MAX_APPROVAL_PCT_OF_INCOME_GROSS_OR_NET)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.MAX_APPROVAL_PCT_OF_INCOME)
                .HasPrecision(5, 2);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.MAX_OPEN_LOANS_PCT_OF_INCOME)
                .HasPrecision(5, 2);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.MAX_OPEN_LOANS_PCT_OF_INCOME_GROSS_OR_NET)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.LOAN_AMT_MGR_OVERRIDE_MIN_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.INCOME_NET_AMT_MIN)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.SCORING_BUMP_UPS_LIMITED_TIER_BASED_ON_INCOME_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.INSURANCE_COGS_PCT)
                .HasPrecision(5, 2);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.APR_OVERRIDE_PCT)
                .HasPrecision(7, 3);

            modelBuilder.Entity<LoanProductConfig>()
                .Property(e => e.INSURANCE_TAX_PCT)
                .HasPrecision(5, 2);

            modelBuilder.Entity<LoanProductConfig>()
                .HasMany(e => e.LoanProductBlockeds)
                .WithRequired(e => e.LoanProductConfig)
                .HasForeignKey(e => e.LOAN_PRODUCT_KEY)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<LoanProductConfig>()
                .HasMany(e => e.LoanProductConfigEdits)
                .WithRequired(e => e.LoanProductConfig)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<LoanProductConfig>()
                .HasMany(e => e.LoanProductEnableNewLoans)
                .WithRequired(e => e.LoanProductConfig)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<LoanProductConfig>()
                .HasMany(e => e.LoanProductRollovers)
                .WithRequired(e => e.LoanProductConfig)
                .HasForeignKey(e => e.LOAN_PRODUCT_KEY_PAID_LOAN);

            modelBuilder.Entity<LoanProductConfig>()
                .HasMany(e => e.TempLoanProductSplits)
                .WithOptional(e => e.LoanProductConfig)
                .HasForeignKey(e => e.NEW_LOAN_PRODUCT_CONFIG_KEY);

            modelBuilder.Entity<LoanProductConfig>()
                .HasMany(e => e.TempLoanProductSplits1)
                .WithRequired(e => e.LoanProductConfig1)
                .HasForeignKey(e => e.ORIG_LOAN_PRODUCT_CONFIG_KEY)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<LoanProductConfigApprovalRate>()
                .Property(e => e.INCOME_TO_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanProductConfigApprovalRate>()
                .Property(e => e.APPROVAL_VAL)
                .HasPrecision(7, 2);

            modelBuilder.Entity<LoanProductConfigApprovalRate>()
                .Property(e => e.APPROVAL_PCT_OR_AMT)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductConfigApprovalRate>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductConfigApprovalRate>()
                .Property(e => e.UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductConfigEdit>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductConfigEdit>()
                .Property(e => e.TABLE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductConfigEdit>()
                .Property(e => e.FIELD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductConfigEdit>()
                .Property(e => e.OLD_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductConfigEdit>()
                .Property(e => e.NEW_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductConfigInsuranceRate>()
                .Property(e => e.FEE_PER_PAYMENT_PCT)
                .HasPrecision(7, 4);

            modelBuilder.Entity<LoanProductConfigInsuranceRate>()
                .Property(e => e.LOAN_UP_TO_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanProductConfigInsuranceRate>()
                .Property(e => e.PAYMENT_CYCLE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductConfigInsuranceRate>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductConfigInsuranceRate>()
                .Property(e => e.UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductConfigInterestRate>()
                .Property(e => e.LOAN_UP_TO_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanProductConfigInterestRate>()
                .Property(e => e.INTEREST_RATE_PCT)
                .HasPrecision(7, 2);

            modelBuilder.Entity<LoanProductConfigInterestRate>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductConfigInterestRate>()
                .Property(e => e.UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductConfigLoanFeeRate>()
                .Property(e => e.LOAN_UP_TO_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanProductConfigLoanFeeRate>()
                .Property(e => e.LOAN_FEE_PCT)
                .HasPrecision(7, 2);

            modelBuilder.Entity<LoanProductConfigLoanFeeRate>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductConfigLoanFeeRate>()
                .Property(e => e.UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductConfigLoanStat>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductConfigMaxLoanAmtRate>()
                .Property(e => e.INCOME_REQUIRED_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanProductConfigMaxLoanAmtRate>()
                .Property(e => e.LOAN_AMT_MAX_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanProductConfigMaxLoanAmtRate>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductConfigMaxLoanAmtRate>()
                .Property(e => e.UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductConfigOpenEnd>()
                .Property(e => e.ACTIVITY_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanProductConfigOpenEnd>()
                .Property(e => e.ACTIVITY_FEE_PCT)
                .HasPrecision(6, 3);

            modelBuilder.Entity<LoanProductConfigOpenEnd>()
                .Property(e => e.CASH_ADVANCE_LIMIT_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanProductConfigOpenEnd>()
                .Property(e => e.MIN_PRINC_DUE_FOUR_WEEKS_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanProductConfigOpenEnd>()
                .Property(e => e.MIN_PRINC_DUE_FOUR_WEEKS_PCT)
                .HasPrecision(5, 2);

            modelBuilder.Entity<LoanProductConfigOpenEnd>()
                .Property(e => e.MIN_PRINC_DUE_TWO_WEEKS_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanProductConfigOpenEnd>()
                .Property(e => e.MIN_PRINC_DUE_TWO_WEEKS_PCT)
                .HasPrecision(5, 2);

            modelBuilder.Entity<LoanProductConfigOpenEnd>()
                .Property(e => e.PRINC_AMT_INCREMENT_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanProductConfigRIRate>()
                .Property(e => e.RI_RATE_VAL)
                .HasPrecision(7, 2);

            modelBuilder.Entity<LoanProductConfigRIRate>()
                .Property(e => e.RI_RATE_PCT_OR_AMT)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductConfigRIRate>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductConfigRIRate>()
                .Property(e => e.UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductConfigTitle>()
                .Property(e => e.APPROVAL_PCT_EMPLOYED_24_PLUS_MONTHS)
                .HasPrecision(5, 2);

            modelBuilder.Entity<LoanProductConfigTitle>()
                .Property(e => e.APPROVAL_PCT_EMPLOYED_6_TO_23_MONTHS)
                .HasPrecision(5, 2);

            modelBuilder.Entity<LoanProductConfigTitle>()
                .Property(e => e.APPROVAL_PCT_EMPLOYED_UP_TO_5_MONTHS)
                .HasPrecision(5, 2);

            modelBuilder.Entity<LoanProductConfigTitle>()
                .Property(e => e.APPROVAL_PCT_WHOLESALE_GREATER_THAN_1500_CHECKING_ACCT)
                .HasPrecision(5, 2);

            modelBuilder.Entity<LoanProductConfigTitle>()
                .Property(e => e.APPROVAL_PCT_WHOLESALE_GREATER_THAN_1500_CHECKING_ACCT_DIRECT_DEPOSIT)
                .HasPrecision(5, 2);

            modelBuilder.Entity<LoanProductConfigTitle>()
                .Property(e => e.APPROVAL_PCT_WHOLESALE_GREATER_THAN_1500_DEBIT_CARD)
                .HasPrecision(5, 2);

            modelBuilder.Entity<LoanProductConfigTitle>()
                .Property(e => e.APPROVAL_PCT_WHOLESALE_UP_TO_1500_CHECKING_ACCT)
                .HasPrecision(5, 2);

            modelBuilder.Entity<LoanProductConfigTitle>()
                .Property(e => e.APPROVAL_PCT_WHOLESALE_UP_TO_1500_CHECKING_ACCT_DIRECT_DEPOSIT)
                .HasPrecision(5, 2);

            modelBuilder.Entity<LoanProductConfigTitle>()
                .Property(e => e.APPROVAL_PCT_WHOLESALE_UP_TO_1500_DEBIT_CARD)
                .HasPrecision(5, 2);

            modelBuilder.Entity<LoanProductConfigTitle>()
                .Property(e => e.LEGAL_MAX_LOAN_VEHICLE_VALUE_WHOLESALE_OR_RETAIL)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductConfigTitle>()
                .Property(e => e.LIEN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanProductConfigTitle>()
                .Property(e => e.LOAN_AMT_MGR_OVERRIDE_VEHICLE_WHOLESALE_OR_RETAIL)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductConfigTitle>()
                .Property(e => e.LOAN_AMT_NO_INSURANCE_MAX_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanProductConfigTitle>()
                .Property(e => e.ORIG_FEE_PCT_2ND_LIEN)
                .HasPrecision(9, 5);

            modelBuilder.Entity<LoanProductConfigTitle>()
                .Property(e => e.REPO_ASSIGNMENT_MIN_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanProductConfigTitle>()
                .Property(e => e.VEH_VALUE_MIN_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanProductConfigTitle>()
                .Property(e => e.MAX_LOAN_VEHICLE_VALUE_PCT_WHOLESALE_OR_RETAIL)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductEnableNewLoan>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductEnableNewLoan>()
                .Property(e => e.UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductFeature>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductFeature>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductFeature>()
                .Property(e => e.LAST_UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductFeatureType>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductFeatureType>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductFeatureType>()
                .Property(e => e.LAST_UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductFeatureType>()
                .HasMany(e => e.LoanProductFeatures)
                .WithRequired(e => e.LoanProductFeatureType)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<LoanProductRollover>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductRollover>()
                .Property(e => e.UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductTila>()
                .Property(e => e.TILA_ADDR_STREET)
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductTila>()
                .Property(e => e.TILA_ADDRESS1)
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductTila>()
                .Property(e => e.TILA_BUILDING_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductTila>()
                .Property(e => e.TILA_BUILDING_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductTila>()
                .Property(e => e.TILA_CERT_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductTila>()
                .Property(e => e.TILA_CITY)
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductTila>()
                .Property(e => e.TILA_COUNTRY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductTila>()
                .Property(e => e.TILA_COUNTY)
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductTila>()
                .Property(e => e.TILA_FLAT_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductTila>()
                .Property(e => e.TILA_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductTila>()
                .Property(e => e.TILA_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductTila>()
                .Property(e => e.TILA_STATE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductTila>()
                .Property(e => e.TILA_ZIPCODE)
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductTila>()
                .Property(e => e.ADDRESS_FORMAT)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductTila>()
                .Property(e => e.TILA_ADDRESS_CSZ)
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductTila>()
                .Property(e => e.TILA_ADDRESS_LINE)
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductTila>()
                .Property(e => e.TILA_ADDRESS_LINE_1)
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductTila>()
                .Property(e => e.TILA_ADDRESS_LINE_2)
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductTila>()
                .Property(e => e.TILA_ADDRESS_LINE_3)
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductTila>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductTila>()
                .Property(e => e.UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductTila>()
                .HasMany(e => e.LoanProductEnableNewLoans)
                .WithRequired(e => e.LoanProductTila)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<LoanService>()
                .Property(e => e.SERVICE_COST)
                .HasPrecision(7, 2);

            modelBuilder.Entity<LoanService>()
                .Property(e => e.PRICE)
                .HasPrecision(7, 2);

            modelBuilder.Entity<LoanService>()
                .Property(e => e.MARK_DOWN)
                .HasPrecision(7, 2);

            modelBuilder.Entity<LoanService>()
                .Property(e => e.SALES_TAX)
                .HasPrecision(7, 2);

            modelBuilder.Entity<LoanService>()
                .Property(e => e.DOWN_PAYMENT)
                .HasPrecision(7, 2);

            modelBuilder.Entity<LoanStatusChange>()
                .Property(e => e.OLD_LOAN_STATUS)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanStatusChange>()
                .Property(e => e.NEW_LOAN_STATUS)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanStatusChange>()
                .Property(e => e.REASON_DEFAULTED)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LocaleSetting>()
                .Property(e => e.CURRENCY_SYMBOL)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LocaleSetting>()
                .Property(e => e.PHONE_FORMAT)
                .IsUnicode(false);

            modelBuilder.Entity<LocaleSetting>()
                .Property(e => e.ZIP_FORMAT)
                .IsUnicode(false);

            modelBuilder.Entity<LocaleSetting>()
                .Property(e => e.ADDRESS_FORMAT)
                .IsUnicode(false);

            modelBuilder.Entity<LocaleSetting>()
                .Property(e => e.SSN_OR_NIN)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LocaleTranslator>()
                .Property(e => e.COUNTRY_CODE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LocaleTranslator>()
                .Property(e => e.ENGLISH_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<LocaleTranslator>()
                .Property(e => e.LOCALE_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<LocationUS_ZipcodesXRef>()
                .Property(e => e.ZIPCODE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LocationUS_ZipcodesXRef>()
                .Property(e => e.ENTERED_BY)
                .IsUnicode(false);

            modelBuilder.Entity<LocationUS_ZipcodesXRef>()
                .Property(e => e.UPDATED_BY)
                .IsUnicode(false);

            modelBuilder.Entity<MarketingInvitation>()
                .Property(e => e.FULL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<MarketingInvitation>()
                .Property(e => e.NAME_PREFIX)
                .IsUnicode(false);

            modelBuilder.Entity<MarketingInvitation>()
                .Property(e => e.FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<MarketingInvitation>()
                .Property(e => e.MIDDLE_INITIAL)
                .IsUnicode(false);

            modelBuilder.Entity<MarketingInvitation>()
                .Property(e => e.LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<MarketingInvitation>()
                .Property(e => e.NAME_SUFFIX)
                .IsUnicode(false);

            modelBuilder.Entity<MarketingInvitation>()
                .Property(e => e.SECONDARY_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<MarketingInvitation>()
                .Property(e => e.PRIMARY_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<MarketingInvitation>()
                .Property(e => e.STREET_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<MarketingInvitation>()
                .Property(e => e.STREET_PRE_DIRECTIONAL)
                .IsUnicode(false);

            modelBuilder.Entity<MarketingInvitation>()
                .Property(e => e.STREET_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<MarketingInvitation>()
                .Property(e => e.STREET_SUFFIX)
                .IsUnicode(false);

            modelBuilder.Entity<MarketingInvitation>()
                .Property(e => e.STREET_POST_DIRECTIONAL)
                .IsUnicode(false);

            modelBuilder.Entity<MarketingInvitation>()
                .Property(e => e.UNIT_DESIGNATOR)
                .IsUnicode(false);

            modelBuilder.Entity<MarketingInvitation>()
                .Property(e => e.UNIT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<MarketingInvitation>()
                .Property(e => e.CITY_STATE_ZIP_ZIP_4)
                .IsUnicode(false);

            modelBuilder.Entity<MarketingInvitation>()
                .Property(e => e.CITY)
                .IsUnicode(false);

            modelBuilder.Entity<MarketingInvitation>()
                .Property(e => e.STATE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<MarketingInvitation>()
                .Property(e => e.ZIP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<MarketingInvitation>()
                .Property(e => e.ZIP_4)
                .IsUnicode(false);

            modelBuilder.Entity<MarketingInvitation>()
                .Property(e => e.CARRIER_ROUTE_TYPE_WITH_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<MarketingInvitation>()
                .Property(e => e.LINE_OF_TRAVEL)
                .IsUnicode(false);

            modelBuilder.Entity<MarketingInvitation>()
                .Property(e => e.COUNTY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<MarketingInvitation>()
                .Property(e => e.KEY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<MarketingInvitation>()
                .Property(e => e.MAIL_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<MarketingInvitation>()
                .Property(e => e.APPROVED_AMOUNT)
                .HasPrecision(18, 0);

            modelBuilder.Entity<MarketingInvitation>()
                .Property(e => e.IDENTIFICATION_INFO)
                .IsUnicode(false);

            modelBuilder.Entity<MarketingInvitation>()
                .Property(e => e.LOAN_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<MarketingInvitation>()
                .Property(e => e.PRODUCT_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<MarketingInvitation>()
                .Property(e => e.MINIMUM_INCOME)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Market>()
                .Property(e => e.MARKET_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<Market>()
                .HasMany(e => e.Companies)
                .WithRequired(e => e.Market)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Message>()
                .Property(e => e.MESSAGE_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<Message>()
                .Property(e => e.MESSAGE_DIRECTIVE)
                .IsUnicode(false);

            modelBuilder.Entity<MessageClass>()
                .Property(e => e.MESSAGE_CLASS_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<MessageClass>()
                .Property(e => e.MESSAGE_CLASS_DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<MessageClass>()
                .HasMany(e => e.Messages)
                .WithRequired(e => e.MessageClass)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<MessageClient>()
                .Property(e => e.MESSAGE_CLIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<MessageClient>()
                .Property(e => e.MESSAGE_CLIENT_DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<MessageClient>()
                .HasMany(e => e.Messages)
                .WithRequired(e => e.MessageClient)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<MessageScenario>()
                .Property(e => e.MESSAGE_SCENARIO_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<MessageScenario>()
                .Property(e => e.MESSAGE_SCENARIO_DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<MessageScenario>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<MessageScenario>()
                .HasMany(e => e.Messages)
                .WithRequired(e => e.MessageScenario)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<MetroIIBaseSegment>()
                .Property(e => e.CORRECTION_INDICATOR)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<MetroIIBaseSegment>()
                .Property(e => e.IDENTIFICATION_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<MetroIIBaseSegment>()
                .Property(e => e.CYCLE_IDENTIFIER)
                .IsUnicode(false);

            modelBuilder.Entity<MetroIIBaseSegment>()
                .Property(e => e.PORTFOLIO_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<MetroIIBaseSegment>()
                .Property(e => e.ACCOUNT_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<MetroIIBaseSegment>()
                .Property(e => e.TERMS_FREQUENCY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<MetroIIBaseSegment>()
                .Property(e => e.ACCOUNT_STATUS)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<MetroIIBaseSegment>()
                .Property(e => e.PAYMENT_RATING)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<MetroIIBaseSegment>()
                .Property(e => e.PAYMENT_HISTORY_PROFILE)
                .IsUnicode(false);

            modelBuilder.Entity<MetroIIBaseSegment>()
                .Property(e => e.SPECIAL_COMMENT)
                .IsUnicode(false);

            modelBuilder.Entity<MetroIIBaseSegment>()
                .Property(e => e.COMPLIANCE_CONDITION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<MetroIIBaseSegment>()
                .Property(e => e.CONSUMER_TRANSACTION_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<MetroIIBaseSegment>()
                .Property(e => e.SURNAME)
                .IsUnicode(false);

            modelBuilder.Entity<MetroIIBaseSegment>()
                .Property(e => e.FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<MetroIIBaseSegment>()
                .Property(e => e.MIDDLE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<MetroIIBaseSegment>()
                .Property(e => e.GENERATION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<MetroIIBaseSegment>()
                .Property(e => e.SOCIAL_INSURANCE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<MetroIIBaseSegment>()
                .Property(e => e.TELEPHONE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<MetroIIBaseSegment>()
                .Property(e => e.ASSOCIATION_CODE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<MetroIIBaseSegment>()
                .Property(e => e.CONSUMER_INFORMATION_INDICATOR)
                .IsUnicode(false);

            modelBuilder.Entity<MetroIIBaseSegment>()
                .Property(e => e.COUNTRY_CODE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<MetroIIBaseSegment>()
                .Property(e => e.ADDRESS_LINE_1)
                .IsUnicode(false);

            modelBuilder.Entity<MetroIIBaseSegment>()
                .Property(e => e.ADDRESS_LINE_2)
                .IsUnicode(false);

            modelBuilder.Entity<MetroIIBaseSegment>()
                .Property(e => e.CITY)
                .IsUnicode(false);

            modelBuilder.Entity<MetroIIBaseSegment>()
                .Property(e => e.PROVINCE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<MetroIIBaseSegment>()
                .Property(e => e.POSTAL_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<MetroIIBaseSegment>()
                .Property(e => e.ADDRESS_INDICATOR)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<MetroIIBaseSegment>()
                .Property(e => e.RESIDENCE_CODE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<MimeType>()
                .Property(e => e.MIME_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<MimeType>()
                .Property(e => e.FILE_EXTENSION)
                .IsUnicode(false);

            modelBuilder.Entity<MimeType>()
                .HasMany(e => e.DocumentResources)
                .WithRequired(e => e.MimeType)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<MOStatu>()
                .Property(e => e.Error)
                .IsUnicode(false);

            modelBuilder.Entity<MOStatu>()
                .Property(e => e.MONumber)
                .IsUnicode(false);

            modelBuilder.Entity<MOStatu>()
                .Property(e => e.Teller)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<MOStatu>()
                .Property(e => e.Amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<MOStatu>()
                .Property(e => e.TELLER_FIRSTNAME)
                .IsUnicode(false);

            modelBuilder.Entity<MOStatu>()
                .Property(e => e.TELLER_LASTNAME)
                .IsUnicode(false);

            modelBuilder.Entity<MOStatusHistory>()
                .Property(e => e.Error)
                .IsUnicode(false);

            modelBuilder.Entity<MOStatusHistory>()
                .Property(e => e.MONumber)
                .IsUnicode(false);

            modelBuilder.Entity<MOStatusHistory>()
                .Property(e => e.Teller)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<MOStatusHistory>()
                .Property(e => e.Amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<MOStatusHistory>()
                .Property(e => e.TELLER_FIRSTNAME)
                .IsUnicode(false);

            modelBuilder.Entity<MOStatusHistory>()
                .Property(e => e.TELLER_LASTNAME)
                .IsUnicode(false);

            modelBuilder.Entity<MPayAmort>()
                .Property(e => e.PAYMENT_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayAmort>()
                .Property(e => e.PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayAmort>()
                .Property(e => e.INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayAmort>()
                .Property(e => e.BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayAmort>()
                .Property(e => e.TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayAmort>()
                .Property(e => e.LOAN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayAmort>()
                .Property(e => e.CAB_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayAmort>()
                .Property(e => e.DISCOUNT_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayAmort>()
                .Property(e => e.INSURANCE_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayAmort>()
                .HasMany(e => e.MPayAmortDueDateChanges)
                .WithRequired(e => e.MPayAmort)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<MPayAmortDueDateChange>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<MPayAmortDueDateChange>()
                .Property(e => e.DELETED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<MPayInterest>()
                .Property(e => e.PRINC_DUE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayInterest>()
                .Property(e => e.INTEREST_ADDED)
                .HasPrecision(14, 10);

            modelBuilder.Entity<MPayInterest>()
                .Property(e => e.LOAN_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayInterest>()
                .Property(e => e.TRANS_FEE_ADDED)
                .HasPrecision(14, 10);

            modelBuilder.Entity<MPayInterest>()
                .Property(e => e.CAB_INTEREST_ADDED)
                .HasPrecision(14, 10);

            modelBuilder.Entity<MPayInterest>()
                .Property(e => e.COLLECTIONS_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoan>()
                .Property(e => e.ANNUAL_RATE_PCT)
                .HasPrecision(6, 3);

            modelBuilder.Entity<MPayLoan>()
                .Property(e => e.MONTHLY_RATE_PCT)
                .HasPrecision(6, 3);

            modelBuilder.Entity<MPayLoan>()
                .Property(e => e.DAILY_RATE_PCT)
                .HasPrecision(12, 10);

            modelBuilder.Entity<MPayLoan>()
                .Property(e => e.ACTUARIAL_APR)
                .HasPrecision(18, 7);

            modelBuilder.Entity<MPayLoan>()
                .Property(e => e.ODD_DAYS_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoan>()
                .Property(e => e.SCHED_LAST_PAYMENT_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoan>()
                .Property(e => e.LAST_PAYMENT_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoan>()
                .Property(e => e.NEXT_DUE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoan>()
                .Property(e => e.EST_FINANCE_CHARGE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoan>()
                .Property(e => e.CREDIT_LIMIT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoan>()
                .Property(e => e.PENDING_SCHED_ACH_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoan>()
                .Property(e => e.TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoan>()
                .Property(e => e.PAYMENT_PLAN_FEE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoan>()
                .Property(e => e.TRANS_FEE_METHOD)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<MPayLoan>()
                .Property(e => e.TRANS_FEE_COLORADO_POSTPONE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoan>()
                .Property(e => e.COLL_FEE_PAST_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoan>()
                .Property(e => e.LEGAL_FEE_PAST_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoan>()
                .Property(e => e.LOAN_FEE_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoan>()
                .Property(e => e.TRANS_FEE_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoan>()
                .Property(e => e.INTEREST_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoan>()
                .Property(e => e.PRINC_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoan>()
                .Property(e => e.PAYMENT_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoan>()
                .Property(e => e.PAYMENT_PAST_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoan>()
                .Property(e => e.COLLECTIONS_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoan>()
                .Property(e => e.CAB_ANNUAL_RATE_PCT)
                .HasPrecision(6, 3);

            modelBuilder.Entity<MPayLoan>()
                .Property(e => e.CAB_MONTHLY_RATE_PCT)
                .HasPrecision(6, 3);

            modelBuilder.Entity<MPayLoan>()
                .Property(e => e.CAB_DAILY_RATE_PCT)
                .HasPrecision(12, 10);

            modelBuilder.Entity<MPayLoan>()
                .Property(e => e.CAB_COLL_FEE_PAST_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoan>()
                .Property(e => e.CAB_INTEREST_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoan>()
                .Property(e => e.APPLY_DISCOUNT_TO)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<MPayLoan>()
                .Property(e => e.RI_FEE_PER_DEFAULT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoan>()
                .Property(e => e.NSF_FEE_PAST_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoan>()
                .Property(e => e.DAILY_INTEREST_AMT)
                .HasPrecision(27, 18);

            modelBuilder.Entity<MPayLoan>()
                .Property(e => e.INSURANCE_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoan>()
                .Property(e => e.RO_CANCEL_INSURANCE_REQUEST_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<MPayLoan>()
                .Property(e => e.DUE_DATE_PAYMENT_QUEUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoan>()
                .Property(e => e.INVENTORY_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.LOAN_STATUS)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.LOAN_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.RI_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.CASH_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.LIEN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.LAST_PAYMENT_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.NEXT_DUE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.PENDING_SCHED_ACH_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.C_LOAN_STATUS)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.C_LOAN_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.C_RI_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.C_PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.C_CASH_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.C_TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.C_LIEN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.C_LAST_PAYMENT_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.C_NEXT_DUE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.C_PENDING_SCHED_ACH_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.TRANS_FEE_COLORADO_POSTPONE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.C_TRANS_FEE_COLORADO_POSTPONE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.COLL_FEE_PAST_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.LEGAL_FEE_PAST_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.LOAN_FEE_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.TRANS_FEE_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.INTEREST_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.PRINC_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.C_COLL_FEE_PAST_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.C_LEGAL_FEE_PAST_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.C_LOAN_FEE_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.C_TRANS_FEE_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.C_INTEREST_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.C_PRINC_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.PAYMENT_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.PAYMENT_PAST_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.C_PAYMENT_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.C_PAYMENT_PAST_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.INVENTORY_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.C_INVENTORY_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.CAB_INTEREST_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.CAB_COLL_FEE_PAST_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.C_CAB_INTEREST_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.C_CAB_COLL_FEE_PAST_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.LOAN_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.C_LOAN_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.NSF_FEE_PAST_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.C_NSF_FEE_PAST_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.REBATE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.C_REBATE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.DISC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.C_DISC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.PENDING_PMT_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.C_PENDING_PMT_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.PENDING_PMT_PRINC)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.C_PENDING_PMT_PRINC)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.PENDING_PMT_INTEREST_CAP)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.C_PENDING_PMT_INTEREST_CAP)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.PENDING_PMT_CAB_INTEREST_CAP)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.C_PENDING_PMT_CAB_INTEREST_CAP)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.INSURANCE_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.C_INSURANCE_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.DUE_DATE_PAYMENT_QUEUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.C_DUE_DATE_PAYMENT_QUEUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.INVENTORY_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj>()
                .Property(e => e.C_INVENTORY_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayLoanInSyncAdj_Rows>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<MPayLoanInSyncAdj_Rows>()
                .Property(e => e.FIELD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<MPayLoanInSyncAdj_Rows>()
                .Property(e => e.PRV_VAL)
                .IsUnicode(false);

            modelBuilder.Entity<MPayLoanInSyncAdj_Rows>()
                .Property(e => e.CHG_TO_VAL)
                .IsUnicode(false);

            modelBuilder.Entity<MPayPayInFull>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<MPayPayInFull>()
                .Property(e => e.PIF_STATUS)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<MPayPayInFull>()
                .Property(e => e.DISABLED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<MPayRecalcInterestAdj>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<MPayRecalcInterestAdj>()
                .Property(e => e.INTEREST_ADDED)
                .HasPrecision(14, 10);

            modelBuilder.Entity<MPayRecalcInterestAdj>()
                .Property(e => e.C_INTEREST_ADDED)
                .HasPrecision(14, 10);

            modelBuilder.Entity<MPayRecalcInterestAdj>()
                .Property(e => e.CAB_INTEREST_ADDED)
                .HasPrecision(14, 10);

            modelBuilder.Entity<MPayRecalcInterestAdj>()
                .Property(e => e.C_CAB_INTEREST_ADDED)
                .HasPrecision(14, 10);

            modelBuilder.Entity<MPayRecalcInterestAdj>()
                .Property(e => e.TRANS_FEE_ADDED)
                .HasPrecision(14, 10);

            modelBuilder.Entity<MPayRecalcInterestAdj>()
                .Property(e => e.C_TRANS_FEE_ADDED)
                .HasPrecision(14, 10);

            modelBuilder.Entity<MPayRecalcInterestAdj>()
                .Property(e => e.PRINC_DUE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayRecalcInterestAdj>()
                .Property(e => e.C_PRINC_DUE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayRecalcInterestAdj>()
                .Property(e => e.LOAN_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayRecalcInterestAdj>()
                .Property(e => e.C_LOAN_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayRecalcInterestAdj>()
                .Property(e => e.COLLECTIONS_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayRecalcInterestAdj>()
                .Property(e => e.C_COLLECTIONS_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayRecalcLoanPaymentAdj>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<MPayRecalcLoanPaymentAdj>()
                .Property(e => e.PENDING_SCHED_ACH_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayRecalcLoanPaymentAdj>()
                .Property(e => e.C_PENDING_SCHED_ACH_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayRecalcLoanPaymentAdj>()
                .Property(e => e.COLL_FEE_PAST_DUE_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayRecalcLoanPaymentAdj>()
                .Property(e => e.C_COLL_FEE_PAST_DUE_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayRecalcLoanPaymentAdj>()
                .Property(e => e.LEGAL_FEE_PAST_DUE_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayRecalcLoanPaymentAdj>()
                .Property(e => e.C_LEGAL_FEE_PAST_DUE_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayRecalcLoanPaymentAdj>()
                .Property(e => e.LOAN_FEE_DUE_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayRecalcLoanPaymentAdj>()
                .Property(e => e.C_LOAN_FEE_DUE_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayRecalcLoanPaymentAdj>()
                .Property(e => e.TRANS_FEE_DUE_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayRecalcLoanPaymentAdj>()
                .Property(e => e.C_TRANS_FEE_DUE_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayRecalcLoanPaymentAdj>()
                .Property(e => e.INTEREST_DUE_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayRecalcLoanPaymentAdj>()
                .Property(e => e.C_INTEREST_DUE_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayRecalcLoanPaymentAdj>()
                .Property(e => e.PRINC_DUE_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayRecalcLoanPaymentAdj>()
                .Property(e => e.C_PRINC_DUE_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayRecalcLoanPaymentAdj>()
                .Property(e => e.PAYMENT_DUE_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayRecalcLoanPaymentAdj>()
                .Property(e => e.C_PAYMENT_DUE_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayRecalcLoanPaymentAdj>()
                .Property(e => e.PAYMENT_PAST_DUE_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayRecalcLoanPaymentAdj>()
                .Property(e => e.C_PAYMENT_PAST_DUE_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayRecalcLoanPaymentAdj>()
                .Property(e => e.CAB_COLL_FEE_PAST_DUE_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayRecalcLoanPaymentAdj>()
                .Property(e => e.C_CAB_COLL_FEE_PAST_DUE_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayRecalcLoanPaymentAdj>()
                .Property(e => e.CAB_INTEREST_DUE_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayRecalcLoanPaymentAdj>()
                .Property(e => e.C_CAB_INTEREST_DUE_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayRecalcLoanPaymentAdj>()
                .Property(e => e.NSF_FEE_PAST_DUE_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayRecalcLoanPaymentAdj>()
                .Property(e => e.C_NSF_FEE_PAST_DUE_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayRecalcLoanPaymentAdj>()
                .Property(e => e.LPDD_PAST_DUE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayRecalcLoanPaymentAdj>()
                .Property(e => e.C_LPDD_PAST_DUE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayRecalcLoanPaymentAdj>()
                .Property(e => e.LPDD_COLLECTIONS_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayRecalcLoanPaymentAdj>()
                .Property(e => e.C_LPDD_COLLECTIONS_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayRecalcLoanPaymentAdj>()
                .Property(e => e.LPDD_PENDING_ACH_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayRecalcLoanPaymentAdj>()
                .Property(e => e.C_LPDD_PENDING_ACH_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayRecalcLoanPaymentAdj>()
                .Property(e => e.INSURANCE_DUE_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MPayRecalcLoanPaymentAdj>()
                .Property(e => e.C_INSURANCE_DUE_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<MSA>()
                .Property(e => e.MSA_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<MSA>()
                .Property(e => e.TYP)
                .IsUnicode(false);

            modelBuilder.Entity<MSA>()
                .Property(e => e.NAME)
                .IsUnicode(false);

            modelBuilder.Entity<MSA>()
                .Property(e => e.CMSA)
                .IsUnicode(false);

            modelBuilder.Entity<NetSpendTran>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<NetSpendTran>()
                .Property(e => e.RESULT_STR)
                .IsUnicode(false);

            modelBuilder.Entity<NetSpendTran>()
                .Property(e => e.CCARD_NUM)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<NobleConfiguration>()
                .Property(e => e.COLLECTIONS_EXCLUSION_TABLE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<NobleConfiguration>()
                .Property(e => e.COLLECTIONS_TABLE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<NobleConfiguration>()
                .Property(e => e.COURTESY_TABLE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<NobleConfiguration>()
                .Property(e => e.INTERNET_LENDING_TABLE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<NobleConfiguration>()
                .Property(e => e.TABLE_NAME_PREFIX)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<NobleConfiguration>()
                .Property(e => e.TELLER_ID)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<NoteType>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<NoteType>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<OCRRegion>()
                .HasMany(e => e.BillerOCRRegions)
                .WithRequired(e => e.OCRRegion)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<OOWSession>()
                .Property(e => e.EXTERNAL_ID)
                .IsUnicode(false);

            modelBuilder.Entity<OOWSession>()
                .Property(e => e.TRANSUNION_DECISION)
                .IsUnicode(false);

            modelBuilder.Entity<OOWSessionAlert>()
                .Property(e => e.ALERT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<OOWSessionAlert>()
                .Property(e => e.ALERT_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<OOWSessionError>()
                .Property(e => e.ERROR_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<OOWSessionError>()
                .Property(e => e.ERROR_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<OpenEndInterest>()
                .Property(e => e.PRINC_DUE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndInterest>()
                .Property(e => e.INTEREST_ADDED)
                .HasPrecision(14, 10);

            modelBuilder.Entity<OpenEndInterest>()
                .Property(e => e.LOAN_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndInterest>()
                .Property(e => e.CSO_LENDER_INTEREST_ADDED)
                .HasPrecision(14, 10);

            modelBuilder.Entity<OpenEndInterest>()
                .Property(e => e.CAB_FEE_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndInterest>()
                .Property(e => e.COLLECTIONS_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndInterestRate>()
                .Property(e => e.ANNUAL_RATE_PCT)
                .HasPrecision(6, 3);

            modelBuilder.Entity<OpenEndInterestRate>()
                .Property(e => e.MONTHLY_RATE_PCT)
                .HasPrecision(6, 3);

            modelBuilder.Entity<OpenEndInterestRate>()
                .Property(e => e.DAILY_RATE_PCT)
                .HasPrecision(12, 10);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.LAST_PAYMENT_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.LAST_CASH_ADV_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.PAST_DUE_TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.PAST_DUE_LIEN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.PAST_DUE_ACTIVITY_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.PAST_DUE_COLL_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.PAST_DUE_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.PAST_DUE_PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.CURR_DUE_TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.CURR_DUE_LIEN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.CURR_DUE_ACTIVITY_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.CURR_DUE_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.CURR_DUE_PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.NEXT_DUE_TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.NEXT_DUE_LIEN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.NEXT_DUE_ACTIVITY_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.NEXT_DUE_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.NEXT_DUE_PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.NOT_DUE_TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.NOT_DUE_LIEN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.NOT_DUE_ACTIVITY_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.NOT_DUE_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.NOT_DUE_PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.CREDIT_LIMIT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.CREDIT_AVAIL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.LIEN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.ACTIVITY_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.INTEREST_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.PRINC_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.PENDING_SCHED_ACH_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.PAST_DUE_CSO_LENDER_COLL_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.PAST_DUE_CSO_LENDER_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.CURR_DUE_CSO_LENDER_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.NEXT_DUE_CSO_LENDER_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.NOT_DUE_CSO_LENDER_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.CSO_LENDER_ANNUAL_RATE_PCT)
                .HasPrecision(6, 3);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.CSO_LENDER_MONTHLY_RATE_PCT)
                .HasPrecision(6, 3);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.CSO_LENDER_DAILY_RATE_PCT)
                .HasPrecision(12, 10);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.CURR_DUE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.NEXT_DUE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.NOT_DUE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.PRINT_TOT_CSO_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.PRINT_PAYMENT1_PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.PRINT_PAYMENT2_PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.PRINT_PAYMENT1_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.PRINT_PAYMENT2_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.PRINT_TOT_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.PRINT_TOT_PAYMENTS_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.COLLECTIONS_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.PRINT_PAYMENT1_TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.PRINT_PAYMENT2_TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.PRINT_PAYMENT1_TOTAL_DUE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.PRINT_PAYMENT2_TOTAL_DUE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.MIN_PRINC_DUE_TWO_WEEKS_PCT)
                .HasPrecision(5, 2);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.MIN_PRINC_DUE_FOUR_WEEKS_PCT)
                .HasPrecision(5, 2);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.MIN_PRINC_DUE_TWO_WEEKS_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.MIN_PRINC_DUE_FOUR_WEEKS_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.PRINT_CASH_ADV_PAYMENT1_TOTAL_DUE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.PRINT_CASH_ADV_PAYMENT2_TOTAL_DUE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.PRINT_CASH_ADV_PAYMENT1_PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.PRINT_CASH_ADV_PAYMENT2_PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.PRINT_CASH_ADV_PAYMENT1_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.PRINT_CASH_ADV_PAYMENT2_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.PRINT_CASH_ADV_TOT_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.PRINT_CASH_ADV_TOT_CSO_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.PRINT_CASH_ADV_TOT_PAYMENTS_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.PRINT_CASH_ADV_FINAL_PAYMENT_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.CSO_LENDER_INTEREST_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.ACTIVITY_FEE_TWO_WEEK_PCT)
                .HasPrecision(6, 3);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.ACTIVITY_FEE_FOUR_WEEK_PCT)
                .HasPrecision(6, 3);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.PRINT_CASH_ADV_FINANCE_CHARGE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.CREDIT_AVAILABLE_FOR_BUYUP)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.CREDIT_LIMIT_NON_ORDINANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.CREDIT_AVAILABLE_FOR_BUYUP_NON_ORDINANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.LAST_CAB_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoan>()
                .Property(e => e.PAST_DUE_AMT)
                .HasPrecision(9, 2);

            modelBuilder.Entity<OpenEndLoanStatement>()
                .Property(e => e.CREDIT_LIMIT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatement>()
                .Property(e => e.CREDIT_AVAIL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatement>()
                .Property(e => e.AVG_DAILY_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatement>()
                .Property(e => e.PER_FIN_CHARGE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatement>()
                .Property(e => e.EFFECTIVE_APR)
                .HasPrecision(8, 2);

            modelBuilder.Entity<OpenEndLoanStatement>()
                .Property(e => e.START_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatement>()
                .Property(e => e.START_PRINC)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatement>()
                .Property(e => e.END_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatement>()
                .Property(e => e.END_PRINC)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatement>()
                .Property(e => e.PAST_DUE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatement>()
                .Property(e => e.CURR_DUE_TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatement>()
                .Property(e => e.CURR_DUE_ACTIVITY_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatement>()
                .Property(e => e.CURR_DUE_COLL_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatement>()
                .Property(e => e.CURR_DUE_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatement>()
                .Property(e => e.CURR_DUE_PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatement>()
                .Property(e => e.CURR_DUE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatement>()
                .Property(e => e.NEXT_DUE_TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatement>()
                .Property(e => e.NEXT_DUE_ACTIVITY_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatement>()
                .Property(e => e.NEXT_DUE_COLL_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatement>()
                .Property(e => e.NEXT_DUE_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatement>()
                .Property(e => e.NEXT_DUE_PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatement>()
                .Property(e => e.NEXT_DUE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatement>()
                .Property(e => e.NEW_TRANS_FEES)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatement>()
                .Property(e => e.NEW_LIEN_FEES)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatement>()
                .Property(e => e.NEW_ACTIVITY_FEES)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatement>()
                .Property(e => e.NEW_COLL_FEES)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatement>()
                .Property(e => e.NEW_INTEREST)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatement>()
                .Property(e => e.NEW_LOAN_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatement>()
                .Property(e => e.NEW_PAST_DUE_PAYMENTS)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatement>()
                .Property(e => e.NEW_FEE_PAYMENTS)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatement>()
                .Property(e => e.NEW_INTEREST_PAYMENTS)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatement>()
                .Property(e => e.NEW_PRINC_PAYMENTS)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatement>()
                .Property(e => e.NEW_PAYMENTS)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatement>()
                .Property(e => e.TOT_TRANS_FEES)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatement>()
                .Property(e => e.TOT_LIEN_FEES)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatement>()
                .Property(e => e.TOT_ACTIVITY_FEES)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatement>()
                .Property(e => e.TOT_COLL_FEES)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatement>()
                .Property(e => e.TOT_INTEREST)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatement>()
                .Property(e => e.TOT_LOAN_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatement>()
                .Property(e => e.TOT_PAYMENTS)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatement>()
                .Property(e => e.YTD_TRANS_FEES_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatement>()
                .Property(e => e.YTD_ACTIVITY_FEES_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatement>()
                .Property(e => e.YTD_COLL_FEES_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatement>()
                .Property(e => e.YTD_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatement>()
                .Property(e => e.CURR_DUE_CSO_LENDER_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatement>()
                .Property(e => e.NEXT_DUE_CSO_LENDER_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatement>()
                .Property(e => e.NEW_CSO_LENDER_INTEREST)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatement>()
                .Property(e => e.TOT_CSO_LENDER_INTEREST)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatement>()
                .Property(e => e.YTD_CSO_LENDER_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatement>()
                .Property(e => e.NEW_CSO_LENDER_INTEREST_PAYMENTS)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatement>()
                .Property(e => e.FINAL_EST_DUE_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatement>()
                .Property(e => e.FINAL_EST_DUE_CSO_LENDER_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatement>()
                .HasMany(e => e.OpenEndRecalcStatementAdjs)
                .WithRequired(e => e.OpenEndLoanStatement)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<OpenEndLoanStatementSnapshot>()
                .Property(e => e.PAST_DUE_TRANS_FEE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatementSnapshot>()
                .Property(e => e.PAST_DUE_LIEN_FEE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatementSnapshot>()
                .Property(e => e.PAST_DUE_CAB_FEE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatementSnapshot>()
                .Property(e => e.PAST_DUE_COLL_FEE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatementSnapshot>()
                .Property(e => e.PAST_DUE_CAB_LENDER_COLL_FEE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatementSnapshot>()
                .Property(e => e.PAST_DUE_INTEREST_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatementSnapshot>()
                .Property(e => e.PAST_DUE_CAB_LENDER_INTEREST_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatementSnapshot>()
                .Property(e => e.PAST_DUE_PRINC_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatementSnapshot>()
                .Property(e => e.CURR_DUE_TRANS_FEE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatementSnapshot>()
                .Property(e => e.CURR_DUE_LIEN_FEE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatementSnapshot>()
                .Property(e => e.CURR_DUE_CAB_FEE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatementSnapshot>()
                .Property(e => e.CURR_DUE_INTEREST_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatementSnapshot>()
                .Property(e => e.CURR_DUE_CAB_LENDER_INTEREST_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatementSnapshot>()
                .Property(e => e.CURR_DUE_PRINC_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatementSnapshot>()
                .Property(e => e.NEXT_DUE_TRANS_FEE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatementSnapshot>()
                .Property(e => e.NEXT_DUE_LIEN_FEE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatementSnapshot>()
                .Property(e => e.NEXT_DUE_CAB_FEE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatementSnapshot>()
                .Property(e => e.NEXT_DUE_INTEREST_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatementSnapshot>()
                .Property(e => e.NEXT_DUE_CAB_LENDER_INTEREST_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatementSnapshot>()
                .Property(e => e.NEXT_DUE_PRINC_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatementSnapshot>()
                .Property(e => e.NOT_DUE_TRANS_FEE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatementSnapshot>()
                .Property(e => e.NOT_DUE_LIEN_FEE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatementSnapshot>()
                .Property(e => e.NOT_DUE_CAB_FEE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatementSnapshot>()
                .Property(e => e.NOT_DUE_INTEREST_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatementSnapshot>()
                .Property(e => e.NOT_DUE_CAB_LENDER_INTEREST_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatementSnapshot>()
                .Property(e => e.NOT_DUE_PRINC_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatementSnapshot>()
                .Property(e => e.TRANS_FEE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatementSnapshot>()
                .Property(e => e.LIEN_FEE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatementSnapshot>()
                .Property(e => e.CAB_FEE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatementSnapshot>()
                .Property(e => e.CAB_LENDER_INTEREST_FEE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatementSnapshot>()
                .Property(e => e.INTEREST_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatementSnapshot>()
                .Property(e => e.PRINC_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatementSnapshot>()
                .Property(e => e.PAST_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatementSnapshot>()
                .Property(e => e.CURR_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatementSnapshot>()
                .Property(e => e.NEXT_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatementSnapshot>()
                .Property(e => e.NOT_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatementSnapshot>()
                .Property(e => e.PENDING_SCHED_ACH_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatementSnapshot>()
                .Property(e => e.PENDING_COLL_ACH_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndLoanStatementSnapshot>()
                .HasMany(e => e.OpenEndRecalcStatementSnapshots)
                .WithRequired(e => e.OpenEndLoanStatementSnapshot)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<OpenEndRecalcInterestAdj>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<OpenEndRecalcInterestAdj>()
                .Property(e => e.INTEREST_ADDED)
                .HasPrecision(14, 10);

            modelBuilder.Entity<OpenEndRecalcInterestAdj>()
                .Property(e => e.C_INTEREST_ADDED)
                .HasPrecision(14, 10);

            modelBuilder.Entity<OpenEndRecalcInterestAdj>()
                .Property(e => e.CAB_INTEREST_ADDED)
                .HasPrecision(14, 10);

            modelBuilder.Entity<OpenEndRecalcInterestAdj>()
                .Property(e => e.C_CAB_INTEREST_ADDED)
                .HasPrecision(14, 10);

            modelBuilder.Entity<OpenEndRecalcInterestAdj>()
                .Property(e => e.PRINC_DUE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcInterestAdj>()
                .Property(e => e.C_PRINC_DUE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcInterestAdj>()
                .Property(e => e.LOAN_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcInterestAdj>()
                .Property(e => e.C_LOAN_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcInterestAdj>()
                .Property(e => e.CAB_FEE_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcInterestAdj>()
                .Property(e => e.C_CAB_FEE_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcInterestAdj>()
                .Property(e => e.COLLECTIONS_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcInterestAdj>()
                .Property(e => e.C_COLLECTIONS_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.PAST_DUE_TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.C_PAST_DUE_TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.PAST_DUE_LIEN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.C_PAST_DUE_LIEN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.PAST_DUE_ACTIVITY_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.C_PAST_DUE_ACTIVITY_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.PAST_DUE_COLL_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.C_PAST_DUE_COLL_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.PAST_DUE_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.C_PAST_DUE_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.PAST_DUE_PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.C_PAST_DUE_PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.PAST_DUE_CSO_LENDER_COLL_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.C_PAST_DUE_CSO_LENDER_COLL_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.PAST_DUE_CSO_LENDER_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.C_PAST_DUE_CSO_LENDER_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.CURR_DUE_TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.C_CURR_DUE_TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.CURR_DUE_LIEN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.C_CURR_DUE_LIEN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.CURR_DUE_ACTIVITY_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.C_CURR_DUE_ACTIVITY_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.CURR_DUE_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.C_CURR_DUE_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.CURR_DUE_PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.C_CURR_DUE_PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.CURR_DUE_CSO_LENDER_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.C_CURR_DUE_CSO_LENDER_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.NEXT_DUE_TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.C_NEXT_DUE_TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.NEXT_DUE_LIEN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.C_NEXT_DUE_LIEN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.NEXT_DUE_ACTIVITY_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.C_NEXT_DUE_ACTIVITY_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.NEXT_DUE_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.C_NEXT_DUE_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.NEXT_DUE_PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.C_NEXT_DUE_PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.NEXT_DUE_CSO_LENDER_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.C_NEXT_DUE_CSO_LENDER_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.NOT_DUE_TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.C_NOT_DUE_TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.NOT_DUE_LIEN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.C_NOT_DUE_LIEN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.NOT_DUE_ACTIVITY_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.C_NOT_DUE_ACTIVITY_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.NOT_DUE_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.C_NOT_DUE_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.NOT_DUE_PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.C_NOT_DUE_PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.NOT_DUE_CSO_LENDER_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.C_NOT_DUE_CSO_LENDER_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.PENDING_SCHED_ACH_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.C_PENDING_SCHED_ACH_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.LPDD_PAST_DUE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.C_LPDD_PAST_DUE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.LPDD_COLLECTIONS_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.C_LPDD_COLLECTIONS_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.LPDD_PENDING_ACH_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcLoanPaymentAdj>()
                .Property(e => e.C_LPDD_PENDING_ACH_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.CREDIT_LIMIT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.C_CREDIT_LIMIT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.CREDIT_AVAIL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.C_CREDIT_AVAIL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.AVG_DAILY_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.C_AVG_DAILY_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.PER_FIN_CHARGE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.C_PER_FIN_CHARGE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.EFFECTIVE_APR)
                .HasPrecision(8, 2);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.C_EFFECTIVE_APR)
                .HasPrecision(8, 2);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.START_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.C_START_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.START_PRINC)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.C_START_PRINC)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.END_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.C_END_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.END_PRINC)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.C_END_PRINC)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.PAST_DUE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.C_PAST_DUE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.CURR_DUE_TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.C_CURR_DUE_TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.CURR_DUE_ACTIVITY_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.C_CURR_DUE_ACTIVITY_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.CURR_DUE_COLL_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.C_CURR_DUE_COLL_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.CURR_DUE_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.C_CURR_DUE_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.CURR_DUE_PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.C_CURR_DUE_PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.CURR_DUE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.C_CURR_DUE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.NEXT_DUE_TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.C_NEXT_DUE_TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.NEXT_DUE_ACTIVITY_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.C_NEXT_DUE_ACTIVITY_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.NEXT_DUE_COLL_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.C_NEXT_DUE_COLL_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.NEXT_DUE_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.C_NEXT_DUE_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.NEXT_DUE_PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.C_NEXT_DUE_PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.NEXT_DUE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.C_NEXT_DUE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.NEW_TRANS_FEES)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.C_NEW_TRANS_FEES)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.NEW_LIEN_FEES)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.C_NEW_LIEN_FEES)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.NEW_ACTIVITY_FEES)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.C_NEW_ACTIVITY_FEES)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.NEW_COLL_FEES)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.C_NEW_COLL_FEES)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.NEW_INTEREST)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.C_NEW_INTEREST)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.NEW_LOAN_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.C_NEW_LOAN_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.NEW_PAST_DUE_PAYMENTS)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.C_NEW_PAST_DUE_PAYMENTS)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.NEW_FEE_PAYMENTS)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.C_NEW_FEE_PAYMENTS)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.NEW_INTEREST_PAYMENTS)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.C_NEW_INTEREST_PAYMENTS)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.NEW_PRINC_PAYMENTS)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.C_NEW_PRINC_PAYMENTS)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.NEW_PAYMENTS)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.C_NEW_PAYMENTS)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.TOT_TRANS_FEES)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.C_TOT_TRANS_FEES)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.TOT_LIEN_FEES)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.C_TOT_LIEN_FEES)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.TOT_ACTIVITY_FEES)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.C_TOT_ACTIVITY_FEES)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.TOT_COLL_FEES)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.C_TOT_COLL_FEES)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.TOT_INTEREST)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.C_TOT_INTEREST)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.TOT_LOAN_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.C_TOT_LOAN_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.TOT_PAYMENTS)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.C_TOT_PAYMENTS)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.YTD_TRANS_FEES_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.C_YTD_TRANS_FEES_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.YTD_ACTIVITY_FEES_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.C_YTD_ACTIVITY_FEES_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.YTD_COLL_FEES_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.C_YTD_COLL_FEES_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.YTD_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.C_YTD_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.CURR_DUE_CSO_LENDER_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.C_CURR_DUE_CSO_LENDER_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.NEXT_DUE_CSO_LENDER_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.C_NEXT_DUE_CSO_LENDER_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.NEW_CSO_LENDER_INTEREST)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.C_NEW_CSO_LENDER_INTEREST)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.TOT_CSO_LENDER_INTEREST)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.C_TOT_CSO_LENDER_INTEREST)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.YTD_CSO_LENDER_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.C_YTD_CSO_LENDER_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.NEW_CSO_LENDER_INTEREST_PAYMENTS)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.C_NEW_CSO_LENDER_INTEREST_PAYMENTS)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.FINAL_EST_DUE_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.C_FINAL_EST_DUE_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.FINAL_EST_DUE_CSO_LENDER_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementAdj>()
                .Property(e => e.C_FINAL_EST_DUE_CSO_LENDER_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.PAST_DUE_TRANS_FEE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.C_PAST_DUE_TRANS_FEE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.PAST_DUE_LIEN_FEE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.C_PAST_DUE_LIEN_FEE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.PAST_DUE_CAB_FEE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.C_PAST_DUE_CAB_FEE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.PAST_DUE_COLL_FEE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.C_PAST_DUE_COLL_FEE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.PAST_DUE_CAB_LENDER_COLL_FEE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.C_PAST_DUE_CAB_LENDER_COLL_FEE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.PAST_DUE_INTEREST_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.C_PAST_DUE_INTEREST_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.PAST_DUE_CAB_LENDER_INTEREST_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.C_PAST_DUE_CAB_LENDER_INTEREST_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.PAST_DUE_PRINC_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.C_PAST_DUE_PRINC_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.CURR_DUE_TRANS_FEE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.C_CURR_DUE_TRANS_FEE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.CURR_DUE_LIEN_FEE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.C_CURR_DUE_LIEN_FEE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.CURR_DUE_CAB_FEE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.C_CURR_DUE_CAB_FEE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.CURR_DUE_INTEREST_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.C_CURR_DUE_INTEREST_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.CURR_DUE_CAB_LENDER_INTEREST_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.C_CURR_DUE_CAB_LENDER_INTEREST_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.CURR_DUE_PRINC_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.C_CURR_DUE_PRINC_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.NEXT_DUE_TRANS_FEE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.C_NEXT_DUE_TRANS_FEE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.NEXT_DUE_LIEN_FEE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.C_NEXT_DUE_LIEN_FEE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.NEXT_DUE_CAB_FEE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.C_NEXT_DUE_CAB_FEE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.NEXT_DUE_INTEREST_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.C_NEXT_DUE_INTEREST_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.NEXT_DUE_CAB_LENDER_INTEREST_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.C_NEXT_DUE_CAB_LENDER_INTEREST_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.NEXT_DUE_PRINC_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.C_NEXT_DUE_PRINC_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.NOT_DUE_TRANS_FEE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.C_NOT_DUE_TRANS_FEE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.NOT_DUE_LIEN_FEE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.C_NOT_DUE_LIEN_FEE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.NOT_DUE_CAB_FEE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.C_NOT_DUE_CAB_FEE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.NOT_DUE_INTEREST_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.C_NOT_DUE_INTEREST_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.NOT_DUE_CAB_LENDER_INTEREST_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.C_NOT_DUE_CAB_LENDER_INTEREST_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.NOT_DUE_PRINC_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.C_NOT_DUE_PRINC_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.PENDING_SCHED_ACH_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.C_PENDING_SCHED_ACH_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.PENDING_COLL_ACH_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OpenEndRecalcStatementSnapshot>()
                .Property(e => e.C_PENDING_COLL_ACH_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OptInOut>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<OptInOut>()
                .Property(e => e.SMS_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<OptInOut>()
                .Property(e => e.VOICEBLAST_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<OptInOut>()
                .Property(e => e.CALL_CAMPAIGN_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<OptInOut>()
                .Property(e => e.OPTPLUS_SMS_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<OptInOut>()
                .Property(e => e.OPTPLUS_VOICEBLAST_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<OptInOut>()
                .Property(e => e.OPTPLUS_CALL_CAMPAIGN_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<OptInOut>()
                .HasMany(e => e.OptInOutEdits)
                .WithRequired(e => e.OptInOut)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<OptInOutEdit>()
                .Property(e => e.TELLERID)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<OptInOutEdit>()
                .Property(e => e.FIELD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<OptInOutEdit>()
                .Property(e => e.OLD_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<OptInOutEdit>()
                .Property(e => e.NEW_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusCardDetail>()
                .Property(e => e.OVERDRAFT_AMOUNT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OptPlusCardDetail>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusCardDetail>()
                .Property(e => e.PENDING_COLL_ACH_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OptPlusCardDetail>()
                .Property(e => e.PAN_PROXY_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusCardDetail>()
                .Property(e => e.BANK_ACCESS_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusCardDetail>()
                .HasMany(e => e.OptPlusCardDetail1)
                .WithOptional(e => e.OptPlusCardDetail2)
                .HasForeignKey(e => e.PARENT_OPT_PLUS_CARD_DETAIL_KEY);

            modelBuilder.Entity<OptPlusCardDetail>()
                .HasMany(e => e.OptPlusCardRIPayments)
                .WithRequired(e => e.OptPlusCardDetail)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<OptPlusCardRIPayment>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusCardRIPayment>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusCardRIPayment>()
                .Property(e => e.PAID_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OptPlusCarrier>()
                .Property(e => e.CARRIER_ID)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusCarrier>()
                .Property(e => e.CARRIER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusCarrier>()
                .Property(e => e.DISPLAY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusCarrier>()
                .Property(e => e.EMAIL_GATEWAY)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusCarrier>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusDirectDeposit>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusDirectDeposit>()
                .Property(e => e.DEPOSIT_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OptPlusEdit>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusEdit>()
                .Property(e => e.FIELD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusEdit>()
                .Property(e => e.OLD_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusEdit>()
                .Property(e => e.NEW_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusEmail>()
                .Property(e => e.EMAIL_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusEmail>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusEmail>()
                .HasMany(e => e.OptPlusEmailLocations)
                .WithRequired(e => e.OptPlusEmail)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<OptPlusEmailLocation>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusEmployment>()
                .Property(e => e.EMPLOYER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusEmployment>()
                .Property(e => e.WEBSITE)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusEmployment>()
                .Property(e => e.HR_CONTACT)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusEmployment>()
                .Property(e => e.HR_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusEmployment>()
                .Property(e => e.HR_FAX)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusEmployment>()
                .Property(e => e.ADDR_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusEmployment>()
                .Property(e => e.ADDR_PRE_DIR)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusEmployment>()
                .Property(e => e.ADDR_STREET)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusEmployment>()
                .Property(e => e.ADDR_SUFFIX)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusEmployment>()
                .Property(e => e.ADDR_POST_DIR)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusEmployment>()
                .Property(e => e.ADDR_SUITE)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusEmployment>()
                .Property(e => e.ADDR_SUITE_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusEmployment>()
                .Property(e => e.CITY)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusEmployment>()
                .Property(e => e.STATE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusEmployment>()
                .Property(e => e.ZIPCODE)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusEmployment>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusEmployment>()
                .Property(e => e.COUNTY)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusEmployment>()
                .Property(e => e.COUNTRY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusEmployment>()
                .Property(e => e.ADDRESS_FORMAT)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusEmployment>()
                .Property(e => e.FLAT_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusEmployment>()
                .Property(e => e.BUILDING_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusEmployment>()
                .Property(e => e.BUILDING_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusEmployment>()
                .Property(e => e.ADDRESS_LINE)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusEmployment>()
                .Property(e => e.ADDRESS_CSZ)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusEmployment>()
                .Property(e => e.ADDRESS_LINE_3)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusEmployment>()
                .Property(e => e.ADDRESS_LINE_1)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusEmployment>()
                .Property(e => e.ADDRESS_LINE_2)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusExportInitGL>()
                .Property(e => e.OPT_PLUS_TRANS_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusExportInitGL>()
                .Property(e => e.TRECS_TRANS_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusGlobal>()
                .Property(e => e.OD_PERCENT_OF_DEPOSIT_AVG)
                .HasPrecision(9, 4);

            modelBuilder.Entity<OptPlusGlobal>()
                .Property(e => e.OD_MAX_AMT_RECV)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OptPlusGlobal>()
                .Property(e => e.OD_MIN_DIRECT_DEPOSIT_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OptPlusGlobal>()
                .Property(e => e.OD_NON_DDP_MAX_AMT_TO_RECV)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OptPlusGlobal>()
                .Property(e => e.MAX_AMOUNT_PER_LOAD)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OptPlusGlobal>()
                .Property(e => e.MAX_AMOUNT_LOST_CARD_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OptPlusGlobal>()
                .Property(e => e.REVERSAL_CUTOFF_TIME)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusGlobal>()
                .Property(e => e.MAX_AMOUNT_PER_UNLOAD)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OptPlusGlobal>()
                .Property(e => e.MIN_AMOUNT_PER_LOAD)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OptPlusGlobal>()
                .Property(e => e.MAX_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OptPlusGlobal>()
                .Property(e => e.MAX_LOAD_AMOUNT_PER_DAY)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OptPlusGlobal>()
                .Property(e => e.MAX_ATM_UNLOAD_AMOUNT_PER_DAY)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OptPlusGlobal>()
                .Property(e => e.MAX_OTHER_UNLOAD_AMOUNT_PER_DAY)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OptPlusMerchant>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusMerchant>()
                .Property(e => e.MERCHANT_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusMerchant>()
                .Property(e => e.MERCHANT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusMerchant>()
                .Property(e => e.MERCHANT_CATEGORY)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusMerchant>()
                .Property(e => e.MERCHANT_COUNTRY)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusMerchant>()
                .HasMany(e => e.OptPlusDirectDeposits)
                .WithRequired(e => e.OptPlusMerchant)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<OptPlusMerchant>()
                .HasMany(e => e.OptPlusRDFPostedTrans)
                .WithOptional(e => e.OptPlusMerchant)
                .WillCascadeOnDelete();

            modelBuilder.Entity<OptPlusProduct>()
                .Property(e => e.PRODUCT_ID)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusProduct>()
                .Property(e => e.PRODUCT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusProduct>()
                .Property(e => e.PRODUCT_DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusProduct>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusProduct>()
                .HasMany(e => e.OptPlusBinProducts)
                .WithRequired(e => e.OptPlusProduct)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<OptPlusProduct>()
                .HasMany(e => e.OptPlusCardDetails)
                .WithRequired(e => e.OptPlusProduct)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<OptPlusRDFAuthorizedTransaction>()
                .Property(e => e.UNIQUE_PROGRAM_ID)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusRDFAuthorizedTransaction>()
                .Property(e => e.GALILEO_ACCOUNT_ID)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusRDFAuthorizedTransaction>()
                .Property(e => e.CARD_ID)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusRDFAuthorizedTransaction>()
                .Property(e => e.TRANSACTION_DATE)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusRDFAuthorizedTransaction>()
                .Property(e => e.TRANSACTION_CURRENCY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusRDFAuthorizedTransaction>()
                .Property(e => e.ADDRESS_VERIFICATION_RESPONSE)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusRDFAuthorizedTransaction>()
                .Property(e => e.AUTHORIZATION_RESPONSE)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusRDFAuthorizedTransaction>()
                .Property(e => e.AUTHORIZATION_AMOUNT)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusRDFAuthorizedTransaction>()
                .Property(e => e.AUTHORIZATION_AMOUNT_SIGN)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusRDFAuthorizedTransaction>()
                .Property(e => e.AUTHORIZATION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusRDFAuthorizedTransaction>()
                .Property(e => e.NETWORK_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusRDFAuthorizedTransaction>()
                .Property(e => e.MERCHANT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusRDFAuthorizedTransaction>()
                .Property(e => e.MERCHANT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusRDFAuthorizedTransaction>()
                .Property(e => e.MERCHANT_CATEGORY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusRDFAuthorizedTransaction>()
                .Property(e => e.TRANSACTION_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusRDFAuthorizedTransaction>()
                .Property(e => e.MERCHANT_COUNTRY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusRDFCustomerMaster>()
                .Property(e => e.CURR_BAL_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OptPlusRDFCustomerMaster>()
                .Property(e => e.CURR_BAL_SIGN)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusRDFCustomerMaster>()
                .Property(e => e.NEG_BAL_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OptPlusRDFCustomerMaster>()
                .Property(e => e.AVAIL_BAL_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OptPlusRDFCustomerMaster>()
                .Property(e => e.AVAIL_BAL_SIGN)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusRDFLookUp>()
                .Property(e => e.RDF_CODE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusRDFPostedTran>()
                .Property(e => e.TRANS_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OptPlusRDFPostedTran>()
                .Property(e => e.TRANS_SIGN)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusRDFPostedTran>()
                .Property(e => e.INTER_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OverShort>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<OverShort>()
                .Property(e => e.CALC_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<OverShort>()
                .Property(e => e.ENTERED_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<OverShort>()
                .Property(e => e.AMT_OVER)
                .HasPrecision(19, 4);

            modelBuilder.Entity<OverShort>()
                .Property(e => e.AMT_SHORT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ParseCash>()
                .Property(e => e.PC_100)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ParseCash>()
                .Property(e => e.PC_50)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ParseCash>()
                .Property(e => e.PC_20)
                .HasPrecision(10, 4);

            modelBuilder.Entity<ParseCash>()
                .Property(e => e.PC_10)
                .HasPrecision(10, 4);

            modelBuilder.Entity<ParseCash>()
                .Property(e => e.PC_05)
                .HasPrecision(10, 4);

            modelBuilder.Entity<ParseCash>()
                .Property(e => e.PC_01)
                .HasPrecision(10, 4);

            modelBuilder.Entity<ParseCash>()
                .Property(e => e.PC_ROLL_HLF)
                .HasPrecision(10, 4);

            modelBuilder.Entity<ParseCash>()
                .Property(e => e.PC_ROLL_QTR)
                .HasPrecision(10, 4);

            modelBuilder.Entity<ParseCash>()
                .Property(e => e.PC_ROLL_DIME)
                .HasPrecision(10, 4);

            modelBuilder.Entity<ParseCash>()
                .Property(e => e.PC_ROLL_NIC)
                .HasPrecision(10, 4);

            modelBuilder.Entity<ParseCash>()
                .Property(e => e.PC_ROLL_PEN)
                .HasPrecision(10, 4);

            modelBuilder.Entity<ParseCash>()
                .Property(e => e.PC_LOOSE_HLF)
                .HasPrecision(10, 4);

            modelBuilder.Entity<ParseCash>()
                .Property(e => e.PC_LOOSE_QTR)
                .HasPrecision(10, 4);

            modelBuilder.Entity<ParseCash>()
                .Property(e => e.PC_LOOSE_DIME)
                .HasPrecision(10, 4);

            modelBuilder.Entity<ParseCash>()
                .Property(e => e.PC_LOOSE_NIC)
                .HasPrecision(10, 4);

            modelBuilder.Entity<ParseCash>()
                .Property(e => e.PC_LOOSE_PEN)
                .HasPrecision(10, 4);

            modelBuilder.Entity<ParseCash>()
                .Property(e => e.PC_MISC)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ParseCash>()
                .Property(e => e.PC_ROLL_02)
                .HasPrecision(10, 4);

            modelBuilder.Entity<ParseCash>()
                .Property(e => e.PC_ROLL_01)
                .HasPrecision(10, 4);

            modelBuilder.Entity<ParseCash>()
                .Property(e => e.PC_ROLL_2P)
                .HasPrecision(10, 4);

            modelBuilder.Entity<ParseCash>()
                .Property(e => e.PC_ROLL_20P)
                .HasPrecision(10, 4);

            modelBuilder.Entity<ParseCash>()
                .Property(e => e.PC_LOOSE_01)
                .HasPrecision(10, 4);

            modelBuilder.Entity<ParseCash>()
                .Property(e => e.PC_LOOSE_02)
                .HasPrecision(10, 4);

            modelBuilder.Entity<ParseCash>()
                .Property(e => e.PC_LOOSE_2P)
                .HasPrecision(10, 4);

            modelBuilder.Entity<ParseCash>()
                .Property(e => e.PC_LOOSE_20P)
                .HasPrecision(10, 4);

            modelBuilder.Entity<ParseCash>()
                .Property(e => e.PC_TOT_CASH)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ParseCash>()
                .HasMany(e => e.VaultCounts)
                .WithOptional(e => e.ParseCash)
                .HasForeignKey(e => e.ENTERED_PARSE_CASH_KEY);

            modelBuilder.Entity<ParseCash>()
                .HasMany(e => e.VaultCounts1)
                .WithOptional(e => e.ParseCash1)
                .HasForeignKey(e => e.CALC_PARSE_CASH_KEY);

            modelBuilder.Entity<PaydayLoan>()
                .Property(e => e.CHECK_NO)
                .IsUnicode(false);

            modelBuilder.Entity<PaydayLoan>()
                .Property(e => e.SPLIT_2ND_RATE_PCT)
                .HasPrecision(9, 5);

            modelBuilder.Entity<PaydayLoan>()
                .Property(e => e.SPLIT_AMOUNT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PaydayLoan>()
                .Property(e => e.SPLIT_PRV_OPEN_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PaydayLoan>()
                .Property(e => e.SPLIT_1ST_FEE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PaydayLoan>()
                .Property(e => e.SPLIT_2ND_FEE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PaydayLoan>()
                .Property(e => e.DISPLAY_CHECK_NO)
                .IsUnicode(false);

            modelBuilder.Entity<PaydayLoan>()
                .Property(e => e.DEPOSIT_METHOD)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<PaydayLoanApproval>()
                .Property(e => e.GROSS_INCOME_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PaydayLoanApproval>()
                .Property(e => e.NET_INCOME_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PaydayLoanApproval>()
                .Property(e => e.OPEN_LOANS_PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PaydayLoanApproval>()
                .Property(e => e.STATE_MAX_NET_OR_GROSS)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<PaydayLoanApproval>()
                .Property(e => e.STATE_MAX_MULTI_LOAN_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PaydayLoanApproval>()
                .Property(e => e.STATE_MAX_INCOME_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PaydayLoanApproval>()
                .Property(e => e.STATE_MAX_PER_LOAN_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PaydayLoanApproval>()
                .Property(e => e.STATE_MAX_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PaydayLoanApproval>()
                .Property(e => e.APPROVAL_NET_OR_GROSS)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<PaydayLoanApproval>()
                .Property(e => e.APPROVAL_BASE_INCOME_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PaydayLoanApproval>()
                .Property(e => e.APPROVAL_CCARD_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PaydayLoanApproval>()
                .Property(e => e.APPROVAL_DIR_DEP_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PaydayLoanApproval>()
                .Property(e => e.APPROVAL_SUCCESSFUL_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PaydayLoanApproval>()
                .Property(e => e.APPROVAL_BASE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PaydayLoanApproval>()
                .Property(e => e.MGR_OVERRIDE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PaydayLoanApproval>()
                .Property(e => e.MGR_OVERRIDE_INITS)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<PaydayLoanApproval>()
                .Property(e => e.PREV_PRINC_OVERRIDE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PaydayLoanApproval>()
                .Property(e => e.APPROVAL_STATE_MAX_ADJ_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PaydayLoanApproval>()
                .Property(e => e.APPROVAL_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PaydayLoanApproval>()
                .Property(e => e.INCLUDE_FEE_MAX_PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PaydayLoanApproval>()
                .Property(e => e.INCLUDE_FEE_MAX_LOAN_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PaydayLoanQualification>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<PaymentPlan>()
                .Property(e => e.PP_PRINCIPAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PaymentPlan>()
                .Property(e => e.PP_COMMISSION)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PAYROLL1>()
                .Property(e => e.chk_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<PAYROLL1>()
                .Property(e => e.PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<PAYROLL1>()
                .Property(e => e.FEE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PAYROLL1>()
                .Property(e => e.RATE)
                .HasPrecision(5, 3);

            modelBuilder.Entity<PayStub>()
                .Property(e => e.CHECK_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<PayStub>()
                .Property(e => e.CHECK_AMOUNT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PayStub>()
                .Property(e => e.PAY_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<PayStub>()
                .Property(e => e.PAY_CYCLE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<PayStub>()
                .Property(e => e.REGULAR_HOURS)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PayStub>()
                .Property(e => e.REGULAR_RATE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PayStub>()
                .Property(e => e.OVERTIME_HOURS)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PayStub>()
                .Property(e => e.OVERTIME_RATE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PayStub>()
                .Property(e => e.GROSS)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PayStub>()
                .Property(e => e.GROSS_YTD)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PayStub>()
                .Property(e => e.TAXABLE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PayStub>()
                .Property(e => e.FEDERAL_TAX)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PayStub>()
                .Property(e => e.STATE_TAX)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PayStub>()
                .Property(e => e.SOCIAL_SECURITY_TAX)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PayStub>()
                .Property(e => e.MEDICARE_TAX)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PersonTitle>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<PersonTitle>()
                .Property(e => e.ABBREVIATION)
                .IsUnicode(false);

            modelBuilder.Entity<PersonTitle>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<PersonTitle>()
                .Property(e => e.UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<PersonTitle>()
                .HasMany(e => e.Customers)
                .WithRequired(e => e.PersonTitle)
                .HasForeignKey(e => e.TITLE)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<PersonTitle>()
                .HasMany(e => e.LoanApplications)
                .WithRequired(e => e.PersonTitle)
                .HasForeignKey(e => e.TITLE)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<PhoneSkillsCall>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<PhoneSkillsCall>()
                .Property(e => e.STORE_MANAGER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<PhoneSkillsCall>()
                .Property(e => e.STORE_TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<PhoneSkillsCall>()
                .Property(e => e.UNKNOWN_TELLER)
                .IsUnicode(false);

            modelBuilder.Entity<PhoneSkillsCall>()
                .Property(e => e.COMMENTS)
                .IsUnicode(false);

            modelBuilder.Entity<PhoneSkillsCall>()
                .Property(e => e.DELETED_DATE)
                .IsUnicode(false);

            modelBuilder.Entity<PhoneSkillsCall>()
                .Property(e => e.DELETED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<PhoneSkillsGrade>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<PhoneSkillsGrade>()
                .HasMany(e => e.PhoneSkillsCalls)
                .WithRequired(e => e.PhoneSkillsGrade)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<PhoneSkillsGrader>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<PhoneSkillsReason>()
                .Property(e => e.REASON_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<PhoneSkillsReason>()
                .Property(e => e.REASON_DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<PhoneSkillsReason>()
                .HasMany(e => e.PhoneSkillsSequences)
                .WithRequired(e => e.PhoneSkillsReason)
                .HasForeignKey(e => e.REASON_KEY)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<PhoneSkillsSequence>()
                .HasMany(e => e.PhoneSkillsCalls)
                .WithRequired(e => e.PhoneSkillsSequence)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<PrepaidCardBin>()
                .Property(e => e.BIN_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidCardBin>()
                .Property(e => e.BIN_DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidCardBin>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidCardBin>()
                .Property(e => e.ROUTING_NO)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidCardBin>()
                .Property(e => e.BIN_BANKNAME)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidCardBin>()
                .HasMany(e => e.OptPlusBinProducts)
                .WithRequired(e => e.PrepaidCardBin)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<PrepaidCardBin>()
                .HasMany(e => e.OptPlusExportInitGLs)
                .WithRequired(e => e.PrepaidCardBin)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<PrepaidCardBin>()
                .HasMany(e => e.OptPlusGlobals)
                .WithRequired(e => e.PrepaidCardBin)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<PrepaidCardBin>()
                .HasMany(e => e.PrepaidCardBinCompanies)
                .WithRequired(e => e.PrepaidCardBin)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<PrepaidCardBinCompany>()
                .Property(e => e.VENDOR_UAT_CLIENTID)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidCardBinCompany>()
                .Property(e => e.VENDOR_PROD_CLIENTID)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidCardGroup>()
                .Property(e => e.GROUP_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidCardGroup>()
                .Property(e => e.GROUP_DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidCardGroup>()
                .Property(e => e.TELLER_ACTIVE_CHANGED)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidCardGroup>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidCardStopPayment>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidCardStopPayment>()
                .Property(e => e.SOURCE_INSTITUTION)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidCardStopPayment>()
                .Property(e => e.STOP_PAYMENT_AMOUNT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PrepaidCardStopPayment>()
                .Property(e => e.CANCELLED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidCardStopPayment>()
                .Property(e => e.LAST_UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidCardStopPayment>()
                .Property(e => e.OTHER_REASON_DESCRIBE)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidCardStopPayment>()
                .HasMany(e => e.PrepaidCardStopPaymentEdits)
                .WithRequired(e => e.PrepaidCardStopPayment)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<PrepaidCardStopPaymentEdit>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidCardStopPaymentEdit>()
                .Property(e => e.FIELD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidCardStopPaymentEdit>()
                .Property(e => e.OLD_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidCardStopPaymentEdit>()
                .Property(e => e.NEW_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidCardStopPaymentReason>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidCardStopPaymentReason>()
                .HasMany(e => e.PrepaidCardStopPayments)
                .WithRequired(e => e.PrepaidCardStopPaymentReason)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<PrepaidCardTran>()
                .Property(e => e.OPERATION_PARMS)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidCardTran>()
                .Property(e => e.OPERATION_RESULTS)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidCardTran>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidCardTran>()
                .Property(e => e.COMPUTER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidCardTran>()
                .Property(e => e.SERVER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidCardTran>()
                .Property(e => e.AMOUNT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PrepaidCardTransAction>()
                .Property(e => e.ACTION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidCardTransAction>()
                .Property(e => e.TELLER_ACTIVE_CHANGED)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidCardTransAction>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISAccountBalance>()
                .Property(e => e.CLIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISAccountBalance>()
                .Property(e => e.BANK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISAccountBalance>()
                .Property(e => e.PRIME_ACCT_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISAccountBalance>()
                .Property(e => e.OPENING_BAL)
                .HasPrecision(19, 4);

            modelBuilder.Entity<PrepaidFISAccountBalance>()
                .Property(e => e.TOT_VAL_LOAD_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<PrepaidFISAccountBalance>()
                .Property(e => e.TOT_PURCHASE_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<PrepaidFISAccountBalance>()
                .Property(e => e.TOT_OTC_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<PrepaidFISAccountBalance>()
                .Property(e => e.TOT_ATM_WD_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<PrepaidFISAccountBalance>()
                .Property(e => e.TOT_RTN_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<PrepaidFISAccountBalance>()
                .Property(e => e.TOT_ADJ_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<PrepaidFISAccountBalance>()
                .Property(e => e.TOT_FEE_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<PrepaidFISAccountBalance>()
                .Property(e => e.OTH_CR_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<PrepaidFISAccountBalance>()
                .Property(e => e.OTH_DB_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<PrepaidFISAccountBalance>()
                .Property(e => e.TOT_CR_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<PrepaidFISAccountBalance>()
                .Property(e => e.TOT_DB_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<PrepaidFISAccountBalance>()
                .Property(e => e.TOT_TRANS_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<PrepaidFISAccountBalance>()
                .Property(e => e.CLOSING_BALANCE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<PrepaidFISAccountBalance>()
                .Property(e => e.BIN_CURR_ALPHA)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISAccountBalance>()
                .Property(e => e.BIN_CURR_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISAccountBalance>()
                .Property(e => e.PAN_PROXY_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISAuthTran>()
                .Property(e => e.ISSUER_CLIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISAuthTran>()
                .Property(e => e.SUBPROGRAM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISAuthTran>()
                .Property(e => e.BIN_CURR_ALPHA)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISAuthTran>()
                .Property(e => e.BIN_CURR_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISAuthTran>()
                .Property(e => e.BANK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISAuthTran>()
                .Property(e => e.PRIME_ACCT_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISAuthTran>()
                .Property(e => e.CARD_ACCT_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISAuthTran>()
                .Property(e => e.TXN_UID)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISAuthTran>()
                .Property(e => e.TXN_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISAuthTran>()
                .Property(e => e.PURSE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISAuthTran>()
                .Property(e => e.AUTHORIZE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISAuthTran>()
                .Property(e => e.REQUEST_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISAuthTran>()
                .Property(e => e.RESPONSE_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISAuthTran>()
                .Property(e => e.REASON_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISAuthTran>()
                .Property(e => e.SOURCE_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISAuthTran>()
                .Property(e => e.AUTHORIZE_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<PrepaidFISAuthTran>()
                .Property(e => e.TXN_LOCAL_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<PrepaidFISAuthTran>()
                .Property(e => e.TRANS_CURR_ALPHA)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISAuthTran>()
                .Property(e => e.RETRIEVAL_REFNO)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISAuthTran>()
                .Property(e => e.AVS_INFO)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISAuthTran>()
                .Property(e => e.AVS_RESP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISAuthTran>()
                .Property(e => e.POS_DATA)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISAuthTran>()
                .Property(e => e.POS_ENTRY_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISAuthTran>()
                .Property(e => e.MERC_MCC_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISAuthTran>()
                .Property(e => e.MCC_DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISAuthTran>()
                .Property(e => e.MERC_CURR_ALPHA)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISAuthTran>()
                .Property(e => e.MERC_CURR_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISAuthTran>()
                .Property(e => e.MERC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISAuthTran>()
                .Property(e => e.MERC_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISAuthTran>()
                .Property(e => e.MERC_STREET)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISAuthTran>()
                .Property(e => e.MERC_CITY)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISAuthTran>()
                .Property(e => e.MERC_PROV)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISAuthTran>()
                .Property(e => e.MERC_STATE)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISAuthTran>()
                .Property(e => e.MERC_ZIP)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISAuthTran>()
                .Property(e => e.MERC_CTRY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISAuthTran>()
                .Property(e => e.MERC_CTRY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISAuthTran>()
                .Property(e => e.TERM_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISAuthTran>()
                .Property(e => e.ACQ_ID)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISAuthTran>()
                .Property(e => e.CAN_PROXY_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISAuthTran>()
                .Property(e => e.CLIENT_UNIQUE_ID)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISAuthTran>()
                .Property(e => e.AUTH_BAL)
                .HasPrecision(19, 4);

            modelBuilder.Entity<PrepaidFISAuthTran>()
                .Property(e => e.SETTLE_BAL)
                .HasPrecision(19, 4);

            modelBuilder.Entity<PrepaidFISAuthTran>()
                .Property(e => e.TOLERANCE_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<PrepaidFISAuthTran>()
                .Property(e => e.CARD_VERIFY_METHOD)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISAuthTran>()
                .Property(e => e.CVC_RESPONSE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISAuthTran>()
                .Property(e => e.PAN_PROXY_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISCustomerMaster>()
                .Property(e => e.TOP_CLIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISCustomerMaster>()
                .Property(e => e.CLIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISCustomerMaster>()
                .Property(e => e.PROGRAM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISCustomerMaster>()
                .Property(e => e.SUBPROGRAM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISCustomerMaster>()
                .Property(e => e.BIN_CURR_ALPHA)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISCustomerMaster>()
                .Property(e => e.BIN_CURR_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISCustomerMaster>()
                .Property(e => e.PACKAGE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISCustomerMaster>()
                .Property(e => e.PRIME_ACCT_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISCustomerMaster>()
                .Property(e => e.CARD_ACCT_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISCustomerMaster>()
                .Property(e => e.CARDHOLDER_FIRSTNAME)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISCustomerMaster>()
                .Property(e => e.CARDHOLDER_LASTNAME)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISCustomerMaster>()
                .Property(e => e.CARDHOLDER_MIDDLENAME)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISCustomerMaster>()
                .Property(e => e.MAIL_ADDR_LINE1)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISCustomerMaster>()
                .Property(e => e.MAIL_ADDR_LINE2)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISCustomerMaster>()
                .Property(e => e.MAIL_CITY)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISCustomerMaster>()
                .Property(e => e.MAIL_STATE)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISCustomerMaster>()
                .Property(e => e.MAIL_ZIP)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISCustomerMaster>()
                .Property(e => e.MAIL_CTRY)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISCustomerMaster>()
                .Property(e => e.CARDHOLDER_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISCustomerMaster>()
                .Property(e => e.CARDHOLDER_PHONE_EXT)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISCustomerMaster>()
                .Property(e => e.MARKET_SEG_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISCustomerMaster>()
                .Property(e => e.CARDHOLDER_EMAIL)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISCustomerMaster>()
                .Property(e => e.CARDHOLDER_SSN)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISCustomerMaster>()
                .Property(e => e.CARDHOLDER_SUFFIX)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISCustomerMaster>()
                .Property(e => e.CARD_STATUS_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISCustomerMaster>()
                .Property(e => e.CLIENT_MEMO)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISCustomerMaster>()
                .Property(e => e.CAN_PROXY_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISCustomerMaster>()
                .Property(e => e.PRIVACY_OPT_OUT)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISCustomerMaster>()
                .Property(e => e.PRIMARY_RELATIONSHIP)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISCustomerMaster>()
                .Property(e => e.REQUEST_CODE_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISCustomerMaster>()
                .Property(e => e.SOURCE_CODE_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISCustomerMaster>()
                .Property(e => e.CLIENT_UNIQUE_ID)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISCustomerMaster>()
                .Property(e => e.ALERTS_EMAIL)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISCustomerMaster>()
                .Property(e => e.DIRECT_ACCESS_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISCustomerMaster>()
                .Property(e => e.SMS_MOBILE_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISCustomerMaster>()
                .Property(e => e.PAN_PROXY_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISPostedTran>()
                .Property(e => e.ISSUER_CLIENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISPostedTran>()
                .Property(e => e.SUBPROGRAM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISPostedTran>()
                .Property(e => e.BIN_CURR_ALPHA)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISPostedTran>()
                .Property(e => e.BIN_CURR_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISPostedTran>()
                .Property(e => e.BANKNAME)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISPostedTran>()
                .Property(e => e.PRIME_ACCT_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISPostedTran>()
                .Property(e => e.CARD_ACCT_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISPostedTran>()
                .Property(e => e.AUTHORIZE_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<PrepaidFISPostedTran>()
                .Property(e => e.AUTHORIZE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISPostedTran>()
                .Property(e => e.TXN_LOCAL_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<PrepaidFISPostedTran>()
                .Property(e => e.TRANS_CURR_ALPHA)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISPostedTran>()
                .Property(e => e.MERC_CURR_ALPHA)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISPostedTran>()
                .Property(e => e.MERC_CURR_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISPostedTran>()
                .Property(e => e.MERC_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISPostedTran>()
                .Property(e => e.MERC_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISPostedTran>()
                .Property(e => e.PAY_REF_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISPostedTran>()
                .Property(e => e.SETTLE_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<PrepaidFISPostedTran>()
                .Property(e => e.ACQ_REF_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISPostedTran>()
                .Property(e => e.ACQ_ID)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISPostedTran>()
                .Property(e => e.ADDR_VERIFY_RESP)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISPostedTran>()
                .Property(e => e.ADJUST_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<PrepaidFISPostedTran>()
                .Property(e => e.AUTHORIZE_RESP)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISPostedTran>()
                .Property(e => e.AVS_INFO)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISPostedTran>()
                .Property(e => e.DENOMINATION)
                .HasPrecision(19, 4);

            modelBuilder.Entity<PrepaidFISPostedTran>()
                .Property(e => e.DIRECT_ACCESS_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISPostedTran>()
                .Property(e => e.CAN_PROXY_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISPostedTran>()
                .Property(e => e.FUDGE_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<PrepaidFISPostedTran>()
                .Property(e => e.MATCH_STATUS_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISPostedTran>()
                .Property(e => e.MATCH_TYPE_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISPostedTran>()
                .Property(e => e.MCC_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISPostedTran>()
                .Property(e => e.MERC_ZIP)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISPostedTran>()
                .Property(e => e.MERC_CITY)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISPostedTran>()
                .Property(e => e.MERC_CTRY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISPostedTran>()
                .Property(e => e.MERC_CTRY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISPostedTran>()
                .Property(e => e.MERC_PROV)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISPostedTran>()
                .Property(e => e.MERC_STATE)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISPostedTran>()
                .Property(e => e.MERC_STREET)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISPostedTran>()
                .Property(e => e.POS_DATA)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISPostedTran>()
                .Property(e => e.POS_ENTRY_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISPostedTran>()
                .Property(e => e.REASON_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISPostedTran>()
                .Property(e => e.REQUEST_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISPostedTran>()
                .Property(e => e.RESP_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISPostedTran>()
                .Property(e => e.RETRIEVAL_REFNO)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISPostedTran>()
                .Property(e => e.SOURCE_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISPostedTran>()
                .Property(e => e.TERM_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISPostedTran>()
                .Property(e => e.TXN_TYPE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISPostedTran>()
                .Property(e => e.USER_ID)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISPostedTran>()
                .Property(e => e.USER_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISPostedTran>()
                .Property(e => e.USER_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISPostedTran>()
                .Property(e => e.COMMENT)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISPostedTran>()
                .Property(e => e.CLIENT_REF_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISPostedTran>()
                .Property(e => e.CLIENT_SPECIFIC_ID)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISPostedTran>()
                .Property(e => e.ACTUAL_REQ_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISPostedTran>()
                .Property(e => e.CLIENT_UNIQUE_ID)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISPostedTran>()
                .Property(e => e.PAN_PROXY_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<PrepaidFISPostedTran>()
                .Property(e => e.TXN_UID)
                .IsUnicode(false);

            modelBuilder.Entity<PrescreenQuestion>()
                .Property(e => e.MAIN_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<PrescreenQuestion>()
                .Property(e => e.DETAIL_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<PrescreenQuestion>()
                .Property(e => e.VALIDATION_MESSAGE)
                .IsUnicode(false);

            modelBuilder.Entity<PrescreenQuestion>()
                .Property(e => e.QUESTION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<PrescreenQuestion>()
                .HasMany(e => e.PrescreenQuestionStates)
                .WithRequired(e => e.PrescreenQuestion)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<PrescreenQuestionState>()
                .Property(e => e.STATE_ABBREVIATION)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<PrescreenQuestionType>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<PrescreenQuestionType>()
                .HasMany(e => e.PrescreenQuestions)
                .WithRequired(e => e.PrescreenQuestionType)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PFEE1)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PTFEE1)
                .HasPrecision(5, 2);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PFEE2)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PTFEE2)
                .HasPrecision(5, 2);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PFEE3)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PTFEE3)
                .HasPrecision(5, 2);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PFEE4)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PTFEE4)
                .HasPrecision(5, 2);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PFEE5)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PTFEE5)
                .HasPrecision(5, 2);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PFEE6)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PTFEE6)
                .HasPrecision(5, 2);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PFEE7)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PTFEE7)
                .HasPrecision(5, 2);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PFEE8)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PTFEE8)
                .HasPrecision(5, 2);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PFEE9)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PTFEE9)
                .HasPrecision(5, 2);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PFEEA)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PTFEEA)
                .HasPrecision(5, 2);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PFEEB)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PTFEEB)
                .HasPrecision(5, 2);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PFEEC)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PTFEEC)
                .HasPrecision(5, 2);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PFEED)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PTFEED)
                .HasPrecision(5, 2);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PFEEE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PTFEEE)
                .HasPrecision(5, 2);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PFEEF)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PTFEEF)
                .HasPrecision(5, 2);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PFEEG)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PTFEEG)
                .HasPrecision(5, 2);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PFEEH)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PTFEEH)
                .HasPrecision(5, 2);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PFEEI)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PTFEEI)
                .HasPrecision(5, 2);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PFEEK)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PTFEEK)
                .HasPrecision(5, 2);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PFEEL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PTFEEL)
                .HasPrecision(5, 2);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PFEEJ)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PTFEEJ)
                .HasPrecision(5, 2);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PFEEM)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PTFEEM)
                .HasPrecision(5, 2);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PFEEN)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PTFEEN)
                .HasPrecision(5, 2);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PFEEO)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PTFEEO)
                .HasPrecision(5, 2);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PFEEP)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PTFEEP)
                .HasPrecision(5, 2);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PFEEQ)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PTFEEQ)
                .HasPrecision(5, 2);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PFEER)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PTFEER)
                .HasPrecision(5, 2);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PFEES)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PTFEES)
                .HasPrecision(5, 2);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PFEET)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PTFEET)
                .HasPrecision(5, 2);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PFEEU)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PTFEEU)
                .HasPrecision(5, 2);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PFEEV)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PTFEEV)
                .HasPrecision(5, 2);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PFEEW)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PTFEEW)
                .HasPrecision(5, 2);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PFEEX)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.PTFEEX)
                .HasPrecision(5, 2);

            modelBuilder.Entity<PRICE>()
                .Property(e => e.location)
                .HasPrecision(18, 0);

            modelBuilder.Entity<ProcessConfig>()
                .Property(e => e.PROCESS_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<ProcessConfig>()
                .Property(e => e.PROCESS_COMMAND)
                .IsUnicode(false);

            modelBuilder.Entity<ProcessConfig>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ProcessConfig>()
                .Property(e => e.UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ProcessConfig>()
                .HasMany(e => e.ProcessConfigInstances)
                .WithRequired(e => e.ProcessConfig)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ProcessConfigDetail>()
                .Property(e => e.CONFIG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<ProcessConfigDetail>()
                .Property(e => e.CONFIG_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<ProcessConfigDetailHistory>()
                .Property(e => e.CONFIG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<ProcessConfigDetailHistory>()
                .Property(e => e.CONFIG_OLD_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<ProcessConfigDetailHistory>()
                .Property(e => e.CONFIG_NEW_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<ProcessConfigInstance>()
                .Property(e => e.INSTANCE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<ProcessConfigInstance>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ProcessConfigInstance>()
                .Property(e => e.UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ProcessConfigInstance>()
                .HasMany(e => e.ProcessConfigDetails)
                .WithRequired(e => e.ProcessConfigInstance)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ProcessConfigInstance>()
                .HasMany(e => e.ProcessConfigDetailHistories)
                .WithRequired(e => e.ProcessConfigInstance)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ProcessConfigInstance>()
                .HasMany(e => e.ProcessSchedules)
                .WithRequired(e => e.ProcessConfigInstance)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ProcessConfigInstance>()
                .HasMany(e => e.ProcessConfigInstanceGroups)
                .WithRequired(e => e.ProcessConfigInstance)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ProcessConfigInstance>()
                .HasMany(e => e.ProcessConfigInstanceTellers)
                .WithRequired(e => e.ProcessConfigInstance)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ProcessConfigInstanceTeller>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ProcessSchedule>()
                .Property(e => e.JOB_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<ProcessSchedule>()
                .Property(e => e.TIME_ZONE)
                .IsUnicode(false);

            modelBuilder.Entity<PromiseToPay>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<PromiseToPay>()
                .Property(e => e.PTP_COURTESY_CALL)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<PromiseToPay>()
                .Property(e => e.APPROVED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<PromiseToPay>()
                .Property(e => e.CANCELLED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<PromiseToPay>()
                .HasMany(e => e.PromiseToPayDetails)
                .WithRequired(e => e.PromiseToPay)
                .HasForeignKey(e => e.PTP_PROMISE_KEY)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<PromiseToPayDetail>()
                .Property(e => e.PTP_DUE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PromiseToPayDetail>()
                .Property(e => e.PTP_STATUS)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<PromiseToPayDetail>()
                .Property(e => e.PTP_CC_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<PromiseToPayDetail>()
                .Property(e => e.PTP_CC_NAME_ON_CARD)
                .IsUnicode(false);

            modelBuilder.Entity<PromiseToPayDetail>()
                .Property(e => e.PTP_CC_CCV)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<PromiseToPayDetail>()
                .Property(e => e.PTP_BANK_ID)
                .IsUnicode(false);

            modelBuilder.Entity<PromiseToPayDetail>()
                .Property(e => e.PTP_ACCT_NO)
                .IsUnicode(false);

            modelBuilder.Entity<PromiseToPayDetail>()
                .Property(e => e.PTP_NAME_ON_ACCOUNT)
                .IsUnicode(false);

            modelBuilder.Entity<PromiseToPayDetail>()
                .Property(e => e.PTP_PAID_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PromiseToPayDetail>()
                .Property(e => e.PTP_CC_BILLING_CITY)
                .IsUnicode(false);

            modelBuilder.Entity<PromiseToPayDetail>()
                .Property(e => e.PTP_CC_BILLING_STATE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<PromiseToPayDetail>()
                .Property(e => e.PTP_CC_BILLING_ZIPCODE)
                .IsUnicode(false);

            modelBuilder.Entity<PromiseToPayDetail>()
                .Property(e => e.PTP_CC_BILLING_ADDRESS1)
                .IsUnicode(false);

            modelBuilder.Entity<PromiseToPayDetail>()
                .Property(e => e.PTP_CC_BILLING_COUNTY)
                .IsUnicode(false);

            modelBuilder.Entity<PromiseToPayDetail>()
                .Property(e => e.PTP_CC_BILLING_COUNTRY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<PromiseToPayDetail>()
                .Property(e => e.PTP_TOKEN)
                .IsUnicode(false);

            modelBuilder.Entity<PromiseToPayDetail>()
                .Property(e => e.ADDRESS_FORMAT)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<PromiseToPayDetail>()
                .Property(e => e.PTP_CC_BILLING_ADDR_STREET)
                .IsUnicode(false);

            modelBuilder.Entity<PromiseToPayDetail>()
                .Property(e => e.PTP_CC_BILLING_FLAT_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<PromiseToPayDetail>()
                .Property(e => e.PTP_CC_BILLING_BUILDING_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<PromiseToPayDetail>()
                .Property(e => e.PTP_CC_BILLING_BUILDING_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<PromiseToPayDetail>()
                .Property(e => e.PTP_CC_BILLING_ADDRESS_LINE)
                .IsUnicode(false);

            modelBuilder.Entity<PromiseToPayDetail>()
                .Property(e => e.PTP_CC_BILLING_ADDRESS_CSZ)
                .IsUnicode(false);

            modelBuilder.Entity<PromiseToPayDetail>()
                .Property(e => e.PTP_CC_BILLING_ADDRESS_LINE_3)
                .IsUnicode(false);

            modelBuilder.Entity<PromiseToPayDetail>()
                .Property(e => e.PTP_CC_BILLING_ADDRESS_LINE_1)
                .IsUnicode(false);

            modelBuilder.Entity<PromiseToPayDetail>()
                .Property(e => e.PTP_CC_BILLING_ADDRESS_LINE_2)
                .IsUnicode(false);

            modelBuilder.Entity<PromiseToPayDetail>()
                .HasMany(e => e.FormLetterPrinteds)
                .WithOptional(e => e.PromiseToPayDetail)
                .HasForeignKey(e => e.PROMISE_TO_PAY_DETAIL_KEY);

            modelBuilder.Entity<PromiseToPayDetail>()
                .HasMany(e => e.PromiseToPayDetailTrans)
                .WithRequired(e => e.PromiseToPayDetail)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<PromiseToPayDetailEdit>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<PromiseToPayDetailEdit>()
                .Property(e => e.DML_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<PromiseToPayDetailEdit>()
                .Property(e => e.FIELD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<PromiseToPayDetailEdit>()
                .Property(e => e.OLD_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<PromiseToPayDetailEdit>()
                .Property(e => e.NEW_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<PromiseToPayDetailTran>()
                .Property(e => e.PTP_AMOUNT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PromiseToPayTimeSlotConfig>()
                .Property(e => e.PTP_TIMESLOT_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<PurchaseService>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<PurchaseService>()
                .Property(e => e.TOT_COST)
                .HasPrecision(10, 4);

            modelBuilder.Entity<PurchaseService>()
                .Property(e => e.OPTPLUS_CARD_FIRST)
                .IsUnicode(false);

            modelBuilder.Entity<PurchaseService>()
                .Property(e => e.OPTPLUS_CARD_LAST)
                .IsUnicode(false);

            modelBuilder.Entity<PushNotification>()
                .Property(e => e.ARGUMENTS)
                .IsUnicode(false);

            modelBuilder.Entity<RbcEFundBatch>()
                .Property(e => e.DETAIL_VALUE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<RbcEFundBatch>()
                .Property(e => e.SEND_FILE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<RbcEFundBatch>()
                .HasMany(e => e.RbcEFundBatchDetails)
                .WithRequired(e => e.RbcEFundBatch)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<RbcEFundBatch>()
                .HasMany(e => e.RbcEFundBatchSummaries)
                .WithRequired(e => e.RbcEFundBatch)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<RbcEFundBatchDetail>()
                .Property(e => e.ACCT_NO)
                .IsUnicode(false);

            modelBuilder.Entity<RbcEFundBatchDetail>()
                .Property(e => e.EMAIL)
                .IsUnicode(false);

            modelBuilder.Entity<RbcEFundBatchDetail>()
                .Property(e => e.AMOUNT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<RbcEFundBatchDetail>()
                .Property(e => e.RESPONSE_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<RbcEFundBatchSummary>()
                .Property(e => e.SUCCESS_AMOUNT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<RbcEFundBatchSummary>()
                .Property(e => e.UNSUCCESS_AMOUNT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<RbcEFundResponseCode>()
                .Property(e => e.RBC_CODE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<RbcEFundResponseCode>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<RbcEFundResponseCode>()
                .Property(e => e.COMMENTS)
                .IsUnicode(false);

            modelBuilder.Entity<RbcEFundResponseCode>()
                .HasMany(e => e.RbcEFundBatchDetails)
                .WithRequired(e => e.RbcEFundResponseCode)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ReasonForArrear>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<Receipt>()
                .Property(e => e.RECEIPT_DATA)
                .IsUnicode(false);

            modelBuilder.Entity<RedactedWord>()
                .Property(e => e.WORD)
                .IsUnicode(false);

            modelBuilder.Entity<ReferralMethod>()
                .Property(e => e.REFERRAL_CODE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ReferralMethod>()
                .Property(e => e.REFERRAL_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<ReferralMethod>()
                .HasMany(e => e.Customers)
                .WithRequired(e => e.ReferralMethod)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ReferralMethod>()
                .HasMany(e => e.LoanApplications)
                .WithRequired(e => e.ReferralMethod)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Region>()
                .Property(e => e.REGION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<Region>()
                .Property(e => e.REGION_MANAGER)
                .IsUnicode(false);

            modelBuilder.Entity<Region>()
                .HasMany(e => e.Districts)
                .WithRequired(e => e.Region)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<REL>()
                .Property(e => e.RelCode)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<REL>()
                .Property(e => e.RelDesc)
                .IsUnicode(false);

            modelBuilder.Entity<RemovedReason>()
                .Property(e => e.REASON)
                .IsUnicode(false);

            modelBuilder.Entity<RepoCaseHistory>()
                .Property(e => e.PREVIOUS_REPO_CASE_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<RepoCaseHistory>()
                .Property(e => e.UPDATED_REPO_CASE_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<RepoCaseHistory>()
                .Property(e => e.UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ReturnCheckDetail>()
                .Property(e => e.BANK_ID)
                .IsUnicode(false);

            modelBuilder.Entity<ReturnCheckDetail>()
                .Property(e => e.ACCT_NO)
                .IsUnicode(false);

            modelBuilder.Entity<ReturnCheckDetail>()
                .Property(e => e.CHARGEBACK_AMT)
                .HasPrecision(14, 2);

            modelBuilder.Entity<ReturnCheckDetail>()
                .Property(e => e.CUSTOMER_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<ReturnCheckDetail>()
                .Property(e => e.CUSTOMER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<ReturnCheckDetail>()
                .Property(e => e.PARSED_LOCATION)
                .IsUnicode(false);

            modelBuilder.Entity<ReturnCheckDetail>()
                .Property(e => e.SEQUENCE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<ReturnCheckDetail>()
                .Property(e => e.RETURN_REASON_CODE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ReturnCheckDetail>()
                .HasMany(e => e.ReturnCheckMatches)
                .WithRequired(e => e.ReturnCheckDetail)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ReturnCheckFile>()
                .HasMany(e => e.ReturnCheckDetails)
                .WithRequired(e => e.ReturnCheckFile)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<RIAgingHistory>()
                .Property(e => e.LOAN_PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<RIAgingHistory>()
                .Property(e => e.RI_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<RIAgingHistory>()
                .Property(e => e.MIN_PAYMENT_NEEDED)
                .HasPrecision(10, 4);

            modelBuilder.Entity<RIAgingHistory>()
                .Property(e => e.PAID_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<RIAgingHistory>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<RiBalanceHistory>()
                .Property(e => e.RI_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<RiccAutoRoll>()
                .Property(e => e.FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<RiccAutoRoll>()
                .Property(e => e.SURCHARGE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<RiccAutoRoll>()
                .Property(e => e.COLLECTED_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<RICCConfig>()
                .Property(e => e.AUDIT_CATEGORIES)
                .IsUnicode(false);

            modelBuilder.Entity<RICCConfig>()
                .Property(e => e.LOCATIONS)
                .IsUnicode(false);

            modelBuilder.Entity<RICCConfig>()
                .Property(e => e.BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<RiccHold>()
                .Property(e => e.REFERENCE)
                .IsUnicode(false);

            modelBuilder.Entity<RiccHold>()
                .Property(e => e.CARDNUM)
                .IsUnicode(false);

            modelBuilder.Entity<RiccHold>()
                .Property(e => e.NAMEONCARD)
                .IsUnicode(false);

            modelBuilder.Entity<RiccHold>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<RiccHold>()
                .Property(e => e.LOAN_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<RiccHold>()
                .Property(e => e.PRODUCT_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<RiccHold>()
                .Property(e => e.RI_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<RiccHold>()
                .Property(e => e.DEPOSIT_METHOD)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<RiccHold>()
                .Property(e => e.CVV)
                .IsUnicode(false);

            modelBuilder.Entity<RiccHold>()
                .Property(e => e.BILLING_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<RiccHold>()
                .Property(e => e.BILLING_CITY)
                .IsUnicode(false);

            modelBuilder.Entity<RiccHold>()
                .Property(e => e.BILLING_STATE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<RiccHold>()
                .Property(e => e.BILLING_ZIPCODE)
                .IsUnicode(false);

            modelBuilder.Entity<RiccHold>()
                .Property(e => e.TOKEN)
                .IsUnicode(false);

            modelBuilder.Entity<RiccHold>()
                .Property(e => e.FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<RiccHold>()
                .Property(e => e.SURCHG)
                .HasPrecision(10, 4);

            modelBuilder.Entity<RiccHold>()
                .Property(e => e.APP_ERR_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<RiccPayment>()
                .Property(e => e.AMOUNT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<RiccUpdate>()
                .Property(e => e.SQL)
                .IsUnicode(false);

            modelBuilder.Entity<RiccUpdate>()
                .Property(e => e.UPDATE_TABLE)
                .IsUnicode(false);

            modelBuilder.Entity<RIPTPPaymentPlanConfig>()
                .Property(e => e.PTP_PLAN_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<RIPTPPaymentPlanConfig>()
                .Property(e => e.PTP_PL_TYPES)
                .IsUnicode(false);

            modelBuilder.Entity<RIPTPPaymentPlanConfig>()
                .Property(e => e.PTP_LOCATIONS)
                .IsUnicode(false);

            modelBuilder.Entity<RIPTPPaymentPlanConfig>()
                .Property(e => e.PTP_PAYMENT_METHODS)
                .IsUnicode(false);

            modelBuilder.Entity<RIPTPPaymentPlanConfig>()
                .Property(e => e.SECURITY)
                .IsUnicode(false);

            modelBuilder.Entity<RIPTPPaymentPlanConfig>()
                .Property(e => e.BROKEN_PTP_FEE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<RIPTPPaymentPlanConfig>()
                .HasMany(e => e.PromiseToPays)
                .WithRequired(e => e.RIPTPPaymentPlanConfig)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<RI>()
                .Property(e => e.TLR)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<RI>()
                .Property(e => e.AMOUNT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<RI>()
                .Property(e => e.NOTES)
                .IsUnicode(false);

            modelBuilder.Entity<RI>()
                .Property(e => e.DOS_MIGRATED_ID)
                .IsUnicode(false);

            modelBuilder.Entity<RISAUDIT>()
                .Property(e => e.AUDIT)
                .IsUnicode(false);

            modelBuilder.Entity<RISAUDIT>()
                .Property(e => e.DESC)
                .IsUnicode(false);

            modelBuilder.Entity<RISAUDIT>()
                .Property(e => e.SHORT)
                .IsUnicode(false);

            modelBuilder.Entity<RISAUDIT>()
                .HasMany(e => e.FormLetters)
                .WithOptional(e => e.RISAUDIT)
                .HasForeignKey(e => e.SET_AUDIT_CODE_KEY);

            modelBuilder.Entity<RISAUDIT>()
                .HasMany(e => e.RIS)
                .WithRequired(e => e.RISAUDIT)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<RISAUDIT>()
                .HasMany(e => e.SkipTraceConfig_RisAudit)
                .WithOptional(e => e.RISAUDIT)
                .HasForeignKey(e => e.RIS_AUDIT_KEY);

            modelBuilder.Entity<RISAUDIT>()
                .HasMany(e => e.SkipTraceStep_AuditCategory)
                .WithOptional(e => e.RISAUDIT)
                .HasForeignKey(e => e.RIS_AUDIT_KEY);

            modelBuilder.Entity<RISREPT>()
                .Property(e => e.TLR)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<RISREPT>()
                .Property(e => e.AMOUNT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<RISREPT>()
                .Property(e => e.SURCHG)
                .HasPrecision(10, 4);

            modelBuilder.Entity<RISREPT>()
                .Property(e => e.MANUAL_TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<RISREPT>()
                .Property(e => e.RI_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<RISREPT>()
                .Property(e => e.DOS_MIGRATED_ID)
                .IsUnicode(false);

            modelBuilder.Entity<RISREPT>()
                .Property(e => e.MANUAL_ACH_AMOUNT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<RISREPT>()
                .Property(e => e.REFERENCE)
                .IsUnicode(false);

            modelBuilder.Entity<RISREPT>()
                .Property(e => e.CR_TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<RISREPT>()
                .HasMany(e => e.CollectionActions)
                .WithRequired(e => e.RISREPT)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<RISREPT>()
                .HasMany(e => e.CollectionMovements)
                .WithRequired(e => e.RISREPT)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<RISREPT>()
                .HasMany(e => e.OptPlusCardRIPayments)
                .WithRequired(e => e.RISREPT)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<RISREPT>()
                .HasMany(e => e.PromiseToPays)
                .WithRequired(e => e.RISREPT)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<RISREPT>()
                .HasMany(e => e.RepoCaseHistories)
                .WithRequired(e => e.RISREPT)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<RISREPT>()
                .HasMany(e => e.RIAgingHistories)
                .WithRequired(e => e.RISREPT)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<RISREPT>()
                .HasMany(e => e.RIS)
                .WithRequired(e => e.RISREPT)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<RisTask>()
                .Property(e => e.TASK)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<RisTask>()
                .Property(e => e.DESC)
                .IsUnicode(false);

            modelBuilder.Entity<RisTask>()
                .Property(e => e.SHORT)
                .IsUnicode(false);

            modelBuilder.Entity<RisTask>()
                .HasMany(e => e.RIS)
                .WithRequired(e => e.RisTask)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<RISTYPE>()
                .Property(e => e.TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<RISTYPE>()
                .Property(e => e.DESC)
                .IsUnicode(false);

            modelBuilder.Entity<RISTYPE>()
                .Property(e => e.SHORT)
                .IsUnicode(false);

            modelBuilder.Entity<RISTYPE>()
                .HasMany(e => e.RISREPTs)
                .WithRequired(e => e.RISTYPE)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<RiUrgentNote>()
                .Property(e => e.URGENT_NOTE_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<RolloverRequest>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<RolloverRequest>()
                .Property(e => e.UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<RolloverRequest>()
                .Property(e => e.DEFERRAL_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<RolloverRequestDeclineReason>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<RolloverRequestStatu>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<RolloverRequestStatu>()
                .HasMany(e => e.RolloverRequests)
                .WithRequired(e => e.RolloverRequestStatu)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<RuleDef>()
                .Property(e => e.NAME)
                .IsUnicode(false);

            modelBuilder.Entity<RuleDef>()
                .Property(e => e.DISPLAY_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<RuleDef>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<RuleDef>()
                .Property(e => e.CONTENT)
                .IsUnicode(false);

            modelBuilder.Entity<RuleDef>()
                .Property(e => e.DELETED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<RuleDef>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<RuleDef>()
                .Property(e => e.UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<RuleDef>()
                .HasMany(e => e.RuleDefEdits)
                .WithRequired(e => e.RuleDef)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<RuleDef>()
                .HasMany(e => e.RuleDefSetDetails)
                .WithRequired(e => e.RuleDef)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<RuleDefEdit>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<RuleDefEdit>()
                .Property(e => e.FIELD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<RuleDefEdit>()
                .Property(e => e.OLD_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<RuleDefEdit>()
                .Property(e => e.NEW_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<RuleDefSet>()
                .Property(e => e.NAME)
                .IsUnicode(false);

            modelBuilder.Entity<RuleDefSet>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<RuleDefSet>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<RuleDefSet>()
                .Property(e => e.UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<RuleDefSet>()
                .HasMany(e => e.LoanProductConfigs)
                .WithOptional(e => e.RuleDefSet)
                .HasForeignKey(e => e.DEPOSIT_METHOD_AUTO_PAY_CALC_ORDER_RULE_DEF_SET_KEY);

            modelBuilder.Entity<RuleDefSet>()
                .HasMany(e => e.RuleDefSetDetails)
                .WithRequired(e => e.RuleDefSet)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<RuleDefSet>()
                .HasMany(e => e.RuleDefSetDetailEdits)
                .WithRequired(e => e.RuleDefSet)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<RuleDefSetDetail>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<RuleDefSetDetailEdit>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<RuleDefSetDetailEdit>()
                .Property(e => e.ACTION_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<RuleDefSetDetailEdit>()
                .Property(e => e.FIELD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<RuleDefSetDetailEdit>()
                .Property(e => e.OLD_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<RuleDefSetDetailEdit>()
                .Property(e => e.NEW_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<RuleDefType>()
                .Property(e => e.NAME)
                .IsUnicode(false);

            modelBuilder.Entity<RuleDefType>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<RuleDefType>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<RuleDefType>()
                .Property(e => e.UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<RuleDefType>()
                .HasMany(e => e.RuleDefs)
                .WithRequired(e => e.RuleDefType)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<RuleDefType>()
                .HasMany(e => e.RuleDefSets)
                .WithRequired(e => e.RuleDefType)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ScannedDocument>()
                .HasMany(e => e.ScannedDocumentOverrides)
                .WithRequired(e => e.ScannedDocument)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ScannedDocumentOverride>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ScannedDocumentOverride>()
                .Property(e => e.CODE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<SDNAdd>()
                .Property(e => e.ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<SDNAdd>()
                .Property(e => e.CITY)
                .IsUnicode(false);

            modelBuilder.Entity<SDNAdd>()
                .Property(e => e.COUNTRY)
                .IsUnicode(false);

            modelBuilder.Entity<SDNAdd>()
                .Property(e => e.ADD_REMARKS)
                .IsUnicode(false);

            modelBuilder.Entity<SDNAlt>()
                .Property(e => e.ALT_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<SDNAlt>()
                .Property(e => e.ALT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<SDNAlt>()
                .Property(e => e.ALT_REMARKS)
                .IsUnicode(false);

            modelBuilder.Entity<SDNList>()
                .Property(e => e.Name)
                .IsUnicode(false);

            modelBuilder.Entity<SDNList>()
                .Property(e => e.Type)
                .IsUnicode(false);

            modelBuilder.Entity<SDNList>()
                .Property(e => e.State)
                .IsUnicode(false);

            modelBuilder.Entity<SDNMain>()
                .Property(e => e.SDN_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<SDNMain>()
                .Property(e => e.SDN_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<SDNMain>()
                .Property(e => e.PROGRAM)
                .IsUnicode(false);

            modelBuilder.Entity<SDNMain>()
                .Property(e => e.TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<SDNMain>()
                .Property(e => e.REMARKS)
                .IsUnicode(false);

            modelBuilder.Entity<SDNMain>()
                .HasMany(e => e.SDNAdds)
                .WithOptional(e => e.SDNMain)
                .WillCascadeOnDelete();

            modelBuilder.Entity<SDNMain>()
                .HasMany(e => e.SDNAlts)
                .WithOptional(e => e.SDNMain)
                .WillCascadeOnDelete();

            modelBuilder.Entity<SdnMatch>()
                .Property(e => e.SDN_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<SdnMatch>()
                .Property(e => e.SDN_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<SdnMatch>()
                .Property(e => e.SDN_PROGRAM)
                .IsUnicode(false);

            modelBuilder.Entity<SdnMatch>()
                .Property(e => e.SDN_TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<SdnMatch>()
                .Property(e => e.SDN_REMARKS)
                .IsUnicode(false);

            modelBuilder.Entity<SdnMatch>()
                .Property(e => e.ALT_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<SdnMatch>()
                .Property(e => e.ALT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<SdnMatch>()
                .Property(e => e.ADD_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<SdnMatch>()
                .Property(e => e.ADD_CITY)
                .IsUnicode(false);

            modelBuilder.Entity<SdnMatch>()
                .Property(e => e.ADD_COUNTRY)
                .IsUnicode(false);

            modelBuilder.Entity<SdnMatch>()
                .Property(e => e.ADD_REMARKS)
                .IsUnicode(false);

            modelBuilder.Entity<SdnMatch>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<SecurityAnswer>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<SecurityAnswer>()
                .Property(e => e.ANSWER)
                .IsUnicode(false);

            modelBuilder.Entity<SecurityGroup>()
                .Property(e => e.SG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<SecurityGroup>()
                .Property(e => e.SG_VALUES)
                .IsUnicode(false);

            modelBuilder.Entity<SecurityGroup>()
                .HasMany(e => e.DiscountSecurities)
                .WithRequired(e => e.SecurityGroup)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<SecurityGroup>()
                .HasMany(e => e.ProcessConfigInstanceGroups)
                .WithRequired(e => e.SecurityGroup)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<SecurityGroup>()
                .HasMany(e => e.TELLERIDs)
                .WithRequired(e => e.SecurityGroup)
                .HasForeignKey(e => e.SECURITYGROUP_KEY)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<SecurityGroup>()
                .HasMany(e => e.TELLERIDs1)
                .WithRequired(e => e.SecurityGroup1)
                .HasForeignKey(e => e.SECURITYGROUP_KEY)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<SecurityQuestion>()
                .Property(e => e.QUESTION)
                .IsUnicode(false);

            modelBuilder.Entity<SecurityQuestion>()
                .HasMany(e => e.SecurityAnswers)
                .WithRequired(e => e.SecurityQuestion)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ServiceDetail>()
                .Property(e => e.SERVICE_COST)
                .HasPrecision(10, 4);

            modelBuilder.Entity<ServiceDetail>()
                .Property(e => e.SERVICE_FEE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<ServiceDetail>()
                .Property(e => e.MAX_CHARGE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<ServiceDetail>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ServiceDetail>()
                .Property(e => e.UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ServiceDetail>()
                .Property(e => e.MIN_CHARGE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<ServiceDetail>()
                .HasMany(e => e.DrawerServices)
                .WithRequired(e => e.ServiceDetail)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ServiceDetail>()
                .HasMany(e => e.DrawerXServices)
                .WithRequired(e => e.ServiceDetail)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ServiceDetail>()
                .HasMany(e => e.DrawerZServices)
                .WithRequired(e => e.ServiceDetail)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ServiceDetail>()
                .HasMany(e => e.GiftCards)
                .WithRequired(e => e.ServiceDetail)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ServiceDetail>()
                .HasMany(e => e.LoanServices)
                .WithRequired(e => e.ServiceDetail)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ServiceDetail>()
                .HasMany(e => e.ServiceTrans)
                .WithRequired(e => e.ServiceDetail)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ServiceDetail>()
                .HasMany(e => e.TransDetailServices)
                .WithRequired(e => e.ServiceDetail)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ServiceDetail>()
                .HasMany(e => e.VaultCountServices)
                .WithRequired(e => e.ServiceDetail)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ServiceDetail>()
                .HasMany(e => e.VaultServices)
                .WithRequired(e => e.ServiceDetail)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ServiceMaster>()
                .Property(e => e.SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<ServiceMaster>()
                .Property(e => e.FUNCTION_AS)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ServiceMaster>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ServiceMaster>()
                .Property(e => e.UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ServiceMaster>()
                .HasMany(e => e.ServiceDetails)
                .WithRequired(e => e.ServiceMaster)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ServiceMaster>()
                .HasMany(e => e.ServiceSubItems)
                .WithRequired(e => e.ServiceMaster)
                .HasForeignKey(e => e.SERVICE_MASTER_KEY_REQUISITE)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ServiceMaster>()
                .HasMany(e => e.ServiceSubItems1)
                .WithRequired(e => e.ServiceMaster1)
                .HasForeignKey(e => e.SERVICE_MASTER_KEY_SUBITEM)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ServiceSubItem>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ServiceSubItem>()
                .Property(e => e.UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ServiceTran>()
                .Property(e => e.SERVICE_FEE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<ServiceTran>()
                .Property(e => e.SERVICE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<ServiceTran>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ServiceTran>()
                .Property(e => e.CALC_EXTEND)
                .HasPrecision(10, 4);

            modelBuilder.Entity<ServiceTran>()
                .HasMany(e => e.ServiceTransDetails)
                .WithRequired(e => e.ServiceTran)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ServiceTransDetail>()
                .Property(e => e.PERSON_RECEIVED)
                .IsUnicode(false);

            modelBuilder.Entity<ServiceTransDetail>()
                .Property(e => e.COUNTRY_TO)
                .IsUnicode(false);

            modelBuilder.Entity<ServiceTransDetail>()
                .Property(e => e.OCCUPATION)
                .IsUnicode(false);

            modelBuilder.Entity<ServiceTransDetail>()
                .Property(e => e.PURPOSE)
                .IsUnicode(false);

            modelBuilder.Entity<ServiceTransDetail>()
                .Property(e => e.BILLER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<ServiceTransDetail>()
                .Property(e => e.BILLPAY_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<ServiceTransDetail>()
                .Property(e => e.BILLPAY_ACCOUNT_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<ServiceTransDetail>()
                .Property(e => e.THIRD_PARTY_DETAILS)
                .IsUnicode(false);

            modelBuilder.Entity<ServiceTransDetail>()
                .Property(e => e.WIRE_TRANSFER_RECEIPT)
                .IsUnicode(false);

            modelBuilder.Entity<SG_RIGHTS>()
                .Property(e => e.RIGHT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<SG_RIGHTS>()
                .Property(e => e.PARENT_RIGHT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<SG_RIGHTS>()
                .Property(e => e.RIGHT_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<SG_RIGHTS>()
                .Property(e => e.GLOBAL_RIGHT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<SignatureLoanApproval>()
                .Property(e => e.GROSS_INCOME_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SignatureLoanApproval>()
                .Property(e => e.NET_INCOME_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SignatureLoanApproval>()
                .Property(e => e.OPEN_LOANS_PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SignatureLoanApproval>()
                .Property(e => e.APPROVAL_BASE_INCOME_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SignatureLoanApproval>()
                .Property(e => e.APPROVAL_SUCCESSFUL_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SignatureLoanApproval>()
                .Property(e => e.APPROVAL_BASE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SignatureLoanApproval>()
                .Property(e => e.MGR_OVERRIDE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SignatureLoanApproval>()
                .Property(e => e.MGR_OVERRIDE_INITS)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<SignatureLoanApproval>()
                .Property(e => e.PREV_PRINC_OVERRIDE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SignatureLoanApproval>()
                .Property(e => e.APPROVAL_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SkipTraceConfig>()
                .Property(e => e.BALANCE_RANGE_FROM)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SkipTraceConfig>()
                .Property(e => e.BALANCE_RANGE_TO)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SkipTraceConfig>()
                .HasOptional(e => e.SkipTraceConfig_RisAudit)
                .WithRequired(e => e.SkipTraceConfig);

            modelBuilder.Entity<SkipTraceConfig>()
                .HasMany(e => e.SkipTraceSteps)
                .WithRequired(e => e.SkipTraceConfig)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<SkipTraceConfig>()
                .HasMany(e => e.SkipTraceThreads)
                .WithRequired(e => e.SkipTraceConfig)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<SkipTraceConfig>()
                .HasMany(e => e.SkipTraceVendors)
                .WithRequired(e => e.SkipTraceConfig)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<SkipTraceEvents_NotUsed>()
                .Property(e => e.EVENT_CODE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<SkipTraceStep>()
                .Property(e => e.STEP_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<SkipTraceStep>()
                .Property(e => e.BALANCE_RANGE_FROM)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SkipTraceStep>()
                .Property(e => e.BALANCE_RANGE_TO)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SkipTraceStep>()
                .HasMany(e => e.SkipTraceStep_AuditCategory)
                .WithRequired(e => e.SkipTraceStep)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<SkipTraceStep>()
                .HasMany(e => e.SkipTraceStep_Location)
                .WithRequired(e => e.SkipTraceStep)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<SkipTraceStep>()
                .HasMany(e => e.SkipTraceStep_ProductCode)
                .WithRequired(e => e.SkipTraceStep)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<SkipTraceStep>()
                .HasMany(e => e.SkipTraceStep1)
                .WithOptional(e => e.SkipTraceStep2)
                .HasForeignKey(e => e.STEP_ACTIVE_ALIAS);

            modelBuilder.Entity<SkipTraceStep_ProductCode>()
                .Property(e => e.PRODUCT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<SkipTraceThread>()
                .Property(e => e.TRACE_STATUS)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<SkipTraceVendor>()
                .Property(e => e.VENDOR_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<SkipTraceVendor>()
                .Property(e => e.VENDOR_COST)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SkipTraceVendor>()
                .Property(e => e.VENDOR_LOGIN)
                .IsUnicode(false);

            modelBuilder.Entity<SkipTraceVendor>()
                .Property(e => e.VENDOR_PASSWORD)
                .IsUnicode(false);

            modelBuilder.Entity<SkipTraceVendor>()
                .Property(e => e.CRYPTO_KEY)
                .IsUnicode(false);

            modelBuilder.Entity<SkipTraceVendor>()
                .Property(e => e.TO_VENDOR_URI)
                .IsUnicode(false);

            modelBuilder.Entity<SkipTraceVendor>()
                .Property(e => e.FROM_VENDOR_URI)
                .IsUnicode(false);

            modelBuilder.Entity<SkipTraceVendor>()
                .Property(e => e.VENDOR_PATH)
                .IsUnicode(false);

            modelBuilder.Entity<SMSCommandMapping>()
                .Property(e => e.KEYWORD)
                .IsUnicode(false);

            modelBuilder.Entity<SMSCommandMapping>()
                .Property(e => e.COMMAND)
                .IsUnicode(false);

            modelBuilder.Entity<SMSFailedSend>()
                .Property(e => e.RESPONSE)
                .IsUnicode(false);

            modelBuilder.Entity<SMSFailedSend>()
                .Property(e => e.SENT_USING)
                .IsUnicode(false);

            modelBuilder.Entity<SMSInbound>()
                .Property(e => e.SMS_SOURCE)
                .IsUnicode(false);

            modelBuilder.Entity<SMSInbound>()
                .Property(e => e.CALLING_FROM_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<SMSInbound>()
                .Property(e => e.CALLING_TO_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<SMSInbound>()
                .Property(e => e.EMAIL_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<SMSInbound>()
                .Property(e => e.MESSAGE)
                .IsUnicode(false);

            modelBuilder.Entity<SMSOutbound>()
                .Property(e => e.MESSAGE)
                .IsUnicode(false);

            modelBuilder.Entity<SMSOutbound>()
                .Property(e => e.MOBILE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<SMSOxygenErrorCode>()
                .Property(e => e.ERROR)
                .IsUnicode(false);

            modelBuilder.Entity<SMSResponse>()
                .Property(e => e.RESPONSE)
                .IsUnicode(false);

            modelBuilder.Entity<SMSResponse>()
                .Property(e => e.SENT_USING)
                .IsUnicode(false);

            modelBuilder.Entity<SMSSender>()
                .Property(e => e.VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<SMSSender>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<SMSTemplate>()
                .Property(e => e.NAME)
                .IsUnicode(false);

            modelBuilder.Entity<SMSTemplate>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<SMSTemplate>()
                .Property(e => e.TEMPLATE)
                .IsUnicode(false);

            modelBuilder.Entity<SPayInterest>()
                .Property(e => e.PRINC_DUE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPayInterest>()
                .Property(e => e.INTEREST_ADDED)
                .HasPrecision(14, 10);

            modelBuilder.Entity<SPayInterest>()
                .Property(e => e.LOAN_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPayInterest>()
                .Property(e => e.LOAN_FEE_DUE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPayInterest>()
                .Property(e => e.CAB_INTEREST_ADDED)
                .HasPrecision(14, 10);

            modelBuilder.Entity<SPayLoan>()
                .Property(e => e.ANNUAL_RATE_PCT)
                .HasPrecision(6, 3);

            modelBuilder.Entity<SPayLoan>()
                .Property(e => e.INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPayLoan>()
                .Property(e => e.INTEREST_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPayLoan>()
                .Property(e => e.COLL_ANNUAL_RATE_PCT)
                .HasPrecision(6, 3);

            modelBuilder.Entity<SPayLoan>()
                .Property(e => e.TOT_INTEREST)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPayLoan>()
                .Property(e => e.COLL_FEE_DUE_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPayLoan>()
                .Property(e => e.LEGAL_FEE_DUE_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPayLoan>()
                .Property(e => e.LOAN_FEE_DUE_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPayLoan>()
                .Property(e => e.INTEREST_DUE_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPayLoan>()
                .Property(e => e.CAB_INTEREST_DUE_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPayLoan>()
                .Property(e => e.PRINC_DUE_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPayLoan>()
                .Property(e => e.DAILY_RATE_PCT)
                .HasPrecision(12, 10);

            modelBuilder.Entity<SPayLoan>()
                .Property(e => e.COLL_DAILY_RATE_PCT)
                .HasPrecision(12, 10);

            modelBuilder.Entity<SPayLoan>()
                .Property(e => e.CAB_ANNUAL_RATE_PCT)
                .HasPrecision(6, 3);

            modelBuilder.Entity<SPayLoan>()
                .Property(e => e.CAB_DAILY_RATE_PCT)
                .HasPrecision(12, 10);

            modelBuilder.Entity<SPayLoan>()
                .Property(e => e.TOT_CAB_INTEREST)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPayLoan>()
                .Property(e => e.CAB_LENDER_COLL_FEE_PAST_DUE_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPayLoan>()
                .Property(e => e.TOT_CAB_LENDER_COLL_FEE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPayLoan>()
                .Property(e => e.NSF_FEE_DUE_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPayLoan>()
                .Property(e => e.MIN_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPayLoan>()
                .Property(e => e.DAILY_INTEREST_AMT)
                .HasPrecision(27, 18);

            modelBuilder.Entity<SPayLoan>()
                .Property(e => e.TRANS_FEE_DUE_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPayLoan>()
                .Property(e => e.ROLLOVER_AMORT_PAYMENT_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPayLoanInSyncAdj>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<SPayLoanInSyncAdj>()
                .Property(e => e.LOAN_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPayLoanInSyncAdj>()
                .Property(e => e.PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPayLoanInSyncAdj>()
                .Property(e => e.CASH_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPayLoanInSyncAdj>()
                .Property(e => e.LOAN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPayLoanInSyncAdj>()
                .Property(e => e.LIEN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPayLoanInSyncAdj>()
                .Property(e => e.LOAN_STATUS)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<SPayLoanInSyncAdj>()
                .Property(e => e.LOAN_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPayLoanInSyncAdj>()
                .Property(e => e.RI_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPayLoanInSyncAdj>()
                .Property(e => e.PENDING_SCHED_ACH_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPayLoanInSyncAdj>()
                .Property(e => e.COLL_FEE_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPayLoanInSyncAdj>()
                .Property(e => e.LEGAL_FEE_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPayLoanInSyncAdj>()
                .Property(e => e.LOAN_FEE_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPayLoanInSyncAdj>()
                .Property(e => e.INTEREST_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPayLoanInSyncAdj>()
                .Property(e => e.PRINC_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPayLoanInSyncAdj>()
                .Property(e => e.TOTAL_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPayLoanInSyncAdj>()
                .Property(e => e.INVENTORY_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPayLoanInSyncAdj>()
                .Property(e => e.C_LOAN_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPayLoanInSyncAdj>()
                .Property(e => e.C_PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPayLoanInSyncAdj>()
                .Property(e => e.C_CASH_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPayLoanInSyncAdj>()
                .Property(e => e.C_LOAN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPayLoanInSyncAdj>()
                .Property(e => e.C_LIEN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPayLoanInSyncAdj>()
                .Property(e => e.C_LOAN_STATUS)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<SPayLoanInSyncAdj>()
                .Property(e => e.C_LOAN_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPayLoanInSyncAdj>()
                .Property(e => e.C_RI_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPayLoanInSyncAdj>()
                .Property(e => e.C_PENDING_SCHED_ACH_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPayLoanInSyncAdj>()
                .Property(e => e.C_COLL_FEE_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPayLoanInSyncAdj>()
                .Property(e => e.C_LEGAL_FEE_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPayLoanInSyncAdj>()
                .Property(e => e.C_LOAN_FEE_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPayLoanInSyncAdj>()
                .Property(e => e.C_INTEREST_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPayLoanInSyncAdj>()
                .Property(e => e.C_PRINC_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPayLoanInSyncAdj>()
                .Property(e => e.C_TOTAL_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPayLoanInSyncAdj>()
                .Property(e => e.C_INVENTORY_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPayLoanInSyncAdj>()
                .Property(e => e.CAB_INTEREST_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPayLoanInSyncAdj>()
                .Property(e => e.TOT_CAB_INTEREST)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPayLoanInSyncAdj>()
                .Property(e => e.C_CAB_INTEREST_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPayLoanInSyncAdj>()
                .Property(e => e.C_TOT_CAB_INTEREST)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPayLoanInSyncAdj>()
                .Property(e => e.CAB_LENDER_COLL_FEE_PAST_DUE_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPayLoanInSyncAdj>()
                .Property(e => e.C_CAB_LENDER_COLL_FEE_PAST_DUE_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPayLoanInSyncAdj>()
                .Property(e => e.NSF_FEE_DUE_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPayLoanInSyncAdj>()
                .Property(e => e.C_NSF_FEE_DUE_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPaySchedRollover>()
                .HasMany(e => e.SPaySchedRolloverDetails)
                .WithRequired(e => e.SPaySchedRollover)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<SPaySchedRolloverDetail>()
                .Property(e => e.OPT_BUYDOWN_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPaySchedRolloverDetail>()
                .Property(e => e.LOAN_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPaySchedRolloverDetail>()
                .Property(e => e.PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SPaySchedRolloverDetail>()
                .Property(e => e.LOAN_ATR)
                .HasPrecision(10, 4);

            modelBuilder.Entity<SpecialMessage>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<SpecialMessage>()
                .Property(e => e.MESSAGE_FILE)
                .IsUnicode(false);

            modelBuilder.Entity<SpecialMessage>()
                .Property(e => e.MESSAGE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<SpecialMessage>()
                .Property(e => e.PROCEDURE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<SpecialMessage>()
                .HasMany(e => e.SpecialMessageLoanProducts)
                .WithRequired(e => e.SpecialMessage)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Store_Windows>()
                .Property(e => e.Computer_Name)
                .IsUnicode(false);

            modelBuilder.Entity<Store_Windows>()
                .Property(e => e.Citrix_Name)
                .IsUnicode(false);

            modelBuilder.Entity<Store_Windows>()
                .Property(e => e.REPORT)
                .IsUnicode(false);

            modelBuilder.Entity<Store_Windows>()
                .Property(e => e.RECEIPT)
                .IsUnicode(false);

            modelBuilder.Entity<Store_Windows>()
                .Property(e => e.AGREEMENT)
                .IsUnicode(false);

            modelBuilder.Entity<Store_Windows>()
                .Property(e => e.DOTMATRIX)
                .IsUnicode(false);

            modelBuilder.Entity<Store_Windows>()
                .Property(e => e.WINDOWS_VERSION)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Store_Windows>()
                .Property(e => e.TELLER_KEYBOARD)
                .IsUnicode(false);

            modelBuilder.Entity<Store_Windows>()
                .Property(e => e.CUSTOMER_KEYBOARD)
                .IsUnicode(false);

            modelBuilder.Entity<Store_Windows>()
                .Property(e => e.MONEY_ORDER_COM_PORT)
                .IsUnicode(false);

            modelBuilder.Entity<StoreClosed>()
                .Property(e => e.COMMENT)
                .IsUnicode(false);

            modelBuilder.Entity<TaskActionResult>()
                .HasMany(e => e.TaskActionResultXrefs)
                .WithRequired(e => e.TaskActionResult)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<TaskActionResultXref>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<TaskActionResultXref>()
                .Property(e => e.UPDATE_TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<TaskActionResultXref>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<TaskActionResultXref>()
                .Property(e => e.CODE)
                .IsUnicode(false);

            modelBuilder.Entity<TellerComputer>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<TellerComputer>()
                .Property(e => e.COMPUTER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TELLERID>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<TELLERID>()
                .Property(e => e.PASSWORD)
                .IsUnicode(false);

            modelBuilder.Entity<TELLERID>()
                .Property(e => e.FIRSTNAME)
                .IsUnicode(false);

            modelBuilder.Entity<TELLERID>()
                .Property(e => e.LSTNAME)
                .IsUnicode(false);

            modelBuilder.Entity<TELLERID>()
                .Property(e => e.RSAPassword)
                .IsUnicode(false);

            modelBuilder.Entity<TELLERID>()
                .Property(e => e.SWIPE_ID)
                .IsUnicode(false);

            modelBuilder.Entity<TELLERID>()
                .Property(e => e.SSN)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<TELLERID>()
                .Property(e => e.ADP_ID)
                .IsUnicode(false);

            modelBuilder.Entity<TELLERID>()
                .Property(e => e.CERT_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<TELLERID>()
                .Property(e => e.LOCATION_LISTVIEW_COLUMNS)
                .IsUnicode(false);

            modelBuilder.Entity<TELLERID>()
                .Property(e => e.LOCATION_LISTVIEW_COLUMN_WIDTHS)
                .IsUnicode(false);

            modelBuilder.Entity<TELLERID>()
                .Property(e => e.LOCATION_LISTVIEW_SORT)
                .IsUnicode(false);

            modelBuilder.Entity<TELLERID>()
                .Property(e => e.SAM_ACCOUNT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TELLERID>()
                .HasMany(e => e.DocumentResources)
                .WithRequired(e => e.TELLERID)
                .HasForeignKey(e => e.CREATED_BY)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<TELLERID>()
                .HasMany(e => e.DocumentResources1)
                .WithRequired(e => e.TELLERID1)
                .HasForeignKey(e => e.UPDATED_BY)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<TELLERID>()
                .HasMany(e => e.ReasonForArrears)
                .WithRequired(e => e.TELLERID)
                .HasForeignKey(e => e.UPDATED_TELLER_ID_KEY)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<TELLERID>()
                .HasMany(e => e.RiUrgentNotes)
                .WithRequired(e => e.TELLERID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<TELLERID>()
                .HasMany(e => e.TellerSecurities)
                .WithRequired(e => e.TELLERID)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<TellerIDEdit>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<TellerIDEdit>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<TellerLogin>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<TellerLogin>()
                .Property(e => e.HOSTNAME)
                .IsUnicode(false);

            modelBuilder.Entity<TellerLogin>()
                .Property(e => e.SERVER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TellerParsedCashException>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<TellerParsedCashException>()
                .Property(e => e.TRANSACTION_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<TellerParsedCashException>()
                .Property(e => e.ENTERED_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<TellerPwdHistory>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<TellerPwdHistory>()
                .Property(e => e.PASSWORD)
                .IsUnicode(false);

            modelBuilder.Entity<TellerPwdHistory>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<TellerSecurity>()
                .Property(e => e.SG_VALUES)
                .IsUnicode(false);

            modelBuilder.Entity<TellerSecurity>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<TellerSecurity>()
                .Property(e => e.UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<TellerTitle>()
                .Property(e => e.TITLE)
                .IsUnicode(false);

            modelBuilder.Entity<TellerTitle>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<TellerTitle>()
                .HasMany(e => e.TellerTitleEdits)
                .WithRequired(e => e.TellerTitle)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<TellerTitleEdit>()
                .Property(e => e.MODIFICATION)
                .IsUnicode(false);

            modelBuilder.Entity<TellerTitleEdit>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<TellerType>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<TellerType>()
                .HasMany(e => e.TELLERIDs)
                .WithRequired(e => e.TellerType)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<TempLoanProductSplit>()
                .Property(e => e.ORIG_LOAN_PRODUCT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TempLoanProductSplit>()
                .Property(e => e.NEW_LOAN_PRODUCT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TempLoanProductSplit>()
                .Property(e => e.PRODUCT_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<TempLoanProductSplit>()
                .Property(e => e.LOAN_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<TestCreditCard>()
                .Property(e => e.CARD_NUMBER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<TestCreditCard>()
                .Property(e => e.GUARANTEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<TestCreditCard>()
                .Property(e => e.TOKEN)
                .IsUnicode(false);

            modelBuilder.Entity<TitleLoan>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<TitleLoan>()
                .Property(e => e.VEH_WHOLESALE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<TitleLoan>()
                .Property(e => e.VEH_CONDITION)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<TitleLoan>()
                .Property(e => e.VEH_PLATE)
                .IsUnicode(false);

            modelBuilder.Entity<TitleLoan>()
                .Property(e => e.VEH_STICKER)
                .IsUnicode(false);

            modelBuilder.Entity<TitleLoan>()
                .Property(e => e.VEH_REG_STATE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<TitleLoan>()
                .Property(e => e.VEH_TITLE_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<TitleLoan>()
                .Property(e => e.VEH_ODO_CODE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<TitleLoan>()
                .Property(e => e.LEGAL_STATUS)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<TitleLoan>()
                .Property(e => e.STATE_CUST_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<TitleLoan>()
                .Property(e => e.INS_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TitleLoan>()
                .Property(e => e.INS_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<TitleLoan>()
                .Property(e => e.INS_POLICY_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<TitleLoan>()
                .Property(e => e.AND_OR_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TitleLoan>()
                .Property(e => e.LIEN_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<TitleLoan>()
                .Property(e => e.LIEN_ACCT_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<TitleLoan>()
                .Property(e => e.VEH_VIN)
                .IsUnicode(false);

            modelBuilder.Entity<TitleLoan>()
                .Property(e => e.VEH_MAKE)
                .IsUnicode(false);

            modelBuilder.Entity<TitleLoan>()
                .Property(e => e.VEH_MODEL)
                .IsUnicode(false);

            modelBuilder.Entity<TitleLoan>()
                .Property(e => e.VEH_BODY)
                .IsUnicode(false);

            modelBuilder.Entity<TitleLoan>()
                .Property(e => e.VEH_ENGINE)
                .IsUnicode(false);

            modelBuilder.Entity<TitleLoan>()
                .Property(e => e.VEH_TRANS)
                .IsUnicode(false);

            modelBuilder.Entity<TitleLoan>()
                .Property(e => e.VEH_DRIVE)
                .IsUnicode(false);

            modelBuilder.Entity<TitleLoan>()
                .Property(e => e.VEH_MISC_EQUIP1)
                .IsUnicode(false);

            modelBuilder.Entity<TitleLoan>()
                .Property(e => e.VEH_MISC_EQUIP2)
                .IsUnicode(false);

            modelBuilder.Entity<TitleLoan>()
                .Property(e => e.VEH_MISC_EQUIP3)
                .IsUnicode(false);

            modelBuilder.Entity<TitleLoan>()
                .Property(e => e.LIST_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<TitleLoan>()
                .Property(e => e.VEH_COLOR)
                .IsUnicode(false);

            modelBuilder.Entity<TitleLoan>()
                .Property(e => e.FUEL_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<TitleLoan>()
                .Property(e => e.VEH_RETAIL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<TitleLoan>()
                .Property(e => e.VEH_KOV)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<TitleLoan>()
                .Property(e => e.GENDER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<TitleLoan>()
                .Property(e => e.VEH_ENGINE_SIZE)
                .IsUnicode(false);

            modelBuilder.Entity<TitleLoan>()
                .Property(e => e.VEH_ENGINE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<TitleLoan>()
                .Property(e => e.LENDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<TitleLoan>()
                .Property(e => e.LENDER_CERTIFICATE_ID)
                .IsUnicode(false);

            modelBuilder.Entity<TitleLoan>()
                .Property(e => e.AND_OR_FIRSTNAME)
                .IsUnicode(false);

            modelBuilder.Entity<TitleLoan>()
                .Property(e => e.AND_OR_MIDNAME)
                .IsUnicode(false);

            modelBuilder.Entity<TitleLoan>()
                .Property(e => e.AND_OR_LASTNAME)
                .IsUnicode(false);

            modelBuilder.Entity<TitleLoan>()
                .Property(e => e.REPO_CASE_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<TitleLoan>()
                .Property(e => e.REPO_AGENT_TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<TitleLoan>()
                .Property(e => e.TRANS_FEE_INCL_DOC_PREP_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<TitleLoan>()
                .HasMany(e => e.RepoCaseHistories)
                .WithRequired(e => e.TitleLoan)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<TitleLoan>()
                .HasMany(e => e.TitleLoanApprovals)
                .WithRequired(e => e.TitleLoan)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<TitleLoanApproval>()
                .Property(e => e.TLA_WHOLESALE_PCT)
                .HasPrecision(5, 2);

            modelBuilder.Entity<TitleLoanApproval>()
                .Property(e => e.TLA_CHK_ACCT_PCT)
                .HasPrecision(5, 2);

            modelBuilder.Entity<TitleLoanApproval>()
                .Property(e => e.TLA_CCARD_PCT)
                .HasPrecision(5, 2);

            modelBuilder.Entity<TitleLoanApproval>()
                .Property(e => e.TLA_EMP_SINCE_PCT)
                .HasPrecision(5, 2);

            modelBuilder.Entity<TitleLoanApproval>()
                .Property(e => e.TLA_BASE_PCT)
                .HasPrecision(5, 2);

            modelBuilder.Entity<TitleLoanApproval>()
                .Property(e => e.TLA_BASE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<TitleLoanApproval>()
                .Property(e => e.TLA_NET_INC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<TitleLoanApproval>()
                .Property(e => e.TLA_NET_INC_PCT)
                .HasPrecision(5, 2);

            modelBuilder.Entity<TitleLoanApproval>()
                .Property(e => e.TLA_WHOLE_MIN_PCT)
                .HasPrecision(5, 2);

            modelBuilder.Entity<TitleLoanApproval>()
                .Property(e => e.TLA_WHOLE_MIN_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<TitleLoanApproval>()
                .Property(e => e.TLA_MAX_LOAN_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<TitleLoanApproval>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<TitleLoanApproval>()
                .Property(e => e.TLA_2ND_LIEN_INCR_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<TitleLoanApproval>()
                .Property(e => e.APPROVAL_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<TitleLoanApproval>()
                .Property(e => e.MGR_OVERRIDE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<TitleLoanApproval>()
                .Property(e => e.MGR_OVERRIDE_INITS)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<TitleLoanApproval>()
                .Property(e => e.SCORE_AMOUNT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<TotalDailyFee>()
                .Property(e => e.STORE_FEES_PAYDAY)
                .HasPrecision(19, 4);

            modelBuilder.Entity<TotalDailyFee>()
                .Property(e => e.STORE_FEES_TITLE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<TotalDailyFee>()
                .Property(e => e.STORE_FEES_SIG)
                .HasPrecision(19, 4);

            modelBuilder.Entity<TotalDailyFee>()
                .Property(e => e.STORE_FEES_CASH_CHK)
                .HasPrecision(19, 4);

            modelBuilder.Entity<TotalDailyFee>()
                .Property(e => e.STORE_FEES_OTHER)
                .HasPrecision(19, 4);

            modelBuilder.Entity<TotalDailyFee>()
                .Property(e => e.INTERNET_FEES)
                .HasPrecision(19, 4);

            modelBuilder.Entity<TotalDailyFee>()
                .Property(e => e.STORE_FEES_TOTAL)
                .HasPrecision(19, 4);

            modelBuilder.Entity<TotalDailyFee>()
                .Property(e => e.ALL_FEES_TOTAL)
                .HasPrecision(19, 4);

            modelBuilder.Entity<TransDetail>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<TransDetail>()
                .Property(e => e.PRODUCT_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<TransDetail>()
                .Property(e => e.LOAN_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<TransDetail>()
                .HasMany(e => e.CashedChecks)
                .WithRequired(e => e.TransDetail)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<TransDetail>()
                .HasMany(e => e.CashedCheckPaymentRefunds)
                .WithRequired(e => e.TransDetail)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<TransDetail>()
                .HasMany(e => e.CourtesyPayouts)
                .WithRequired(e => e.TransDetail)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<TransDetail>()
                .HasMany(e => e.CurrencyExchangeTrans)
                .WithRequired(e => e.TransDetail)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<TransDetail>()
                .HasMany(e => e.DCardChargeBackXRefs)
                .WithRequired(e => e.TransDetail)
                .HasForeignKey(e => e.REFUND_TRANS_DETAIL_KEY)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<TransDetail>()
                .HasMany(e => e.DCardChargeBackXRefs1)
                .WithRequired(e => e.TransDetail1)
                .HasForeignKey(e => e.REFUNDED_TRANS_DETAIL_KEY)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<TransDetail>()
                .HasMany(e => e.DepositBags)
                .WithOptional(e => e.TransDetail)
                .HasForeignKey(e => e.DB_REVERSE_TRANS_DETAIL_KEY);

            modelBuilder.Entity<TransDetail>()
                .HasMany(e => e.EarnedCreditTrans)
                .WithRequired(e => e.TransDetail)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<TransDetail>()
                .HasMany(e => e.Loans)
                .WithRequired(e => e.TransDetail)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<TransDetail>()
                .HasMany(e => e.LoanFundings)
                .WithOptional(e => e.TransDetail)
                .HasForeignKey(e => e.FUNDING_TRANS_DETAIL_KEY);

            modelBuilder.Entity<TransDetail>()
                .HasMany(e => e.LoanPayments)
                .WithRequired(e => e.TransDetail)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<TransDetail>()
                .HasMany(e => e.OverShorts)
                .WithRequired(e => e.TransDetail)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<TransDetail>()
                .HasMany(e => e.PayStubs)
                .WithOptional(e => e.TransDetail)
                .HasForeignKey(e => e.IMAGE_TRANSDETAIL_KEY);

            modelBuilder.Entity<TransDetail>()
                .HasMany(e => e.PromiseToPayDetailTrans)
                .WithRequired(e => e.TransDetail)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<TransDetail>()
                .HasMany(e => e.PurchaseServices)
                .WithRequired(e => e.TransDetail)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<TransDetail>()
                .HasMany(e => e.Receipts)
                .WithRequired(e => e.TransDetail)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<TransDetail>()
                .HasMany(e => e.ScannedDocuments)
                .WithRequired(e => e.TransDetail)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<TransDetail>()
                .HasMany(e => e.TransDetail1)
                .WithOptional(e => e.TransDetail2)
                .HasForeignKey(e => e.REVERSE_KEY);

            modelBuilder.Entity<TransDetail>()
                .HasMany(e => e.TransDetailAccts)
                .WithRequired(e => e.TransDetail)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<TransDetail>()
                .HasMany(e => e.TransDetailCashes)
                .WithRequired(e => e.TransDetail)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<TransDetail>()
                .HasMany(e => e.TransDetailChecks)
                .WithRequired(e => e.TransDetail)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<TransDetail>()
                .HasMany(e => e.TransDetailLoans)
                .WithRequired(e => e.TransDetail)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<TransDetail>()
                .HasMany(e => e.TransDetailServices)
                .WithRequired(e => e.TransDetail)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<TransDetail>()
                .HasMany(e => e.TransferFunds)
                .WithRequired(e => e.TransDetail)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<TransDetail>()
                .HasMany(e => e.VaultCounts)
                .WithRequired(e => e.TransDetail)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<TransDetail>()
                .HasMany(e => e.WebLoanCreditFrauds)
                .WithRequired(e => e.TransDetail)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<TransDetailAcct>()
                .Property(e => e.AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<TransDetailCash>()
                .Property(e => e.CASH_FROM)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<TransDetailCash>()
                .Property(e => e.CASH_TO)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<TransDetailCash>()
                .Property(e => e.CASH_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<TransDetailCash>()
                .Property(e => e.CCARD_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<TransDetailCashParsedCash>()
                .Property(e => e.AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<TransDetailCheck>()
                .Property(e => e.CHECK_FROM)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<TransDetailCheck>()
                .Property(e => e.CHECK_TO)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<TransDetailCheck>()
                .Property(e => e.CHECK_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<TransDetailCheck>()
                .Property(e => e.DEPOSIT_METHOD)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<TransDetailIntShort>()
                .Property(e => e.TD_DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<TransDetailIntShort>()
                .Property(e => e.SPELL_TRANS_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<TransDetailLoan>()
                .Property(e => e.LOAN_FROM)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<TransDetailLoan>()
                .Property(e => e.LOAN_TO)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<TransDetailLoan>()
                .Property(e => e.LOAN_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<TransDetailLoan>()
                .Property(e => e.LOAN_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<TransDetailLoan>()
                .Property(e => e.PRODUCT_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<TransDetailService>()
                .Property(e => e.SERVICE_FROM)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<TransDetailService>()
                .Property(e => e.SERVICE_TO)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<TransferFund>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<TransferFund>()
                .Property(e => e.FUNDS_FROM)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<TransferFund>()
                .Property(e => e.FUNDS_TO)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<TransferFund>()
                .Property(e => e.TOT_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<TransferFund>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<TransferFund>()
                .HasMany(e => e.TransferFundsInterStores)
                .WithRequired(e => e.TransferFund)
                .HasForeignKey(e => e.FROM_TRANSFER_FUNDS_KEY)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<TransferFund>()
                .HasMany(e => e.TransferFundsInterStores1)
                .WithOptional(e => e.TransferFund1)
                .HasForeignKey(e => e.TO_TRANSFER_FUNDS_KEY);

            modelBuilder.Entity<TransPOS>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<TransPOS>()
                .Property(e => e.CASH_RECV)
                .HasPrecision(10, 4);

            modelBuilder.Entity<TransPOS>()
                .Property(e => e.CASH_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<TransPOS>()
                .Property(e => e.CCARD_RECV)
                .HasPrecision(10, 4);

            modelBuilder.Entity<TransPOS>()
                .Property(e => e.CCARD_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<TransPOS>()
                .HasMany(e => e.CurrencyExchangeTrans)
                .WithRequired(e => e.TransPOS)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<TransUnionCode>()
                .Property(e => e.tuc_code)
                .IsUnicode(false);

            modelBuilder.Entity<TransUnionCode>()
                .Property(e => e.tuc_type)
                .IsUnicode(false);

            modelBuilder.Entity<TransUnionCode>()
                .Property(e => e.tuc_desc)
                .IsUnicode(false);

            modelBuilder.Entity<UDDReport>()
                .Property(e => e.REPORT_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<UDDReport>()
                .Property(e => e.FILE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<UDDReport>()
                .HasMany(e => e.UDDReportDetails)
                .WithRequired(e => e.UDDReport)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<UDDReportDetail>()
                .Property(e => e.RETURN_DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<UDDReportDetail>()
                .Property(e => e.RETURN_CODE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<UDDReportDetail>()
                .Property(e => e.TRANS_CODE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<UDDReportDetail>()
                .Property(e => e.REFERENCE)
                .IsUnicode(false);

            modelBuilder.Entity<UDDReportDetail>()
                .Property(e => e.CORE_REFERENCE)
                .IsUnicode(false);

            modelBuilder.Entity<UDDReportDetail>()
                .Property(e => e.AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<US_States>()
                .Property(e => e.State)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<US_States>()
                .Property(e => e.StateName)
                .IsUnicode(false);

            modelBuilder.Entity<US_States>()
                .HasMany(e => e.Companies)
                .WithRequired(e => e.US_States)
                .HasForeignKey(e => e.BUSINESS_STATE)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<US_States>()
                .HasMany(e => e.Customers)
                .WithRequired(e => e.US_States)
                .HasForeignKey(e => e.HOME_STATE)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<US_States>()
                .HasMany(e => e.Issuers)
                .WithRequired(e => e.US_States)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<US_Zipcodes>()
                .Property(e => e.ZIPCODE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<US_Zipcodes>()
                .Property(e => e.CITY)
                .IsUnicode(false);

            modelBuilder.Entity<US_Zipcodes>()
                .Property(e => e.STATE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<US_Zipcodes>()
                .Property(e => e.COUNTY)
                .IsUnicode(false);

            modelBuilder.Entity<US_Zipcodes>()
                .Property(e => e.MSA_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<US_Zipcodes>()
                .Property(e => e.ZIP_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<US_Zipcodes>()
                .Property(e => e.latitude)
                .HasPrecision(9, 6);

            modelBuilder.Entity<US_Zipcodes>()
                .Property(e => e.longitude)
                .HasPrecision(9, 6);

            modelBuilder.Entity<US_Zipcodes>()
                .HasMany(e => e.LocationUS_ZipcodesXRef)
                .WithRequired(e => e.US_Zipcodes)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<UtilRecalcLog>()
                .Property(e => e.RECALC_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<UtilRecalcLog>()
                .Property(e => e.USER_LOGIN)
                .IsUnicode(false);

            modelBuilder.Entity<UtilRecalcLogDetail>()
                .Property(e => e.TABLE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<UtilRecalcLogDetail>()
                .Property(e => e.FIELD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<UtilRecalcLogDetail>()
                .Property(e => e.OLD_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<UtilRecalcLogDetail>()
                .Property(e => e.NEW_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<VaultCount>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<VaultCount>()
                .Property(e => e.OS_REASON)
                .IsUnicode(false);

            modelBuilder.Entity<VaultCount>()
                .Property(e => e.CASHCHK_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<VaultCount>()
                .Property(e => e.COLLCHK_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<VaultCount>()
                .Property(e => e.CCARD_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<VaultCount>()
                .Property(e => e.OS_CATEGORY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<VaultCount>()
                .Property(e => e.SPAY_PAYDAY_CHECKS_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<VaultCount>()
                .Property(e => e.MPAY_PAYDAY_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<VaultCount>()
                .Property(e => e.OEND_PAYDAY_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<VaultCount>()
                .Property(e => e.SPAY_TITLE_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<VaultCount>()
                .Property(e => e.MPAY_TITLE_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<VaultCount>()
                .Property(e => e.OEND_TITLE_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<VaultCount>()
                .Property(e => e.SPAY_TITLE_2ND_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<VaultCount>()
                .Property(e => e.MPAY_TITLE_2ND_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<VaultCount>()
                .Property(e => e.OEND_TITLE_2ND_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<VaultCount>()
                .Property(e => e.SPAY_SIG_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<VaultCount>()
                .Property(e => e.MPAY_SIG_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<VaultCount>()
                .Property(e => e.OEND_SIG_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<VaultCount>()
                .Property(e => e.BAG_MIDDAY_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<VaultCount>()
                .Property(e => e.BAG_EODAY_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<VaultCount>()
                .Property(e => e.SPAY_PAYDAY_DEBIT_CARDS_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<VaultCount>()
                .Property(e => e.GOLD_DAILY_BAGS_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<VaultCount>()
                .HasMany(e => e.CardBatchSettles)
                .WithOptional(e => e.VaultCount)
                .HasForeignKey(e => e.EOD_VAULT_COUNT_KEY);

            modelBuilder.Entity<VaultCount>()
                .HasMany(e => e.VaultCountCalcParsedCashes)
                .WithRequired(e => e.VaultCount)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<VaultCount>()
                .HasMany(e => e.VaultCountEnteredParsedCashes)
                .WithRequired(e => e.VaultCount)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<VaultCount>()
                .HasMany(e => e.VaultCountServices)
                .WithRequired(e => e.VaultCount)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<VaultCountCalcParsedCash>()
                .Property(e => e.AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<VaultCountEnteredParsedCash>()
                .Property(e => e.AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<VaultMaster>()
                .Property(e => e.VAULT_MGR)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<VaultMaster>()
                .Property(e => e.VAULT_100)
                .HasPrecision(19, 4);

            modelBuilder.Entity<VaultMaster>()
                .Property(e => e.VAULT_50)
                .HasPrecision(19, 4);

            modelBuilder.Entity<VaultMaster>()
                .Property(e => e.VAULT_20)
                .HasPrecision(19, 4);

            modelBuilder.Entity<VaultMaster>()
                .Property(e => e.VAULT_10)
                .HasPrecision(19, 4);

            modelBuilder.Entity<VaultMaster>()
                .Property(e => e.VAULT_05)
                .HasPrecision(19, 4);

            modelBuilder.Entity<VaultMaster>()
                .Property(e => e.VAULT_01)
                .HasPrecision(19, 4);

            modelBuilder.Entity<VaultMaster>()
                .Property(e => e.VAULT_HLF)
                .HasPrecision(19, 4);

            modelBuilder.Entity<VaultMaster>()
                .Property(e => e.VAULT_QTR)
                .HasPrecision(19, 4);

            modelBuilder.Entity<VaultMaster>()
                .Property(e => e.VAULT_DIME)
                .HasPrecision(19, 4);

            modelBuilder.Entity<VaultMaster>()
                .Property(e => e.VAULT_NIC)
                .HasPrecision(19, 4);

            modelBuilder.Entity<VaultMaster>()
                .Property(e => e.VAULT_PEN)
                .HasPrecision(19, 4);

            modelBuilder.Entity<VaultMaster>()
                .Property(e => e.VAULT_MISC)
                .HasPrecision(19, 4);

            modelBuilder.Entity<VaultMaster>()
                .Property(e => e.VAULT_CASHCHK_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<VaultMaster>()
                .Property(e => e.VAULT_CCARD_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<VaultMaster>()
                .Property(e => e.VAULT_MPAY_PAYDAY_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<VaultMaster>()
                .Property(e => e.VAULT_OEND_PAYDAY_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<VaultMaster>()
                .Property(e => e.VAULT_SPAY_TITLE_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<VaultMaster>()
                .Property(e => e.VAULT_MPAY_TITLE_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<VaultMaster>()
                .Property(e => e.VAULT_OEND_TITLE_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<VaultMaster>()
                .Property(e => e.VAULT_SPAY_TITLE_2ND_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<VaultMaster>()
                .Property(e => e.VAULT_MPAY_TITLE_2ND_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<VaultMaster>()
                .Property(e => e.VAULT_OEND_TITLE_2ND_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<VaultMaster>()
                .Property(e => e.VAULT_SPAY_SIG_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<VaultMaster>()
                .Property(e => e.VAULT_MPAY_SIG_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<VaultMaster>()
                .Property(e => e.VAULT_OEND_SIG_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<VaultMaster>()
                .Property(e => e.VAULT_BAG_MIDDAY_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<VaultMaster>()
                .Property(e => e.VAULT_BAG_EODAY_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<VaultMaster>()
                .Property(e => e.VAULT_SPAY_PAYDAY_CHECKS_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<VaultMaster>()
                .Property(e => e.VAULT_SPAY_PAYDAY_DEBIT_CARDS_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<VaultMaster>()
                .Property(e => e.VAULT_GOLD_DAILY_BAGS_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<VaultMaster>()
                .Property(e => e.VAULT_2P)
                .HasPrecision(19, 4);

            modelBuilder.Entity<VaultMaster>()
                .Property(e => e.VAULT_20P)
                .HasPrecision(19, 4);

            modelBuilder.Entity<VaultMaster>()
                .Property(e => e.VAULT_02)
                .HasPrecision(19, 4);

            modelBuilder.Entity<VaultMaster>()
                .Property(e => e.Vault_Tot_Cash)
                .HasPrecision(19, 4);

            modelBuilder.Entity<VaultMaster>()
                .HasMany(e => e.VaultMasterParsedCashes)
                .WithRequired(e => e.VaultMaster)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<VaultMasterParsedCash>()
                .Property(e => e.AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<VaultMgrAssignment>()
                .Property(e => e.LOGGED_ON_INITS)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<VaultMgrAssignment>()
                .Property(e => e.CURRENT_VM_INITS)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<VaultMgrAssignment>()
                .Property(e => e.NEW_VM_INITS)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<VaultMgrAssignment>()
                .Property(e => e.OTHER_AUTH_INITS)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<VaultMgrAuthorization>()
                .Property(e => e.LOGGED_ON_INITS)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<VaultMgrAuthorization>()
                .Property(e => e.CURRENT_VM_INITS)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<VaultMgrAuthorization>()
                .Property(e => e.OTHER_AUTH_INITS)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<VaultMgrAuthorization>()
                .Property(e => e.TRANS_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<VaultMgrAuthorization>()
                .HasMany(e => e.VaultMgrAuthorizationNotes)
                .WithRequired(e => e.VaultMgrAuthorization)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<VaultMgrAuthorization>()
                .HasMany(e => e.VaultMgrAuthorizationDetails)
                .WithRequired(e => e.VaultMgrAuthorization)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<VaultMgrAuthorizationDetail>()
                .Property(e => e.ORIG_VALUE)
                .HasPrecision(18, 8);

            modelBuilder.Entity<VaultMgrAuthorizationDetail>()
                .Property(e => e.AUTH_VALUE)
                .HasPrecision(18, 8);

            modelBuilder.Entity<VaultMgrAuthorizationDetail>()
                .Property(e => e.MESSAGE_DATA)
                .IsUnicode(false);

            modelBuilder.Entity<VaultMgrAuthorizationNote>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<VaultRecalcAdj>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<VaultRecalcAdj>()
                .Property(e => e.FIELD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<VaultRecalcAdj>()
                .Property(e => e.VAULT_AMT)
                .HasPrecision(10, 2);

            modelBuilder.Entity<VaultRecalcAdj>()
                .Property(e => e.CALC_AMT)
                .HasPrecision(10, 2);

            modelBuilder.Entity<VaultRecalcAdj>()
                .Property(e => e.AMT_DIFF)
                .HasPrecision(11, 2);

            modelBuilder.Entity<Vehicle>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Vehicle>()
                .Property(e => e.VEH_VIN)
                .IsUnicode(false);

            modelBuilder.Entity<Vehicle>()
                .Property(e => e.VEH_MAKE)
                .IsUnicode(false);

            modelBuilder.Entity<Vehicle>()
                .Property(e => e.VEH_MODEL)
                .IsUnicode(false);

            modelBuilder.Entity<Vehicle>()
                .Property(e => e.VEH_BODY)
                .IsUnicode(false);

            modelBuilder.Entity<Vehicle>()
                .Property(e => e.VEH_ENGINE)
                .IsUnicode(false);

            modelBuilder.Entity<Vehicle>()
                .Property(e => e.VEH_TRANS)
                .IsUnicode(false);

            modelBuilder.Entity<Vehicle>()
                .Property(e => e.VEH_DRIVE)
                .IsUnicode(false);

            modelBuilder.Entity<Vehicle>()
                .Property(e => e.VEH_MISC_EQUIP1)
                .IsUnicode(false);

            modelBuilder.Entity<Vehicle>()
                .Property(e => e.VEH_MISC_EQUIP2)
                .IsUnicode(false);

            modelBuilder.Entity<Vehicle>()
                .Property(e => e.VEH_MISC_EQUIP3)
                .IsUnicode(false);

            modelBuilder.Entity<Vehicle>()
                .Property(e => e.LIST_PRICE)
                .HasPrecision(19, 4);

            modelBuilder.Entity<Vehicle>()
                .Property(e => e.VEH_COLOR)
                .IsUnicode(false);

            modelBuilder.Entity<Vehicle>()
                .Property(e => e.FUEL_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Vehicle>()
                .Property(e => e.PLATE)
                .IsUnicode(false);

            modelBuilder.Entity<Vehicle>()
                .HasMany(e => e.TitleLoans)
                .WithRequired(e => e.Vehicle)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Vehicle>()
                .HasMany(e => e.VehicleHistories)
                .WithRequired(e => e.Vehicle)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<VehicleHistory>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<VehicleHistory>()
                .Property(e => e.VEH_WHOLESALE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<VehicleHistory>()
                .Property(e => e.VEH_CONDITION)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<VehicleHistory>()
                .Property(e => e.VEH_VER_EST)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<VehicleQuote>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<VehicleQuote>()
                .Property(e => e.VIN)
                .IsUnicode(false);

            modelBuilder.Entity<VehicleQuote>()
                .Property(e => e.MILEAGE_VALUE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<VehicleQuote>()
                .Property(e => e.RETAIL_PRICE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<VehicleQuote>()
                .Property(e => e.WHOLESALE_PRICE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<VehicleQuote>()
                .Property(e => e.PLATE)
                .IsUnicode(false);

            modelBuilder.Entity<VeritecLoanID>()
                .Property(e => e.TRANS_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<Visitor>()
                .Property(e => e.EMAIL_ADDR)
                .IsUnicode(false);

            modelBuilder.Entity<Visitor>()
                .Property(e => e.PASSWORD)
                .IsUnicode(false);

            modelBuilder.Entity<Visitor>()
                .Property(e => e.V_STATUS_ID)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Visitor>()
                .Property(e => e.SECURITY_ANSWER)
                .IsUnicode(false);

            modelBuilder.Entity<Visitor>()
                .Property(e => e.EMAIL_DELETED_BY)
                .IsUnicode(false);

            modelBuilder.Entity<Visitor>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Visitor>()
                .Property(e => e.ACCESS_ID)
                .IsUnicode(false);

            modelBuilder.Entity<Visitor>()
                .Property(e => e.ACCESS_PASSWORD)
                .IsUnicode(false);

            modelBuilder.Entity<Visitor>()
                .Property(e => e.SALT)
                .IsUnicode(false);

            modelBuilder.Entity<Visitor>()
                .HasMany(e => e.Customers)
                .WithRequired(e => e.Visitor)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Visitor>()
                .HasMany(e => e.LoanApplicationExpenses)
                .WithRequired(e => e.Visitor)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Visitor>()
                .HasMany(e => e.OOWSessions)
                .WithRequired(e => e.Visitor)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Visitor>()
                .HasMany(e => e.OptInOuts)
                .WithRequired(e => e.Visitor)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Visitor>()
                .HasMany(e => e.PayStubs)
                .WithRequired(e => e.Visitor)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Visitor>()
                .HasMany(e => e.VisitorApiAuthorizations)
                .WithRequired(e => e.Visitor)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Visitor>()
                .HasMany(e => e.VisitorDevices)
                .WithRequired(e => e.Visitor)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Visitor>()
                .HasMany(e => e.VisitorEmails)
                .WithRequired(e => e.Visitor)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Visitor>()
                .HasMany(e => e.VisitorHistories)
                .WithRequired(e => e.Visitor)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Visitor>()
                .HasMany(e => e.WebCallAuthorizedVisitorContacts)
                .WithRequired(e => e.Visitor)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Visitor>()
                .HasMany(e => e.WebCallQueues)
                .WithOptional(e => e.Visitor)
                .HasForeignKey(e => e.WEB_CALL_VISITOR_KEY);

            modelBuilder.Entity<Visitor>()
                .HasMany(e => e.WebCallWorkQueues)
                .WithOptional(e => e.Visitor)
                .HasForeignKey(e => e.WEB_CALL_VISITOR_KEY);

            modelBuilder.Entity<Visitor>()
                .HasMany(e => e.ZeroDollarAuths)
                .WithRequired(e => e.Visitor)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<VisitorApiAuthorization>()
                .Property(e => e.PIN)
                .IsUnicode(false);

            modelBuilder.Entity<VisitorDevice>()
                .Property(e => e.UUID)
                .IsUnicode(false);

            modelBuilder.Entity<VisitorDevice>()
                .Property(e => e.SUBSCRIPTION_TOKEN)
                .IsUnicode(false);

            modelBuilder.Entity<VisitorDevice>()
                .Property(e => e.NAME)
                .IsUnicode(false);

            modelBuilder.Entity<VisitorDevice>()
                .Property(e => e.APPLICATION_VERSION)
                .IsUnicode(false);

            modelBuilder.Entity<VisitorDevice>()
                .HasMany(e => e.PushNotifications)
                .WithRequired(e => e.VisitorDevice)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<VisitorEdit>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<VisitorEdit>()
                .Property(e => e.FIELD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<VisitorEdit>()
                .Property(e => e.OLD_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<VisitorEdit>()
                .Property(e => e.NEW_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<VisitorEmail>()
                .Property(e => e.EMAIL_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<VisitorEmail>()
                .Property(e => e.EMAIL_SUBJECT)
                .IsUnicode(false);

            modelBuilder.Entity<VisitorEmail>()
                .Property(e => e.EMAIL_BODY)
                .IsUnicode(false);

            modelBuilder.Entity<VisitorEmail>()
                .Property(e => e.EMAIL_ORIGINATION)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<VisitorEmail>()
                .Property(e => e.EMAIL_FROM_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<VisitorEmail>()
                .HasMany(e => e.VisitorEmailDispositions)
                .WithRequired(e => e.VisitorEmail)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<VisitorEmail>()
                .HasMany(e => e.WebBlobVisitorEmailXrefs)
                .WithRequired(e => e.VisitorEmail)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<VisitorEmailDisposition>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<VisitorEmailExcludedSender>()
                .Property(e => e.EMAIL_USER)
                .IsUnicode(false);

            modelBuilder.Entity<VisitorEmailExcludedSender>()
                .Property(e => e.EMAIL_DOMAIN)
                .IsUnicode(false);

            modelBuilder.Entity<VisitorEmailExcludedSender>()
                .Property(e => e.TELLER)
                .IsUnicode(false);

            modelBuilder.Entity<VisitorHistory>()
                .Property(e => e.IP_ADDRESS)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<VisitorHistory>()
                .Property(e => e.PAGE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<VisitorHistory>()
                .Property(e => e.METHOD_CALL)
                .IsUnicode(false);

            modelBuilder.Entity<VisitorHistory>()
                .Property(e => e.SESSION_GUID)
                .IsUnicode(false);

            modelBuilder.Entity<VisitorSecurityQuestion>()
                .Property(e => e.QUESTION)
                .IsUnicode(false);

            modelBuilder.Entity<VMATransType>()
                .Property(e => e.VMA_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<VMATransType>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<VMATransType>()
                .HasMany(e => e.VaultMgrAuthorizations)
                .WithRequired(e => e.VMATransType)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<WebArchive>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<WebArchive>()
                .Property(e => e.PATH)
                .IsUnicode(false);

            modelBuilder.Entity<WebArchive>()
                .HasMany(e => e.WebCallRecordingArchives)
                .WithRequired(e => e.WebArchive)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<WebBlob>()
                .HasMany(e => e.WebBlobLoanApplicationXrefs)
                .WithRequired(e => e.WebBlob)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<WebBlob>()
                .HasMany(e => e.WebBlobLoanXrefs)
                .WithRequired(e => e.WebBlob)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<WebBlob>()
                .HasMany(e => e.WebBlobVisitorEmailXrefs)
                .WithRequired(e => e.WebBlob)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<WebBlobLoanApplicationXref>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<WebBlobLoanApplicationXref>()
                .Property(e => e.SOURCE_URL)
                .IsUnicode(false);

            modelBuilder.Entity<WebBlobLoanXref>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<WebBlobType>()
                .Property(e => e.TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<WebBlobType>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<WebBlobType>()
                .HasMany(e => e.WebBlobs)
                .WithRequired(e => e.WebBlobType)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<WebBlobVisitorEmailXref>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<WebBlobVisitorEmailXref>()
                .Property(e => e.ATTACHMENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallApplicationModeAudit>()
                .Property(e => e.User)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallApplicationMode>()
                .Property(e => e.Name)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallApplicationMode>()
                .HasMany(e => e.WebCallApplicationModeAudits)
                .WithRequired(e => e.WebCallApplicationMode)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<WebCallAuthorizedVisitorContact>()
                .Property(e => e.First_Name)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallAuthorizedVisitorContact>()
                .Property(e => e.Last_Name)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallAuthorizedVisitorContact>()
                .Property(e => e.Relationship)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<WebCallBatchTask>()
                .Property(e => e.TaskName)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallBatchTask>()
                .Property(e => e.Created_By)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallBatchTask>()
                .HasMany(e => e.WebCallBatchActions)
                .WithRequired(e => e.WebCallBatchTask)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<WebCallBatchTask>()
                .HasMany(e => e.WebCallBatchCriterias)
                .WithRequired(e => e.WebCallBatchTask)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<WebCallBatchTaskExecutionHistory>()
                .Property(e => e.CriteriaText)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallBatchTaskExecutionHistory>()
                .Property(e => e.ActionText)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallBatchTaskExecutionHistory>()
                .Property(e => e.TargetWorkItemIDs)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallBatchTaskExecutionHistory>()
                .Property(e => e.RunBy)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallCampaign>()
                .Property(e => e.NAME)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallCampaign>()
                .HasMany(e => e.WebCallCampaignCategories)
                .WithRequired(e => e.WebCallCampaign)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<WebCallCategory>()
                .Property(e => e.CATEGORY)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallCategory>()
                .HasMany(e => e.WebCallCampaignCategories)
                .WithRequired(e => e.WebCallCategory)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<WebCallCategory>()
                .HasMany(e => e.WebCallWorkItemCategoryHistories)
                .WithRequired(e => e.WebCallCategory)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<WebCallCategory>()
                .HasMany(e => e.WebCallRARRCategoryReasons)
                .WithRequired(e => e.WebCallCategory)
                .HasForeignKey(e => e.WEB_CALL_CATEGORY_REASON_KEY)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<WebCallCatRarrAlia>()
                .Property(e => e.Alias_Name)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallCCTimerLog>()
                .Property(e => e.CALLED_METHOD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallCCTimerLog>()
                .Property(e => e.CALLED_FROM_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallCCTimerLog>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<WebCallCCTimerLog>()
                .Property(e => e.TIME_STAMP_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallCenterLogin>()
                .Property(e => e.Teller)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<WebCallCenterLogin>()
                .Property(e => e.Server)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallChatCannedRespons>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallChatMessage>()
                .Property(e => e.MESSAGE)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallChatSession>()
                .Property(e => e.TELLER)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallChatSession>()
                .HasMany(e => e.WebCallChatMessages)
                .WithRequired(e => e.WebCallChatSession)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<WebCallChatSession>()
                .HasMany(e => e.WebCallChatStatus)
                .WithRequired(e => e.WebCallChatSession)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<WebCallChatStatu>()
                .Property(e => e.MESSAGE)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallChatTopic>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallChatUser>()
                .Property(e => e.USER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallChatUser>()
                .Property(e => e.EMAIL_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallChatUser>()
                .Property(e => e.PHONE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallChatUser>()
                .HasMany(e => e.WebCallChatStatus)
                .WithRequired(e => e.WebCallChatUser)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<WebCallCSRReportColumn>()
                .Property(e => e.ColumnName)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallCSRReportColumn>()
                .HasMany(e => e.WebCallCSRReportColumnRARRs)
                .WithRequired(e => e.WebCallCSRReportColumn)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<WebCallDualAuth>()
                .Property(e => e.LoanAmount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<WebCallDualAuth>()
                .Property(e => e.RequestedBy)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallDualAuth>()
                .Property(e => e.AuthorizedBy)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallEmailTemplate>()
                .Property(e => e.Template_Name)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallEmailTemplate>()
                .Property(e => e.Template_Description)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallEmailTemplate>()
                .Property(e => e.Subject)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallEmailTemplate>()
                .Property(e => e.Body)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallFAQ>()
                .Property(e => e.FAQ_Title)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallFAQ>()
                .Property(e => e.FAQ_Content)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallFAQ>()
                .HasMany(e => e.WebCallFAQAttachments)
                .WithRequired(e => e.WebCallFAQ)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<WebCallFAQAttachment>()
                .Property(e => e.Attachment_Name)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallFAQCategory>()
                .Property(e => e.FAQ_Category_Description)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallFAQCategory>()
                .HasMany(e => e.WebCallFAQs)
                .WithRequired(e => e.WebCallFAQCategory)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<WebCallFeature>()
                .Property(e => e.NAME)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallFeature>()
                .HasMany(e => e.WebCallRARRFeatures)
                .WithRequired(e => e.WebCallFeature)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<WebCallIntraChatMessage>()
                .Property(e => e.Message)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallIntraChatMessage>()
                .Property(e => e.From_User_Id)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallIntraChatMessage>()
                .Property(e => e.To_User_Id)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallIntraChatSession>()
                .Property(e => e.From_User_Id)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallIntraChatSession>()
                .Property(e => e.To_User_Id)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallIntraChatSession>()
                .HasMany(e => e.WebCallIntraChatMessages)
                .WithRequired(e => e.WebCallIntraChatSession)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<WebCallInvalidPhoneNumber>()
                .Property(e => e.Phone_Number)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallLoanAppSourceApp>()
                .Property(e => e.Source_App_Key)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<WebCallLoanAppSourceApp>()
                .Property(e => e.Source_App_Description)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallLoanProductConfig>()
                .Property(e => e.Config_Name)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallLoanProductConfig>()
                .Property(e => e.Config_Value)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallLoanProductConfig>()
                .Property(e => e.Created_By)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallLoanProductConfig>()
                .Property(e => e.Last_Updated_By)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallLoanProductConfig>()
                .Property(e => e.ExternalLinkCaption)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallLoanProductConfig>()
                .Property(e => e.ExternalLink)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallLoggingCategory>()
                .HasMany(e => e.WebCallLoggingCategoryLogs)
                .WithRequired(e => e.WebCallLoggingCategory)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<WebCallLoggingLog>()
                .HasMany(e => e.WebCallLoggingCategoryLogs)
                .WithRequired(e => e.WebCallLoggingLog)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<WebCallOnlineStatusDisplayLookup>()
                .Property(e => e.Online_Status_Value)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallOnlineStatusDisplayLookup>()
                .Property(e => e.Online_Status_Display)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallQueue>()
                .Property(e => e.WEB_CALL_QUEUE_SESSION_KEY)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallQueue>()
                .Property(e => e.PAGE)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallQueue>()
                .Property(e => e.CSR)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallQueue>()
                .Property(e => e.TELLER)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallQueue>()
                .Property(e => e.EMAIL_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallQueue>()
                .Property(e => e.FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallQueue>()
                .Property(e => e.LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallQueue>()
                .Property(e => e.HOME_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallQueue>()
                .Property(e => e.CELL_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallQueue>()
                .Property(e => e.WORK_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallQueue>()
                .Property(e => e.NOTES)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallQueue>()
                .Property(e => e.WEB_CALL_CHAT_CSR_KEY)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallQueue>()
                .Property(e => e.WEB_STATUS)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallQueue>()
                .Property(e => e.WebSource)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallQueue>()
                .Property(e => e.Address)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallQueue>()
                .Property(e => e.City)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallQueue>()
                .Property(e => e.State)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallQueue>()
                .Property(e => e.Zipcode)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallQueue>()
                .Property(e => e.LeadId)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallQueue>()
                .Property(e => e.Buyer)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallQueue>()
                .Property(e => e.SoldAmount)
                .HasPrecision(10, 4);

            modelBuilder.Entity<WebCallQueue>()
                .Property(e => e.FinalScore)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallQueue>()
                .Property(e => e.MARKETING_SENT_KEY)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallQueue>()
                .HasMany(e => e.WebCallChatSessions)
                .WithRequired(e => e.WebCallQueue)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<WebCallQueue>()
                .HasMany(e => e.WebCallQueueLoanAppAudits)
                .WithRequired(e => e.WebCallQueue)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<WebCallQueue>()
                .HasMany(e => e.WebCallRARRHistories)
                .WithRequired(e => e.WebCallQueue)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<WebCallQueue>()
                .HasMany(e => e.WebCallWorkQueues)
                .WithRequired(e => e.WebCallQueue)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<WebCallQueue>()
                .HasMany(e => e.WebDialerUploadHistories)
                .WithRequired(e => e.WebCallQueue)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<WebCallQueueAudit>()
                .Property(e => e.USER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<WebCallQueueAudit>()
                .Property(e => e.FIELD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallQueueAudit>()
                .Property(e => e.OLD_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallQueueAudit>()
                .Property(e => e.NEW_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallQueueLoanAppAudit>()
                .Property(e => e.Reason_Denied)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallQueueStatu>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallQueueStatu>()
                .HasMany(e => e.WebCallQueues)
                .WithRequired(e => e.WebCallQueueStatu)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<WebCallQueueType>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallQuickNote>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallQuickNote>()
                .Property(e => e.BUTTON_TEXT)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallRARR>()
                .HasMany(e => e.WebCallRARRFeatures)
                .WithRequired(e => e.WebCallRARR)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<WebCallRARRAction>()
                .Property(e => e.CODE)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallRARRAction>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallRARRAction>()
                .HasMany(e => e.WebCallQueues)
                .WithOptional(e => e.WebCallRARRAction)
                .HasForeignKey(e => e.WEB_CALL_ACTION_KEY);

            modelBuilder.Entity<WebCallRARReason>()
                .Property(e => e.CODE)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallRARReason>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallRARReason>()
                .HasMany(e => e.WebCallQueues)
                .WithOptional(e => e.WebCallRARReason)
                .HasForeignKey(e => e.WEB_CALL_REASON_KEY);

            modelBuilder.Entity<WebCallRARReason>()
                .HasMany(e => e.WebCallRARRCategoryReasons)
                .WithRequired(e => e.WebCallRARReason)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<WebCallRARResult1>()
                .Property(e => e.CODE)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallRARResult1>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallRARResult1>()
                .HasMany(e => e.WebCallQueues)
                .WithOptional(e => e.WebCallRARResult1)
                .HasForeignKey(e => e.WEB_CALL_RESULT1_KEY);

            modelBuilder.Entity<WebCallRARResult2>()
                .Property(e => e.CODE)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallRARResult2>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallRARResult2>()
                .HasMany(e => e.WebCallQueues)
                .WithOptional(e => e.WebCallRARResult2)
                .HasForeignKey(e => e.WEB_CALL_RESULT2_KEY);

            modelBuilder.Entity<WebCallRarrGroup>()
                .Property(e => e.Description)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallRARRHistory>()
                .Property(e => e.CREATED_BY)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallRARRHistory>()
                .Property(e => e.NOTES)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallRARRHistory>()
                .Property(e => e.Source)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallRARRHistory>()
                .Property(e => e.ForceApprovedAmount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<WebCallRARRHistory>()
                .Property(e => e.Rarr_Group_Name)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallRARRHistory>()
                .Property(e => e.Team_Name)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallRARRHistory>()
                .Property(e => e.SuppressPointsReason)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallRecordingArchive>()
                .Property(e => e.SESSION_ID)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallRecordingArchive>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<WebCallTeam>()
                .Property(e => e.Name)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallTeam>()
                .Property(e => e.Created_By)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallTeam>()
                .HasMany(e => e.WebCallTeamUsers)
                .WithRequired(e => e.WebCallTeam)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<WebCallTeamUser>()
                .Property(e => e.Teller)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallTeamUser>()
                .Property(e => e.Created_By)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallUserSetting>()
                .Property(e => e.USER)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallUserSetting>()
                .Property(e => e.SETTING)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallUserSetting>()
                .Property(e => e.VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallVisitorAlert>()
                .Property(e => e.AlertNote)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallVisitorAlert>()
                .Property(e => e.CreatedBy)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallVisitorAlert>()
                .Property(e => e.LastEditedBy)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallVisitorAlertsAudit>()
                .Property(e => e.AuditType)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallVisitorAlertsAudit>()
                .Property(e => e.AlertNote)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallVisitorAlertsAudit>()
                .Property(e => e.CreatedBy)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallVisitorAlertsAudit>()
                .Property(e => e.LastEditedBy)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallWebEmergencyAlertTemplate>()
                .Property(e => e.Scenario)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallWebEmergencyAlertTemplate>()
                .Property(e => e.Created_By)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallWebEmergencyAlertTemplate>()
                .Property(e => e.Last_Updated_By)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallWorkQueue>()
                .Property(e => e.WEB_CALL_QUEUE_SESSION_KEY)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallWorkQueue>()
                .Property(e => e.PAGE)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallWorkQueue>()
                .Property(e => e.CSR)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallWorkQueue>()
                .Property(e => e.TELLER)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallWorkQueue>()
                .Property(e => e.EMAIL_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallWorkQueue>()
                .Property(e => e.FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallWorkQueue>()
                .Property(e => e.LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallWorkQueue>()
                .Property(e => e.HOME_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallWorkQueue>()
                .Property(e => e.CELL_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallWorkQueue>()
                .Property(e => e.WORK_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallWorkQueue>()
                .Property(e => e.NOTES)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallWorkQueue>()
                .Property(e => e.WEB_CALL_CHAT_CSR_KEY)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallWorkQueue>()
                .Property(e => e.WEB_STATUS)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallWorkQueue>()
                .Property(e => e.WebSource)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallWorkQueue>()
                .Property(e => e.Address)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallWorkQueue>()
                .Property(e => e.City)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallWorkQueue>()
                .Property(e => e.State)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallWorkQueue>()
                .Property(e => e.LeadId)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallWorkQueue>()
                .Property(e => e.Zipcode)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallWorkQueue>()
                .Property(e => e.Buyer)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallWorkQueue>()
                .Property(e => e.SoldAmount)
                .HasPrecision(10, 4);

            modelBuilder.Entity<WebCallWorkQueue>()
                .Property(e => e.FinalScore)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallWorkQueue>()
                .Property(e => e.MARKETING_SENT_KEY)
                .IsUnicode(false);

            modelBuilder.Entity<WebDailyReport>()
                .Property(e => e.state)
                .IsUnicode(false);

            modelBuilder.Entity<WebDailyReport>()
                .Property(e => e.msa)
                .IsUnicode(false);

            modelBuilder.Entity<WebDailyReport>()
                .Property(e => e.source)
                .IsUnicode(false);

            modelBuilder.Entity<WebDailyReportField>()
                .Property(e => e.field_description)
                .IsUnicode(false);

            modelBuilder.Entity<WebDailyReportField>()
                .Property(e => e.group_name)
                .IsUnicode(false);

            modelBuilder.Entity<WebDailyReportState>()
                .Property(e => e.state)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerCallResult>()
                .Property(e => e.AFTER_CALL_WORK_TIME)
                .HasPrecision(0);

            modelBuilder.Entity<WebDialerCallResult>()
                .Property(e => e.AGENT)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerCallResult>()
                .Property(e => e.ANI)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerCallResult>()
                .Property(e => e.ANI_STATE)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerCallResult>()
                .Property(e => e.BILL_TIME)
                .HasPrecision(0);

            modelBuilder.Entity<WebDialerCallResult>()
                .Property(e => e.CALL_TIME)
                .HasPrecision(0);

            modelBuilder.Entity<WebDialerCallResult>()
                .Property(e => e.CALL_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerCallResult>()
                .Property(e => e.CAMPAIGN)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerCallResult>()
                .Property(e => e.CONFERENCE_TIME)
                .HasPrecision(0);

            modelBuilder.Entity<WebDialerCallResult>()
                .Property(e => e.CONSULT_TIME)
                .HasPrecision(0);

            modelBuilder.Entity<WebDialerCallResult>()
                .Property(e => e.COST)
                .HasPrecision(18, 4);

            modelBuilder.Entity<WebDialerCallResult>()
                .Property(e => e.DESTINATION_AGENT)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerCallResult>()
                .Property(e => e.DISPOSITION)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerCallResult>()
                .Property(e => e.DNIS)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerCallResult>()
                .Property(e => e.DNIS_STATE)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerCallResult>()
                .Property(e => e.HANDLE_TIME)
                .HasPrecision(0);

            modelBuilder.Entity<WebDialerCallResult>()
                .Property(e => e.HOLD_TIME)
                .HasPrecision(0);

            modelBuilder.Entity<WebDialerCallResult>()
                .Property(e => e.IVR_PATH)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerCallResult>()
                .Property(e => e.IVR_TIME)
                .HasPrecision(0);

            modelBuilder.Entity<WebDialerCallResult>()
                .Property(e => e.LIST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerCallResult>()
                .Property(e => e.MANUAL_DIALING_TIME)
                .HasPrecision(0);

            modelBuilder.Entity<WebDialerCallResult>()
                .Property(e => e.NOTES)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerCallResult>()
                .Property(e => e.PARK_TIME)
                .HasPrecision(0);

            modelBuilder.Entity<WebDialerCallResult>()
                .Property(e => e.PREVIEW_TIME)
                .HasPrecision(0);

            modelBuilder.Entity<WebDialerCallResult>()
                .Property(e => e.QUEUE_WAIT_TIME)
                .HasPrecision(0);

            modelBuilder.Entity<WebDialerCallResult>()
                .Property(e => e.RATE)
                .HasPrecision(18, 4);

            modelBuilder.Entity<WebDialerCallResult>()
                .Property(e => e.RESULT)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerCallResult>()
                .Property(e => e.RING_TIME)
                .HasPrecision(0);

            modelBuilder.Entity<WebDialerCallResult>()
                .Property(e => e.SESSION_ID)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerCallResult>()
                .Property(e => e.SKILL)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerCallResult>()
                .Property(e => e.SPEED_OF_ANSWER)
                .HasPrecision(0);

            modelBuilder.Entity<WebDialerCallResult>()
                .Property(e => e.TALK_TIME)
                .HasPrecision(0);

            modelBuilder.Entity<WebDialerCallResult>()
                .Property(e => e.TALK_TIME_LESS_HOLD_AND_PARK)
                .HasPrecision(0);

            modelBuilder.Entity<WebDialerCallResult>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerCallResult>()
                .Property(e => e.THIRD_PARTY_TALK_TIME)
                .HasPrecision(0);

            modelBuilder.Entity<WebDialerCallResult>()
                .Property(e => e.MRKT_CAMPAIGN)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerCallResult>()
                .Property(e => e.NOBLE_HASH)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerPhoneLine>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerPhoneLine>()
                .Property(e => e.PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerResult>()
                .Property(e => e.RESULT)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerResult>()
                .Property(e => e.LIST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerResult>()
                .Property(e => e.PHONE_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerResult>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerResult>()
                .Property(e => e.INCOMING_DID)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerResult>()
                .Property(e => e.ANI)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerResult>()
                .Property(e => e.BILL_TIME)
                .HasPrecision(0);

            modelBuilder.Entity<WebDialerResult>()
                .Property(e => e.CALL_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerResult>()
                .Property(e => e.CAMPAIGN)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerResult>()
                .Property(e => e.CATEGORY)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerResult>()
                .Property(e => e.COMMENTS)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerResult>()
                .Property(e => e.COST)
                .HasPrecision(18, 4);

            modelBuilder.Entity<WebDialerResult>()
                .Property(e => e.DESTINATION_AGENT)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerResult>()
                .Property(e => e.DISPOSITION)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerResult>()
                .Property(e => e.DNIS)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerResult>()
                .Property(e => e.DURATION)
                .HasPrecision(0);

            modelBuilder.Entity<WebDialerResult>()
                .Property(e => e.HANDLE_TIME)
                .HasPrecision(0);

            modelBuilder.Entity<WebDialerResult>()
                .Property(e => e.HOLD_TIME)
                .HasPrecision(0);

            modelBuilder.Entity<WebDialerResult>()
                .Property(e => e.IVR_FLOW)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerResult>()
                .Property(e => e.MANUAL_DIALING_TIME)
                .HasPrecision(0);

            modelBuilder.Entity<WebDialerResult>()
                .Property(e => e.PREVIEW_TIME)
                .HasPrecision(0);

            modelBuilder.Entity<WebDialerResult>()
                .Property(e => e.QUEUE_TIME)
                .HasPrecision(0);

            modelBuilder.Entity<WebDialerResult>()
                .Property(e => e.RATE)
                .HasPrecision(18, 4);

            modelBuilder.Entity<WebDialerResult>()
                .Property(e => e.SESSION_ID)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerResult>()
                .Property(e => e.SKILL)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerResult>()
                .Property(e => e.SPEED_OF_ANSWER)
                .HasPrecision(0);

            modelBuilder.Entity<WebDialerResult>()
                .Property(e => e.TALK_TIME)
                .HasPrecision(0);

            modelBuilder.Entity<WebDialerResult>()
                .Property(e => e.THIRD_PARTY_TALK_TIME)
                .HasPrecision(0);

            modelBuilder.Entity<WebDialerResult>()
                .Property(e => e.WRAP_TIME)
                .HasPrecision(0);

            modelBuilder.Entity<WebDialerResult>()
                .Property(e => e.AGENT)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerResult>()
                .Property(e => e.AGENT_EMAIL)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerResult>()
                .Property(e => e.AGENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerResult>()
                .Property(e => e.CITY)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerResult>()
                .Property(e => e.COMPANY)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerResult>()
                .Property(e => e.COUNTRY)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerResult>()
                .Property(e => e.DEST_AGENT_EMAIL)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerResult>()
                .Property(e => e.DEST_AGENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerResult>()
                .Property(e => e.FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerResult>()
                .Property(e => e.LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerResult>()
                .Property(e => e.NUMBER1)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerResult>()
                .Property(e => e.NUMBER2)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerResult>()
                .Property(e => e.NUMBER3)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerResult>()
                .Property(e => e.CALLED_STATE)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerResult>()
                .Property(e => e.STREET)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerResult>()
                .Property(e => e.ZIP)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerResult>()
                .Property(e => e.MARKETING_SENT_KEY)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerResultType>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerResultType>()
                .Property(e => e.FIVE_NINE_KEY)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerUploadHistory>()
                .Property(e => e.CATEGORY)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerUploadHistory>()
                .Property(e => e.FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerUploadHistory>()
                .Property(e => e.LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerUploadHistory>()
                .Property(e => e.CELL_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerUploadHistory>()
                .Property(e => e.HOME_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerUploadHistory>()
                .Property(e => e.WORK_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerUploadHistory>()
                .Property(e => e.UPLOAD_OPERATION)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerUser>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerUser>()
                .Property(e => e.DIALER_USER_ID)
                .IsUnicode(false);

            modelBuilder.Entity<WebDialerUser>()
                .HasOptional(e => e.WebDialerUser1)
                .WithRequired(e => e.WebDialerUser2);

            modelBuilder.Entity<WebEmailNote>()
                .Property(e => e.WEB_EMAIL_UNIQUE_ID)
                .IsUnicode(false);

            modelBuilder.Entity<WebEmailNote>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<WebEmailNote>()
                .Property(e => e.NOTES)
                .IsUnicode(false);

            modelBuilder.Entity<WebErrorLog>()
                .Property(e => e.CURRENT_PAGE)
                .IsUnicode(false);

            modelBuilder.Entity<WebErrorLog>()
                .Property(e => e.EXCEPTION_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<WebErrorLog>()
                .Property(e => e.ERROR_MSG)
                .IsUnicode(false);

            modelBuilder.Entity<WebImage>()
                .Property(e => e.SOURCE_URL)
                .IsUnicode(false);

            modelBuilder.Entity<WebImage>()
                .Property(e => e.SOURCE_HTML)
                .IsUnicode(false);

            modelBuilder.Entity<WebLead>()
                .Property(e => e.Price)
                .HasPrecision(12, 9);

            modelBuilder.Entity<WebLead>()
                .Property(e => e.MinPrice)
                .HasPrecision(12, 9);

            modelBuilder.Entity<WebLeadBuyer>()
                .Property(e => e.buyer_name)
                .IsUnicode(false);

            modelBuilder.Entity<WebLeadBuyer>()
                .Property(e => e.parent_buyer)
                .IsUnicode(false);

            modelBuilder.Entity<WebLeadGen>()
                .Property(e => e.Name)
                .IsUnicode(false);

            modelBuilder.Entity<WebLeadGen>()
                .Property(e => e.ScoringModel)
                .IsUnicode(false);

            modelBuilder.Entity<WebLeadGen>()
                .Property(e => e.WebsiteUrl)
                .IsUnicode(false);

            modelBuilder.Entity<WebLeadGen>()
                .HasMany(e => e.WebLeads)
                .WithRequired(e => e.WebLeadGen)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<WebLeadGen>()
                .HasMany(e => e.WebLeadGenAddresses)
                .WithRequired(e => e.WebLeadGen)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<WebLeadGen>()
                .HasMany(e => e.WebLeadGenFields)
                .WithRequired(e => e.WebLeadGen)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<WebLeadGen>()
                .HasMany(e => e.WebLeadGenStatistics)
                .WithRequired(e => e.WebLeadGen)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<WebLeadGen>()
                .HasMany(e => e.WebLeadGenTiers)
                .WithRequired(e => e.WebLeadGen)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<WebLeadGen>()
                .HasMany(e => e.WebLeadGenTranslations)
                .WithRequired(e => e.WebLeadGen)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<WebLeadGenAddress>()
                .Property(e => e.ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<WebLeadGenAddress>()
                .Property(e => e.ZIPCODE)
                .IsUnicode(false);

            modelBuilder.Entity<WebLeadGenAddress>()
                .Property(e => e.PHONE_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<WebLeadGenAddress>()
                .Property(e => e.EMAIL_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<WebLeadGenAddress>()
                .Property(e => e.FAX_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<WebLeadGenAddress>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<WebLeadGenField>()
                .Property(e => e.Name)
                .IsUnicode(false);

            modelBuilder.Entity<WebLeadGenTier>()
                .Property(e => e.Price)
                .HasPrecision(12, 9);

            modelBuilder.Entity<WebLeadGenTranslation>()
                .Property(e => e.Value)
                .IsUnicode(false);

            modelBuilder.Entity<WebLeadPostData>()
                .Property(e => e.Form_Data)
                .IsUnicode(false);

            modelBuilder.Entity<WebLeadPostData>()
                .Property(e => e.Response_Data)
                .IsUnicode(false);

            modelBuilder.Entity<WebLeadPostData>()
                .Property(e => e.Result)
                .IsUnicode(false);

            modelBuilder.Entity<WebLeadPostData>()
                .Property(e => e.Info)
                .IsUnicode(false);

            modelBuilder.Entity<WebLeadPostData>()
                .Property(e => e.Error)
                .IsUnicode(false);

            modelBuilder.Entity<WebLeadPostData>()
                .Property(e => e.Url)
                .IsUnicode(false);

            modelBuilder.Entity<WebLeadPostData>()
                .Property(e => e.Price)
                .HasPrecision(12, 9);

            modelBuilder.Entity<WebLeadPostData>()
                .Property(e => e.APP_SERVER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<WebLeadSale>()
                .Property(e => e.DELIVERY_URL)
                .IsUnicode(false);

            modelBuilder.Entity<WebLeadSale>()
                .Property(e => e.DELIVERY_MSG)
                .IsUnicode(false);

            modelBuilder.Entity<WebLeadSale>()
                .Property(e => e.ERROR)
                .IsUnicode(false);

            modelBuilder.Entity<WebLeadSale>()
                .Property(e => e.PRICE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<WebLoanCreditFraud>()
                .Property(e => e.FRAUD_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<WebPixelVendor>()
                .Property(e => e.VendorName)
                .IsUnicode(false);

            modelBuilder.Entity<WebPixelVendor>()
                .Property(e => e.ClassName)
                .IsUnicode(false);

            modelBuilder.Entity<WebPixelVendor>()
                .Property(e => e.NumericPassScore)
                .IsUnicode(false);

            modelBuilder.Entity<WebPixelVendor>()
                .Property(e => e.NumericWarnScore)
                .IsUnicode(false);

            modelBuilder.Entity<WebPixelVendor>()
                .Property(e => e.NumericFailScore)
                .IsUnicode(false);

            modelBuilder.Entity<WebPixelVendor>()
                .Property(e => e.AlphaPassScore)
                .IsUnicode(false);

            modelBuilder.Entity<WebPixelVendor>()
                .Property(e => e.AlphaWarnScore)
                .IsUnicode(false);

            modelBuilder.Entity<WebPixelVendor>()
                .Property(e => e.AlphaFailScore)
                .IsUnicode(false);

            modelBuilder.Entity<WebPixelVendor>()
                .Property(e => e.PROXY)
                .IsUnicode(false);

            modelBuilder.Entity<WebPixelVendor>()
                .HasMany(e => e.WebPixelVendorDatas)
                .WithRequired(e => e.WebPixelVendor)
                .HasForeignKey(e => e.ScoringVendor)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<WebPixelVendor>()
                .HasMany(e => e.WebPixelVendorDetails)
                .WithRequired(e => e.WebPixelVendor)
                .HasForeignKey(e => e.WEB_PIXEL_VENDOR_KEY)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<WebPixelVendorData>()
                .Property(e => e.IP_Address)
                .IsUnicode(false);

            modelBuilder.Entity<WebPixelVendorData>()
                .Property(e => e.PassWarnFail)
                .IsUnicode(false);

            modelBuilder.Entity<WebPixelVendorData>()
                .Property(e => e.DEVICE_ALIAS)
                .IsUnicode(false);

            modelBuilder.Entity<WebPixelVendorData>()
                .Property(e => e.VendorResponseMessage)
                .IsUnicode(false);

            modelBuilder.Entity<WebPixelVendorDetail>()
                .Property(e => e.RULE_SET_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<WebPixelVendorDetail>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<WebPixelVendorDetail>()
                .Property(e => e.TEST_URL)
                .IsUnicode(false);

            modelBuilder.Entity<WebPixelVendorDetail>()
                .Property(e => e.PRODUCTION_URL)
                .IsUnicode(false);

            modelBuilder.Entity<WebPixelVendorDetail>()
                .Property(e => e.TEST_USER_ID)
                .IsUnicode(false);

            modelBuilder.Entity<WebPixelVendorDetail>()
                .Property(e => e.PRODUCTION_USER_ID)
                .IsUnicode(false);

            modelBuilder.Entity<WebPixelVendorDetail>()
                .Property(e => e.TEST_PASSWORD)
                .IsUnicode(false);

            modelBuilder.Entity<WebPixelVendorDetail>()
                .Property(e => e.PRODUCTION_PASSWORD)
                .IsUnicode(false);

            modelBuilder.Entity<WebPixelVendorDetail>()
                .Property(e => e.LICENSE_KEY)
                .IsUnicode(false);

            modelBuilder.Entity<WebPixelVendorDetail>()
                .Property(e => e.USER_KEY)
                .IsUnicode(false);

            modelBuilder.Entity<WebReferralMethod>()
                .Property(e => e.NAME)
                .IsUnicode(false);

            modelBuilder.Entity<WebRemoteControl>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<WebRemoteControl>()
                .Property(e => e.TELLER_EMAIL)
                .IsUnicode(false);

            modelBuilder.Entity<WebRemoteControl>()
                .Property(e => e.SESSION_GUID)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<WebRemoteControl>()
                .Property(e => e.CUSTOMER_URL)
                .IsUnicode(false);

            modelBuilder.Entity<WebRemoteControl>()
                .Property(e => e.First_Name)
                .IsUnicode(false);

            modelBuilder.Entity<WebRemoteControl>()
                .Property(e => e.Last_Name)
                .IsUnicode(false);

            modelBuilder.Entity<WebRemoteControl>()
                .Property(e => e.GoToAssist_Session_ID)
                .IsUnicode(false);

            modelBuilder.Entity<WebReportByApp>()
                .Property(e => e.source_app_description)
                .IsUnicode(false);

            modelBuilder.Entity<WebReportByApp>()
                .Property(e => e.zipcode)
                .IsUnicode(false);

            modelBuilder.Entity<WebReportByApp>()
                .Property(e => e.msa)
                .IsUnicode(false);

            modelBuilder.Entity<WebReportByApp>()
                .Property(e => e.def_state)
                .IsUnicode(false);

            modelBuilder.Entity<WebReportByApp>()
                .Property(e => e.net_income)
                .HasPrecision(10, 4);

            modelBuilder.Entity<WebReportByApp>()
                .Property(e => e.approved_amt)
                .HasPrecision(10, 4);

            modelBuilder.Entity<WebReportByApp>()
                .Property(e => e.princ_amt)
                .HasPrecision(10, 4);

            modelBuilder.Entity<WebReportByApp>()
                .Property(e => e.fee_amt)
                .HasPrecision(10, 4);

            modelBuilder.Entity<WebReportByApp>()
                .Property(e => e.web_referral_method)
                .IsUnicode(false);

            modelBuilder.Entity<WebReportByApp>()
                .Property(e => e.source)
                .IsUnicode(false);

            modelBuilder.Entity<WebReportByLoan>()
                .Property(e => e.msa)
                .IsUnicode(false);

            modelBuilder.Entity<WebReportByLoan>()
                .Property(e => e.def_state)
                .IsUnicode(false);

            modelBuilder.Entity<WebReportByLoan>()
                .Property(e => e.princ_amt)
                .HasPrecision(10, 4);

            modelBuilder.Entity<WebReportByLoan>()
                .Property(e => e.fee_amt)
                .HasPrecision(10, 4);

            modelBuilder.Entity<WebReportByLoan>()
                .Property(e => e.source)
                .IsUnicode(false);

            modelBuilder.Entity<WebReportByLoan>()
                .Property(e => e.cash_amt)
                .HasPrecision(10, 4);

            modelBuilder.Entity<WebReportByLoan>()
                .Property(e => e.net_income)
                .HasPrecision(10, 4);

            modelBuilder.Entity<WebReportByLoan>()
                .Property(e => e.gender)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<WebReviewTemplate>()
                .Property(e => e.TEMPLATE)
                .IsUnicode(false);

            modelBuilder.Entity<WebReviewTemplate>()
                .HasMany(e => e.LoanWebReviewTemplateXrefs)
                .WithRequired(e => e.WebReviewTemplate)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<WebSiteEvent>()
                .Property(e => e.EVENT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<WebSiteEvent>()
                .Property(e => e.COMMENTS)
                .IsUnicode(false);

            modelBuilder.Entity<WebVisit>()
                .Property(e => e.USER_AGENT)
                .IsUnicode(false);

            modelBuilder.Entity<WebVisit>()
                .Property(e => e.IP_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<WebVisit>()
                .Property(e => e.DESTINATION_URL)
                .IsUnicode(false);

            modelBuilder.Entity<WebVisit>()
                .Property(e => e.DESTINATION_DOMAIN)
                .IsUnicode(false);

            modelBuilder.Entity<WebVisit>()
                .Property(e => e.SOURCE_URL)
                .IsUnicode(false);

            modelBuilder.Entity<WebVisit>()
                .Property(e => e.SOURCE_DOMAIN)
                .IsUnicode(false);

            modelBuilder.Entity<WebVisit>()
                .Property(e => e.SEARCH_QUERY)
                .IsUnicode(false);

            modelBuilder.Entity<WebVisit>()
                .Property(e => e.KEYWORDS)
                .IsUnicode(false);

            modelBuilder.Entity<WebVisit>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<WebVisit>()
                .Property(e => e.LINK_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<WebVisit>()
                .Property(e => e.VENDOR)
                .IsUnicode(false);

            modelBuilder.Entity<WebVisit>()
                .Property(e => e.CHANNEL)
                .IsUnicode(false);

            modelBuilder.Entity<WebVisit>()
                .Property(e => e.SUB_CHANNEL)
                .IsUnicode(false);

            modelBuilder.Entity<WebVisit>()
                .Property(e => e.CAMPAIGN)
                .IsUnicode(false);

            modelBuilder.Entity<WebVisit>()
                .Property(e => e.CONTENT)
                .IsUnicode(false);

            modelBuilder.Entity<WebVisitSource>()
                .Property(e => e.SESSION_GUID)
                .IsUnicode(false);

            modelBuilder.Entity<WebVisitSource>()
                .Property(e => e.SOURCE_URL)
                .IsUnicode(false);

            modelBuilder.Entity<WebVisitSource>()
                .Property(e => e.DOMAIN)
                .IsUnicode(false);

            modelBuilder.Entity<WebVisitSource>()
                .Property(e => e.SEARCH_QUERY)
                .IsUnicode(false);

            modelBuilder.Entity<WebVisitSource>()
                .Property(e => e.DEST_URL)
                .IsUnicode(false);

            modelBuilder.Entity<WebVisitSource>()
                .Property(e => e.LINK_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<WebVisitSource>()
                .Property(e => e.USER_AGENT)
                .IsUnicode(false);

            modelBuilder.Entity<WebVisitSource>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<WebVisitSource>()
                .Property(e => e.KEY_WORDS)
                .IsUnicode(false);

            modelBuilder.Entity<WebVisitSource>()
                .Property(e => e.IP_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<WebVisitSource>()
                .Property(e => e.CHANNEL)
                .IsUnicode(false);

            modelBuilder.Entity<WebVisitSource>()
                .Property(e => e.VENDOR)
                .IsUnicode(false);

            modelBuilder.Entity<WebVisitSource>()
                .Property(e => e.SUB_CHANNEL)
                .IsUnicode(false);

            modelBuilder.Entity<WebVisitSource>()
                .Property(e => e.CAMPAIGN)
                .IsUnicode(false);

            modelBuilder.Entity<WebVisitSource>()
                .Property(e => e.CONTENT)
                .IsUnicode(false);

            modelBuilder.Entity<WebVisitSource>()
                .Property(e => e.DEST_DOMAIN)
                .IsUnicode(false);

            modelBuilder.Entity<WebVisitSource>()
                .HasMany(e => e.Customers)
                .WithOptional(e => e.WebVisitSource)
                .HasForeignKey(e => e.ORIGINAL_WEB_VISIT_SOURCE);

            modelBuilder.Entity<WebVisitSrcXref>()
                .Property(e => e.WebVisit_Session_Guid)
                .IsUnicode(false);

            modelBuilder.Entity<WebVisitSrcXref>()
                .Property(e => e.Source_Credit_Category)
                .IsUnicode(false);

            modelBuilder.Entity<WireTransferFileImport>()
                .Property(e => e.IMPORT_PROCESS)
                .IsUnicode(false);

            modelBuilder.Entity<WireTransferFileImport>()
                .Property(e => e.WIRE_TRANSFER_FILE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<WireTransferMatch>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<WireTransferMatch>()
                .Property(e => e.UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<WireTransferMatch>()
                .Property(e => e.BATCH_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<WireTransferMatch>()
                .Property(e => e.WIRE_TRANSFER_RECEIPT)
                .IsUnicode(false);

            modelBuilder.Entity<WireTransferMatch>()
                .Property(e => e.PRINCIPAL_AMOUNT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<WireTransferMatch>()
                .Property(e => e.FEE_AMOUNT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<WireTransferMatch>()
                .Property(e => e.COMMISSION_AMOUNT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<WireTransferMatch>()
                .Property(e => e.TOTAL_AMOUNT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<WireTransferMatch>()
                .Property(e => e.SENDER_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<WireTransferMatch>()
                .Property(e => e.SENDER_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<WireTransferMatch>()
                .Property(e => e.SENDER_MIDDLE_INITIAL)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<WireTransferMatch>()
                .Property(e => e.SENDER_FULL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<WireTransferMatch>()
                .Property(e => e.SENDER_STREET)
                .IsUnicode(false);

            modelBuilder.Entity<WireTransferMatch>()
                .Property(e => e.SENDER_CITY)
                .IsUnicode(false);

            modelBuilder.Entity<WireTransferMatch>()
                .Property(e => e.SENDER_STATE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<WireTransferMatch>()
                .Property(e => e.SENDER_ZIP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<WireTransferMatch>()
                .Property(e => e.SENDER_COUNTRY_CODE_2_CHAR)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<WireTransferMatch>()
                .Property(e => e.SENDER_COUNTRY_CODE_3_CHAR)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<WireTransferMatch>()
                .Property(e => e.SENDER_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<WireTransferMatch>()
                .Property(e => e.SENDER_TAX_ID)
                .IsUnicode(false);

            modelBuilder.Entity<WireTransferMatch>()
                .Property(e => e.SENDER_ID_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<WireTransferMatch>()
                .Property(e => e.SENDER_ID_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<WireTransferMatch>()
                .Property(e => e.SENDER_ID_AUTHORITY)
                .IsUnicode(false);

            modelBuilder.Entity<WireTransferMatch>()
                .Property(e => e.SENDER_DOB)
                .IsUnicode(false);

            modelBuilder.Entity<WireTransferMatch>()
                .Property(e => e.RECEIVER_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<WireTransferMatch>()
                .Property(e => e.RECEIVER_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<WireTransferMatch>()
                .Property(e => e.RECEIVER_MIDDLE_INITIAL)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<WireTransferMatch>()
                .Property(e => e.RECEIVER_FULL_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<WireTransferMatch>()
                .Property(e => e.RECEIVER_STREET)
                .IsUnicode(false);

            modelBuilder.Entity<WireTransferMatch>()
                .Property(e => e.RECEIVER_CITY)
                .IsUnicode(false);

            modelBuilder.Entity<WireTransferMatch>()
                .Property(e => e.RECEIVER_STATE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<WireTransferMatch>()
                .Property(e => e.RECEIVER_ZIP_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<WireTransferMatch>()
                .Property(e => e.RECEIVER_COUNTRY_CODE_2_CHAR)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<WireTransferMatch>()
                .Property(e => e.RECEIVER_COUNTRY_CODE_3_CHAR)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<WireTransferMatch>()
                .Property(e => e.RECEIVER_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<WireTransferMatch>()
                .Property(e => e.RECEIVER_TAX_ID)
                .IsUnicode(false);

            modelBuilder.Entity<WireTransferMatch>()
                .Property(e => e.RECEIVER_ID_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<WireTransferMatch>()
                .Property(e => e.RECEIVER_ID_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<WireTransferMatch>()
                .Property(e => e.RECEIVER_ID_AUTHORITY)
                .IsUnicode(false);

            modelBuilder.Entity<WireTransferMatch>()
                .Property(e => e.RECEIVER_DOB)
                .IsUnicode(false);

            modelBuilder.Entity<WireTransferMatch>()
                .HasMany(e => e.WireTransferMatchEdits)
                .WithRequired(e => e.WireTransferMatch)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<WireTransferMatchEdit>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<WireTransferMatchEdit>()
                .Property(e => e.FIELD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<WireTransferMatchEdit>()
                .Property(e => e.OLD_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<WireTransferMatchEdit>()
                .Property(e => e.NEW_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<WSConfig>()
                .Property(e => e.PROVIDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<WSConfig>()
                .Property(e => e.PROVIDER_DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<WSConfig>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<WSConfig>()
                .Property(e => e.PROVIDER_VERSION)
                .IsUnicode(false);

            modelBuilder.Entity<WSConfig>()
                .HasMany(e => e.WSOperations)
                .WithRequired(e => e.WSConfig)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<WSConfig>()
                .HasMany(e => e.WSResponses)
                .WithRequired(e => e.WSConfig)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<WSOperation>()
                .Property(e => e.OPERATION_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<WSOperation>()
                .Property(e => e.OPERATION_DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<WSOperation>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<WSOperation>()
                .HasMany(e => e.PrepaidCardTrans)
                .WithRequired(e => e.WSOperation)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<WSResponse>()
                .Property(e => e.RESPONSE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<WSResponse>()
                .Property(e => e.RESPONSE_DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<WSResponse>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<WSResponse>()
                .HasMany(e => e.PrepaidCardTrans)
                .WithRequired(e => e.WSResponse)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ZipArea>()
                .Property(e => e.ZIPCODE)
                .IsUnicode(false);

            modelBuilder.Entity<ZipArea>()
                .Property(e => e.AREA)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<C_ErrorLogTest>()
                .Property(e => e.ErrorMessage)
                .IsUnicode(false);

            modelBuilder.Entity<C_ErrorLogTest>()
                .Property(e => e.SupportMessage)
                .IsUnicode(false);

            modelBuilder.Entity<C_ErrorLogTest>()
                .Property(e => e.Client)
                .IsUnicode(false);

            modelBuilder.Entity<C_ErrorLogTest>()
                .Property(e => e.Tier)
                .IsUnicode(false);

            modelBuilder.Entity<C_ErrorLogTest>()
                .Property(e => e.CodeLocation)
                .IsUnicode(false);

            modelBuilder.Entity<C_ErrorLogTest>()
                .Property(e => e.ExceptionText)
                .IsUnicode(false);

            modelBuilder.Entity<C_ErrorLogTest>()
                .Property(e => e.StateDump)
                .IsUnicode(false);

            modelBuilder.Entity<C_ErrorLogTest>()
                .Property(e => e.WebServer)
                .IsUnicode(false);

            modelBuilder.Entity<C_ErrorLogTest>()
                .Property(e => e.AppServer)
                .IsUnicode(false);

            modelBuilder.Entity<C_ErrorLogTest>()
                .Property(e => e.UserAgent)
                .IsUnicode(false);

            modelBuilder.Entity<C_ErrorLogTest>()
                .Property(e => e.Browser)
                .IsUnicode(false);

            modelBuilder.Entity<C_ErrorLogTest>()
                .Property(e => e.CurrentPage)
                .IsUnicode(false);

            modelBuilder.Entity<C_ErrorLogTest>()
                .Property(e => e.ReferringPage)
                .IsUnicode(false);

            modelBuilder.Entity<AACbExportDataArchive>()
                .Property(e => e.AccountStatus)
                .IsUnicode(false);

            modelBuilder.Entity<AACbExportDataArchive>()
                .Property(e => e.DateOfLoss)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<AACbExportDataArchive>()
                .Property(e => e.InputDate)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<AACbExportDataArchive>()
                .Property(e => e.Creditor)
                .IsUnicode(false);

            modelBuilder.Entity<AACbExportDataArchive>()
                .Property(e => e.PortfolioType)
                .IsUnicode(false);

            modelBuilder.Entity<AACbExportDataArchive>()
                .Property(e => e.AmountPastDue)
                .HasPrecision(10, 4);

            modelBuilder.Entity<AACbExportDataArchive>()
                .Property(e => e.AmountDue)
                .HasPrecision(10, 4);

            modelBuilder.Entity<AACbExportDataArchive>()
                .Property(e => e.HighestCredit)
                .HasPrecision(19, 4);

            modelBuilder.Entity<AACbExportDataArchive>()
                .Property(e => e.LastPaymentDate)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<AACbExportDataArchive>()
                .Property(e => e.TermsDuration)
                .IsUnicode(false);

            modelBuilder.Entity<AACbExportDataArchive>()
                .Property(e => e.ComplianceConditionCode)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<AACbExportDataArchive>()
                .Property(e => e.FirstName)
                .IsUnicode(false);

            modelBuilder.Entity<AACbExportDataArchive>()
                .Property(e => e.MiddleName)
                .IsUnicode(false);

            modelBuilder.Entity<AACbExportDataArchive>()
                .Property(e => e.LastName)
                .IsUnicode(false);

            modelBuilder.Entity<AACbExportDataArchive>()
                .Property(e => e.GenerationCode)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<AACbExportDataArchive>()
                .Property(e => e.Street1)
                .IsUnicode(false);

            modelBuilder.Entity<AACbExportDataArchive>()
                .Property(e => e.City)
                .IsUnicode(false);

            modelBuilder.Entity<AACbExportDataArchive>()
                .Property(e => e.State)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<AACbExportDataArchive>()
                .Property(e => e.Zip)
                .IsUnicode(false);

            modelBuilder.Entity<AACbExportDataArchive>()
                .Property(e => e.Country)
                .IsUnicode(false);

            modelBuilder.Entity<AACbExportDataArchive>()
                .Property(e => e.Telephone)
                .IsUnicode(false);

            modelBuilder.Entity<AACbExportDataArchive>()
                .Property(e => e.SSN)
                .IsUnicode(false);

            modelBuilder.Entity<AACbExportDataArchive>()
                .Property(e => e.DOB)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<AACbExportDataArchive>()
                .Property(e => e.DateClosed)
                .IsUnicode(false);

            modelBuilder.Entity<AACbExportDataArchive>()
                .Property(e => e.CII)
                .IsUnicode(false);

            modelBuilder.Entity<ACHGroup>()
                .Property(e => e.BM_DR_ACH_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<ACHGroup>()
                .Property(e => e.BM_CR_ACH_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<ACHGroup>()
                .Property(e => e.BM_COLL_DR_ACH_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<ACHGroup>()
                .Property(e => e.IL_DR_ACH_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<ACHGroup>()
                .Property(e => e.IL_CR_ACH_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<ACHGroup>()
                .Property(e => e.IL_COLL_DR_ACH_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<AUDDISAdviceReportDetail>()
                .Property(e => e.AOSN)
                .IsUnicode(false);

            modelBuilder.Entity<AUDDISAdviceReportDetail>()
                .Property(e => e.REASON_CODE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<AUDDISAdviceReportDetail>()
                .Property(e => e.PAYER_SORT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<AUDDISAdviceReportDetail>()
                .Property(e => e.PAYER_ACCOUNT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<AUDDISAdviceReportDetail>()
                .Property(e => e.NEW_SORT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<AUDDISAdviceReportDetail>()
                .Property(e => e.NEW_ACCOUNT_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<AUDDISAdviceReportDetail>()
                .Property(e => e.LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<AUDDISAdviceReportDetail>()
                .Property(e => e.REFERENCE)
                .IsUnicode(false);

            modelBuilder.Entity<AUDDISAdviceReportDetail>()
                .Property(e => e.RECORD_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CreditCardResultCodeEdit>()
                .Property(e => e.Field_Name)
                .IsUnicode(false);

            modelBuilder.Entity<CreditCardResultCodeEdit>()
                .Property(e => e.Old_Value)
                .IsUnicode(false);

            modelBuilder.Entity<CreditCardResultCodeEdit>()
                .Property(e => e.New_Value)
                .IsUnicode(false);

            modelBuilder.Entity<CreditCardResultCodeEdit>()
                .Property(e => e.Teller)
                .IsUnicode(false);

            modelBuilder.Entity<CreditCardResultCodeEdit>()
                .Property(e => e.Last_Modified_By)
                .IsUnicode(false);

            modelBuilder.Entity<CustomerFlashMPayRebate>()
                .Property(e => e.REBATE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<CustomerIncomeBackup>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerIncomeBackup>()
                .Property(e => e.INCOME_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CustomerIncomeBackup>()
                .Property(e => e.INCOME_AMOUNT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<EmploymentRegion>()
                .Property(e => e.NAME)
                .IsUnicode(false);

            modelBuilder.Entity<EmploymentRegion>()
                .Property(e => e.EMAIL_RECIPIENTS)
                .IsUnicode(false);

            modelBuilder.Entity<EmploymentRequest>()
                .Property(e => e.EMAIL)
                .IsUnicode(false);

            modelBuilder.Entity<EmploymentRequest>()
                .Property(e => e.FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<EmploymentRequest>()
                .Property(e => e.LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<EmploymentRequest>()
                .Property(e => e.FILE_EXTENSION)
                .IsUnicode(false);

            modelBuilder.Entity<InternalProcessEmailBody>()
                .Property(e => e.BODY)
                .IsUnicode(false);

            modelBuilder.Entity<InternalProcessEmailType>()
                .Property(e => e.INTERNAL_PROCESS_EMAIL_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<KBB_Log_Config>()
                .Property(e => e.KBB_LOG_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.MID_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.HOME_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.WORK_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.WORK_PHONE_EXT)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.CELL_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.SSN)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.NET_INCOME)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.PAY_CYCLE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.ABA_NUM)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.ACCT_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.REQ_CASH_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.CCARD_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.CCARD_CVV)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.CCARD_NAME_ON_CARD)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.LANGUAGE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.REASON_DENIED)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.ID_NO)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.WORK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.WORK_POSITION)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.SPOUSE_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.SPOUSE_MID_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.SPOUSE_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.SPOUSE_SSN)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.SPOUSE_HOME_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.SPOUSE_CELL_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.SPOUSE_WORK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.SPOUSE_WORK_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.SPOUSE_WORK_PHONE_EXT)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.GENDER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.HOW_REF_OBSOLETE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.EMAIL)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.REF1_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.REF1_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.REF1_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.REF1_RELATIONSHIP)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.REF2_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.REF2_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.REF2_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.REF2_RELATIONSHIP)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.RI_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.LEGAL_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.COURTESY_CALL_NUM)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.GROSS_INCOME)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.TYPE_OF_INCOME)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.CUST_ID_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.CUST_ID_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.CUST_ID_SOURCE)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.CUST_ID_VERIFY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.CUST_ID_VERIFY_OTHER)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.MONTHLY_HOUSING)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.SOURCE_APP)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.SOURCE_DB)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.APPROVED_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.IP_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.FINAL_SCORE)
                .HasPrecision(8, 2);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.BANK_DEPOSITS)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.LOAN_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.PRODUCT_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.VEH_MAKE)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.VEH_MODEL)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.VEH_VIN)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.VEH_LIEN_HOLDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.VEH_LIEN_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.CCARD_GUARANTEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.SELECTED_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.CCARD_TOKEN)
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.FUNDING_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationBU>()
                .Property(e => e.PAY_CYCLE_MONTH_INTERVAL)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanApplicationDiscount>()
                .Property(e => e.AMOUNT_APPLIED)
                .HasPrecision(10, 4);

            modelBuilder.Entity<LoanProductEnableNewLoanBackup>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<LoanProductEnableNewLoanBackup>()
                .Property(e => e.UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.LOAN_STATUS)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.LOAN_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.CASH_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.LIEN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.LAST_PAYMENT_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.LAST_CASH_ADV_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.PAST_DUE_TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.PAST_DUE_LIEN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.PAST_DUE_COLL_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.PAST_DUE_ACTIVITY_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.PAST_DUE_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.PAST_DUE_PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.CURR_DUE_TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.CURR_DUE_LIEN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.CURR_DUE_ACTIVITY_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.CURR_DUE_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.CURR_DUE_PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.NEXT_DUE_TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.NEXT_DUE_LIEN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.NEXT_DUE_ACTIVITY_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.NEXT_DUE_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.NEXT_DUE_PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.NOT_DUE_TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.NOT_DUE_LIEN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.NOT_DUE_ACTIVITY_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.NOT_DUE_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.NOT_DUE_PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.RI_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.INVENTORY_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.CLOAN_STATUS)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.CLOAN_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.CCASH_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.CTRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.CLIEN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.CLAST_PAYMENT_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.CLAST_CASH_ADV_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.CPAST_DUE_TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.CPAST_DUE_LIEN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.CPAST_DUE_COLL_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.CPAST_DUE_ACTIVITY_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.CPAST_DUE_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.CPAST_DUE_PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.CCURR_DUE_TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.CCURR_DUE_LIEN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.CCURR_DUE_ACTIVITY_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.CCURR_DUE_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.CCURR_DUE_PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.CNEXT_DUE_TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.CNEXT_DUE_LIEN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.CNEXT_DUE_ACTIVITY_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.CNEXT_DUE_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.CNEXT_DUE_PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.CNOT_DUE_TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.CNOT_DUE_LIEN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.CNOT_DUE_ACTIVITY_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.CNOT_DUE_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.CNOT_DUE_PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.CRI_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.CPRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.C_INVENTORY_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.PAST_DUE_CSO_LENDER_COLL_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.PAST_DUE_CSO_LENDER_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.CURR_DUE_CSO_LENDER_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.NEXT_DUE_CSO_LENDER_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.NOT_DUE_CSO_LENDER_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.CPAST_DUE_CSO_LENDER_COLL_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.CPAST_DUE_CSO_LENDER_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.CCURR_DUE_CSO_LENDER_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.CNEXT_DUE_CSO_LENDER_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.CNOT_DUE_CSO_LENDER_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.CREDIT_AVAIL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.CCREDIT_AVAIL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.CREDIT_AVAILABLE_FOR_BUYUP)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.CCREDIT_AVAILABLE_FOR_BUYUP)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.CREDIT_AVAILABLE_FOR_BUYUP_NON_ORDINANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndLoanInSyncAdj>()
                .Property(e => e.CCREDIT_AVAILABLE_FOR_BUYUP_NON_ORDINANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<OEndVaultTroubleshooting>()
                .Property(e => e.INV_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<OEndVaultTroubleshooting>()
                .Property(e => e.VLT_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<OEndVaultTroubleshooting>()
                .Property(e => e.AMT_DIFF)
                .HasPrecision(19, 4);

            modelBuilder.Entity<OEndVaultTroubleshooting>()
                .Property(e => e.LOAN_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<OEndVaultTroubleshooting>()
                .Property(e => e.PRODUCT_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusExportTransCode>()
                .Property(e => e.TRANS_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusExportTransCode>()
                .Property(e => e.TRECS_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusExportTransCode>()
                .Property(e => e.D2JE1D)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusExportTransCode>()
                .Property(e => e.D2JE1C)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusExportTransCode>()
                .Property(e => e.D2JE2D)
                .IsUnicode(false);

            modelBuilder.Entity<OptPlusExportTransCode>()
                .Property(e => e.D2JE2C)
                .IsUnicode(false);

            modelBuilder.Entity<RitaPwd>()
                .Property(e => e.CLIENT_ID)
                .IsUnicode(false);

            modelBuilder.Entity<RitaPwd>()
                .Property(e => e.USER_ID)
                .IsUnicode(false);

            modelBuilder.Entity<RitaPwd>()
                .Property(e => e.USER_STAT)
                .IsUnicode(false);

            modelBuilder.Entity<RitaPwd>()
                .Property(e => e.USER_PW)
                .IsUnicode(false);

            modelBuilder.Entity<SkipTraceThreadBackUp>()
                .Property(e => e.TRACE_STATUS)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<TransferFundsInterStore>()
                .Property(e => e.BASE_CURRENCY_VALUE)
                .HasPrecision(18, 0);

            modelBuilder.Entity<WebAlert>()
                .Property(e => e.Created_By)
                .IsUnicode(false);

            modelBuilder.Entity<WebAlert>()
                .Property(e => e.Last_Updated_By)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallRARRType>()
                .Property(e => e.CODE)
                .IsUnicode(false);

            modelBuilder.Entity<WebCallRARRType>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<Docuware_View>()
                .Property(e => e.BARCODE)
                .IsUnicode(false);

            modelBuilder.Entity<Docuware_View>()
                .Property(e => e.LOAN_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Docuware_View>()
                .Property(e => e.CUSTNAME)
                .IsUnicode(false);

            modelBuilder.Entity<Docuware_View>()
                .Property(e => e.SSN)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Docuware_View>()
                .Property(e => e.DRIVERSLIC)
                .IsUnicode(false);

            modelBuilder.Entity<Docuware_View>()
                .Property(e => e.LOANDATE)
                .IsUnicode(false);

            modelBuilder.Entity<Service>()
                .Property(e => e.serv_name)
                .IsUnicode(false);

            modelBuilder.Entity<Service>()
                .Property(e => e.serv_fee)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Service>()
                .Property(e => e.serv_flat_chg)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Service>()
                .Property(e => e.Cost)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Service>()
                .Property(e => e.MAX_CHARGE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Svc_Tran>()
                .Property(e => e.trx_teller)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Svc_Tran>()
                .Property(e => e.trx_ss_no)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Svc_Tran>()
                .Property(e => e.trx_lastname)
                .IsUnicode(false);

            modelBuilder.Entity<Svc_Tran>()
                .Property(e => e.svc_amount)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Svc_Tran>()
                .Property(e => e.trx_fee)
                .HasPrecision(10, 4);

            modelBuilder.Entity<syscolumns_view>()
                .Property(e => e.printfmt)
                .IsUnicode(false);

            modelBuilder.Entity<syscolumns_view>()
                .Property(e => e.tdscollation)
                .IsFixedLength();

            modelBuilder.Entity<sysobjects_view>()
                .Property(e => e.xtype)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<sysobjects_view>()
                .Property(e => e.type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<systypes_view>()
                .Property(e => e.printfmt)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Ach_Trecs>()
                .Property(e => e.RecordType)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Ach_Trecs>()
                .Property(e => e.ImportAcct)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Ach_Trecs>()
                .Property(e => e.PostDate)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vw_Ach_Trecs>()
                .Property(e => e.EffectiveDate)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vw_Ach_Trecs>()
                .Property(e => e.TransactionType)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Ach_Trecs>()
                .Property(e => e.DebitCredit)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Ach_Trecs>()
                .Property(e => e.Amount)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Ach_Trecs>()
                .Property(e => e.Reference1)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Ach_Trecs>()
                .Property(e => e.Reference2)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Ach_Trecs>()
                .Property(e => e.Reference3)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Ach_Trecs>()
                .Property(e => e.Reference4)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Ach_Trecs>()
                .Property(e => e.Reference5)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Ach_Trecs>()
                .Property(e => e.Details)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Ach_Trecs>()
                .Property(e => e.Reference6)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Ach_Trecs>()
                .Property(e => e.Reference7)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Ach_Trecs>()
                .Property(e => e.Reference8)
                .IsUnicode(false);

            modelBuilder.Entity<vw_AppSetting>()
                .Property(e => e.APP_CONFIG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<vw_AppSetting>()
                .Property(e => e.DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<vw_AppSetting>()
                .Property(e => e.APP_SETTING_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<vw_AppSetting>()
                .Property(e => e.SettingDescription)
                .IsUnicode(false);

            modelBuilder.Entity<vw_AppSetting>()
                .Property(e => e.APP_VALUE)
                .IsUnicode(false);

            modelBuilder.Entity<vw_CashedCheckRate>()
                .Property(e => e.CHK_RATE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<vw_CashedCheckRate>()
                .Property(e => e.CHK_RATE_DESC)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vw_CashedCheckRate>()
                .Property(e => e.CHK_RATE_FEE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<vw_CashedCheckRate>()
                .Property(e => e.CHK_RATE_PCT)
                .HasPrecision(5, 2);

            modelBuilder.Entity<vw_CashedCheckRate>()
                .Property(e => e.LOCATION)
                .HasPrecision(18, 0);

            modelBuilder.Entity<vw_CashedCheckRate>()
                .Property(e => e.MIN_FEE)
                .HasPrecision(5, 2);

            modelBuilder.Entity<vw_CashedCheckRateTable>()
                .Property(e => e.CHK_RATE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<vw_CashedCheckRateTable>()
                .Property(e => e.CHK_RATE_DESC)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vw_CashedCheckRateTable>()
                .Property(e => e.LOCATION)
                .HasPrecision(18, 0);

            modelBuilder.Entity<vw_CashedCheckRateTable>()
                .Property(e => e.MIN_FEE)
                .HasPrecision(5, 2);

            modelBuilder.Entity<vw_CashedCheckRateTable>()
                .Property(e => e.CHK_RATE_FEE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<vw_CashedCheckRateTable>()
                .Property(e => e.CHK_RATE_PCT)
                .HasPrecision(9, 3);

            modelBuilder.Entity<vw_CashedCheckRateTable>()
                .Property(e => e.CHK_RATE_MAX)
                .HasPrecision(19, 4);

            modelBuilder.Entity<vw_CustomerEmployerIncome>()
                .Property(e => e.INCOME_TYPE_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<vw_CustomerEmployerIncome>()
                .Property(e => e.INCOME_SOURCE_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<vw_CustomerEmployerIncome>()
                .Property(e => e.EMPLOYER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<vw_CustomerEmployerIncome>()
                .Property(e => e.DEPARTMENT)
                .IsUnicode(false);

            modelBuilder.Entity<vw_CustomerEmployerIncome>()
                .Property(e => e.JOB_DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<vw_CustomerEmployerIncome>()
                .Property(e => e.EMPLOYER_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<vw_CustomerEmployerIncome>()
                .Property(e => e.PAY_CYCLE_SPELLED)
                .IsUnicode(false);

            modelBuilder.Entity<vw_CustomerEmployerIncome>()
                .Property(e => e.EMPLOY_STATUS)
                .IsUnicode(false);

            modelBuilder.Entity<vw_CustomerEmployerIncome>()
                .Property(e => e.PAY_CYCLE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vw_CustomerEmployerIncome>()
                .Property(e => e.PAY_CYCLE_MONTH_INT)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vw_CustomerEmployerIncome>()
                .Property(e => e.AMOUNT_CYCLE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vw_CustomerEmployerIncome>()
                .Property(e => e.AMOUNT_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vw_CustomerEmployerIncome>()
                .Property(e => e.INCOME_AMOUNT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<vw_CustomerEmployerIncome>()
                .Property(e => e.VERIFY_METHOD)
                .IsUnicode(false);

            modelBuilder.Entity<vw_CustomerEmployerIncome>()
                .Property(e => e.VERIFY_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vw_CustomerEmployerIncome>()
                .Property(e => e.INCOME_TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vw_CustomerEmployerIncome>()
                .Property(e => e.INCOME_DELETED_TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vw_CustomerEmployerIncome>()
                .Property(e => e.INCOME_INACTIVE_TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vw_DocuwareInfoByCustomerDocumentKey>()
                .Property(e => e.SOCIALSECURITYNO)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vw_DocuwareInfoByCustomerDocumentKey>()
                .Property(e => e.DRIVERSLICENSE)
                .IsUnicode(false);

            modelBuilder.Entity<vw_DocuwareInfoByCustomerDocumentKey>()
                .Property(e => e.FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<vw_DocuwareInfoByCustomerDocumentKey>()
                .Property(e => e.LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<vw_DocuwareInfoByCustomerDocumentKey>()
                .Property(e => e.DOCUMENTDATE)
                .IsUnicode(false);

            modelBuilder.Entity<vw_DocuwareInfoByCustomerDocumentKey>()
                .Property(e => e.DOC_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<vw_DocuwareInfoByTransDetailKey>()
                .Property(e => e.CUSTNAME)
                .IsUnicode(false);

            modelBuilder.Entity<vw_DocuwareInfoByTransDetailKey>()
                .Property(e => e.SSN)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vw_DocuwareInfoByTransDetailKey>()
                .Property(e => e.DRIVERSLIC)
                .IsUnicode(false);

            modelBuilder.Entity<vw_DocuwareInfoByTransDetailKey>()
                .Property(e => e.DOCDATE)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Eos310>()
                .Property(e => e.product_type)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Eos310>()
                .Property(e => e.loan_type)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Eos310>()
                .Property(e => e.teller)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vw_Eos310>()
                .Property(e => e.tellername)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Eos310>()
                .Property(e => e.TransType)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Eos310>()
                .Property(e => e.amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<vw_Eos310>()
                .Property(e => e.customer)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Eos310>()
                .Property(e => e.princ_amt)
                .HasPrecision(10, 4);

            modelBuilder.Entity<vw_Eos310>()
                .Property(e => e.cash_amt)
                .HasPrecision(10, 4);

            modelBuilder.Entity<vw_Eos310>()
                .Property(e => e.loan_amt)
                .HasPrecision(10, 4);

            modelBuilder.Entity<vw_EosMoneyGrams>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vw_EosMoneyGrams>()
                .Property(e => e.trx_lastname)
                .IsUnicode(false);

            modelBuilder.Entity<vw_EosMoneyGrams>()
                .Property(e => e.svc_amount)
                .HasPrecision(10, 4);

            modelBuilder.Entity<vw_EosMoneyGrams>()
                .Property(e => e.tellername)
                .IsUnicode(false);

            modelBuilder.Entity<vw_EosMoneyOrder>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vw_EosMoneyOrder>()
                .Property(e => e.trx_lastname)
                .IsUnicode(false);

            modelBuilder.Entity<vw_EosMoneyOrder>()
                .Property(e => e.svc_amount)
                .HasPrecision(10, 4);

            modelBuilder.Entity<vw_EosMoneyOrder>()
                .Property(e => e.tellername)
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.MID_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.HOME_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.CELL_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.SSN)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.ABA_NUM)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.ACCT_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.REQ_CASH_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.CCARD_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.CCARD_CVV)
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.CCARD_NAME_ON_CARD)
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.LANGUAGE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.REASON_DENIED)
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.ID_NO)
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.SPOUSE_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.SPOUSE_MID_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.SPOUSE_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.SPOUSE_SSN)
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.SPOUSE_HOME_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.SPOUSE_CELL_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.SPOUSE_WORK_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.SPOUSE_WORK_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.SPOUSE_WORK_PHONE_EXT)
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.GENDER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.HOW_REF_OBSOLETE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.EMAIL)
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.REF1_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.REF1_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.REF1_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.REF1_RELATIONSHIP)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.REF2_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.REF2_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.REF2_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.REF2_RELATIONSHIP)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.RI_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.LEGAL_NUMBER)
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.COURTESY_CALL_NUM)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.CUST_ID_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.CUST_ID_SOURCE)
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.CUST_ID_VERIFY_OTHER)
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.MONTHLY_HOUSING)
                .HasPrecision(10, 4);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.SOURCE_APP)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.SOURCE_DB)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.IP_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.LOAN_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.PRODUCT_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.VEH_MAKE)
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.VEH_MODEL)
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.VEH_VIN)
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.VEH_LIEN_HOLDER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.VEH_LIEN_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.CCARD_GUARANTEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.CCARD_TOKEN)
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.FUNDING_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.APPROVED_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.SELECTED_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.DETAIL)
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplication>()
                .Property(e => e.FINAL_SCORE)
                .HasPrecision(8, 2);

            modelBuilder.Entity<vw_LoanApplicationEmployerIncome>()
                .Property(e => e.INCOME_TYPE_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplicationEmployerIncome>()
                .Property(e => e.INCOME_SOURCE_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplicationEmployerIncome>()
                .Property(e => e.EMPLOYER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplicationEmployerIncome>()
                .Property(e => e.DEPARTMENT)
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplicationEmployerIncome>()
                .Property(e => e.JOB_DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplicationEmployerIncome>()
                .Property(e => e.EMPLOYER_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplicationEmployerIncome>()
                .Property(e => e.PAY_CYCLE_SPELLED)
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplicationEmployerIncome>()
                .Property(e => e.EMPLOY_STATUS)
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplicationEmployerIncome>()
                .Property(e => e.PAY_CYCLE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplicationEmployerIncome>()
                .Property(e => e.PAY_CYCLE_MONTH_INT)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplicationEmployerIncome>()
                .Property(e => e.AMOUNT_CYCLE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplicationEmployerIncome>()
                .Property(e => e.AMOUNT_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplicationEmployerIncome>()
                .Property(e => e.INCOME_AMOUNT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<vw_LoanApplicationEmployerIncome>()
                .Property(e => e.VERIFY_METHOD)
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplicationEmployerIncome>()
                .Property(e => e.VERITY_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplicationEmployerIncome>()
                .Property(e => e.INCOME_TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplicationEmployerIncome>()
                .Property(e => e.INCOME_DELETED_TELLER)
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoanApplicationEmployerIncome>()
                .Property(e => e.INCOME_INACTIVE_TELLER)
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoansByStatus>()
                .Property(e => e.lastname)
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoansByStatus>()
                .Property(e => e.firstname)
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoansByStatus>()
                .Property(e => e.CustomerName)
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoansByStatus>()
                .Property(e => e.loan_amt)
                .HasPrecision(10, 4);

            modelBuilder.Entity<vw_LoansByStatus>()
                .Property(e => e.loan_balance)
                .HasPrecision(10, 4);

            modelBuilder.Entity<vw_LoansByStatus>()
                .Property(e => e.loan_status)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoansByStatus>()
                .Property(e => e.product_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoansByStatus>()
                .Property(e => e.loan_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vw_LoansByStatus>()
                .Property(e => e.StatusDescription)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_AchHistory>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_AchHistory>()
                .Property(e => e.DESCR)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_AchHistory>()
                .Property(e => e.DOLLARAMOUNT)
                .HasPrecision(2, 2);

            modelBuilder.Entity<vw_Notes_AchHistory>()
                .Property(e => e.NOTETEXT)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_AchHistory>()
                .Property(e => e.TELLERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_AchHistory>()
                .Property(e => e.CUSTOM1)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_AchHistory>()
                .Property(e => e.CUSTOM2)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_AchHistory>()
                .Property(e => e.CUSTOM3)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_CheckAgain>()
                .Property(e => e.TELLER)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_CheckAgain>()
                .Property(e => e.DESCR)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_CheckAgain>()
                .Property(e => e.NOTETEXT)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_CheckAgain>()
                .Property(e => e.DOLLARAMOUNT)
                .HasPrecision(2, 2);

            modelBuilder.Entity<vw_Notes_CheckAgain>()
                .Property(e => e.TELLERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_CheckAgain>()
                .Property(e => e.CUSTOM1)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_CheckAgain>()
                .Property(e => e.CUSTOM2)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_CheckAgain>()
                .Property(e => e.CUSTOM3)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_CheckPayment>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_CheckPayment>()
                .Property(e => e.DESCR)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_CheckPayment>()
                .Property(e => e.DOLLARAMOUNT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<vw_Notes_CheckPayment>()
                .Property(e => e.NOTETEXT)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_CheckPayment>()
                .Property(e => e.TELLERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_CheckPayment>()
                .Property(e => e.CUSTOM1)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_CheckPayment>()
                .Property(e => e.CUSTOM2)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_CheckPayment>()
                .Property(e => e.CUSTOM3)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_CollectionMovement>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_CollectionMovement>()
                .Property(e => e.DESCR)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_CollectionMovement>()
                .Property(e => e.NOTETEXT)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_CollectionMovement>()
                .Property(e => e.DOLLARAMOUNT)
                .HasPrecision(2, 2);

            modelBuilder.Entity<vw_Notes_CollectionMovement>()
                .Property(e => e.TELLERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_CollectionMovement>()
                .Property(e => e.CUSTOM1)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_CollectionMovement>()
                .Property(e => e.CUSTOM2)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_CollectionMovement>()
                .Property(e => e.CUSTOM3)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_Contacts>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_Contacts>()
                .Property(e => e.DESCR)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_Contacts>()
                .Property(e => e.NOTETEXT)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_Contacts>()
                .Property(e => e.DOLLARAMOUNT)
                .HasPrecision(2, 2);

            modelBuilder.Entity<vw_Notes_Contacts>()
                .Property(e => e.TELLERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_Contacts>()
                .Property(e => e.CUSTOM1)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_Contacts>()
                .Property(e => e.CUSTOM2)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_CustomerEdit>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_CustomerEdit>()
                .Property(e => e.DESCR)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_CustomerEdit>()
                .Property(e => e.DOLLARAMOUNT)
                .HasPrecision(2, 2);

            modelBuilder.Entity<vw_Notes_CustomerEdit>()
                .Property(e => e.NOTETEXT)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_CustomerEdit>()
                .Property(e => e.TELLERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_CustomerEdit>()
                .Property(e => e.CUSTOM1)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_CustomerEdit>()
                .Property(e => e.CUSTOM2)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_CustomerEdit>()
                .Property(e => e.CUSTOM3)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_IssuerEdit>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_IssuerEdit>()
                .Property(e => e.DESCR)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_IssuerEdit>()
                .Property(e => e.DOLLARAMOUNT)
                .HasPrecision(2, 2);

            modelBuilder.Entity<vw_Notes_IssuerEdit>()
                .Property(e => e.NOTETEXT)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_IssuerEdit>()
                .Property(e => e.TELLERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_IssuerEdit>()
                .Property(e => e.CUSTOM1)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_IssuerEdit>()
                .Property(e => e.CUSTOM2)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_IssuerEdit>()
                .Property(e => e.CUSTOM3)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_Letters>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_Letters>()
                .Property(e => e.DESCR)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_Letters>()
                .Property(e => e.NOTETEXT)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_Letters>()
                .Property(e => e.TELLERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_Letters>()
                .Property(e => e.CUSTOM1)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_Letters>()
                .Property(e => e.CUSTOM2)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_Letters>()
                .Property(e => e.CUSTOM3)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_LoanPayment>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_LoanPayment>()
                .Property(e => e.DESCR)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_LoanPayment>()
                .Property(e => e.DOLLARAMOUNT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<vw_Notes_LoanPayment>()
                .Property(e => e.NOTETEXT)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_LoanPayment>()
                .Property(e => e.TELLERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_LoanPayment>()
                .Property(e => e.CUSTOM1)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_LoanPayment>()
                .Property(e => e.CUSTOM2)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_LoanPayment>()
                .Property(e => e.CUSTOM3)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_ManualCcAttempt>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_ManualCcAttempt>()
                .Property(e => e.DESCR)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_ManualCcAttempt>()
                .Property(e => e.DOLLARAMOUNT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<vw_Notes_ManualCcAttempt>()
                .Property(e => e.NOTETEXT)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_ManualCcAttempt>()
                .Property(e => e.TELLERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_ManualCcAttempt>()
                .Property(e => e.CUSTOM1)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_ManualCcAttempt>()
                .Property(e => e.CUSTOM2)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_ManualCcAttempt>()
                .Property(e => e.CUSTOM3)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_NoteHistory>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_NoteHistory>()
                .Property(e => e.DESCR)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_NoteHistory>()
                .Property(e => e.NOTETEXT)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_NoteHistory>()
                .Property(e => e.DOLLARAMOUNT)
                .HasPrecision(2, 2);

            modelBuilder.Entity<vw_Notes_NoteHistory>()
                .Property(e => e.TELLERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_NoteHistory>()
                .Property(e => e.CUSTOM1)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_NoteHistory>()
                .Property(e => e.CUSTOM2)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_NoteHistory>()
                .Property(e => e.CUSTOM3)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_RICC>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_RICC>()
                .Property(e => e.DESCR)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_RICC>()
                .Property(e => e.DOLLARAMOUNT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<vw_Notes_RICC>()
                .Property(e => e.NOTETEXT)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_RICC>()
                .Property(e => e.TELLERNAME)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_RICC>()
                .Property(e => e.CUSTOM1)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_RICC>()
                .Property(e => e.CUSTOM2)
                .IsUnicode(false);

            modelBuilder.Entity<vw_Notes_RICC>()
                .Property(e => e.CUSTOM3)
                .IsUnicode(false);

            modelBuilder.Entity<vw_QuickAndDirtyChkRates>()
                .Property(e => e.STATE)
                .IsUnicode(false);

            modelBuilder.Entity<vw_QuickAndDirtyChkRates>()
                .Property(e => e.CHK_RATE_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<vw_QuickAndDirtyChkRates>()
                .Property(e => e.CHK_RATE_PCT)
                .HasPrecision(3, 1);

            modelBuilder.Entity<vw_SharePoint_StoresList>()
                .Property(e => e.COMPANY)
                .IsUnicode(false);

            modelBuilder.Entity<vw_SharePoint_StoresList>()
                .Property(e => e.ADDRESS1)
                .IsUnicode(false);

            modelBuilder.Entity<vw_SharePoint_StoresList>()
                .Property(e => e.CITY)
                .IsUnicode(false);

            modelBuilder.Entity<vw_SharePoint_StoresList>()
                .Property(e => e.STATE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vw_SharePoint_StoresList>()
                .Property(e => e.ZIPCODE)
                .IsUnicode(false);

            modelBuilder.Entity<vw_SharePoint_StoresList>()
                .Property(e => e.STORE_HOURS)
                .IsUnicode(false);

            modelBuilder.Entity<vw_SharePoint_StoresList>()
                .Property(e => e.STORE_EMAIL_ADDRESS)
                .IsUnicode(false);

            modelBuilder.Entity<vw_TaskActionResult>()
                .Property(e => e.AGENT_ACTION_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<vw_TaskActionResult>()
                .Property(e => e.AGENT_RESULT1_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<vw_TaskActionResult>()
                .Property(e => e.AGENT_RESULT2_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<vw_TaskActionResult>()
                .Property(e => e.RIS_Audit_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<Xah>()
                .Property(e => e.Spell_TRANS_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<Xah>()
                .Property(e => e.ah)
                .IsUnicode(false);

            modelBuilder.Entity<Xah>()
                .Property(e => e.ACH_AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<Xah>()
                .Property(e => e.MANUAL_TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xah>()
                .Property(e => e.ACH_RESULT_CODE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xah>()
                .Property(e => e.ABA_NO)
                .IsUnicode(false);

            modelBuilder.Entity<Xah>()
                .Property(e => e.BANK_NO)
                .IsUnicode(false);

            modelBuilder.Entity<Xah>()
                .Property(e => e.STATEMENT_ID)
                .IsUnicode(false);

            modelBuilder.Entity<Xah>()
                .Property(e => e.PRINC_AMT_FOR_INTEREST_CREDIT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xah>()
                .Property(e => e.FEES_AMT_FOR_INTEREST_CREDIT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xah>()
                .Property(e => e.INTEREST_DUE_CAP)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xah>()
                .Property(e => e.CAB_INTEREST_DUE_CAP)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xah>()
                .Property(e => e._as)
                .IsUnicode(false);

            modelBuilder.Entity<Xah>()
                .Property(e => e.FILE_NAME_SENT)
                .IsUnicode(false);

            modelBuilder.Entity<Xah>()
                .Property(e => e.FILE_NAME_UPDATED)
                .IsUnicode(false);

            modelBuilder.Entity<Xah>()
                .Property(e => e.ITEM_TOTAL)
                .HasPrecision(19, 4);

            modelBuilder.Entity<Xah>()
                .Property(e => e.ar)
                .IsUnicode(false);

            modelBuilder.Entity<Xah>()
                .Property(e => e.FILE_NAME_RECV)
                .IsUnicode(false);

            modelBuilder.Entity<Xah>()
                .Property(e => e.PAID_TOTAL)
                .HasPrecision(19, 4);

            modelBuilder.Entity<Xah>()
                .Property(e => e.UNPAID_TOTAL)
                .HasPrecision(19, 4);

            modelBuilder.Entity<Xca>()
                .Property(e => e.LASTNAME)
                .IsUnicode(false);

            modelBuilder.Entity<Xca>()
                .Property(e => e.FIRSTNAME)
                .IsUnicode(false);

            modelBuilder.Entity<Xca>()
                .Property(e => e.X)
                .IsUnicode(false);

            modelBuilder.Entity<Xca>()
                .Property(e => e.Spell_ADDRESS_SOURCE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<Xca>()
                .Property(e => e.Spell_ADDRESS_STATUS_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<Xca>()
                .Property(e => e.Spell_ADDRESS_TYPE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<Xca>()
                .Property(e => e.Spell_ADDR_SUFFIX)
                .IsUnicode(false);

            modelBuilder.Entity<Xca>()
                .Property(e => e.Spell_ADDR_SUITE)
                .IsUnicode(false);

            modelBuilder.Entity<Xca>()
                .Property(e => e.Z)
                .IsUnicode(false);

            modelBuilder.Entity<Xca>()
                .Property(e => e.ADDRESS_CONTACT_LAST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<Xca>()
                .Property(e => e.ADDRESS_CONTACT_FIRST_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<Xca>()
                .Property(e => e.CITY)
                .IsUnicode(false);

            modelBuilder.Entity<Xca>()
                .Property(e => e.STATE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xca>()
                .Property(e => e.ZIPCODE)
                .IsUnicode(false);

            modelBuilder.Entity<Xca>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xca>()
                .Property(e => e.STATUS_CHANGE_TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xca>()
                .Property(e => e.PRIORITY_CHANGE_TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xca>()
                .Property(e => e.ADDR_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<Xca>()
                .Property(e => e.ADDR_PRE_DIR)
                .IsUnicode(false);

            modelBuilder.Entity<Xca>()
                .Property(e => e.ADDR_STREET)
                .IsUnicode(false);

            modelBuilder.Entity<Xca>()
                .Property(e => e.ADDR_SUFFIX)
                .IsUnicode(false);

            modelBuilder.Entity<Xca>()
                .Property(e => e.ADDR_POST_DIR)
                .IsUnicode(false);

            modelBuilder.Entity<Xca>()
                .Property(e => e.ADDR_SUITE)
                .IsUnicode(false);

            modelBuilder.Entity<Xca>()
                .Property(e => e.ADDR_SUITE_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<Xca>()
                .Property(e => e.LAST_UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xca>()
                .Property(e => e.COUNTY)
                .IsUnicode(false);

            modelBuilder.Entity<Xca>()
                .Property(e => e.COUNTRY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xca>()
                .Property(e => e.ADDRESS_FORMAT)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xca>()
                .Property(e => e.FLAT_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<Xca>()
                .Property(e => e.BUILDING_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<Xca>()
                .Property(e => e.BUILDING_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<Xca>()
                .Property(e => e.ADDRESS_LINE)
                .IsUnicode(false);

            modelBuilder.Entity<Xca>()
                .Property(e => e.ADDRESS_CSZ)
                .IsUnicode(false);

            modelBuilder.Entity<Xca>()
                .Property(e => e.ADDRESS_LINE_3)
                .IsUnicode(false);

            modelBuilder.Entity<Xca>()
                .Property(e => e.ADDRESS_LINE_1)
                .IsUnicode(false);

            modelBuilder.Entity<Xca>()
                .Property(e => e.ADDRESS_LINE_2)
                .IsUnicode(false);

            modelBuilder.Entity<Xca>()
                .Property(e => e.REMOVED_REASON_NOTES)
                .IsUnicode(false);

            modelBuilder.Entity<Xccp>()
                .Property(e => e.Spell_TRANS_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<Xccp>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xccp>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<Xccp>()
                .Property(e => e.PAID_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xcct>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xcct>()
                .Property(e => e.REQ_FILE_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xcct>()
                .Property(e => e.CCARD_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<Xcct>()
                .Property(e => e.CCARD_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<Xcct>()
                .Property(e => e.MAG_STRIP)
                .IsUnicode(false);

            modelBuilder.Entity<Xcct>()
                .Property(e => e.CHARGE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xcct>()
                .Property(e => e.ERROR_MSG)
                .IsUnicode(false);

            modelBuilder.Entity<Xcct>()
                .Property(e => e.AUTH_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<Xcct>()
                .Property(e => e.RESULT_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<Xcct>()
                .Property(e => e.DECLINE_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<Xcct>()
                .Property(e => e.AVS_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<Xcct>()
                .Property(e => e.CVV_CODE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xcct>()
                .Property(e => e.TOKEN)
                .IsUnicode(false);

            modelBuilder.Entity<Xcct>()
                .Property(e => e.FEE_CHARGED_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xcct>()
                .Property(e => e.VENDOR_RESPONSE)
                .IsUnicode(false);

            modelBuilder.Entity<Xcct>()
                .Property(e => e.EPDQ_TRANS_ID)
                .IsUnicode(false);

            modelBuilder.Entity<Xcct>()
                .Property(e => e.VENDOR_POST)
                .IsUnicode(false);

            modelBuilder.Entity<Xcct>()
                .Property(e => e.DECLINE_CODE_TWO_CHAR)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xcct>()
                .Property(e => e.AVS_CODE_TWO_CHAR)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xcm>()
                .Property(e => e.CR_TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xcm>()
                .Property(e => e.ra)
                .IsUnicode(false);

            modelBuilder.Entity<Xcm>()
                .Property(e => e.AUDIT)
                .IsUnicode(false);

            modelBuilder.Entity<Xcm>()
                .Property(e => e.DESC)
                .IsUnicode(false);

            modelBuilder.Entity<Xcm>()
                .Property(e => e.SHORT)
                .IsUnicode(false);

            modelBuilder.Entity<Xfl>()
                .Property(e => e.FORM_LETTER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<Xfl>()
                .Property(e => e.FORM_LETTER_DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<Xfl>()
                .Property(e => e.FORM_LETTER_BODY)
                .IsUnicode(false);

            modelBuilder.Entity<Xfl>()
                .Property(e => e.LANGUAGE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xfl>()
                .Property(e => e.MINIMUM_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xfl>()
                .Property(e => e.ON_DEMAND_PROMPT_1)
                .IsUnicode(false);

            modelBuilder.Entity<Xfl>()
                .Property(e => e.ON_DEMAND_PROMPT_2)
                .IsUnicode(false);

            modelBuilder.Entity<Xfl>()
                .Property(e => e.ON_DEMAND_PROMPT_3)
                .IsUnicode(false);

            modelBuilder.Entity<Xfl>()
                .Property(e => e.ON_DEMAND_PROMPT_4)
                .IsUnicode(false);

            modelBuilder.Entity<Xfl>()
                .Property(e => e.ON_DEMAND_PROMPT_5)
                .IsUnicode(false);

            modelBuilder.Entity<Xfl>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xfl>()
                .Property(e => e.UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xfl>()
                .Property(e => e.DELETED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xfl>()
                .Property(e => e.RISK_ASSESSMENT)
                .IsUnicode(false);

            modelBuilder.Entity<Xfl>()
                .Property(e => e.MINIMUM_RI_AMOUNT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xfl>()
                .Property(e => e.MAXIMUM_RI_AMOUNT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xflb>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xflb>()
                .Property(e => e.UPLOAD_OR_DOWNLOAD)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xflb>()
                .Property(e => e.X)
                .IsUnicode(false);

            modelBuilder.Entity<Xflb>()
                .Property(e => e.FIRSTNAME)
                .IsUnicode(false);

            modelBuilder.Entity<Xflb>()
                .Property(e => e.LSTNAME)
                .IsUnicode(false);

            modelBuilder.Entity<Xflp>()
                .Property(e => e.VENDOR_JOB_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<Xflp>()
                .Property(e => e.Spell_FL_RESULT_FILE_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<Xflp>()
                .Property(e => e.x)
                .IsUnicode(false);

            modelBuilder.Entity<Xflp>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xflp>()
                .Property(e => e.UPLOAD_OR_DOWNLOAD)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xflp>()
                .Property(e => e.y)
                .IsUnicode(false);

            modelBuilder.Entity<Xflp>()
                .Property(e => e.FORM_LETTER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<Xflp>()
                .Property(e => e.FORM_LETTER_DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<Xflp>()
                .Property(e => e.FORM_LETTER_BODY)
                .IsUnicode(false);

            modelBuilder.Entity<Xflp>()
                .Property(e => e.LANGUAGE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xflp>()
                .Property(e => e.MINIMUM_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xflp>()
                .Property(e => e.ON_DEMAND_PROMPT_1)
                .IsUnicode(false);

            modelBuilder.Entity<Xflp>()
                .Property(e => e.ON_DEMAND_PROMPT_2)
                .IsUnicode(false);

            modelBuilder.Entity<Xflp>()
                .Property(e => e.ON_DEMAND_PROMPT_3)
                .IsUnicode(false);

            modelBuilder.Entity<Xflp>()
                .Property(e => e.ON_DEMAND_PROMPT_4)
                .IsUnicode(false);

            modelBuilder.Entity<Xflp>()
                .Property(e => e.ON_DEMAND_PROMPT_5)
                .IsUnicode(false);

            modelBuilder.Entity<Xflp>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xflp>()
                .Property(e => e.UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xflp>()
                .Property(e => e.DELETED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xflr>()
                .Property(e => e.FORM_LETTER_RESULT_ERROR_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<Xflr>()
                .Property(e => e.FORM_LETTER_RESULT_FFWD_CODE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xflr>()
                .Property(e => e.FORM_LETTER_RESULT_DPV_CODE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xflr>()
                .Property(e => e.FORM_LETTER_RESULT_RET_CODE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xflr>()
                .Property(e => e.MAILING_SVC_JOB_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<Xflr>()
                .Property(e => e.Spell_FL_RESULT_FILE_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<Xflr>()
                .Property(e => e.Spell_FL_RESULT_ERROR_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<Xflr>()
                .Property(e => e.Spell_FL_FFWD_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<Xflr>()
                .Property(e => e.Spell_FL_DPV_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<Xflr>()
                .Property(e => e.Spell_FL_RET_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<Xflr>()
                .Property(e => e.x)
                .IsUnicode(false);

            modelBuilder.Entity<Xflr>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xflr>()
                .Property(e => e.UPLOAD_OR_DOWNLOAD)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xflr>()
                .Property(e => e.y)
                .IsUnicode(false);

            modelBuilder.Entity<Xflr>()
                .Property(e => e.FORM_LETTER_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<Xflr>()
                .Property(e => e.FORM_LETTER_DESCRIPTION)
                .IsUnicode(false);

            modelBuilder.Entity<Xflr>()
                .Property(e => e.FORM_LETTER_BODY)
                .IsUnicode(false);

            modelBuilder.Entity<Xflr>()
                .Property(e => e.LANGUAGE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xflr>()
                .Property(e => e.MINIMUM_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xflr>()
                .Property(e => e.ON_DEMAND_PROMPT_1)
                .IsUnicode(false);

            modelBuilder.Entity<Xflr>()
                .Property(e => e.ON_DEMAND_PROMPT_2)
                .IsUnicode(false);

            modelBuilder.Entity<Xflr>()
                .Property(e => e.ON_DEMAND_PROMPT_3)
                .IsUnicode(false);

            modelBuilder.Entity<Xflr>()
                .Property(e => e.ON_DEMAND_PROMPT_4)
                .IsUnicode(false);

            modelBuilder.Entity<Xflr>()
                .Property(e => e.ON_DEMAND_PROMPT_5)
                .IsUnicode(false);

            modelBuilder.Entity<Xflr>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xflr>()
                .Property(e => e.UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xflr>()
                .Property(e => e.DELETED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xl>()
                .Property(e => e.BUSINESS_STATE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xl>()
                .Property(e => e.c_LASTNAME)
                .IsUnicode(false);

            modelBuilder.Entity<Xl>()
                .Property(e => e.c_FIRSTNAME)
                .IsUnicode(false);

            modelBuilder.Entity<Xl>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xl>()
                .Property(e => e.CHECK_NO)
                .IsUnicode(false);

            modelBuilder.Entity<Xl>()
                .Property(e => e.LOAN_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xl>()
                .Property(e => e.ORIG_CODE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xl>()
                .Property(e => e.LOAN_STATUS)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xl>()
                .Property(e => e.LOAN_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xl>()
                .Property(e => e.LOAN_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xl>()
                .Property(e => e.CASH_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xl>()
                .Property(e => e.PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xl>()
                .Property(e => e.RATE_PCT)
                .HasPrecision(9, 5);

            modelBuilder.Entity<Xl>()
                .Property(e => e.DISC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xl>()
                .Property(e => e.REBATE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xl>()
                .Property(e => e.GRACE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xl>()
                .Property(e => e.FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xl>()
                .Property(e => e.TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xl>()
                .Property(e => e.LIEN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xl>()
                .Property(e => e.TOT_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xl>()
                .Property(e => e.ORIG_APR)
                .HasPrecision(14, 3);

            modelBuilder.Entity<Xl>()
                .Property(e => e.PRINT_LANGUAGE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xl>()
                .Property(e => e.DW_LOAN_NO)
                .IsUnicode(false);

            modelBuilder.Entity<Xl>()
                .Property(e => e.PRODUCT_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xl>()
                .Property(e => e.DISPLAY_CHECK_NO)
                .IsUnicode(false);

            modelBuilder.Entity<Xl>()
                .Property(e => e.PENDING_SCHED_ACH_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xl>()
                .Property(e => e.PENDING_COLL_ACH_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xl>()
                .Property(e => e.FASTER_PAYMENTS_FEE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xl>()
                .Property(e => e.STANDARD_RATE_PCT)
                .HasPrecision(9, 5);

            modelBuilder.Entity<Xl>()
                .Property(e => e.TILA_APR)
                .HasPrecision(14, 3);

            modelBuilder.Entity<Xl>()
                .Property(e => e.TILA_FINANCE_CHARGE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xl>()
                .Property(e => e.TILA_AMOUNT_FINANCED)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xl>()
                .Property(e => e.TILA_TOTAL_PAYMENTS)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xl>()
                .Property(e => e.Spell_DEPOSIT_STATUS)
                .IsUnicode(false);

            modelBuilder.Entity<Xl>()
                .Property(e => e.Spell_DEPOSIT_ORDER)
                .IsUnicode(false);

            modelBuilder.Entity<Xl>()
                .Property(e => e.PRODUCT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<Xlddc>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xlddc>()
                .Property(e => e.CHANGE_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<Xlp>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xlp>()
                .Property(e => e.Spell_TRANS_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<Xlp>()
                .Property(e => e.PAID_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlp>()
                .Property(e => e.Spell_PAYMENT_METHOD)
                .IsUnicode(false);

            modelBuilder.Entity<Xlp>()
                .Property(e => e.NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<Xlp>()
                .Property(e => e.PRODUCT_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xlp>()
                .Property(e => e.LOAN_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xlp>()
                .Property(e => e.x)
                .IsUnicode(false);

            modelBuilder.Entity<Xlp>()
                .Property(e => e.y)
                .IsUnicode(false);

            modelBuilder.Entity<Xlp>()
                .Property(e => e.DECREASE_AMOUNT_OWED_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xlp>()
                .Property(e => e.DECREASE_AMOUNT_OWED_REASON)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xlp>()
                .Property(e => e.APPLY_BUCKET_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlp>()
                .Property(e => e.APPLY_DUE_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xlp>()
                .Property(e => e.APPLY_BUCKET_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xlp>()
                .Property(e => e.Spell_BUCKET_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<Xlp>()
                .Property(e => e.z)
                .IsUnicode(false);

            modelBuilder.Entity<Xlp>()
                .Property(e => e.PAST_DUE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlp>()
                .Property(e => e.PENDING_ACH_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlp>()
                .Property(e => e.COLLECTIONS_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlp>()
                .Property(e => e.xx)
                .IsUnicode(false);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.XLP)
                .IsUnicode(false);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.PRODUCT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.PRODUCT_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.LOAN_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.XLPC1)
                .IsUnicode(false);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.BUYDOWN_MAX_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.BUYUP_MAX_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.CAB_LENDER_ANNUAL_INTEREST_PCT)
                .HasPrecision(9, 5);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.CAB_LENDER_RI_FEE_PER_DEFAULT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.CAB_LENDER_RI_FEE_MIN)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.DEPOSIT_METHOD_AUTO_PAYOFF_THRESHOLD_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.FASTER_PAYMENTS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.INTEREST_ANNUAL_RATE_PCT)
                .HasPrecision(6, 3);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.INTEREST_ANNUAL_RATE_DEBIT_RATE_PCT)
                .HasPrecision(9, 6);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.INTEREST_DECLINED_AUTO_PAY_PCT)
                .HasPrecision(9, 5);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.INTEREST_MIN_ANNUAL_RATE_OVERRIDE_PCT)
                .HasPrecision(9, 5);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.LOAN_AMT_DEFAULT_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.LOAN_AMT_MAX_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.LOAN_AMT_MAX_MULTI_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.LOAN_AMT_MIN_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.LOAN_AMT_MGR_OVERRIDE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.LOAN_FEE_PCT)
                .HasPrecision(9, 5);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.LOAN_FEE_MAX_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.LOAN_FEE_MIN_TO_OVERRIDE_PCT)
                .HasPrecision(9, 5);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.LOAN_LENGTH_MAX_ROLL_DAYS_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.LOAN_QUAL_INCREASE_FOR_DIRECT_DEPOSIT_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.LOAN_QUAL_INCREASE_FOR_SUCCESSFUL_LOANS_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.LOAN_QUAL_INCREASE_FOR_VALID_DEBIT_CARD_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.MAX_PAYMENT_GROSS_OR_NET)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.MAX_PAYMENT_GROSS_OR_NET_ALL_OPEN_LOANS)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.MAX_PAYMENT_PCT_OF_INCOME)
                .HasPrecision(5, 2);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.MAX_PAYMENT_PCT_OF_INCOME_ALL_OPEN_LOANS)
                .HasPrecision(5, 2);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.OVERRIDE_PCT_AMT_OF_INCOME)
                .HasPrecision(5, 2);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.OVERRIDE_PCT_INCOME_GROSS_OR_NET)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.REDUCE_APPROVAL_GROSS_OR_NET_INCOME)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.RI_FEE_PER_DEFAULT_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.RI_FEE_MIN_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.RI_FEE_MAX_PER_LOAN_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.RI_FEE_CHARGE_FOR_DEBIT_CARD_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.RI_INTEREST_ANNUAL_RATE_PCT)
                .HasPrecision(9, 5);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.RI_INTEREST_MAX_LIMIT_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.RI_INTEREST_MIN_LIMIT_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.SCORING_APPROVAL_POINTS)
                .HasPrecision(6, 2);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.SCORING_INCREASE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.SCORING_BUMP_UPS_BASED_ON_INCOME_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.SCORING_OVERRIDE_AMT)
                .HasPrecision(8, 2);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.SPLIT_FEE_AT_AMOUNT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.SPLIT_FEE_ABOVE_PCT)
                .HasPrecision(8, 6);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.WITHDRAW_DATE_METHOD)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.LOAN_FEE_MIN_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.LOAN_FEE_AMT_1)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.LOAN_FEE_AMT_2)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.LOAN_FEE_METHOD)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.LOAN_FEE_FOR_ROLLOVER_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.LOAN_FEE_INCL_DOC_PREP_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.MAX_APPROVAL_PCT_OF_INCOME_GROSS_OR_NET)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.MAX_APPROVAL_PCT_OF_INCOME)
                .HasPrecision(5, 2);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.MAX_OPEN_LOANS_PCT_OF_INCOME)
                .HasPrecision(5, 2);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.MAX_OPEN_LOANS_PCT_OF_INCOME_GROSS_OR_NET)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.LOAN_AMT_MGR_OVERRIDE_MIN_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.XLPCOE)
                .IsUnicode(false);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.ACTIVITY_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.ACTIVITY_FEE_PCT)
                .HasPrecision(6, 3);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.CASH_ADVANCE_LIMIT_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.MIN_PRINC_DUE_FOUR_WEEKS_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.MIN_PRINC_DUE_FOUR_WEEKS_PCT)
                .HasPrecision(5, 2);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.MIN_PRINC_DUE_TWO_WEEKS_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.MIN_PRINC_DUE_TWO_WEEKS_PCT)
                .HasPrecision(5, 2);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.PRINC_AMT_INCREMENT_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.XLPCT)
                .IsUnicode(false);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.APPROVAL_PCT_EMPLOYED_24_PLUS_MONTHS)
                .HasPrecision(5, 2);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.APPROVAL_PCT_EMPLOYED_6_TO_23_MONTHS)
                .HasPrecision(5, 2);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.APPROVAL_PCT_EMPLOYED_UP_TO_5_MONTHS)
                .HasPrecision(5, 2);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.APPROVAL_PCT_WHOLESALE_GREATER_THAN_1500_CHECKING_ACCT)
                .HasPrecision(5, 2);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.APPROVAL_PCT_WHOLESALE_GREATER_THAN_1500_CHECKING_ACCT_DIRECT_DEPOSIT)
                .HasPrecision(5, 2);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.APPROVAL_PCT_WHOLESALE_GREATER_THAN_1500_DEBIT_CARD)
                .HasPrecision(5, 2);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.APPROVAL_PCT_WHOLESALE_UP_TO_1500_CHECKING_ACCT)
                .HasPrecision(5, 2);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.APPROVAL_PCT_WHOLESALE_UP_TO_1500_CHECKING_ACCT_DIRECT_DEPOSIT)
                .HasPrecision(5, 2);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.APPROVAL_PCT_WHOLESALE_UP_TO_1500_DEBIT_CARD)
                .HasPrecision(5, 2);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.LEGAL_MAX_LOAN_VEHICLE_VALUE_WHOLESALE_OR_RETAIL)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.LIEN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.LOAN_AMT_MGR_OVERRIDE_VEHICLE_WHOLESALE_OR_RETAIL)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.LOAN_AMT_NO_INSURANCE_MAX_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.ORIG_FEE_PCT_2ND_LIEN)
                .HasPrecision(9, 5);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.REPO_ASSIGNMENT_MIN_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.VEH_VALUE_MIN_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpc>()
                .Property(e => e.MAX_LOAN_VEHICLE_VALUE_PCT_WHOLESALE_OR_RETAIL)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.XLPENL1)
                .IsUnicode(false);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.XLPT)
                .IsUnicode(false);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.TILA_ADDR_STREET)
                .IsUnicode(false);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.TILA_ADDRESS1)
                .IsUnicode(false);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.TILA_BUILDING_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.TILA_BUILDING_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.TILA_CERT_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.TILA_CITY)
                .IsUnicode(false);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.TILA_COUNTRY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.TILA_COUNTY)
                .IsUnicode(false);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.TILA_FLAT_NUM)
                .IsUnicode(false);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.TILA_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.TILA_PHONE)
                .IsUnicode(false);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.TILA_STATE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.TILA_ZIPCODE)
                .IsUnicode(false);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.ADDRESS_FORMAT)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.TILA_ADDRESS_CSZ)
                .IsUnicode(false);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.TILA_ADDRESS_LINE)
                .IsUnicode(false);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.TILA_ADDRESS_LINE_1)
                .IsUnicode(false);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.TILA_ADDRESS_LINE_2)
                .IsUnicode(false);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.TILA_ADDRESS_LINE_3)
                .IsUnicode(false);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.XLP)
                .IsUnicode(false);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.PRODUCT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.PRODUCT_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.LOAN_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.XLPC)
                .IsUnicode(false);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.BUYDOWN_MAX_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.BUYUP_MAX_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.CAB_LENDER_ANNUAL_INTEREST_PCT)
                .HasPrecision(9, 5);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.CAB_LENDER_RI_FEE_PER_DEFAULT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.CAB_LENDER_RI_FEE_MIN)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.DEPOSIT_METHOD_AUTO_PAYOFF_THRESHOLD_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.FASTER_PAYMENTS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.INTEREST_ANNUAL_RATE_PCT)
                .HasPrecision(6, 3);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.INTEREST_ANNUAL_RATE_DEBIT_RATE_PCT)
                .HasPrecision(9, 6);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.INTEREST_DECLINED_AUTO_PAY_PCT)
                .HasPrecision(9, 5);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.INTEREST_MIN_ANNUAL_RATE_OVERRIDE_PCT)
                .HasPrecision(9, 5);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.LOAN_AMT_DEFAULT_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.LOAN_AMT_MAX_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.LOAN_AMT_MAX_MULTI_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.LOAN_AMT_MIN_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.LOAN_AMT_MGR_OVERRIDE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.LOAN_FEE_PCT)
                .HasPrecision(9, 5);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.LOAN_FEE_MAX_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.LOAN_FEE_MIN_TO_OVERRIDE_PCT)
                .HasPrecision(9, 5);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.LOAN_LENGTH_MAX_ROLL_DAYS_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.LOAN_QUAL_INCREASE_FOR_DIRECT_DEPOSIT_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.LOAN_QUAL_INCREASE_FOR_SUCCESSFUL_LOANS_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.LOAN_QUAL_INCREASE_FOR_VALID_DEBIT_CARD_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.MAX_PAYMENT_GROSS_OR_NET)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.MAX_PAYMENT_GROSS_OR_NET_ALL_OPEN_LOANS)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.MAX_PAYMENT_PCT_OF_INCOME)
                .HasPrecision(5, 2);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.MAX_PAYMENT_PCT_OF_INCOME_ALL_OPEN_LOANS)
                .HasPrecision(5, 2);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.OVERRIDE_PCT_AMT_OF_INCOME)
                .HasPrecision(5, 2);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.OVERRIDE_PCT_INCOME_GROSS_OR_NET)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.REDUCE_APPROVAL_WHEN_LESS_THAN_PCT)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.RI_CYCLES_PAST_DUE_CALC_TYPE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.RI_FEE_PER_DEFAULT_PCT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.RI_FEE_MAX_PER_LOAN_COUNT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.RI_FEE_NO_FEE_STOP_PAY_ENABLED)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.RI_INTEREST_ENABLED)
                .HasPrecision(9, 5);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.RI_INTEREST_ANNUAL_RATE_PCT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.RI_INTEREST_MAX_LIMIT_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.SCORING_START_DATE)
                .HasPrecision(6, 2);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.SCORING_INCREASE_MAX_SCORE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.SCORING_INCREASE_MAX_PCT)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.SCORING_OVERRIDE_ENABLED)
                .HasPrecision(8, 2);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.SPLIT_FEE_ENABLED)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.SPLIT_FEE_AT_AMOUNT)
                .HasPrecision(8, 6);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.WITHDRAW_MAX_DAYS_TO_PAY_AFTER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.PENDING_PAYMENTS_AS_UNPAID_FOR_NEW_LOAN)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.LOAN_FEE_MIN_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.LOAN_FEE_AMT_1)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.LOAN_FEE_AMT_2)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.LOAN_FEE_METHOD)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.LOAN_FEE_FOR_ROLLOVER_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.MAX_APPROVAL_PCT_OF_INCOME_ENABLED)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.MAX_APPROVAL_PCT_OF_INCOME_GROSS_OR_NET)
                .HasPrecision(5, 2);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.MAX_APPROVAL_PCT_OF_INCOME_INCLUDE_OPEN_LOANS_ENABLED)
                .HasPrecision(5, 2);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.MAX_OPEN_LOANS_PCT_OF_INCOME)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.RI_FEE_EXCLUDE_PROTECTED_AUDIT_CAT_ENABLED)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.PAYMENT_SCHED_USE_CUSTOMER_PAY_CYCLE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.ACTIVITY_FEE_AMT)
                .IsUnicode(false);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.CAB_DEFAULT_LOAN_LENGTH)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.CASH_ADVANCE_DISABLED)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.CASH_ADVANCE_LIMIT_ENABLED)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.FLAT_FEE_BIWEEKLY_RATES_ENABLED)
                .HasPrecision(5, 2);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.FLAT_FEE_RULES_ENABLED)
                .HasPrecision(7, 3);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.NEW_LOAN_WITHIN_CLOSING_PREVIOUS_LOAN_DAYS)
                .IsUnicode(false);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.NON_ORDINANCE_LOCATION)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.PAY_PRINC_BEFORE_NEXT_AND_NOT_DUE)
                .HasPrecision(6, 3);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.STMTS_EMAIL_ENABLED)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.LEGAL_MAX_LOAN_VEHICLE_VALUE_PCT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.LEGAL_MAX_LOAN_VEHICLE_VALUE_WHOLESALE_OR_RETAIL)
                .HasPrecision(5, 2);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.LIEN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.LIEN_FEE_FINANCED_ENABLED)
                .HasPrecision(5, 2);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.REPO_ASSIGNMENT_MIN_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.REQUIRE_COPLEDGE_GENDER)
                .IsUnicode(false);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.REQUIRE_COPLEDGE_HEIGHT)
                .HasPrecision(5, 2);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.REQUIRE_COPLEDGE_RACE)
                .HasPrecision(5, 2);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.REQUIRE_COPLEDGE_SSN)
                .HasPrecision(5, 2);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.REQUIRE_DETAILS)
                .HasPrecision(5, 2);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.REQUIRE_EYE_COLOR)
                .HasPrecision(5, 2);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.REQUIRE_GENDER)
                .HasPrecision(5, 2);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.REQUIRE_HAIR_COLOR)
                .HasPrecision(5, 2);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.REQUIRE_HEIGHT)
                .HasPrecision(5, 2);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.REQUIRE_RACE)
                .HasPrecision(5, 2);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.USE_LEGAL_STATUS)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.USE_LIEN_HOLDER)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.USE_REGISTRATION_EXPIRES)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.USE_STATE_NUM)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.VEH_VALUE_MIN_AMT)
                .HasPrecision(9, 5);

            modelBuilder.Entity<Xlpenl>()
                .Property(e => e.MAX_LOAN_VEHICLE_VALUE_PCT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpmp>()
                .Property(e => e.lp_PRODUCT_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xlpmp>()
                .Property(e => e.lp_LOAN_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xlpmp>()
                .Property(e => e.lp_PAID_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpmp>()
                .Property(e => e.Spell_TRANS_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<Xlpmp>()
                .Property(e => e.Spell_PAYMENT_METHOD)
                .IsUnicode(false);

            modelBuilder.Entity<Xlpmp>()
                .Property(e => e.lp_TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xlpmp>()
                .Property(e => e.PENDING_SCHED_ACH_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpmp>()
                .Property(e => e.COLL_FEE_PAST_DUE_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpmp>()
                .Property(e => e.LEGAL_FEE_PAST_DUE_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpmp>()
                .Property(e => e.LOAN_FEE_DUE_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpmp>()
                .Property(e => e.TRANS_FEE_DUE_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpmp>()
                .Property(e => e.INTEREST_DUE_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpmp>()
                .Property(e => e.PRINC_DUE_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpmp>()
                .Property(e => e.PAYMENT_DUE_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpmp>()
                .Property(e => e.PAYMENT_PAST_DUE_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpmp>()
                .Property(e => e.CAB_COLL_FEE_PAST_DUE_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpmp>()
                .Property(e => e.CAB_INTEREST_DUE_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpmp>()
                .Property(e => e.NSF_FEE_PAST_DUE_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpmp>()
                .Property(e => e.INSURANCE_DUE_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpoe>()
                .Property(e => e.lp_PRODUCT_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xlpoe>()
                .Property(e => e.lp_LOAN_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xlpoe>()
                .Property(e => e.lp_PAID_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpoe>()
                .Property(e => e.Spell_TRANS_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<Xlpoe>()
                .Property(e => e.Spell_PAYMENT_METHOD)
                .IsUnicode(false);

            modelBuilder.Entity<Xlpoe>()
                .Property(e => e.lp_TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xlpoe>()
                .Property(e => e.lp_NOTE)
                .IsUnicode(false);

            modelBuilder.Entity<Xlpoe>()
                .Property(e => e.PAST_DUE_TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpoe>()
                .Property(e => e.PAST_DUE_LIEN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpoe>()
                .Property(e => e.PAST_DUE_ACTIVITY_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpoe>()
                .Property(e => e.PAST_DUE_COLL_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpoe>()
                .Property(e => e.PAST_DUE_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpoe>()
                .Property(e => e.PAST_DUE_PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpoe>()
                .Property(e => e.CURR_DUE_TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpoe>()
                .Property(e => e.CURR_DUE_LIEN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpoe>()
                .Property(e => e.CURR_DUE_ACTIVITY_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpoe>()
                .Property(e => e.CURR_DUE_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpoe>()
                .Property(e => e.CURR_DUE_PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpoe>()
                .Property(e => e.NEXT_DUE_TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpoe>()
                .Property(e => e.NEXT_DUE_LIEN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpoe>()
                .Property(e => e.NEXT_DUE_ACTIVITY_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpoe>()
                .Property(e => e.NEXT_DUE_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpoe>()
                .Property(e => e.NEXT_DUE_PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpoe>()
                .Property(e => e.NOT_DUE_TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpoe>()
                .Property(e => e.NOT_DUE_LIEN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpoe>()
                .Property(e => e.NOT_DUE_ACTIVITY_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpoe>()
                .Property(e => e.NOT_DUE_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpoe>()
                .Property(e => e.NOT_DUE_PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpoe>()
                .Property(e => e.TOT_TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpoe>()
                .Property(e => e.TOT_LIEN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpoe>()
                .Property(e => e.TOT_ACTIVITY_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpoe>()
                .Property(e => e.TOT_INTEREST_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpoe>()
                .Property(e => e.TOT_PRINC_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpoe>()
                .Property(e => e.FUNDING_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpoe>()
                .Property(e => e.FUNDING_STATUS_CODE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xlpoe>()
                .Property(e => e.PENDING_SCHED_ACH_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpoe>()
                .Property(e => e.PAST_DUE_CSO_LENDER_COLL_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpoe>()
                .Property(e => e.PAST_DUE_CSO_LENDER_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpoe>()
                .Property(e => e.CURR_DUE_CSO_LENDER_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpoe>()
                .Property(e => e.NEXT_DUE_CSO_LENDER_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpoe>()
                .Property(e => e.NOT_DUE_CSO_LENDER_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpoe>()
                .Property(e => e.TOT_PAST_DUE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpoe>()
                .Property(e => e.TOT_CURR_DUE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpoe>()
                .Property(e => e.TOT_NEXT_DUE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpoe>()
                .Property(e => e.TOT_NOT_DUE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpoe>()
                .Property(e => e.TOT_CSO_LENDER_INTEREST_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpsp>()
                .Property(e => e.lp_PRODUCT_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xlpsp>()
                .Property(e => e.lp_LOAN_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xlpsp>()
                .Property(e => e.lp_PAID_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpsp>()
                .Property(e => e.Spell_TRANS_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<Xlpsp>()
                .Property(e => e.Spell_PAYMENT_METHOD)
                .IsUnicode(false);

            modelBuilder.Entity<Xlpsp>()
                .Property(e => e.lp_TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xlpsp>()
                .Property(e => e.COLL_FEE_DUE_PAID_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpsp>()
                .Property(e => e.LEGAL_FEE_DUE_PAID_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpsp>()
                .Property(e => e.LOAN_FEE_DUE_PAID_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpsp>()
                .Property(e => e.INTEREST_DUE_PAID_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpsp>()
                .Property(e => e.CAB_INTEREST_DUE_PAID_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpsp>()
                .Property(e => e.PRINC_DUE_PAID_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpsp>()
                .Property(e => e.CAB_LENDER_COLL_FEE_PAST_DUE_PAID_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xlpsp>()
                .Property(e => e.NSF_FEE_DUE_PAID_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmpi>()
                .Property(e => e.PRINC_DUE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmpi>()
                .Property(e => e.INTEREST_ADDED)
                .HasPrecision(14, 10);

            modelBuilder.Entity<Xmpi>()
                .Property(e => e.LOAN_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmpi>()
                .Property(e => e.TRANS_FEE_ADDED)
                .HasPrecision(14, 10);

            modelBuilder.Entity<Xmpi>()
                .Property(e => e.CAB_INTEREST_ADDED)
                .HasPrecision(14, 10);

            modelBuilder.Entity<Xmpi>()
                .Property(e => e.COLLECTIONS_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.X1)
                .IsUnicode(false);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.ANNUAL_RATE_PCT)
                .HasPrecision(6, 3);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.MONTHLY_RATE_PCT)
                .HasPrecision(6, 3);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.DAILY_RATE_PCT)
                .HasPrecision(12, 10);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.ACTUARIAL_APR)
                .HasPrecision(18, 7);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.ODD_DAYS_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.SCHED_LAST_PAYMENT_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.LAST_PAYMENT_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.NEXT_DUE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.EST_FINANCE_CHARGE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.CREDIT_LIMIT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.PENDING_SCHED_ACH_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.PAYMENT_PLAN_FEE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.TRANS_FEE_METHOD)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.TRANS_FEE_COLORADO_POSTPONE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.COLL_FEE_PAST_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.LEGAL_FEE_PAST_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.LOAN_FEE_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.TRANS_FEE_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.INTEREST_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.PRINC_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.PAYMENT_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.PAYMENT_PAST_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.COLLECTIONS_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.CAB_ANNUAL_RATE_PCT)
                .HasPrecision(6, 3);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.CAB_MONTHLY_RATE_PCT)
                .HasPrecision(6, 3);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.CAB_DAILY_RATE_PCT)
                .HasPrecision(12, 10);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.CAB_COLL_FEE_PAST_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.CAB_INTEREST_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.APPLY_DISCOUNT_TO)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.RI_FEE_PER_DEFAULT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.NSF_FEE_PAST_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.DAILY_INTEREST_AMT)
                .HasPrecision(27, 18);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.INSURANCE_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.X2)
                .IsUnicode(false);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.LOAN_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.LOAN_STATUS)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.LOAN_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.LOAN_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.CASH_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.CHECK_NO)
                .IsUnicode(false);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.PRODUCT_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.ORIG_CODE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.RATE_PCT)
                .HasPrecision(9, 5);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.DISC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.REBATE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.GRACE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.L_TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.LIEN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.TOT_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.INSURANCE_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.ORIG_APR)
                .HasPrecision(14, 3);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.PRINT_LANGUAGE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xmpl>()
                .Property(e => e.DW_LOAN_NO)
                .IsUnicode(false);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.xa)
                .IsUnicode(false);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.LOAN_STATUS)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.C_LOAN_STATUS)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.xb)
                .IsUnicode(false);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.LOAN_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.C_LOAN_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.xc)
                .IsUnicode(false);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.RI_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.C_RI_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.xd)
                .IsUnicode(false);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.C_PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.xe)
                .IsUnicode(false);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.CASH_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.C_CASH_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.xf)
                .IsUnicode(false);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.LOAN_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.C_LOAN_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.xg)
                .IsUnicode(false);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.C_TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.xh)
                .IsUnicode(false);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.LIEN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.C_LIEN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.xi)
                .IsUnicode(false);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.xj)
                .IsUnicode(false);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.xk)
                .IsUnicode(false);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.xl)
                .IsUnicode(false);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.xm)
                .IsUnicode(false);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.xn)
                .IsUnicode(false);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.xo)
                .IsUnicode(false);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.LAST_PAYMENT_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.C_LAST_PAYMENT_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.xp)
                .IsUnicode(false);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.NEXT_DUE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.C_NEXT_DUE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.xq)
                .IsUnicode(false);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.xr)
                .IsUnicode(false);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.PENDING_SCHED_ACH_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.C_PENDING_SCHED_ACH_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.xs)
                .IsUnicode(false);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.PAYMENT_PAST_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.C_PAYMENT_PAST_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.xt)
                .IsUnicode(false);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.PAYMENT_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.C_PAYMENT_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.xu)
                .IsUnicode(false);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.NSF_FEE_PAST_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.C_NSF_FEE_PAST_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.xv)
                .IsUnicode(false);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.COLL_FEE_PAST_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.C_COLL_FEE_PAST_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.xw)
                .IsUnicode(false);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.LEGAL_FEE_PAST_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.C_LEGAL_FEE_PAST_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.xx)
                .IsUnicode(false);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.LOAN_FEE_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.C_LOAN_FEE_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.xy)
                .IsUnicode(false);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.TRANS_FEE_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.C_TRANS_FEE_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.xz)
                .IsUnicode(false);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.INTEREST_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.C_INTEREST_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.x0)
                .IsUnicode(false);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.INSURANCE_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.C_INSURANCE_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.x1)
                .IsUnicode(false);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.PRINC_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.C_PRINC_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.x2)
                .IsUnicode(false);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.TRANS_FEE_COLORADO_POSTPONE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.C_TRANS_FEE_COLORADO_POSTPONE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.x3)
                .IsUnicode(false);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.CAB_INTEREST_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.C_CAB_INTEREST_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.x4)
                .IsUnicode(false);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.CAB_COLL_FEE_PAST_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.C_CAB_COLL_FEE_PAST_DUE_BAL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.x5)
                .IsUnicode(false);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.INVENTORY_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.C_INVENTORY_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xmplisa>()
                .Property(e => e.x6)
                .IsUnicode(false);

            modelBuilder.Entity<Xoei>()
                .Property(e => e.PRINC_DUE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoei>()
                .Property(e => e.INTEREST_ADDED)
                .HasPrecision(14, 10);

            modelBuilder.Entity<Xoei>()
                .Property(e => e.LOAN_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoei>()
                .Property(e => e.CSO_LENDER_INTEREST_ADDED)
                .HasPrecision(14, 10);

            modelBuilder.Entity<Xoei>()
                .Property(e => e.CAB_FEE_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoei>()
                .Property(e => e.COLLECTIONS_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.BUSINESS_STATE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.LOAN_STATUS)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.LOAN_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.x)
                .IsUnicode(false);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.LAST_PAYMENT_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.LAST_CASH_ADV_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.PAST_DUE_TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.PAST_DUE_LIEN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.PAST_DUE_ACTIVITY_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.PAST_DUE_COLL_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.PAST_DUE_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.PAST_DUE_PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.CURR_DUE_TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.CURR_DUE_LIEN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.CURR_DUE_ACTIVITY_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.CURR_DUE_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.CURR_DUE_PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.NEXT_DUE_TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.NEXT_DUE_LIEN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.NEXT_DUE_ACTIVITY_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.NEXT_DUE_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.NEXT_DUE_PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.NOT_DUE_TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.NOT_DUE_LIEN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.NOT_DUE_ACTIVITY_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.NOT_DUE_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.NOT_DUE_PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.CREDIT_LIMIT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.CREDIT_AVAIL)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.LIEN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.ACTIVITY_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.INTEREST_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.PRINC_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.PENDING_SCHED_ACH_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.PAST_DUE_CSO_LENDER_COLL_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.PAST_DUE_CSO_LENDER_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.CURR_DUE_CSO_LENDER_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.NEXT_DUE_CSO_LENDER_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.NOT_DUE_CSO_LENDER_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.CSO_LENDER_ANNUAL_RATE_PCT)
                .HasPrecision(6, 3);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.CSO_LENDER_MONTHLY_RATE_PCT)
                .HasPrecision(6, 3);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.CSO_LENDER_DAILY_RATE_PCT)
                .HasPrecision(12, 10);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.CURR_DUE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.NEXT_DUE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.NOT_DUE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.PRINT_TOT_CSO_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.PRINT_PAYMENT1_PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.PRINT_PAYMENT2_PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.PRINT_PAYMENT1_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.PRINT_PAYMENT2_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.PRINT_TOT_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.PRINT_TOT_PAYMENTS_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.COLLECTIONS_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.PRINT_PAYMENT1_TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.PRINT_PAYMENT2_TRANS_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.PRINT_PAYMENT1_TOTAL_DUE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.PRINT_PAYMENT2_TOTAL_DUE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.MIN_PRINC_DUE_TWO_WEEKS_PCT)
                .HasPrecision(5, 2);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.MIN_PRINC_DUE_FOUR_WEEKS_PCT)
                .HasPrecision(5, 2);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.MIN_PRINC_DUE_TWO_WEEKS_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.MIN_PRINC_DUE_FOUR_WEEKS_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.PRINT_CASH_ADV_PAYMENT1_TOTAL_DUE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.PRINT_CASH_ADV_PAYMENT2_TOTAL_DUE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.PRINT_CASH_ADV_PAYMENT1_PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.PRINT_CASH_ADV_PAYMENT2_PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.PRINT_CASH_ADV_PAYMENT1_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.PRINT_CASH_ADV_PAYMENT2_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.PRINT_CASH_ADV_TOT_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.PRINT_CASH_ADV_TOT_CSO_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.PRINT_CASH_ADV_TOT_PAYMENTS_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.PRINT_CASH_ADV_FINAL_PAYMENT_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.CSO_LENDER_INTEREST_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.ACTIVITY_FEE_TWO_WEEK_PCT)
                .HasPrecision(6, 3);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.ACTIVITY_FEE_FOUR_WEEK_PCT)
                .HasPrecision(6, 3);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.PRINT_CASH_ADV_FINANCE_CHARGE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.CREDIT_AVAILABLE_FOR_BUYUP)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.CREDIT_LIMIT_NON_ORDINANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.CREDIT_AVAILABLE_FOR_BUYUP_NON_ORDINANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.LAST_CAB_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xoel>()
                .Property(e => e.PAST_DUE_AMT)
                .HasPrecision(9, 2);

            modelBuilder.Entity<Xrr>()
                .Property(e => e.product_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xrr>()
                .Property(e => e.TLR)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xrr>()
                .Property(e => e.AMOUNT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xrr>()
                .Property(e => e.SURCHG)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xrr>()
                .Property(e => e.MANUAL_TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xrr>()
                .Property(e => e.RI_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xrr>()
                .Property(e => e.DOS_MIGRATED_ID)
                .IsUnicode(false);

            modelBuilder.Entity<Xrr>()
                .Property(e => e.MANUAL_ACH_AMOUNT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xrr>()
                .Property(e => e.REFERENCE)
                .IsUnicode(false);

            modelBuilder.Entity<Xrr>()
                .Property(e => e.CR_TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xrr>()
                .Property(e => e.X1)
                .IsUnicode(false);

            modelBuilder.Entity<Xrr>()
                .Property(e => e.ra_AUDIT)
                .IsUnicode(false);

            modelBuilder.Entity<Xrr>()
                .Property(e => e.ra_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<Xrr>()
                .Property(e => e.ra_SHORT)
                .IsUnicode(false);

            modelBuilder.Entity<Xrr>()
                .Property(e => e.X2)
                .IsUnicode(false);

            modelBuilder.Entity<Xrr>()
                .Property(e => e.rt_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<Xrr>()
                .Property(e => e.rt_DESC)
                .IsUnicode(false);

            modelBuilder.Entity<Xrr>()
                .Property(e => e.X3)
                .IsUnicode(false);

            modelBuilder.Entity<Xrr>()
                .Property(e => e.c_LASTNAME)
                .IsUnicode(false);

            modelBuilder.Entity<Xrr>()
                .Property(e => e.c_FIRSTNAME)
                .IsUnicode(false);

            modelBuilder.Entity<Xsd>()
                .Property(e => e.SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<Xsd>()
                .Property(e => e.SERVICE_COST)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xsd>()
                .Property(e => e.SERVICE_FEE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xsd>()
                .Property(e => e.MAX_CHARGE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xsd>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xsd>()
                .Property(e => e.UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xsd>()
                .Property(e => e.MIN_CHARGE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xsd>()
                .Property(e => e.FUNCTION_AS)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xsm>()
                .Property(e => e.SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<Xsm>()
                .Property(e => e.FUNCTION_AS)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xsm>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xsm>()
                .Property(e => e.UPDATED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xsplisa>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xsplisa>()
                .Property(e => e.xa)
                .IsUnicode(false);

            modelBuilder.Entity<Xsplisa>()
                .Property(e => e.LOAN_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xsplisa>()
                .Property(e => e.C_LOAN_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xsplisa>()
                .Property(e => e.xb)
                .IsUnicode(false);

            modelBuilder.Entity<Xsplisa>()
                .Property(e => e.PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xsplisa>()
                .Property(e => e.C_PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xsplisa>()
                .Property(e => e.xc)
                .IsUnicode(false);

            modelBuilder.Entity<Xsplisa>()
                .Property(e => e.CASH_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xsplisa>()
                .Property(e => e.C_CASH_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xsplisa>()
                .Property(e => e.xd)
                .IsUnicode(false);

            modelBuilder.Entity<Xsplisa>()
                .Property(e => e.LOAN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xsplisa>()
                .Property(e => e.C_LOAN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xsplisa>()
                .Property(e => e.xe)
                .IsUnicode(false);

            modelBuilder.Entity<Xsplisa>()
                .Property(e => e.LIEN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xsplisa>()
                .Property(e => e.C_LIEN_FEE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xsplisa>()
                .Property(e => e.xf)
                .IsUnicode(false);

            modelBuilder.Entity<Xsplisa>()
                .Property(e => e.LOAN_STATUS)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xsplisa>()
                .Property(e => e.C_LOAN_STATUS)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xsplisa>()
                .Property(e => e.xg)
                .IsUnicode(false);

            modelBuilder.Entity<Xsplisa>()
                .Property(e => e.LOAN_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xsplisa>()
                .Property(e => e.C_LOAN_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xsplisa>()
                .Property(e => e.xh)
                .IsUnicode(false);

            modelBuilder.Entity<Xsplisa>()
                .Property(e => e.RI_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xsplisa>()
                .Property(e => e.C_RI_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xsplisa>()
                .Property(e => e.xi)
                .IsUnicode(false);

            modelBuilder.Entity<Xsplisa>()
                .Property(e => e.xj)
                .IsUnicode(false);

            modelBuilder.Entity<Xsplisa>()
                .Property(e => e.xk)
                .IsUnicode(false);

            modelBuilder.Entity<Xsplisa>()
                .Property(e => e.xl)
                .IsUnicode(false);

            modelBuilder.Entity<Xsplisa>()
                .Property(e => e.PENDING_SCHED_ACH_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xsplisa>()
                .Property(e => e.C_PENDING_SCHED_ACH_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xsplisa>()
                .Property(e => e.xm)
                .IsUnicode(false);

            modelBuilder.Entity<Xsplisa>()
                .Property(e => e.COLL_FEE_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xsplisa>()
                .Property(e => e.C_COLL_FEE_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xsplisa>()
                .Property(e => e.xn)
                .IsUnicode(false);

            modelBuilder.Entity<Xsplisa>()
                .Property(e => e.LEGAL_FEE_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xsplisa>()
                .Property(e => e.C_LEGAL_FEE_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xsplisa>()
                .Property(e => e.xo)
                .IsUnicode(false);

            modelBuilder.Entity<Xsplisa>()
                .Property(e => e.LOAN_FEE_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xsplisa>()
                .Property(e => e.C_LOAN_FEE_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xsplisa>()
                .Property(e => e.xp)
                .IsUnicode(false);

            modelBuilder.Entity<Xsplisa>()
                .Property(e => e.INTEREST_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xsplisa>()
                .Property(e => e.C_INTEREST_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xsplisa>()
                .Property(e => e.xq)
                .IsUnicode(false);

            modelBuilder.Entity<Xsplisa>()
                .Property(e => e.PRINC_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xsplisa>()
                .Property(e => e.C_PRINC_BALANCE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xsplisa>()
                .Property(e => e.xr)
                .IsUnicode(false);

            modelBuilder.Entity<Xsplisa>()
                .Property(e => e.TOTAL_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xsplisa>()
                .Property(e => e.C_TOTAL_INTEREST_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xsplisa>()
                .Property(e => e.xs)
                .IsUnicode(false);

            modelBuilder.Entity<Xsplisa>()
                .Property(e => e.INVENTORY_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xsplisa>()
                .Property(e => e.C_INVENTORY_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xsplisa>()
                .Property(e => e.xt)
                .IsUnicode(false);

            modelBuilder.Entity<Xssrd>()
                .Property(e => e.ssrd)
                .IsUnicode(false);

            modelBuilder.Entity<Xssrd>()
                .Property(e => e.OPT_BUYDOWN_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xssrd>()
                .Property(e => e.LOAN_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xssrd>()
                .Property(e => e.PRINC_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xssrd>()
                .Property(e => e.LOAN_ATR)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xssrd>()
                .Property(e => e.ssr)
                .IsUnicode(false);

            modelBuilder.Entity<Xst>()
                .Property(e => e.SERVICE_FEE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xst>()
                .Property(e => e.SERVICE_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xst>()
                .Property(e => e.ENTERED_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xst>()
                .Property(e => e.CALC_EXTEND)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xst>()
                .Property(e => e.SD)
                .IsUnicode(false);

            modelBuilder.Entity<Xst>()
                .Property(e => e.sd_SERVICE_COST)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xst>()
                .Property(e => e.sd_SERVICE_FEE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xst>()
                .Property(e => e.sd_MAX_CHARGE)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xst>()
                .Property(e => e.SM)
                .IsUnicode(false);

            modelBuilder.Entity<Xst>()
                .Property(e => e.sm_SERVICE_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<Xst>()
                .Property(e => e.sm_FUNCTION_AS)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xtd>()
                .Property(e => e.Spell_TRANS_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<Xtd>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xtd>()
                .Property(e => e.PRODUCT_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xtd>()
                .Property(e => e.LOAN_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xtd>()
                .Property(e => e.X)
                .IsUnicode(false);

            modelBuilder.Entity<Xtd>()
                .Property(e => e.tp_CASH_RECV)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xtd>()
                .Property(e => e.tp_CASH_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xtd>()
                .Property(e => e.tp_CCARD_RECV)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xtd>()
                .Property(e => e.tp_CCARD_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xtda>()
                .Property(e => e.AMOUNT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<Xtda>()
                .Property(e => e.DEBIT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<Xtda>()
                .Property(e => e.CREDIT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<Xtda>()
                .Property(e => e.Spell_ACCT_TYPE)
                .IsUnicode(false);

            modelBuilder.Entity<Xtda>()
                .Property(e => e.GL)
                .IsUnicode(false);

            modelBuilder.Entity<Xtda>()
                .Property(e => e.gl_DESCRIPTON)
                .IsUnicode(false);

            modelBuilder.Entity<Xtda>()
                .Property(e => e.TD)
                .IsUnicode(false);

            modelBuilder.Entity<Xtda>()
                .Property(e => e.Spell_td_TRANS_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<Xtda>()
                .Property(e => e.td_PRODUCT_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xtda>()
                .Property(e => e.td_LOAN_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xtda>()
                .Property(e => e.TP)
                .IsUnicode(false);

            modelBuilder.Entity<Xtda>()
                .Property(e => e.tp_CASH_RECV)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xtda>()
                .Property(e => e.tp_CASH_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xtda>()
                .Property(e => e.tp_CCARD_RECV)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xtda>()
                .Property(e => e.tp_CCARD_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xtdcash>()
                .Property(e => e.CASH_FROM)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xtdcash>()
                .Property(e => e.CASH_TO)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xtdcash>()
                .Property(e => e.CASH_AMT)
                .HasPrecision(19, 4);

            modelBuilder.Entity<Xtdcash>()
                .Property(e => e.CCARD_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xtdcheck>()
                .Property(e => e.CHECK_FROM)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xtdcheck>()
                .Property(e => e.CHECK_TO)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xtdcheck>()
                .Property(e => e.CHECK_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xtdcheck>()
                .Property(e => e.DEPOSIT_METHOD)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xtdcheck>()
                .Property(e => e.X)
                .IsUnicode(false);

            modelBuilder.Entity<Xtdcheck>()
                .Property(e => e.Spell_TD_TRANS_CODE)
                .IsUnicode(false);

            modelBuilder.Entity<Xtdloan>()
                .Property(e => e.LOAN_FROM)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xtdloan>()
                .Property(e => e.LOAN_TO)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xtdloan>()
                .Property(e => e.LOAN_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xtdloan>()
                .Property(e => e.LOAN_AMT)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xtdloan>()
                .Property(e => e.PRODUCT_TYPE)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xti>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xti>()
                .Property(e => e.PASSWORD)
                .IsUnicode(false);

            modelBuilder.Entity<Xti>()
                .Property(e => e.FIRSTNAME)
                .IsUnicode(false);

            modelBuilder.Entity<Xti>()
                .Property(e => e.LSTNAME)
                .IsUnicode(false);

            modelBuilder.Entity<Xti>()
                .Property(e => e.RSAPassword)
                .IsUnicode(false);

            modelBuilder.Entity<Xti>()
                .Property(e => e.SWIPE_ID)
                .IsUnicode(false);

            modelBuilder.Entity<Xti>()
                .Property(e => e.SSN)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xti>()
                .Property(e => e.ADP_ID)
                .IsUnicode(false);

            modelBuilder.Entity<Xti>()
                .Property(e => e.CERT_BY)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xti>()
                .Property(e => e.LOCATION_LISTVIEW_COLUMNS)
                .IsUnicode(false);

            modelBuilder.Entity<Xti>()
                .Property(e => e.LOCATION_LISTVIEW_COLUMN_WIDTHS)
                .IsUnicode(false);

            modelBuilder.Entity<Xti>()
                .Property(e => e.LOCATION_LISTVIEW_SORT)
                .IsUnicode(false);

            modelBuilder.Entity<Xti>()
                .Property(e => e.SAM_ACCOUNT_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<Xti>()
                .Property(e => e.X)
                .IsUnicode(false);

            modelBuilder.Entity<Xti>()
                .Property(e => e.SG_NAME)
                .IsUnicode(false);

            modelBuilder.Entity<Xti>()
                .Property(e => e.SG_VALUES)
                .IsUnicode(false);

            modelBuilder.Entity<Xtp>()
                .Property(e => e.TELLER)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<Xtp>()
                .Property(e => e.CASH_RECV)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xtp>()
                .Property(e => e.CASH_PAID)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xtp>()
                .Property(e => e.CCARD_RECV)
                .HasPrecision(10, 4);

            modelBuilder.Entity<Xtp>()
                .Property(e => e.CCARD_PAID)
                .HasPrecision(10, 4);
        }
    }
}
