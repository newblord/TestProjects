<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Security.Cryptography.X509Certificates" #>
<#@ assembly name="EnvDTE" #> 
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Xml.Serialization" #>
<#@ import namespace="System.IO" #>
<#@ assembly name="envdte80" #>

<#

	WriteLine("// Generated items");

	var fileManager = TemplateFileManager.Create(this);
	fileManager.StartHeader();

	#region Unit of work
 
	if (Setting.GenerateUnitOfWorkInterface)
	{
		fileManager.StartNewFile(Setting.DatabaseContextInterfaceName + Setting.FileExtension, ContextProjectName, ContextFolderName);
	
		CreateHeader();

		WriteLine("using System;");
		WriteLine("using System.Data.Entity;");
		WriteLine("using {0};", PocoNamespace);

		if (IsSupportedFrameworkVersion("4.5")) 
		{ 
			WriteLine("using System.Threading;");
			WriteLine("using System.Threading.Tasks;");
		}

		if(storedProcs.Any())
		{
			WriteLine("using System.Linq;");
		}
		WriteLine("");

		BeginNamespace(UnitOfWorkNamespace);
		BeginInterface(Setting.DatabaseContextInterfaceName, Setting.MakeContextInterfacePartial, Setting.ContextInterfaceBaseClass);

		foreach (Table tbl in from t in tables.Where(t => !t.IsMapping && t.HasPrimaryKey).OrderBy(x => x.NameHumanCase) select t)
		{
			WriteLine("DbSet<{0}> {1} {{ get; set; }}{2}",tbl.NameHumanCase, Inflector.MakePlural(tbl.NameHumanCase), Setting.IncludeComments != CommentsStyle.None ? " // " + tbl.Name : "" );
		}
	
		WriteLine("");

		foreach (string s in AdditionalContextInterfaceItems.Where(x => !string.IsNullOrEmpty(x)))
		{ 
			WriteLine(s);
		}

		WriteLine("");
		WriteLine("int SaveChanges();");

		if (IsSupportedFrameworkVersion("4.5")) 
		{ 
			WriteLine("Task<int> SaveChangesAsync();");
			WriteLine("Task<int> SaveChangesAsync(CancellationToken cancellationToken);");
		} 

		if (storedProcs.Any()) 
		{ 
			WriteLine("");
			WriteLine("// Stored Procedures");
			foreach (StoredProcedure sp in storedProcs)
			{
				int returnModelsCount = sp.ReturnModels.Count;
				if (returnModelsCount == 1)
				{ 
					WriteLine("{0} {1}({2});", ReversePocoCore.WriteStoredProcReturnType(sp), ReversePocoCore.WriteStoredProcFunctionName(sp), ReversePocoCore.WriteStoredProcFunctionParams(sp, false));
					WriteLine("{0} {1}({2});", ReversePocoCore.WriteStoredProcReturnType(sp), ReversePocoCore.WriteStoredProcFunctionName(sp), ReversePocoCore.WriteStoredProcFunctionParams(sp, true));
				} 
				else 
				{ 
					WriteLine("{0} {1}({2});", ReversePocoCore.WriteStoredProcReturnType(sp), ReversePocoCore.WriteStoredProcFunctionName(sp), ReversePocoCore.WriteStoredProcFunctionParams(sp, false));
				}

				if (IsSupportedFrameworkVersion("4.5"))
				{
					if(ReversePocoCore.StoredProcHasOutParams(sp) || sp.ReturnModels.Count == 0) 
					{ 
						WriteLine("// {0}Async cannot be created due to having out parameters, or is relying on the procedure result ({1})", ReversePocoCore.WriteStoredProcFunctionName(sp), ReversePocoCore.WriteStoredProcReturnType(sp));
					} 
					else 
					{ 
						WriteLine("Task<{0}> {1}Async({2});", ReversePocoCore.WriteStoredProcReturnType(sp), ReversePocoCore.WriteStoredProcFunctionName(sp), ReversePocoCore.WriteStoredProcFunctionParams(sp, false));
					} 
				} 
			}

		}

		CloseBrace();
		CloseBrace();
	}

	#endregion

	#region Database context

	if(Setting.GenerateContextClass)
	{ 
		fileManager.StartNewFile(Setting.DatabaseContextName + Setting.FileExtension, ContextProjectName, ContextFolderName);

		CreateHeader();

		WriteLine("using System;");
		WriteLine("using System.Data.Entity;");
		WriteLine("using System.Data.Entity.Infrastructure;");
		WriteLine("using System.Data.Common;");
		WriteLine("using System.Data.SqlClient;");
		WriteLine("using {0};",PocoNamespace);

		if (IsSupportedFrameworkVersion("4.5")) 
		{ 
			WriteLine("using System.Threading;");
			WriteLine("using System.Threading.Tasks;");
		}

		if(!Setting.UseDataAnnotations)
		{
			WriteLine("using {0};", PocoConfigurationNamespace);
		}
		WriteLine("");

		BeginNamespace(ContextNamespace);
		BeginClass(Setting.DatabaseContextName, Setting.MakeClassesPartial, string.Format("{0}, {1}", Setting.ContextBaseClass, Setting.DatabaseContextInterfaceName));
	
		foreach(Table tbl in from t in tables.Where(t => !t.IsMapping && t.HasPrimaryKey).OrderBy(x => x.NameHumanCase) select t)
		{
			WriteLine("public DbSet<{0}> {1}s {{ get; set; }}{2}",tbl.NameHumanCase, Inflector.MakeSingular(tbl.NameHumanCase), Setting.IncludeComments != CommentsStyle.None ? " // " + tbl.Name : "" );
		} 

		WriteLine("");
		WriteLine("static {0}()", Setting.DatabaseContextName);
		OpenMethodBrace();
		WriteLine("Database.SetInitializer<{0}>(null);",Setting.DatabaseContextName);
		CloseMethodBrace();

		WriteLine("public {0}()", Setting.DatabaseContextName);
		WriteLine("\t: base({0})",DefaultConstructorArgument);
		OpenMethodBrace();
		CloseMethodBrace();

		WriteLine("public {0}(string connectionString)", Setting.DatabaseContextName);
		WriteLine("\t: base(connectionString)");
		OpenMethodBrace();
		CloseMethodBrace();

		/*
		WriteLine("public {0}(string connectionString, DbCompiledModel model)", Setting.DatabaseContextName);
		WriteLine("\t: base(connectionString, model)");
		OpenMethodBrace();
		CloseMethodBrace();

		WriteLine("public {0}(DbConnection existingConnection, bool contextOwnsConnection)", Setting.DatabaseContextName);
		WriteLine("\t: base(existingConnection, contextOwnsConnection)");
		OpenMethodBrace();
		CloseMethodBrace();

		WriteLine("public {0}(DbConnection existingConnection, DbCompiledModel model, bool contextOwnsConnection)", Setting.DatabaseContextName);
		WriteLine("\t: base(existingConnection, model, contextOwnsConnection)");
		OpenMethodBrace();
		CloseMethodBrace();

		WriteLine("protected override void Dispose(bool disposing)");
		OpenMethodBrace();
		WriteLine("base.Dispose(disposing);");
		CloseMethodBrace();
		*/
	
		WriteLine("public bool IsSqlParameterNull(SqlParameter param)");
		OpenMethodBrace();
		WriteLine("var sqlValue = param.SqlValue;");
		WriteLine("var nullableValue = sqlValue as System.Data.SqlTypes.INullable;");
		WriteLine("if (nullableValue != null)");
		PushIndent("\t");
		WriteLine("return nullableValue.IsNull;");
		PopIndent();
		WriteLine("return (sqlValue == null || sqlValue == DBNull.Value);");
		CloseMethodBrace();

		WriteLine("protected override void OnModelCreating(DbModelBuilder modelBuilder)");
		OpenMethodBrace();
		WriteLine("base.OnModelCreating(modelBuilder);");

		if(!Setting.UseDataAnnotations)
		{
			foreach(Table tbl in from t in tables.Where(t => !t.IsMapping && t.HasPrimaryKey).OrderBy(x => x.NameHumanCase) select t)
			{
				WriteLine("modelBuilder.Configurations.Add(new {0}());",tbl.NameHumanCase + Setting.ConfigurationClassName);
			}
		}

		CloseMethodBrace();

		WriteLine("public static DbModelBuilder CreateModel(DbModelBuilder modelBuilder, string schema)");
		OpenMethodBrace();
		
		if(!Setting.UseDataAnnotations)
		{
			foreach(Table tbl in from t in tables.Where(t => !t.IsMapping && t.HasPrimaryKey).OrderBy(x => x.NameHumanCase) select t)
			{
				WriteLine("modelBuilder.Configurations.Add(new {0}(schema));", tbl.NameHumanCase + Setting.ConfigurationClassName);
			}
		}

		WriteLine("return modelBuilder;");
		CloseMethodBrace();

		if (storedProcs.Any())
		{
			foreach (StoredProcedure sp in storedProcs)
			{
				string spReturnClassName = ReversePocoCore.WriteStoredProcReturnModelName(sp);
				string spExecName = ReversePocoCore.WriteStoredProcFunctionName(sp);
				int returnModelsCount = sp.ReturnModels.Count;
				if (returnModelsCount > 0)
				{
					if (returnModelsCount == 1)
					{
						WriteLine("public {0} {1}({2})", ReversePocoCore.WriteStoredProcReturnType(sp) , ReversePocoCore.WriteStoredProcFunctionName(sp), ReversePocoCore.WriteStoredProcFunctionParams(sp, false));
						OpenMethodBrace();
						WriteLine("int procResult;");
						WriteLine("return {0}({1});",spExecName, ReversePocoCore.WriteStoredProcFunctionOverloadCall(sp));
						CloseMethodBrace();

						WriteLine("public {0} {1}({2})", ReversePocoCore.WriteStoredProcReturnType(sp) , ReversePocoCore.WriteStoredProcFunctionName(sp), ReversePocoCore.WriteStoredProcFunctionParams(sp, true));
					} 
					else 
					{
						WriteLine("public {0} {1}({2})", ReversePocoCore.WriteStoredProcReturnType(sp) , ReversePocoCore.WriteStoredProcFunctionName(sp), ReversePocoCore.WriteStoredProcFunctionParams(sp, false));
					}
					OpenMethodBrace();
					WriteLine(ReversePocoCore.WriteStoredProcFunctionDeclareSqlParameter(sp, true));

					if (returnModelsCount == 1)
					{
						var exec = string.Format("EXEC @procResult = [{0}].[{1}] {2}", sp.Schema, sp.Name, ReversePocoCore.WriteStoredProcFunctionSqlAtParams(sp));
						WriteLine("var procResultData = Database.SqlQuery<{0}>(\"{1}\", {2}).ToList();",spReturnClassName, exec, ReversePocoCore.WriteStoredProcFunctionSqlParameterAnonymousArray(sp, true));
						WriteLine("{0}",ReversePocoCore.WriteStoredProcFunctionSetSqlParameters(sp, false));
						WriteLine("procResult = (int) procResultParam.Value;");
					}
					else
					{
						var exec = string.Format("[{0}].[{1}]", sp.Schema, sp.Name); 
						WriteLine("{0}",ReversePocoCore.WriteStoredProcFunctionSetSqlParameters(sp, false));
						WriteLine("var procResultData = new {0}();",spReturnClassName);
						WriteLine("var cmd = Database.Connection.CreateCommand();");
						WriteLine("cmd.CommandType = System.Data.CommandType.StoredProcedure;");
						WriteLine("cmd.CommandText = \"{0}\";",exec);

						foreach (var p in sp.Parameters.OrderBy(x => x.Ordinal))
						{ 
							WriteLine("cmd.Parameters.Add({0});",ReversePocoCore.WriteStoredProcSqlParameterName(p));
						} 

						WriteLine("try");
						OpenMethodBrace();
						WriteLine("Database.Connection.Open();");
						WriteLine("var reader = cmd.ExecuteReader();");
						WriteLine("var objectContext = ((IObjectContextAdapter) this).ObjectContext;");

						int n = 0;
						var returnModelCount = sp.ReturnModels.Count;
						foreach (var returnModel in sp.ReturnModels)
						{
							n++; 
							WriteLine("procResultData.ResultSet{0} = objectContext.Translate<{1}.ResultSetModel{0}>(reader).ToList();",n, spReturnClassName);
							if (n < returnModelCount)
							{ 
								WriteLine("reader.NextResult();");

							} 
						} 
						CloseMethodBrace();
						WriteLine("finally");
						OpenMethodBrace();
						WriteLine("Database.Connection.Close();");
						CloseMethodBrace();
					} 
					WriteLine("return procResultData;");
					CloseMethodBrace();

				}
				else
				{ 
					WriteLine("public int {0}({1})",spExecName, ReversePocoCore.WriteStoredProcFunctionParams(sp, true));
					OpenMethodBrace();
					WriteLine("{0} ",ReversePocoCore.WriteStoredProcFunctionDeclareSqlParameter(sp, true));
					WriteLine("Database.ExecuteSqlCommand(\"EXEC @procResult = [{0}].[{1}] {2}\", {3});",sp.Schema, sp.Name, ReversePocoCore.WriteStoredProcFunctionSqlAtParams(sp), ReversePocoCore.WriteStoredProcFunctionSqlParameterAnonymousArray(sp, true));
					WriteLine("{0} ",ReversePocoCore.WriteStoredProcFunctionSetSqlParameters(sp, false));
					WriteLine("return (int) procResultParam.Value;");
					CloseMethodBrace();

				}

				// Async
				if (IsSupportedFrameworkVersion("4.5") && !ReversePocoCore.StoredProcHasOutParams(sp) && returnModelsCount > 0)
				{
					WriteLine("public async Task<{0}> {1}Async({2})",ReversePocoCore.WriteStoredProcReturnType(sp), ReversePocoCore.WriteStoredProcFunctionName(sp), ReversePocoCore.WriteStoredProcFunctionParams(sp, false));
					OpenMethodBrace();
					WriteLine("{0}",ReversePocoCore.WriteStoredProcFunctionDeclareSqlParameter(sp, false));
					if (returnModelsCount == 1)
					{
						var parameters = ReversePocoCore.WriteStoredProcFunctionSqlParameterAnonymousArray(sp, false);
						if (!string.IsNullOrWhiteSpace(parameters))
							parameters = ", " + parameters;
						var exec = string.Format("EXEC [{0}].[{1}] {2}", sp.Schema, sp.Name, ReversePocoCore.WriteStoredProcFunctionSqlAtParams(sp));
						WriteLine("var procResultData = await Database.SqlQuery<{0}>(\"{1}\"{2}).ToListAsync();",spReturnClassName, exec, parameters);
						WriteLine("{0}",ReversePocoCore.WriteStoredProcFunctionSetSqlParameters(sp, false));
					}
					else		
					{
						var exec = string.Format("[{0}].[{1}]", sp.Schema, sp.Name); 
						WriteLine("{0}",ReversePocoCore.WriteStoredProcFunctionSetSqlParameters(sp, false));
						WriteLine("var procResultData = new {0}();",spReturnClassName);
						WriteLine("var cmd = Database.Connection.CreateCommand();");
						WriteLine("cmd.CommandType = System.Data.CommandType.StoredProcedure;");
						WriteLine("cmd.CommandText = \"{0}\";",exec);
						foreach (var p in sp.Parameters.OrderBy(x => x.Ordinal))
						{ 
							WriteLine("cmd.Parameters.Add({0});",ReversePocoCore.WriteStoredProcSqlParameterName(p));
						} 

						WriteLine("try");
						OpenMethodBrace();
						WriteLine("Database.Connection.Open();");
						WriteLine("var reader = await cmd.ExecuteReaderAsync().ConfigureAwait(false);");
						WriteLine("var objectContext = ((IObjectContextAdapter) this).ObjectContext;");

						int n = 0;
						var returnModelCount = sp.ReturnModels.Count;
						foreach (var returnModel in sp.ReturnModels)
						{
							n++; 
							WriteLine("procResultData.ResultSet{0} = objectContext.Translate<{1}.ResultSetModel{0}>(reader).ToList();",n, spReturnClassName);
							if (n < returnModelCount)
							{ 
								WriteLine("await reader.NextResultAsync().ConfigureAwait(false);");
							} 
						} 

						CloseMethodBrace();
						WriteLine("finally");
						OpenMethodBrace();
						WriteLine("Database.Connection.Close();");
						CloseMethodBrace();
					} 

					WriteLine("return procResultData;");
					CloseMethodBrace();
				}
			}

		}
		CloseBrace();
		CloseBrace();
	}

	#endregion

	fileManager.EndBlock();
	fileManager.Process(Setting.GenerateSeparateFiles);

	fileManager = TemplateFileManager.Create(this);
	fileManager.StartHeader();

	#region POCO classes

	foreach(Table tbl in from t in tables.Where(t => !t.IsMapping && t.TableData.GeneratePoco).OrderBy(x => x.NameHumanCase) select t)
	{
		string baseClasses = string.Empty;

		fileManager.StartNewFile(tbl.NameHumanCase + Setting.GeneratedFileExtension, ModelProjectName, ModelFolderName);
		if(!tbl.HasPrimaryKey) 
		{ 
			WriteLine("// The table '{0}' is not usable by entity framework because it",tbl.Name);
			WriteLine("// does not have a primary key. It is listed here for completeness.");
		}

		CreateHeader();

		WriteLine("using System;");
		WriteLine("using System.Collections.Generic;");
		WriteLine("using System.ComponentModel.DataAnnotations;");
		WriteLine("using System.ComponentModel.DataAnnotations.Schema;");

		if(tbl.TableData.GeneratePocoInterface)
		{
			WriteLine("using {0};",PocoInterfaceNamespace);
			baseClasses = string.Format("{0}I{1}",WritePocoBaseClasses != null ? WritePocoBaseClasses(tbl) : "", tbl.NameHumanCase);
		}

		WriteLine("");

		BeginNamespace(PocoNamespace);

		WritePocoClassAttributes(tbl);
		BeginClass(tbl.NameHumanCase, Setting.MakeClassesPartial, baseClasses);
		WritePocoBaseClassBody(tbl); 

		if(tbl.Columns.Where(c => c.Default != string.Empty && !c.Hidden).Count() > 0 || Setting.MakeClassesPartial) 
		{
			WriteLine("[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Usage\", \"CA2214:DoNotCallOverridableMethodsInConstructors\")]"); 
			WriteLine("public {0}()",tbl.NameHumanCase);
			OpenMethodBrace();

			foreach(Column col in tbl.Columns.OrderBy(x => x.Ordinal).Where(c => c.Default != string.Empty && !c.Hidden))
			{
				WriteLine("{0} = {1};",col.NameHumanCase, col.Default);
			}

			if(tbl.ReverseNavigationCtor.Count() > 0)
			{
				foreach(string s in tbl.ReverseNavigationCtor.OrderBy(x => x))
				{
					WriteLine("{0}", s);
				}
			}

			CloseMethodBrace();
		}

		foreach(Column col in tbl.Columns.OrderBy(x => x.Ordinal).Where(x => !x.Hidden))
		{
			if((Setting.IncludeComments == CommentsStyle.InSummaryBlock) && !string.IsNullOrEmpty(col.SummaryComments))
			{
				WriteLine("///<summary>");
				WriteLine("/// {0}",col.SummaryComments);
				WriteLine("///</summary>");
			} 
			WriteLine("{0}",WritePocoColumn(col));
		} 

		if(tbl.ReverseNavigationProperty.Count() > 0)
		{
			foreach(string s in tbl.ReverseNavigationProperty.OrderBy(x => x))
			{
				foreach (var rnpda in AdditionalReverseNavigationsDataAnnotations) 
				{
					WriteLine("[{0}]",rnpda);
				}
				WriteLine("[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Usage\", \"CA2227:CollectionPropertiesShouldBeReadOnly\")]");	 
				WriteLine("{0}",s);
			} 
		} 

		if(tbl.HasForeignKey) { 

			foreach(var entityFk in tbl.Columns.SelectMany(x => x.EntityFk).OrderBy(o => o))
			{
				foreach (var fkda in AdditionalForeignKeysDataAnnotations) 
				{
					WriteLine("[{0}]",fkda);
				} 
				WriteLine("{0}",entityFk);
			}
		} 
			
		CloseBrace();
		CloseBrace();
	}

	#endregion

	fileManager.EndBlock();
	fileManager.Process(Setting.GenerateSeparateFiles);

	fileManager = TemplateFileManager.Create(this);
	fileManager.StartHeader();

	#region POCO Interfaces

	foreach(Table tbl in from t in tables.Where(t => !t.IsMapping && t.TableData.GeneratePocoInterface).OrderBy(x => x.NameHumanCase) select t)
	{
		fileManager.StartNewFile("I" + tbl.NameHumanCase + Setting.GeneratedFileExtension, ModelInterfaceProjectName, ModelInterfaceFolderName);

		CreateHeader();

		WriteLine("using System;");
		WriteLine("using System.Collections.Generic;");
		WriteLine("using {0};",PocoNamespace);
		WriteLine("");

		BeginNamespace(PocoInterfaceNamespace);
		BeginInterface("I" + tbl.NameHumanCase, Setting.MakeInterfacesPartial, "");

		foreach(Column col in tbl.Columns.OrderBy(x => x.Ordinal).Where(x => !x.Hidden))
		{
			if(!col.IsComputed) 
			{
				WriteLine("{0}", WritePocoInterfaceColumn(col));
			}
		}

		if(tbl.ReverseNavigationProperty.Count() > 0)
		{
			foreach(string s in tbl.ReverseNavigationProperty.OrderBy(x => x))
			{
				foreach (var rnpda in AdditionalReverseNavigationsDataAnnotations) 
				{
					WriteLine("  [{0}]",rnpda);
				} 
				WriteLine("{0}",s.Replace("public virtual",""));
			} 
		} 

		if(tbl.HasForeignKey) 
		{ 
			foreach(var entityFk in tbl.Columns.SelectMany(x => x.EntityFk).OrderBy(o => o))
			{
				foreach (var fkda in AdditionalForeignKeysDataAnnotations) 
				{
					WriteLine("[{0}]",fkda);
				} 
				WriteLine("{0}",entityFk.Replace("public virtual",""));
			}
		} 
		CloseBrace();
		CloseBrace();
	}

	#endregion

	fileManager.EndBlock();
	fileManager.Process(Setting.GenerateSeparateFiles);

	fileManager = TemplateFileManager.Create(this);
	fileManager.StartHeader();

	#region Repositories

	foreach(Table tbl in from t in tables.Where(t => !t.IsMapping && t.TableData.GenerateRepository).OrderBy(x => x.NameHumanCase) select t)
	{
		string className = tbl.NameHumanCase + "Repository";

		fileManager.StartNewFile(className + Setting.GeneratedFileExtension, RepositoryProjectName, RepositoryFolderName);

		CreateHeader();

		WriteLine("using System;");
		WriteLine("using System.Collections.Generic;");
		WriteLine("using System.Data.Entity;");
		WriteLine("using System.Linq;");
		WriteLine("using Tiger.Dal.Context;");
		WriteLine("using {0};",PocoNamespace);

		if(tbl.TableData.GenerateRepositoryInterface)
		{
			WriteLine("using {0};", RepositoryInterfaceNamespace);
		}

		WriteLine("");

		BeginNamespace(RepositoryNamespace);
		BeginClass(className, Setting.MakeClassesPartial, tbl.TableData.GenerateRepositoryInterface ? "I" + tbl.NameHumanCase + "Repository" : "" );

		WriteLine("private readonly {0} Context;", Setting.DatabaseContextName);

		WriteLine("public {0}()",className);
		OpenMethodBrace();
		WriteLine("Context = new {0}();", Setting.DatabaseContextName);
		CloseMethodBrace();

		WriteLine("public {0} Insert({0} data)", tbl.NameHumanCase);
		OpenMethodBrace();
		WriteLine("if(data == null) {{ throw new ArgumentNullException(\"data\", \"Cannot insert null value in {0}.Insert\"); }}", className);
		WriteLine("");
		WriteLine("Context.{0}s.Add(data);", tbl.NameHumanCase);
		WriteLine("Context.SaveChanges();");
		WriteLine("");
		WriteLine("return data;");
		CloseMethodBrace();

		WriteLine("public {0} Update({0} data)", tbl.NameHumanCase);
		OpenMethodBrace();
		WriteLine("if(data == null) {{ throw new ArgumentNullException(\"data\", \"Cannot update null value in {0}.Update\"); }}", className);
		WriteLine("");
		WriteLine("Context.Entry(data).State = EntityState.Modified;");
		WriteLine("Context.SaveChanges();");
		WriteLine("");
		WriteLine("return data;");
		CloseMethodBrace();

		WriteLine("public void Delete(int id)");
		OpenMethodBrace();
		WriteLine("{0} data = FindById(id);", tbl.NameHumanCase);
		WriteLine("Delete(data);");
		CloseMethodBrace();

		WriteLine("public void Delete({0} data)", tbl.NameHumanCase);
		OpenMethodBrace();
		WriteLine("if(data == null) {{ throw new ArgumentNullException(\"data\", \"Cannot delete null value in {0}.Delete\"); }}", className);
		WriteLine("");
		WriteLine("Context.{0}s.Remove(data);", tbl.NameHumanCase);
		WriteLine("Context.SaveChanges();");
		CloseMethodBrace();

		WriteLine("public IEnumerable<{0}> GetAll()", tbl.NameHumanCase);
		OpenMethodBrace();
		WriteLine("return Context.{0}s.AsEnumerable();", tbl.NameHumanCase);
		CloseMethodBrace();

		if(tbl.HasPrimaryKey)
		{
			foreach (Column pk in tbl.PrimaryKeys)
			{
				WriteLine("public {0} FindBy{1}({2} {3})", tbl.NameHumanCase, pk.NameHumanCase, pk.SqlPropertyType, pk.ParameterName);
				OpenMethodBrace();
				WriteLine("return Context.{0}s.Where(x => x.{1} == {2}).FirstOrDefault();", tbl.NameHumanCase, pk.NameHumanCase, pk.ParameterName);
				CloseMethodBrace();
			}
		}

		foreach(ForeignKey fk in tbl.ForeignKeys)
		{
			WriteLine("public IEnumerable<{0}> FindBy{1}({2} {3})", tbl.NameHumanCase, fk.FKColumn.NameHumanCase, fk.FKColumn.SqlPropertyType , fk.FKColumn.ParameterName);
			OpenMethodBrace();
			WriteLine("return Context.{0}s.Where(x => x.{1} == {2} ).AsEnumerable();", tbl.NameHumanCase, fk.FKColumn.NameHumanCase, fk.FKColumn.ParameterName);
			CloseMethodBrace();
		}

		CloseBrace();
		CloseBrace();
	}

	#endregion

	fileManager.EndBlock();
	fileManager.Process(Setting.GenerateSeparateFiles);

	fileManager = TemplateFileManager.Create(this);
	fileManager.StartHeader();

	#region Repository Interfaces

	foreach(Table tbl in from t in tables.Where(t => !t.IsMapping && t.TableData.GenerateRepositoryInterface).OrderBy(x => x.NameHumanCase) select t)
	{
		fileManager.StartNewFile("I" + tbl.NameHumanCase + "Repository" + Setting.GeneratedFileExtension, RepositoryInterfaceProjectName, RepositoryInterfaceFolderName);

		CreateHeader();

		WriteLine("using System.Collections.Generic;");
		WriteLine("using {0};",PocoNamespace);
		WriteLine("");

		BeginNamespace(RepositoryInterfaceNamespace);
		BeginInterface("I" + tbl.NameHumanCase + "Repository", Setting.MakeInterfacesPartial, "");

		WriteLine("{0} Insert({0} data);", tbl.NameHumanCase);
		WriteLine("{0} Update({0} data);", tbl.NameHumanCase);
		WriteLine("void Delete(int id);");
		WriteLine("void Delete({0} data);", tbl.NameHumanCase);
		WriteLine("IEnumerable<{0}> GetAll();", tbl.NameHumanCase);

		if(tbl.HasPrimaryKey)
		{
			foreach (Column pk in tbl.PrimaryKeys)
			{
				WriteLine("public {0} FindBy{1}({2} {3});", tbl.NameHumanCase, pk.NameHumanCase, pk.SqlPropertyType, pk.ParameterName);
			}
		}

		foreach(ForeignKey fk in tbl.ForeignKeys)
		{
			WriteLine("public IEnumerable<{0}> FindBy{1}({2} {3});", tbl.NameHumanCase, fk.FKColumn.NameHumanCase, fk.FKColumn.SqlPropertyType , fk.FKColumn.ParameterName);
		}

		CloseBrace();
		CloseBrace();
	}

	#endregion

	fileManager.EndBlock();
	fileManager.Process(Setting.GenerateSeparateFiles);

	fileManager = TemplateFileManager.Create(this);
	fileManager.StartHeader();

	#region POCO Configuration

	if(!Setting.UseDataAnnotations)
	{
		foreach(Table tbl in tables.Where(t => !t.IsMapping && t.HasPrimaryKey && t.TableData.GeneratePoco).OrderBy(x => x.NameHumanCase))
		{
			fileManager.StartNewFile(tbl.NameHumanCase + Setting.ConfigurationClassName + Setting.FileExtension, ConfigurationProjectName, ConfigurationFolderName);
		
			CreateHeader();

			WriteLine("using System.Data.Entity.ModelConfiguration;");
			WriteLine("using System.ComponentModel.DataAnnotations.Schema;");
			WriteLine("using {0};",PocoNamespace);
			WriteLine("");

			BeginNamespace(PocoConfigurationNamespace);
			BeginClass(tbl.NameHumanCase + Setting.ConfigurationClassName, Setting.MakeClassesPartial, string.Format("EntityTypeConfiguration<{0}>", tbl.NameHumanCase));

			WriteLine("public {0}()",tbl.NameHumanCase + Setting.ConfigurationClassName);
			WriteLine(": this( \"{0}\" )", string.IsNullOrEmpty(tbl.Schema) ? "" : tbl.Schema);
			OpenMethodBrace();
			CloseMethodBrace();

			WriteLine("public {0}(string schema)",tbl.NameHumanCase + Setting.ConfigurationClassName);
			OpenMethodBrace();
			if (!string.IsNullOrEmpty(tbl.Schema)) 
			{ 
				WriteLine("ToTable(\"{0}\", schema);",tbl.Name);
			}
			else
			{ 
				WriteLine("ToTable(\"{0}\");",tbl.Name);
			} 
			WriteLine("HasKey({0});",tbl.PrimaryKeyNameHumanCase());

			foreach(Column col in tbl.Columns.Where(x => !x.Hidden).OrderBy(x => x.Ordinal))
			{
				WriteLine("{0}",col.Config);
			} 
		
			if(tbl.HasForeignKey) 
			{ 
				foreach(var configFk in tbl.Columns.SelectMany(x => x.ConfigFk).OrderBy(o => o))
				{
					WriteLine("{0}",configFk);
				} 
			} 

			CloseMethodBrace(); 
			CloseBrace();
			CloseBrace();
		}
	}

	#endregion

	fileManager.EndBlock();
	fileManager.Process(Setting.GenerateSeparateFiles);

	fileManager = TemplateFileManager.Create(this);
	fileManager.StartHeader();

	#region Stored procedure return models

	if(storedProcs.Any() && TableNames.Where(x => x.GeneratePoco).Count() > 0)
	{
		foreach(StoredProcedure sp in storedProcs.Where(x => x.ReturnModels.Count > 0 && x.ReturnModels.Any(returnColumns => returnColumns.Any()) && !ReversePocoCore.StoredProcedureReturnTypes.ContainsKey(x.NameHumanCase) && !ReversePocoCore.StoredProcedureReturnTypes.ContainsKey(x.Name)))
		{
			string spReturnClassName = ReversePocoCore.WriteStoredProcReturnModelName(sp);
		
			fileManager.StartNewFile(spReturnClassName + Setting.FileExtension);
		
			CreateHeader();

			WriteLine("using System.Collections.Generic;");
			WriteLine("");

			BeginClass(spReturnClassName,false,"");

			var returnModelCount = sp.ReturnModels.Count;

			if(returnModelCount < 2)
			{
				foreach (var returnColumn in sp.ReturnModels.First())
				{ 
					WriteLine("{0}",ReversePocoCore.WriteStoredProcReturnColumn(returnColumn));
				}
			} 
			else 
			{
				int model = 0;
				foreach (var returnModel in sp.ReturnModels)
				{
					model++;
					WriteLine("public class ResultSetModel{0}",model);
					OpenMethodBrace();
				
					foreach (var returnColumn in returnModel)
					{ 
						WriteLine("{0}",ReversePocoCore.WriteStoredProcReturnColumn(returnColumn));
					}
					CloseMethodBrace();

					WriteLine("public List<ResultSetModel{0}> ResultSet{0};",model);

				} 
			} 
			CloseBrace();
		}
	}

	#endregion

	fileManager.EndBlock();
	fileManager.Process(Setting.GenerateSeparateFiles);

	fileManager = TemplateFileManager.Create(this);
	fileManager.StartHeader();

	#region Database Object XML

	fileManager.StartNewFile(Host.TemplateFile.Replace(".tt","") + ".xml");

	WriteLine("<Database>");
	PushIndent("\t");

	WriteLine("<DatabaseGenerationSetting>");
	PushIndent("\t");
	
	WriteLine("<ConnectionString>{0}</ConnectionString>", Setting.ConnectionString);
	WriteLine("<DatabaseContextName>{0}</DatabaseContextName>", Setting.DatabaseContextName);
	WriteLine("<DatabaseContextInterfaceName>{0}</DatabaseContextInterfaceName>", Setting.DatabaseContextInterfaceName);
	WriteLine("<ContextInterfaceBaseClass>{0}</ContextInterfaceBaseClass>", Setting.ContextInterfaceBaseClass);
	WriteLine("<ContextBaseClass>{0}</ContextBaseClass>", Setting.ContextBaseClass);
	WriteLine("<MakeClassesPartial>{0}</MakeClassesPartial>", Setting.MakeClassesPartial);
	WriteLine("<MakeInterfacesPartial>{0}</MakeInterfacesPartial>", Setting.MakeInterfacesPartial);
	WriteLine("<MakeContextInterfacePartial>{0}</MakeContextInterfacePartial>", Setting.MakeContextInterfacePartial);
	WriteLine("<GenerateSeparateFiles>{0}</GenerateSeparateFiles>", Setting.GenerateSeparateFiles);
	WriteLine("<UseDataAnnotations>{0}</UseDataAnnotations>", Setting.UseDataAnnotations);
	WriteLine("<GenerateContextClass>{0}</GenerateContextClass>", Setting.GenerateContextClass);
	WriteLine("<GenerateUnitOfWorkInterface>{0}</GenerateUnitOfWorkInterface>", Setting.GenerateUnitOfWorkInterface);
	WriteLine("<UseCamelCase>{0}</UseCamelCase>", Setting.UseCamelCase);
	WriteLine("<DisableGeographyTypes>{0}</DisableGeographyTypes>", Setting.DisableGeographyTypes);
	WriteLine("<NullableShortHand>{0}</NullableShortHand>", Setting.NullableShortHand);
	WriteLine("<PrivateSetterForComputedColumns>{0}</PrivateSetterForComputedColumns>", Setting.PrivateSetterForComputedColumns);
	WriteLine("<FileExtension>{0}</FileExtension>", Setting.FileExtension);
	WriteLine("<GeneratedFileExtension>{0}</GeneratedFileExtension>", Setting.GeneratedFileExtension);
	WriteLine("<PrependSchemaName>{0}</PrependSchemaName>", Setting.PrependSchemaName);
	WriteLine("<ConfigurationClassName>{0}</ConfigurationClassName>", Setting.ConfigurationClassName);
	WriteLine("<CollectionType>{0}</CollectionType>", Setting.CollectionType);
	WriteLine("<IncludeComments>{0}</IncludeComments>", Setting.IncludeComments);
	WriteLine("<IncludeQueryTraceOn9481Flag>{0}</IncludeQueryTraceOn9481Flag>", Setting.IncludeQueryTraceOn9481Flag);

	PopIndent();
	WriteLine("</DatabaseGenerationSetting>");

	WriteLine("<Tables>");
	PushIndent("\t");

	XmlSerializer serializer = new XmlSerializer(typeof(TableData));
	foreach(TableData tbl in TableNames)
	{
		WriteLine("<TableData>");
		PushIndent("\t");

		WriteLine("<TableSelect>{0}</TableSelect>", tbl.TableSelect);
		WriteLine("<TableName>{0}</TableName>", tbl.TableName);
		WriteLine("<GeneratePoco>{0}</GeneratePoco>", tbl.GeneratePoco);
		WriteLine("<GeneratePocoInterface>{0}</GeneratePocoInterface>", tbl.GeneratePocoInterface);
		WriteLine("<GenerateRepository>{0}</GenerateRepository>", tbl.GenerateRepository);
		WriteLine("<GenerateRepositoryInterface>{0}</GenerateRepositoryInterface>", tbl.GenerateRepositoryInterface);

		PopIndent();
		WriteLine("</TableData>");
	}
	PopIndent();
	WriteLine("</Tables>");

	WriteLine("<StoredProcedures>");
	PushIndent("\t");
	foreach(string sproc in StoredProcedureNames)
	{
		WriteLine("<StoredProcedure>{0}</StoredProcedure>", sproc);
	}
	PopIndent();
	WriteLine("</StoredProcedures>");

	PopIndent();
	WriteLine("</Database>");
	#endregion

	fileManager.EndBlock();
	fileManager.Process(Setting.GenerateSeparateFiles);

#>

<#+

	public void CreateHeader()
	{
		WriteLine("//------------------------------------------------------------------------------");
		WriteLine("// <auto-generated>");
		WriteLine("//	  This code was generated from a template.");
		WriteLine("//");
		WriteLine("//	  Manual changes to this file may cause unexpected behavior in your application.");
		WriteLine("//	  Manual changes to this file will be overwritten if the code is regenerated.");
		WriteLine("// </auto-generated>");
		WriteLine("//------------------------------------------------------------------------------");
		WriteLine("");
	}

	public void BeginNamespace(string name)
	{
		WriteLine("namespace {0}", name);
		WriteLine("{");
		PushIndent("\t");
	}

	public void BeginInterface(string name, bool isPartial, string baseClass)
	{
		WriteLine("public {0}interface {1}{2}", isPartial ? "partial " : "", name, !string.IsNullOrEmpty(baseClass) ? " : " + baseClass : "");
		WriteLine("{");
		PushIndent("\t");
	}

	public void BeginClass(string name, bool isPartial, string baseClass)
	{
		WriteLine("public {0}class {1}{2}", isPartial ? "partial " : "", name, !string.IsNullOrEmpty(baseClass) ? " : " + baseClass : "");
		WriteLine("{");
		PushIndent("\t");
	}

	public void CloseBrace()
	{
		PopIndent();
		WriteLine("}");
	}

	public void OpenMethodBrace()
	{
		WriteLine("{");
		PushIndent("\t");
	}

	public void CloseMethodBrace()
	{
		PopIndent();
		WriteLine("}");
		WriteLine("");
	}

#>